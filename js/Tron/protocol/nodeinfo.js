// source: core/Tron.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.protocol.NodeInfo');
goog.provide('proto.protocol.NodeInfo.ConfigNodeInfo');
goog.provide('proto.protocol.NodeInfo.MachineInfo');
goog.provide('proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo');
goog.provide('proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo');
goog.provide('proto.protocol.NodeInfo.PeerInfo');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Map');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.NodeInfo.repeatedFields_, null);
};
goog.inherits(proto.protocol.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.displayName = 'proto.protocol.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.NodeInfo.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.PeerInfo.displayName = 'proto.protocol.NodeInfo.PeerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo.ConfigNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.NodeInfo.ConfigNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.ConfigNodeInfo.displayName = 'proto.protocol.NodeInfo.ConfigNodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo.MachineInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.NodeInfo.MachineInfo.repeatedFields_, null);
};
goog.inherits(proto.protocol.NodeInfo.MachineInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.MachineInfo.displayName = 'proto.protocol.NodeInfo.MachineInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.displayName = 'proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.displayName = 'proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.NodeInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    beginsyncnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    block: jspb.Message.getFieldWithDefault(msg, 2, ""),
    solidityblock: jspb.Message.getFieldWithDefault(msg, 3, ""),
    currentconnectcount: jspb.Message.getFieldWithDefault(msg, 4, 0),
    activeconnectcount: jspb.Message.getFieldWithDefault(msg, 5, 0),
    passiveconnectcount: jspb.Message.getFieldWithDefault(msg, 6, 0),
    totalflow: jspb.Message.getFieldWithDefault(msg, 7, 0),
    peerinfolistList: jspb.Message.toObjectList(msg.getPeerinfolistList(),
    proto.protocol.NodeInfo.PeerInfo.toObject, includeInstance),
    confignodeinfo: (f = msg.getConfignodeinfo()) && proto.protocol.NodeInfo.ConfigNodeInfo.toObject(includeInstance, f),
    machineinfo: (f = msg.getMachineinfo()) && proto.protocol.NodeInfo.MachineInfo.toObject(includeInstance, f),
    cheatwitnessinfomapMap: (f = msg.getCheatwitnessinfomapMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo}
 */
proto.protocol.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo;
  return proto.protocol.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo}
 */
proto.protocol.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBeginsyncnum(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlock(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSolidityblock(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurrentconnectcount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActiveconnectcount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPassiveconnectcount(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalflow(value);
      break;
    case 8:
      var value = new proto.protocol.NodeInfo.PeerInfo;
      reader.readMessage(value,proto.protocol.NodeInfo.PeerInfo.deserializeBinaryFromReader);
      msg.addPeerinfolist(value);
      break;
    case 9:
      var value = new proto.protocol.NodeInfo.ConfigNodeInfo;
      reader.readMessage(value,proto.protocol.NodeInfo.ConfigNodeInfo.deserializeBinaryFromReader);
      msg.setConfignodeinfo(value);
      break;
    case 10:
      var value = new proto.protocol.NodeInfo.MachineInfo;
      reader.readMessage(value,proto.protocol.NodeInfo.MachineInfo.deserializeBinaryFromReader);
      msg.setMachineinfo(value);
      break;
    case 11:
      var value = msg.getCheatwitnessinfomapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeginsyncnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getBlock();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSolidityblock();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCurrentconnectcount();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getActiveconnectcount();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPassiveconnectcount();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getTotalflow();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPeerinfolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.protocol.NodeInfo.PeerInfo.serializeBinaryToWriter
    );
  }
  f = message.getConfignodeinfo();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.protocol.NodeInfo.ConfigNodeInfo.serializeBinaryToWriter
    );
  }
  f = message.getMachineinfo();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.protocol.NodeInfo.MachineInfo.serializeBinaryToWriter
    );
  }
  f = message.getCheatwitnessinfomapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(11, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.PeerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo.PeerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.PeerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    lastsyncblock: jspb.Message.getFieldWithDefault(msg, 1, ""),
    remainnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    lastblockupdatetime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    syncflag: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    headblocktimewebothhave: jspb.Message.getFieldWithDefault(msg, 5, 0),
    needsyncfrompeer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    needsyncfromus: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    host: jspb.Message.getFieldWithDefault(msg, 8, ""),
    port: jspb.Message.getFieldWithDefault(msg, 9, 0),
    nodeid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    connecttime: jspb.Message.getFieldWithDefault(msg, 11, 0),
    avglatency: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    synctofetchsize: jspb.Message.getFieldWithDefault(msg, 13, 0),
    synctofetchsizepeeknum: jspb.Message.getFieldWithDefault(msg, 14, 0),
    syncblockrequestedsize: jspb.Message.getFieldWithDefault(msg, 15, 0),
    unfetchsynnum: jspb.Message.getFieldWithDefault(msg, 16, 0),
    blockinporcsize: jspb.Message.getFieldWithDefault(msg, 17, 0),
    headblockwebothhave: jspb.Message.getFieldWithDefault(msg, 18, ""),
    isactive: jspb.Message.getBooleanFieldWithDefault(msg, 19, false),
    score: jspb.Message.getFieldWithDefault(msg, 20, 0),
    nodecount: jspb.Message.getFieldWithDefault(msg, 21, 0),
    inflow: jspb.Message.getFieldWithDefault(msg, 22, 0),
    disconnecttimes: jspb.Message.getFieldWithDefault(msg, 23, 0),
    localdisconnectreason: jspb.Message.getFieldWithDefault(msg, 24, ""),
    remotedisconnectreason: jspb.Message.getFieldWithDefault(msg, 25, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo.PeerInfo}
 */
proto.protocol.NodeInfo.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo.PeerInfo;
  return proto.protocol.NodeInfo.PeerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo.PeerInfo}
 */
proto.protocol.NodeInfo.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastsyncblock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRemainnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastblockupdatetime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSyncflag(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHeadblocktimewebothhave(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedsyncfrompeer(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNeedsyncfromus(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConnecttime(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvglatency(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSynctofetchsize(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSynctofetchsizepeeknum(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSyncblockrequestedsize(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUnfetchsynnum(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBlockinporcsize(value);
      break;
    case 18:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadblockwebothhave(value);
      break;
    case 19:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setScore(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNodecount(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInflow(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDisconnecttimes(value);
      break;
    case 24:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocaldisconnectreason(value);
      break;
    case 25:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemotedisconnectreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLastsyncblock();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRemainnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLastblockupdatetime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSyncflag();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getHeadblocktimewebothhave();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getNeedsyncfrompeer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getNeedsyncfromus();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getNodeid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getConnecttime();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getAvglatency();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getSynctofetchsize();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getSynctofetchsizepeeknum();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getSyncblockrequestedsize();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getUnfetchsynnum();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getBlockinporcsize();
  if (f !== 0) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = message.getHeadblockwebothhave();
  if (f.length > 0) {
    writer.writeString(
      18,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      19,
      f
    );
  }
  f = message.getScore();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getNodecount();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getInflow();
  if (f !== 0) {
    writer.writeInt64(
      22,
      f
    );
  }
  f = message.getDisconnecttimes();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getLocaldisconnectreason();
  if (f.length > 0) {
    writer.writeString(
      24,
      f
    );
  }
  f = message.getRemotedisconnectreason();
  if (f.length > 0) {
    writer.writeString(
      25,
      f
    );
  }
};


/**
 * optional string lastSyncBlock = 1;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getLastsyncblock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setLastsyncblock = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 remainNum = 2;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getRemainnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setRemainnum = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 lastBlockUpdateTime = 3;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getLastblockupdatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setLastblockupdatetime = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool syncFlag = 4;
 * @return {boolean}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getSyncflag = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setSyncflag = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int64 headBlockTimeWeBothHave = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getHeadblocktimewebothhave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setHeadblocktimewebothhave = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool needSyncFromPeer = 6;
 * @return {boolean}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getNeedsyncfrompeer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setNeedsyncfrompeer = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool needSyncFromUs = 7;
 * @return {boolean}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getNeedsyncfromus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setNeedsyncfromus = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional string host = 8;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int32 port = 9;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string nodeId = 10;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 connectTime = 11;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getConnecttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setConnecttime = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double avgLatency = 12;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getAvglatency = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setAvglatency = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional int32 syncToFetchSize = 13;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getSynctofetchsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setSynctofetchsize = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int64 syncToFetchSizePeekNum = 14;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getSynctofetchsizepeeknum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setSynctofetchsizepeeknum = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 syncBlockRequestedSize = 15;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getSyncblockrequestedsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setSyncblockrequestedsize = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 unFetchSynNum = 16;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getUnfetchsynnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setUnfetchsynnum = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int32 blockInPorcSize = 17;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getBlockinporcsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setBlockinporcsize = function(value) {
  jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional string headBlockWeBothHave = 18;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getHeadblockwebothhave = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 18, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setHeadblockwebothhave = function(value) {
  jspb.Message.setProto3StringField(this, 18, value);
};


/**
 * optional bool isActive = 19;
 * @return {boolean}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 19, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setIsactive = function(value) {
  jspb.Message.setProto3BooleanField(this, 19, value);
};


/**
 * optional int32 score = 20;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getScore = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setScore = function(value) {
  jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 nodeCount = 21;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getNodecount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setNodecount = function(value) {
  jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int64 inFlow = 22;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getInflow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setInflow = function(value) {
  jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 disconnectTimes = 23;
 * @return {number}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getDisconnecttimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setDisconnecttimes = function(value) {
  jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional string localDisconnectReason = 24;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getLocaldisconnectreason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 24, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setLocaldisconnectreason = function(value) {
  jspb.Message.setProto3StringField(this, 24, value);
};


/**
 * optional string remoteDisconnectReason = 25;
 * @return {string}
 */
proto.protocol.NodeInfo.PeerInfo.prototype.getRemotedisconnectreason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 25, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.PeerInfo.prototype.setRemotedisconnectreason = function(value) {
  jspb.Message.setProto3StringField(this, 25, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.ConfigNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo.ConfigNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.ConfigNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeversion: jspb.Message.getFieldWithDefault(msg, 1, ""),
    p2pversion: jspb.Message.getFieldWithDefault(msg, 2, ""),
    listenport: jspb.Message.getFieldWithDefault(msg, 3, 0),
    discoverenable: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    activenodesize: jspb.Message.getFieldWithDefault(msg, 5, 0),
    passivenodesize: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sendnodesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxconnectcount: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sameipmaxconnectcount: jspb.Message.getFieldWithDefault(msg, 9, 0),
    backuplistenport: jspb.Message.getFieldWithDefault(msg, 10, 0),
    backupmembersize: jspb.Message.getFieldWithDefault(msg, 11, 0),
    backuppriority: jspb.Message.getFieldWithDefault(msg, 12, 0),
    dbversion: jspb.Message.getFieldWithDefault(msg, 13, 0),
    minparticipationrate: jspb.Message.getFieldWithDefault(msg, 14, 0),
    supportconstant: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    mintimeratio: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    maxtimeratio: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    allowcreationofcontracts: jspb.Message.getFieldWithDefault(msg, 18, 0),
    allowadaptiveenergy: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo.ConfigNodeInfo}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo.ConfigNodeInfo;
  return proto.protocol.NodeInfo.ConfigNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo.ConfigNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo.ConfigNodeInfo}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeversion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setP2pversion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setListenport(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDiscoverenable(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setActivenodesize(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPassivenodesize(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSendnodesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxconnectcount(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSameipmaxconnectcount(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBackuplistenport(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBackupmembersize(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBackuppriority(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDbversion(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinparticipationrate(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportconstant(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMintimeratio(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMaxtimeratio(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllowcreationofcontracts(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAllowadaptiveenergy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.ConfigNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo.ConfigNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.ConfigNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeversion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getP2pversion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getListenport();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDiscoverenable();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getActivenodesize();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getPassivenodesize();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSendnodesize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMaxconnectcount();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getSameipmaxconnectcount();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getBackuplistenport();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getBackupmembersize();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
  f = message.getBackuppriority();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getDbversion();
  if (f !== 0) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = message.getMinparticipationrate();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSupportconstant();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getMintimeratio();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getMaxtimeratio();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getAllowcreationofcontracts();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getAllowadaptiveenergy();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
};


/**
 * optional string codeVersion = 1;
 * @return {string}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getCodeversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setCodeversion = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string p2pVersion = 2;
 * @return {string}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getP2pversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setP2pversion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 listenPort = 3;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getListenport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setListenport = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bool discoverEnable = 4;
 * @return {boolean}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getDiscoverenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setDiscoverenable = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int32 activeNodeSize = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getActivenodesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setActivenodesize = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 passiveNodeSize = 6;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getPassivenodesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setPassivenodesize = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 sendNodeSize = 7;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getSendnodesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setSendnodesize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 maxConnectCount = 8;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getMaxconnectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setMaxconnectcount = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 sameIpMaxConnectCount = 9;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getSameipmaxconnectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setSameipmaxconnectcount = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 backupListenPort = 10;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getBackuplistenport = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setBackuplistenport = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 backupMemberSize = 11;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getBackupmembersize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setBackupmembersize = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional int32 backupPriority = 12;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getBackuppriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setBackuppriority = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int32 dbVersion = 13;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getDbversion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setDbversion = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional int32 minParticipationRate = 14;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getMinparticipationrate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setMinparticipationrate = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bool supportConstant = 15;
 * @return {boolean}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getSupportconstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/** @param {boolean} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setSupportconstant = function(value) {
  jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional double minTimeRatio = 16;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getMintimeratio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setMintimeratio = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double maxTimeRatio = 17;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getMaxtimeratio = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setMaxtimeratio = function(value) {
  jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional int64 allowCreationOfContracts = 18;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getAllowcreationofcontracts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setAllowcreationofcontracts = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int64 allowAdaptiveEnergy = 19;
 * @return {number}
 */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.getAllowadaptiveenergy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.ConfigNodeInfo.prototype.setAllowadaptiveenergy = function(value) {
  jspb.Message.setProto3IntField(this, 19, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.NodeInfo.MachineInfo.repeatedFields_ = [12,13];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.MachineInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo.MachineInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadcount: jspb.Message.getFieldWithDefault(msg, 1, 0),
    deadlockthreadcount: jspb.Message.getFieldWithDefault(msg, 2, 0),
    cpucount: jspb.Message.getFieldWithDefault(msg, 3, 0),
    totalmemory: jspb.Message.getFieldWithDefault(msg, 4, 0),
    freememory: jspb.Message.getFieldWithDefault(msg, 5, 0),
    cpurate: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    javaversion: jspb.Message.getFieldWithDefault(msg, 7, ""),
    osname: jspb.Message.getFieldWithDefault(msg, 8, ""),
    jvmtotalmemoery: jspb.Message.getFieldWithDefault(msg, 9, 0),
    jvmfreememory: jspb.Message.getFieldWithDefault(msg, 10, 0),
    processcpurate: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    memorydescinfolistList: jspb.Message.toObjectList(msg.getMemorydescinfolistList(),
    proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.toObject, includeInstance),
    deadlockthreadinfolistList: jspb.Message.toObjectList(msg.getDeadlockthreadinfolistList(),
    proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo.MachineInfo}
 */
proto.protocol.NodeInfo.MachineInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo.MachineInfo;
  return proto.protocol.NodeInfo.MachineInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo.MachineInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo.MachineInfo}
 */
proto.protocol.NodeInfo.MachineInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setThreadcount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeadlockthreadcount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCpucount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalmemory(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFreememory(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCpurate(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setJavaversion(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setOsname(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJvmtotalmemoery(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJvmfreememory(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setProcesscpurate(value);
      break;
    case 12:
      var value = new proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo;
      reader.readMessage(value,proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.deserializeBinaryFromReader);
      msg.addMemorydescinfolist(value);
      break;
    case 13:
      var value = new proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo;
      reader.readMessage(value,proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.deserializeBinaryFromReader);
      msg.addDeadlockthreadinfolist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.MachineInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo.MachineInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadcount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getDeadlockthreadcount();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCpucount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTotalmemory();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getFreememory();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getCpurate();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getJavaversion();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getOsname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getJvmtotalmemoery();
  if (f !== 0) {
    writer.writeInt64(
      9,
      f
    );
  }
  f = message.getJvmfreememory();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getProcesscpurate();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getMemorydescinfolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.serializeBinaryToWriter
    );
  }
  f = message.getDeadlockthreadinfolistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    initsize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    usesize: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxsize: jspb.Message.getFieldWithDefault(msg, 4, 0),
    userate: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo;
  return proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setInitsize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUsesize(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxsize(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUserate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getInitsize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getUsesize();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getMaxsize();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUserate();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 initSize = 2;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.getInitsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.setInitsize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 useSize = 3;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.getUsesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.setUsesize = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 maxSize = 4;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.getMaxsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.setMaxsize = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double useRate = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.getUserate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo.prototype.setUserate = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    lockname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lockowner: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, ""),
    blocktime: jspb.Message.getFieldWithDefault(msg, 5, 0),
    waittime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    stacktrace: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo;
  return proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLockowner(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocktime(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setWaittime(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setStacktrace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLockname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLockowner();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBlocktime();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getWaittime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getStacktrace();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string lockName = 2;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getLockname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setLockname = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string lockOwner = 3;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getLockowner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setLockowner = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string state = 4;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setState = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 blockTime = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getBlocktime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setBlocktime = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 waitTime = 6;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getWaittime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setWaittime = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string stackTrace = 7;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.getStacktrace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.prototype.setStacktrace = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int32 threadCount = 1;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getThreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setThreadcount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 deadLockThreadCount = 2;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getDeadlockthreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setDeadlockthreadcount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 cpuCount = 3;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getCpucount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setCpucount = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 totalMemory = 4;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getTotalmemory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setTotalmemory = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 freeMemory = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getFreememory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setFreememory = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional double cpuRate = 6;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getCpurate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setCpurate = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string javaVersion = 7;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getJavaversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setJavaversion = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string osName = 8;
 * @return {string}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getOsname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setOsname = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 jvmTotalMemoery = 9;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getJvmtotalmemoery = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setJvmtotalmemoery = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int64 jvmFreeMemory = 10;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getJvmfreememory = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setJvmfreememory = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double processCpuRate = 11;
 * @return {number}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getProcesscpurate = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setProcesscpurate = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * repeated MemoryDescInfo memoryDescInfoList = 12;
 * @return {!Array<!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo>}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getMemorydescinfolistList = function() {
  return /** @type{!Array<!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo, 12));
};


/** @param {!Array<!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo>} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setMemorydescinfolistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.addMemorydescinfolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.protocol.NodeInfo.MachineInfo.MemoryDescInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protocol.NodeInfo.MachineInfo.prototype.clearMemorydescinfolistList = function() {
  this.setMemorydescinfolistList([]);
};


/**
 * repeated DeadLockThreadInfo deadLockThreadInfoList = 13;
 * @return {!Array<!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo>}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.getDeadlockthreadinfolistList = function() {
  return /** @type{!Array<!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo, 13));
};


/** @param {!Array<!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo>} value */
proto.protocol.NodeInfo.MachineInfo.prototype.setDeadlockthreadinfolistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo}
 */
proto.protocol.NodeInfo.MachineInfo.prototype.addDeadlockthreadinfolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.protocol.NodeInfo.MachineInfo.DeadLockThreadInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protocol.NodeInfo.MachineInfo.prototype.clearDeadlockthreadinfolistList = function() {
  this.setDeadlockthreadinfolistList([]);
};


/**
 * optional int64 beginSyncNum = 1;
 * @return {number}
 */
proto.protocol.NodeInfo.prototype.getBeginsyncnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.prototype.setBeginsyncnum = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string block = 2;
 * @return {string}
 */
proto.protocol.NodeInfo.prototype.getBlock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.prototype.setBlock = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string solidityBlock = 3;
 * @return {string}
 */
proto.protocol.NodeInfo.prototype.getSolidityblock = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protocol.NodeInfo.prototype.setSolidityblock = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 currentConnectCount = 4;
 * @return {number}
 */
proto.protocol.NodeInfo.prototype.getCurrentconnectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.prototype.setCurrentconnectcount = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 activeConnectCount = 5;
 * @return {number}
 */
proto.protocol.NodeInfo.prototype.getActiveconnectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.prototype.setActiveconnectcount = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 passiveConnectCount = 6;
 * @return {number}
 */
proto.protocol.NodeInfo.prototype.getPassiveconnectcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.prototype.setPassiveconnectcount = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 totalFlow = 7;
 * @return {number}
 */
proto.protocol.NodeInfo.prototype.getTotalflow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.protocol.NodeInfo.prototype.setTotalflow = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * repeated PeerInfo peerInfoList = 8;
 * @return {!Array<!proto.protocol.NodeInfo.PeerInfo>}
 */
proto.protocol.NodeInfo.prototype.getPeerinfolistList = function() {
  return /** @type{!Array<!proto.protocol.NodeInfo.PeerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.NodeInfo.PeerInfo, 8));
};


/** @param {!Array<!proto.protocol.NodeInfo.PeerInfo>} value */
proto.protocol.NodeInfo.prototype.setPeerinfolistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.protocol.NodeInfo.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.NodeInfo.PeerInfo}
 */
proto.protocol.NodeInfo.prototype.addPeerinfolist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.protocol.NodeInfo.PeerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protocol.NodeInfo.prototype.clearPeerinfolistList = function() {
  this.setPeerinfolistList([]);
};


/**
 * optional ConfigNodeInfo configNodeInfo = 9;
 * @return {?proto.protocol.NodeInfo.ConfigNodeInfo}
 */
proto.protocol.NodeInfo.prototype.getConfignodeinfo = function() {
  return /** @type{?proto.protocol.NodeInfo.ConfigNodeInfo} */ (
    jspb.Message.getWrapperField(this, proto.protocol.NodeInfo.ConfigNodeInfo, 9));
};


/** @param {?proto.protocol.NodeInfo.ConfigNodeInfo|undefined} value */
proto.protocol.NodeInfo.prototype.setConfignodeinfo = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.protocol.NodeInfo.prototype.clearConfignodeinfo = function() {
  this.setConfignodeinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.NodeInfo.prototype.hasConfignodeinfo = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional MachineInfo machineInfo = 10;
 * @return {?proto.protocol.NodeInfo.MachineInfo}
 */
proto.protocol.NodeInfo.prototype.getMachineinfo = function() {
  return /** @type{?proto.protocol.NodeInfo.MachineInfo} */ (
    jspb.Message.getWrapperField(this, proto.protocol.NodeInfo.MachineInfo, 10));
};


/** @param {?proto.protocol.NodeInfo.MachineInfo|undefined} value */
proto.protocol.NodeInfo.prototype.setMachineinfo = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.protocol.NodeInfo.prototype.clearMachineinfo = function() {
  this.setMachineinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.NodeInfo.prototype.hasMachineinfo = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * map<string, string> cheatWitnessInfoMap = 11;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.protocol.NodeInfo.prototype.getCheatwitnessinfomapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 11, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.protocol.NodeInfo.prototype.clearCheatwitnessinfomapMap = function() {
  this.getCheatwitnessinfomapMap().clear();
};


