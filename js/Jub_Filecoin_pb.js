// source: Jub_Filecoin.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Jub_Common_pb = require('./Jub_Common_pb.js');
goog.object.extend(proto, Jub_Common_pb);
goog.exportSymbol('proto.JUB.Proto.Filecoin.ContextCfgFIL', null, global);
goog.exportSymbol('proto.JUB.Proto.Filecoin.TransactionFIL', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.Filecoin.ContextCfgFIL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.Filecoin.ContextCfgFIL.displayName = 'proto.JUB.Proto.Filecoin.ContextCfgFIL';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.Filecoin.TransactionFIL = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.Filecoin.TransactionFIL, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.Filecoin.TransactionFIL.displayName = 'proto.JUB.Proto.Filecoin.TransactionFIL';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.Filecoin.ContextCfgFIL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.Filecoin.ContextCfgFIL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainPath: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.Filecoin.ContextCfgFIL}
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.Filecoin.ContextCfgFIL;
  return proto.JUB.Proto.Filecoin.ContextCfgFIL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.Filecoin.ContextCfgFIL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.Filecoin.ContextCfgFIL}
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.Filecoin.ContextCfgFIL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.Filecoin.ContextCfgFIL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string main_path = 1;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.ContextCfgFIL.prototype.getMainPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.ContextCfgFIL.prototype.setMainPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.Filecoin.TransactionFIL.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.Filecoin.TransactionFIL} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.Filecoin.TransactionFIL.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = msg.getPath()) && Jub_Common_pb.Bip44Path.toObject(includeInstance, f),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    gasLimit: jspb.Message.getFieldWithDefault(msg, 3, 0),
    gasFeeCapInAtto: jspb.Message.getFieldWithDefault(msg, 4, ""),
    gasPremiumInAtto: jspb.Message.getFieldWithDefault(msg, 5, ""),
    to: jspb.Message.getFieldWithDefault(msg, 6, ""),
    valueInAtto: jspb.Message.getFieldWithDefault(msg, 7, ""),
    input: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.Filecoin.TransactionFIL}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.Filecoin.TransactionFIL;
  return proto.JUB.Proto.Filecoin.TransactionFIL.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.Filecoin.TransactionFIL} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.Filecoin.TransactionFIL}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Jub_Common_pb.Bip44Path;
      reader.readMessage(value,Jub_Common_pb.Bip44Path.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGasLimit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasFeeCapInAtto(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGasPremiumInAtto(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setValueInAtto(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.Filecoin.TransactionFIL.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.Filecoin.TransactionFIL} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.Filecoin.TransactionFIL.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Jub_Common_pb.Bip44Path.serializeBinaryToWriter
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGasLimit();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getGasFeeCapInAtto();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGasPremiumInAtto();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getValueInAtto();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional JUB.Proto.Common.Bip44Path path = 1;
 * @return {?proto.JUB.Proto.Common.Bip44Path}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getPath = function() {
  return /** @type{?proto.JUB.Proto.Common.Bip44Path} */ (
    jspb.Message.getWrapperField(this, Jub_Common_pb.Bip44Path, 1));
};


/** @param {?proto.JUB.Proto.Common.Bip44Path|undefined} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 nonce = 2;
 * @return {number}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setNonce = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 gas_limit = 3;
 * @return {number}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getGasLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setGasLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string gas_fee_cap_in_atto = 4;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getGasFeeCapInAtto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setGasFeeCapInAtto = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string gas_premium_in_atto = 5;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getGasPremiumInAtto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setGasPremiumInAtto = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string to = 6;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setTo = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string value_in_atto = 7;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getValueInAtto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setValueInAtto = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string input = 8;
 * @return {string}
 */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.JUB.Proto.Filecoin.TransactionFIL.prototype.setInput = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


goog.object.extend(exports, proto.JUB.Proto.Filecoin);
