// source: Jub_NervosCKB.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Jub_Common_pb = require('./Jub_Common_pb.js');
goog.object.extend(proto, Jub_Common_pb);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.CellDepCKB', null, global);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.CellScriptCKB', null, global);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.ContextCfgCKB', null, global);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.InputCKB', null, global);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.OutputCKB', null, global);
goog.exportSymbol('proto.JUB.Proto.NervosCKB.TransactionCKB', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.ContextCfgCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.ContextCfgCKB.displayName = 'proto.JUB.Proto.NervosCKB.ContextCfgCKB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.CellDepCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.CellDepCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.CellDepCKB.displayName = 'proto.JUB.Proto.NervosCKB.CellDepCKB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.CellScriptCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.CellScriptCKB.displayName = 'proto.JUB.Proto.NervosCKB.CellScriptCKB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.InputCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.InputCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.InputCKB.displayName = 'proto.JUB.Proto.NervosCKB.InputCKB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.OutputCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.OutputCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.OutputCKB.displayName = 'proto.JUB.Proto.NervosCKB.OutputCKB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.JUB.Proto.NervosCKB.TransactionCKB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.JUB.Proto.NervosCKB.TransactionCKB.repeatedFields_, null);
};
goog.inherits(proto.JUB.Proto.NervosCKB.TransactionCKB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.JUB.Proto.NervosCKB.TransactionCKB.displayName = 'proto.JUB.Proto.NervosCKB.TransactionCKB';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.ContextCfgCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.ContextCfgCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    mainPath: jspb.Message.getFieldWithDefault(msg, 1, ""),
    mainNet: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.ContextCfgCKB}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.ContextCfgCKB;
  return proto.JUB.Proto.NervosCKB.ContextCfgCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.ContextCfgCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.ContextCfgCKB}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMainPath(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMainNet(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.ContextCfgCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.ContextCfgCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMainPath();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMainNet();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string main_path = 1;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.getMainPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.setMainPath = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool main_net = 2;
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.getMainNet = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.JUB.Proto.NervosCKB.ContextCfgCKB.prototype.setMainNet = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.CellDepCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.CellDepCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.CellDepCKB}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.CellDepCKB;
  return proto.JUB.Proto.NervosCKB.CellDepCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.CellDepCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.CellDepCKB}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxHash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.CellDepCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.CellDepCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 type = 1;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.setType = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string tx_hash = 2;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.getTxHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.setTxHash = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.CellDepCKB.prototype.setIndex = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.CellScriptCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.CellScriptCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    codeHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hashType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    args: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.CellScriptCKB}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.CellScriptCKB;
  return proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.CellScriptCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.CellScriptCKB}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCodeHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHashType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setArgs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.CellScriptCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.CellScriptCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCodeHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHashType();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getArgs();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string code_hash = 1;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.getCodeHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.setCodeHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 hash_type = 2;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.getHashType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.setHashType = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string args = 3;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.getArgs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.CellScriptCKB.prototype.setArgs = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.InputCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.InputCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.InputCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    preHash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    preIndex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    since: jspb.Message.getFieldWithDefault(msg, 3, 0),
    capacity: jspb.Message.getFieldWithDefault(msg, 4, 0),
    lock: (f = msg.getLock()) && proto.JUB.Proto.NervosCKB.CellScriptCKB.toObject(includeInstance, f),
    path: (f = msg.getPath()) && Jub_Common_pb.Bip44Path.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.InputCKB}
 */
proto.JUB.Proto.NervosCKB.InputCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.InputCKB;
  return proto.JUB.Proto.NervosCKB.InputCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.InputCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.InputCKB}
 */
proto.JUB.Proto.NervosCKB.InputCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPreHash(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPreIndex(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSince(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCapacity(value);
      break;
    case 5:
      var value = new proto.JUB.Proto.NervosCKB.CellScriptCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinaryFromReader);
      msg.setLock(value);
      break;
    case 6:
      var value = new Jub_Common_pb.Bip44Path;
      reader.readMessage(value,Jub_Common_pb.Bip44Path.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.InputCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.InputCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.InputCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPreHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPreIndex();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSince();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getLock();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.JUB.Proto.NervosCKB.CellScriptCKB.serializeBinaryToWriter
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      Jub_Common_pb.Bip44Path.serializeBinaryToWriter
    );
  }
};


/**
 * optional string pre_hash = 1;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getPreHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setPreHash = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 pre_index = 2;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getPreIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setPreIndex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 since = 3;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getSince = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setSince = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 capacity = 4;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setCapacity = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional CellScriptCKB lock = 5;
 * @return {?proto.JUB.Proto.NervosCKB.CellScriptCKB}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getLock = function() {
  return /** @type{?proto.JUB.Proto.NervosCKB.CellScriptCKB} */ (
    jspb.Message.getWrapperField(this, proto.JUB.Proto.NervosCKB.CellScriptCKB, 5));
};


/** @param {?proto.JUB.Proto.NervosCKB.CellScriptCKB|undefined} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setLock = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.clearLock = function() {
  this.setLock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.hasLock = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional JUB.Proto.Common.Bip44Path path = 6;
 * @return {?proto.JUB.Proto.Common.Bip44Path}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.getPath = function() {
  return /** @type{?proto.JUB.Proto.Common.Bip44Path} */ (
    jspb.Message.getWrapperField(this, Jub_Common_pb.Bip44Path, 6));
};


/** @param {?proto.JUB.Proto.Common.Bip44Path|undefined} value */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.InputCKB.prototype.hasPath = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.OutputCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.OutputCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.OutputCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    capacity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    lock: (f = msg.getLock()) && proto.JUB.Proto.NervosCKB.CellScriptCKB.toObject(includeInstance, f),
    type: (f = msg.getType()) && proto.JUB.Proto.NervosCKB.CellScriptCKB.toObject(includeInstance, f),
    data: jspb.Message.getFieldWithDefault(msg, 4, ""),
    path: (f = msg.getPath()) && Jub_Common_pb.Bip44Path.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.OutputCKB}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.OutputCKB;
  return proto.JUB.Proto.NervosCKB.OutputCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.OutputCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.OutputCKB}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCapacity(value);
      break;
    case 2:
      var value = new proto.JUB.Proto.NervosCKB.CellScriptCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinaryFromReader);
      msg.setLock(value);
      break;
    case 3:
      var value = new proto.JUB.Proto.NervosCKB.CellScriptCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.CellScriptCKB.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 5:
      var value = new Jub_Common_pb.Bip44Path;
      reader.readMessage(value,Jub_Common_pb.Bip44Path.deserializeBinaryFromReader);
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.OutputCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.OutputCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.OutputCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCapacity();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getLock();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.JUB.Proto.NervosCKB.CellScriptCKB.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.JUB.Proto.NervosCKB.CellScriptCKB.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPath();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      Jub_Common_pb.Bip44Path.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 capacity = 1;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.getCapacity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.setCapacity = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional CellScriptCKB lock = 2;
 * @return {?proto.JUB.Proto.NervosCKB.CellScriptCKB}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.getLock = function() {
  return /** @type{?proto.JUB.Proto.NervosCKB.CellScriptCKB} */ (
    jspb.Message.getWrapperField(this, proto.JUB.Proto.NervosCKB.CellScriptCKB, 2));
};


/** @param {?proto.JUB.Proto.NervosCKB.CellScriptCKB|undefined} value */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.setLock = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.clearLock = function() {
  this.setLock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.hasLock = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CellScriptCKB type = 3;
 * @return {?proto.JUB.Proto.NervosCKB.CellScriptCKB}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.getType = function() {
  return /** @type{?proto.JUB.Proto.NervosCKB.CellScriptCKB} */ (
    jspb.Message.getWrapperField(this, proto.JUB.Proto.NervosCKB.CellScriptCKB, 3));
};


/** @param {?proto.JUB.Proto.NervosCKB.CellScriptCKB|undefined} value */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.setType = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.clearType = function() {
  this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string data = 4;
 * @return {string}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional JUB.Proto.Common.Bip44Path path = 5;
 * @return {?proto.JUB.Proto.Common.Bip44Path}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.getPath = function() {
  return /** @type{?proto.JUB.Proto.Common.Bip44Path} */ (
    jspb.Message.getWrapperField(this, Jub_Common_pb.Bip44Path, 5));
};


/** @param {?proto.JUB.Proto.Common.Bip44Path|undefined} value */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.setPath = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.clearPath = function() {
  this.setPath(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.JUB.Proto.NervosCKB.OutputCKB.prototype.hasPath = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.toObject = function(opt_includeInstance) {
  return proto.JUB.Proto.NervosCKB.TransactionCKB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.JUB.Proto.NervosCKB.TransactionCKB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    depsList: jspb.Message.toObjectList(msg.getDepsList(),
    proto.JUB.Proto.NervosCKB.CellDepCKB.toObject, includeInstance),
    inputsList: jspb.Message.toObjectList(msg.getInputsList(),
    proto.JUB.Proto.NervosCKB.InputCKB.toObject, includeInstance),
    outputsList: jspb.Message.toObjectList(msg.getOutputsList(),
    proto.JUB.Proto.NervosCKB.OutputCKB.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.JUB.Proto.NervosCKB.TransactionCKB}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.JUB.Proto.NervosCKB.TransactionCKB;
  return proto.JUB.Proto.NervosCKB.TransactionCKB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.JUB.Proto.NervosCKB.TransactionCKB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.JUB.Proto.NervosCKB.TransactionCKB}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.JUB.Proto.NervosCKB.CellDepCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.CellDepCKB.deserializeBinaryFromReader);
      msg.addDeps(value);
      break;
    case 3:
      var value = new proto.JUB.Proto.NervosCKB.InputCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.InputCKB.deserializeBinaryFromReader);
      msg.addInputs(value);
      break;
    case 4:
      var value = new proto.JUB.Proto.NervosCKB.OutputCKB;
      reader.readMessage(value,proto.JUB.Proto.NervosCKB.OutputCKB.deserializeBinaryFromReader);
      msg.addOutputs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.JUB.Proto.NervosCKB.TransactionCKB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.JUB.Proto.NervosCKB.TransactionCKB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getDepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.JUB.Proto.NervosCKB.CellDepCKB.serializeBinaryToWriter
    );
  }
  f = message.getInputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.JUB.Proto.NervosCKB.InputCKB.serializeBinaryToWriter
    );
  }
  f = message.getOutputsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.JUB.Proto.NervosCKB.OutputCKB.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 version = 1;
 * @return {number}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated CellDepCKB deps = 2;
 * @return {!Array<!proto.JUB.Proto.NervosCKB.CellDepCKB>}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.getDepsList = function() {
  return /** @type{!Array<!proto.JUB.Proto.NervosCKB.CellDepCKB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.JUB.Proto.NervosCKB.CellDepCKB, 2));
};


/** @param {!Array<!proto.JUB.Proto.NervosCKB.CellDepCKB>} value */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.setDepsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.JUB.Proto.NervosCKB.CellDepCKB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.JUB.Proto.NervosCKB.CellDepCKB}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.addDeps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.JUB.Proto.NervosCKB.CellDepCKB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.clearDepsList = function() {
  this.setDepsList([]);
};


/**
 * repeated InputCKB inputs = 3;
 * @return {!Array<!proto.JUB.Proto.NervosCKB.InputCKB>}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.getInputsList = function() {
  return /** @type{!Array<!proto.JUB.Proto.NervosCKB.InputCKB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.JUB.Proto.NervosCKB.InputCKB, 3));
};


/** @param {!Array<!proto.JUB.Proto.NervosCKB.InputCKB>} value */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.setInputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.JUB.Proto.NervosCKB.InputCKB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.JUB.Proto.NervosCKB.InputCKB}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.addInputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.JUB.Proto.NervosCKB.InputCKB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.clearInputsList = function() {
  this.setInputsList([]);
};


/**
 * repeated OutputCKB outputs = 4;
 * @return {!Array<!proto.JUB.Proto.NervosCKB.OutputCKB>}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.getOutputsList = function() {
  return /** @type{!Array<!proto.JUB.Proto.NervosCKB.OutputCKB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.JUB.Proto.NervosCKB.OutputCKB, 4));
};


/** @param {!Array<!proto.JUB.Proto.NervosCKB.OutputCKB>} value */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.setOutputsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.JUB.Proto.NervosCKB.OutputCKB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.JUB.Proto.NervosCKB.OutputCKB}
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.addOutputs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.JUB.Proto.NervosCKB.OutputCKB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.JUB.Proto.NervosCKB.TransactionCKB.prototype.clearOutputsList = function() {
  this.setOutputsList([]);
};


goog.object.extend(exports, proto.JUB.Proto.NervosCKB);
