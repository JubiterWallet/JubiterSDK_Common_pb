// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Jub_NervosCKB.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct JUB_Proto_NervosCKB_ContextCfgCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mainPath: String = String()

  public var mainNet: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct JUB_Proto_NervosCKB_CellDepCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: UInt32 = 0

  public var txHash: String = String()

  public var index: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct JUB_Proto_NervosCKB_CellScriptCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var codeHash: String = String()

  public var hashType: UInt32 = 0

  public var args: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct JUB_Proto_NervosCKB_InputCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var preHash: String = String()

  public var preIndex: UInt32 = 0

  public var since: UInt64 = 0

  public var capacity: UInt64 = 0

  public var lock: JUB_Proto_NervosCKB_CellScriptCKB {
    get {return _lock ?? JUB_Proto_NervosCKB_CellScriptCKB()}
    set {_lock = newValue}
  }
  /// Returns true if `lock` has been explicitly set.
  public var hasLock: Bool {return self._lock != nil}
  /// Clears the value of `lock`. Subsequent reads from it will return its default value.
  public mutating func clearLock() {self._lock = nil}

  public var path: JUB_Proto_Common_Bip44Path {
    get {return _path ?? JUB_Proto_Common_Bip44Path()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lock: JUB_Proto_NervosCKB_CellScriptCKB? = nil
  fileprivate var _path: JUB_Proto_Common_Bip44Path? = nil
}

public struct JUB_Proto_NervosCKB_OutputCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var capacity: UInt64 = 0

  public var lock: JUB_Proto_NervosCKB_CellScriptCKB {
    get {return _lock ?? JUB_Proto_NervosCKB_CellScriptCKB()}
    set {_lock = newValue}
  }
  /// Returns true if `lock` has been explicitly set.
  public var hasLock: Bool {return self._lock != nil}
  /// Clears the value of `lock`. Subsequent reads from it will return its default value.
  public mutating func clearLock() {self._lock = nil}

  public var type: JUB_Proto_NervosCKB_CellScriptCKB {
    get {return _type ?? JUB_Proto_NervosCKB_CellScriptCKB()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  public var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  public mutating func clearType() {self._type = nil}

  public var data: String = String()

  public var path: JUB_Proto_Common_Bip44Path {
    get {return _path ?? JUB_Proto_Common_Bip44Path()}
    set {_path = newValue}
  }
  /// Returns true if `path` has been explicitly set.
  public var hasPath: Bool {return self._path != nil}
  /// Clears the value of `path`. Subsequent reads from it will return its default value.
  public mutating func clearPath() {self._path = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lock: JUB_Proto_NervosCKB_CellScriptCKB? = nil
  fileprivate var _type: JUB_Proto_NervosCKB_CellScriptCKB? = nil
  fileprivate var _path: JUB_Proto_Common_Bip44Path? = nil
}

public struct JUB_Proto_NervosCKB_TransactionCKB {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var version: UInt32 = 0

  public var deps: [JUB_Proto_NervosCKB_CellDepCKB] = []

  public var inputs: [JUB_Proto_NervosCKB_InputCKB] = []

  public var outputs: [JUB_Proto_NervosCKB_OutputCKB] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "JUB.Proto.NervosCKB"

extension JUB_Proto_NervosCKB_ContextCfgCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContextCfgCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "main_path"),
    2: .standard(proto: "main_net"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.mainPath) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.mainNet) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.mainPath.isEmpty {
      try visitor.visitSingularStringField(value: self.mainPath, fieldNumber: 1)
    }
    if self.mainNet != false {
      try visitor.visitSingularBoolField(value: self.mainNet, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_ContextCfgCKB, rhs: JUB_Proto_NervosCKB_ContextCfgCKB) -> Bool {
    if lhs.mainPath != rhs.mainPath {return false}
    if lhs.mainNet != rhs.mainNet {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_NervosCKB_CellDepCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CellDepCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "tx_hash"),
    3: .same(proto: "index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.type) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.txHash) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != 0 {
      try visitor.visitSingularUInt32Field(value: self.type, fieldNumber: 1)
    }
    if !self.txHash.isEmpty {
      try visitor.visitSingularStringField(value: self.txHash, fieldNumber: 2)
    }
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_CellDepCKB, rhs: JUB_Proto_NervosCKB_CellDepCKB) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.txHash != rhs.txHash {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_NervosCKB_CellScriptCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CellScriptCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "code_hash"),
    2: .standard(proto: "hash_type"),
    3: .same(proto: "args"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.codeHash) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.hashType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.args) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.codeHash.isEmpty {
      try visitor.visitSingularStringField(value: self.codeHash, fieldNumber: 1)
    }
    if self.hashType != 0 {
      try visitor.visitSingularUInt32Field(value: self.hashType, fieldNumber: 2)
    }
    if !self.args.isEmpty {
      try visitor.visitSingularStringField(value: self.args, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_CellScriptCKB, rhs: JUB_Proto_NervosCKB_CellScriptCKB) -> Bool {
    if lhs.codeHash != rhs.codeHash {return false}
    if lhs.hashType != rhs.hashType {return false}
    if lhs.args != rhs.args {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_NervosCKB_InputCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pre_hash"),
    2: .standard(proto: "pre_index"),
    3: .same(proto: "since"),
    4: .same(proto: "capacity"),
    5: .same(proto: "lock"),
    6: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.preHash) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.preIndex) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.since) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self.capacity) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lock) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.preHash.isEmpty {
      try visitor.visitSingularStringField(value: self.preHash, fieldNumber: 1)
    }
    if self.preIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.preIndex, fieldNumber: 2)
    }
    if self.since != 0 {
      try visitor.visitSingularUInt64Field(value: self.since, fieldNumber: 3)
    }
    if self.capacity != 0 {
      try visitor.visitSingularUInt64Field(value: self.capacity, fieldNumber: 4)
    }
    if let v = self._lock {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_InputCKB, rhs: JUB_Proto_NervosCKB_InputCKB) -> Bool {
    if lhs.preHash != rhs.preHash {return false}
    if lhs.preIndex != rhs.preIndex {return false}
    if lhs.since != rhs.since {return false}
    if lhs.capacity != rhs.capacity {return false}
    if lhs._lock != rhs._lock {return false}
    if lhs._path != rhs._path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_NervosCKB_OutputCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "capacity"),
    2: .same(proto: "lock"),
    3: .same(proto: "type"),
    4: .same(proto: "data"),
    5: .same(proto: "path"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.capacity) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lock) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._type) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.data) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._path) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.capacity != 0 {
      try visitor.visitSingularUInt64Field(value: self.capacity, fieldNumber: 1)
    }
    if let v = self._lock {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._type {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 4)
    }
    if let v = self._path {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_OutputCKB, rhs: JUB_Proto_NervosCKB_OutputCKB) -> Bool {
    if lhs.capacity != rhs.capacity {return false}
    if lhs._lock != rhs._lock {return false}
    if lhs._type != rhs._type {return false}
    if lhs.data != rhs.data {return false}
    if lhs._path != rhs._path {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_NervosCKB_TransactionCKB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionCKB"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "deps"),
    3: .same(proto: "inputs"),
    4: .same(proto: "outputs"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.version) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.deps) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.outputs) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.version != 0 {
      try visitor.visitSingularUInt32Field(value: self.version, fieldNumber: 1)
    }
    if !self.deps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.deps, fieldNumber: 2)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 3)
    }
    if !self.outputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputs, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_NervosCKB_TransactionCKB, rhs: JUB_Proto_NervosCKB_TransactionCKB) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.deps != rhs.deps {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs.outputs != rhs.outputs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
