// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Jub_Ripple.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum JUB_Proto_Ripple_ENUM_XRP_TX_TYPE: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case pymt // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .pymt
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pymt
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pymt: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension JUB_Proto_Ripple_ENUM_XRP_TX_TYPE: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [JUB_Proto_Ripple_ENUM_XRP_TX_TYPE] = [
    .pymt,
  ]
}

#endif  // swift(>=4.2)

public enum JUB_Proto_Ripple_ENUM_XRP_PYMT_TYPE: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Direct XRP payments
  case dxrp // = 0

  /// Cross-currency payments(foreign exchange)
  case fx // = 1

  /// Checks
  case checks // = 2

  /// Escrow
  case escrow // = 3

  /// Partial Payments
  case prtl // = 4

  /// Payment Channels
  case chan // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .dxrp
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dxrp
    case 1: self = .fx
    case 2: self = .checks
    case 3: self = .escrow
    case 4: self = .prtl
    case 5: self = .chan
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .dxrp: return 0
    case .fx: return 1
    case .checks: return 2
    case .escrow: return 3
    case .prtl: return 4
    case .chan: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension JUB_Proto_Ripple_ENUM_XRP_PYMT_TYPE: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [JUB_Proto_Ripple_ENUM_XRP_PYMT_TYPE] = [
    .dxrp,
    .fx,
    .checks,
    .escrow,
    .prtl,
    .chan,
  ]
}

#endif  // swift(>=4.2)

public struct JUB_Proto_Ripple_PymtAmount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// [Optional]
  public var currency: String = String()

  public var value: String = String()

  /// [Optional]
  public var issuer: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct JUB_Proto_Ripple_XrpMemo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: String = String()

  public var data: String = String()

  /// [Optional]
  public var format: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct JUB_Proto_Ripple_PymtXRP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: JUB_Proto_Ripple_ENUM_XRP_PYMT_TYPE = .dxrp

  public var amount: JUB_Proto_Ripple_PymtAmount {
    get {return _amount ?? JUB_Proto_Ripple_PymtAmount()}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  public var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  public mutating func clearAmount() {self._amount = nil}

  public var destination: String = String()

  public var destinationTag: String = String()

  /// [Optional]
  public var invoiceID: String = String()

  /// [Optional]
  public var sendMax: JUB_Proto_Ripple_PymtAmount {
    get {return _sendMax ?? JUB_Proto_Ripple_PymtAmount()}
    set {_sendMax = newValue}
  }
  /// Returns true if `sendMax` has been explicitly set.
  public var hasSendMax: Bool {return self._sendMax != nil}
  /// Clears the value of `sendMax`. Subsequent reads from it will return its default value.
  public mutating func clearSendMax() {self._sendMax = nil}

  /// [Optional]
  public var deliverMin: JUB_Proto_Ripple_PymtAmount {
    get {return _deliverMin ?? JUB_Proto_Ripple_PymtAmount()}
    set {_deliverMin = newValue}
  }
  /// Returns true if `deliverMin` has been explicitly set.
  public var hasDeliverMin: Bool {return self._deliverMin != nil}
  /// Clears the value of `deliverMin`. Subsequent reads from it will return its default value.
  public mutating func clearDeliverMin() {self._deliverMin = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _amount: JUB_Proto_Ripple_PymtAmount? = nil
  fileprivate var _sendMax: JUB_Proto_Ripple_PymtAmount? = nil
  fileprivate var _deliverMin: JUB_Proto_Ripple_PymtAmount? = nil
}

public struct JUB_Proto_Ripple_TransactionXRP {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var account: String = String()

  public var type: JUB_Proto_Ripple_ENUM_XRP_TX_TYPE = .pymt

  public var fee: String = String()

  public var sequence: String = String()

  /// [Optional]
  public var accountTxnID: String = String()

  public var flags: String = String()

  public var lastLedgerSequence: String = String()

  /// [Optional]
  public var memo: JUB_Proto_Ripple_XrpMemo {
    get {return _memo ?? JUB_Proto_Ripple_XrpMemo()}
    set {_memo = newValue}
  }
  /// Returns true if `memo` has been explicitly set.
  public var hasMemo: Bool {return self._memo != nil}
  /// Clears the value of `memo`. Subsequent reads from it will return its default value.
  public mutating func clearMemo() {self._memo = nil}

  /// [Optional]
  public var sourceTag: String = String()

  public var action: JUB_Proto_Ripple_TransactionXRP.OneOf_Action? = nil

  public var pymt: JUB_Proto_Ripple_PymtXRP {
    get {
      if case .pymt(let v)? = action {return v}
      return JUB_Proto_Ripple_PymtXRP()
    }
    set {action = .pymt(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Action: Equatable {
    case pymt(JUB_Proto_Ripple_PymtXRP)

  #if !swift(>=4.1)
    public static func ==(lhs: JUB_Proto_Ripple_TransactionXRP.OneOf_Action, rhs: JUB_Proto_Ripple_TransactionXRP.OneOf_Action) -> Bool {
      switch (lhs, rhs) {
      case (.pymt(let l), .pymt(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _memo: JUB_Proto_Ripple_XrpMemo? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "JUB.Proto.Ripple"

extension JUB_Proto_Ripple_ENUM_XRP_TX_TYPE: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PYMT"),
  ]
}

extension JUB_Proto_Ripple_ENUM_XRP_PYMT_TYPE: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DXRP"),
    1: .same(proto: "FX"),
    2: .same(proto: "CHECKS"),
    3: .same(proto: "ESCROW"),
    4: .same(proto: "PRTL"),
    5: .same(proto: "CHAN"),
  ]
}

extension JUB_Proto_Ripple_PymtAmount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PymtAmount"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currency"),
    2: .same(proto: "value"),
    3: .same(proto: "issuer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.currency)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      case 3: try decoder.decodeSingularStringField(value: &self.issuer)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.currency.isEmpty {
      try visitor.visitSingularStringField(value: self.currency, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    if !self.issuer.isEmpty {
      try visitor.visitSingularStringField(value: self.issuer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_Ripple_PymtAmount, rhs: JUB_Proto_Ripple_PymtAmount) -> Bool {
    if lhs.currency != rhs.currency {return false}
    if lhs.value != rhs.value {return false}
    if lhs.issuer != rhs.issuer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_Ripple_XrpMemo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".XrpMemo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "data"),
    3: .same(proto: "format"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self.format)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 2)
    }
    if !self.format.isEmpty {
      try visitor.visitSingularStringField(value: self.format, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_Ripple_XrpMemo, rhs: JUB_Proto_Ripple_XrpMemo) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.data != rhs.data {return false}
    if lhs.format != rhs.format {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_Ripple_PymtXRP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PymtXRP"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
    3: .same(proto: "destination"),
    4: .standard(proto: "destination_tag"),
    5: .standard(proto: "invoice_id"),
    6: .standard(proto: "send_max"),
    7: .standard(proto: "deliver_min"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularMessageField(value: &self._amount)
      case 3: try decoder.decodeSingularStringField(value: &self.destination)
      case 4: try decoder.decodeSingularStringField(value: &self.destinationTag)
      case 5: try decoder.decodeSingularStringField(value: &self.invoiceID)
      case 6: try decoder.decodeSingularMessageField(value: &self._sendMax)
      case 7: try decoder.decodeSingularMessageField(value: &self._deliverMin)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .dxrp {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 3)
    }
    if !self.destinationTag.isEmpty {
      try visitor.visitSingularStringField(value: self.destinationTag, fieldNumber: 4)
    }
    if !self.invoiceID.isEmpty {
      try visitor.visitSingularStringField(value: self.invoiceID, fieldNumber: 5)
    }
    if let v = self._sendMax {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._deliverMin {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_Ripple_PymtXRP, rhs: JUB_Proto_Ripple_PymtXRP) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.destination != rhs.destination {return false}
    if lhs.destinationTag != rhs.destinationTag {return false}
    if lhs.invoiceID != rhs.invoiceID {return false}
    if lhs._sendMax != rhs._sendMax {return false}
    if lhs._deliverMin != rhs._deliverMin {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension JUB_Proto_Ripple_TransactionXRP: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TransactionXRP"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
    2: .same(proto: "type"),
    3: .same(proto: "fee"),
    4: .same(proto: "sequence"),
    5: .standard(proto: "account_txn_id"),
    6: .same(proto: "flags"),
    7: .standard(proto: "last_ledger_sequence"),
    8: .same(proto: "memo"),
    9: .standard(proto: "source_tag"),
    10: .same(proto: "pymt"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.account)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.fee)
      case 4: try decoder.decodeSingularStringField(value: &self.sequence)
      case 5: try decoder.decodeSingularStringField(value: &self.accountTxnID)
      case 6: try decoder.decodeSingularStringField(value: &self.flags)
      case 7: try decoder.decodeSingularStringField(value: &self.lastLedgerSequence)
      case 8: try decoder.decodeSingularMessageField(value: &self._memo)
      case 9: try decoder.decodeSingularStringField(value: &self.sourceTag)
      case 10:
        var v: JUB_Proto_Ripple_PymtXRP?
        if let current = self.action {
          try decoder.handleConflictingOneOf()
          if case .pymt(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {self.action = .pymt(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.account.isEmpty {
      try visitor.visitSingularStringField(value: self.account, fieldNumber: 1)
    }
    if self.type != .pymt {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.fee.isEmpty {
      try visitor.visitSingularStringField(value: self.fee, fieldNumber: 3)
    }
    if !self.sequence.isEmpty {
      try visitor.visitSingularStringField(value: self.sequence, fieldNumber: 4)
    }
    if !self.accountTxnID.isEmpty {
      try visitor.visitSingularStringField(value: self.accountTxnID, fieldNumber: 5)
    }
    if !self.flags.isEmpty {
      try visitor.visitSingularStringField(value: self.flags, fieldNumber: 6)
    }
    if !self.lastLedgerSequence.isEmpty {
      try visitor.visitSingularStringField(value: self.lastLedgerSequence, fieldNumber: 7)
    }
    if let v = self._memo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    }
    if !self.sourceTag.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceTag, fieldNumber: 9)
    }
    if case .pymt(let v)? = self.action {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: JUB_Proto_Ripple_TransactionXRP, rhs: JUB_Proto_Ripple_TransactionXRP) -> Bool {
    if lhs.account != rhs.account {return false}
    if lhs.type != rhs.type {return false}
    if lhs.fee != rhs.fee {return false}
    if lhs.sequence != rhs.sequence {return false}
    if lhs.accountTxnID != rhs.accountTxnID {return false}
    if lhs.flags != rhs.flags {return false}
    if lhs.lastLedgerSequence != rhs.lastLedgerSequence {return false}
    if lhs._memo != rhs._memo {return false}
    if lhs.sourceTag != rhs.sourceTag {return false}
    if lhs.action != rhs.action {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
