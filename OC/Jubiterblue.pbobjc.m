// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiterblue.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Jubiterblue.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - JuBiterProtosJubiterblueRoot

@implementation JuBiterProtosJubiterblueRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - JuBiterProtosJubiterblueRoot_FileDescriptor

static GPBFileDescriptor *JuBiterProtosJubiterblueRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                 objcPrefix:@"JuBiterProtos"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - JuBiterProtosInt32Value

@implementation JuBiterProtosInt32Value

@dynamic value;

typedef struct JuBiterProtosInt32Value__storage_ {
  uint32_t _has_storage_[1];
  int32_t value;
} JuBiterProtosInt32Value__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosInt32Value_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosInt32Value__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosInt32Value class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosInt32Value__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JuBiterProtosBluetoothState

@implementation JuBiterProtosBluetoothState

@dynamic state;

typedef struct JuBiterProtosBluetoothState__storage_ {
  uint32_t _has_storage_[1];
  JuBiterProtosBluetoothState_State state;
} JuBiterProtosBluetoothState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = JuBiterProtosBluetoothState_State_EnumDescriptor,
        .number = JuBiterProtosBluetoothState_FieldNumber_State,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosBluetoothState__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosBluetoothState class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosBluetoothState__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t JuBiterProtosBluetoothState_State_RawValue(JuBiterProtosBluetoothState *message) {
  GPBDescriptor *descriptor = [JuBiterProtosBluetoothState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosBluetoothState_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetJuBiterProtosBluetoothState_State_RawValue(JuBiterProtosBluetoothState *message, int32_t value) {
  GPBDescriptor *descriptor = [JuBiterProtosBluetoothState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosBluetoothState_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum JuBiterProtosBluetoothState_State

GPBEnumDescriptor *JuBiterProtosBluetoothState_State_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Unavailable\000Unauthorized\000Turning"
        "On\000On\000TurningOff\000Off\000";
    static const int32_t values[] = {
        JuBiterProtosBluetoothState_State_Unknown,
        JuBiterProtosBluetoothState_State_Unavailable,
        JuBiterProtosBluetoothState_State_Unauthorized,
        JuBiterProtosBluetoothState_State_TurningOn,
        JuBiterProtosBluetoothState_State_On,
        JuBiterProtosBluetoothState_State_TurningOff,
        JuBiterProtosBluetoothState_State_Off,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(JuBiterProtosBluetoothState_State)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:JuBiterProtosBluetoothState_State_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL JuBiterProtosBluetoothState_State_IsValidValue(int32_t value__) {
  switch (value__) {
    case JuBiterProtosBluetoothState_State_Unknown:
    case JuBiterProtosBluetoothState_State_Unavailable:
    case JuBiterProtosBluetoothState_State_Unauthorized:
    case JuBiterProtosBluetoothState_State_TurningOn:
    case JuBiterProtosBluetoothState_State_On:
    case JuBiterProtosBluetoothState_State_TurningOff:
    case JuBiterProtosBluetoothState_State_Off:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - JuBiterProtosAdvertisementData

@implementation JuBiterProtosAdvertisementData

@dynamic localName;
@dynamic hasTxPowerLevel, txPowerLevel;
@dynamic connectable;
@dynamic manufacturerData, manufacturerData_Count;
@dynamic serviceData, serviceData_Count;
@dynamic serviceUuidsArray, serviceUuidsArray_Count;

typedef struct JuBiterProtosAdvertisementData__storage_ {
  uint32_t _has_storage_[1];
  NSString *localName;
  JuBiterProtosInt32Value *txPowerLevel;
  GPBInt32ObjectDictionary *manufacturerData;
  NSMutableDictionary *serviceData;
  NSMutableArray *serviceUuidsArray;
} JuBiterProtosAdvertisementData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "localName",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosAdvertisementData_FieldNumber_LocalName,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosAdvertisementData__storage_, localName),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "txPowerLevel",
        .dataTypeSpecific.className = GPBStringifySymbol(JuBiterProtosInt32Value),
        .number = JuBiterProtosAdvertisementData_FieldNumber_TxPowerLevel,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JuBiterProtosAdvertisementData__storage_, txPowerLevel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "connectable",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosAdvertisementData_FieldNumber_Connectable,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "manufacturerData",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosAdvertisementData_FieldNumber_ManufacturerData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JuBiterProtosAdvertisementData__storage_, manufacturerData),
        .flags = GPBFieldMapKeyInt32,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "serviceData",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosAdvertisementData_FieldNumber_ServiceData,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JuBiterProtosAdvertisementData__storage_, serviceData),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "serviceUuidsArray",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosAdvertisementData_FieldNumber_ServiceUuidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JuBiterProtosAdvertisementData__storage_, serviceUuidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosAdvertisementData class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosAdvertisementData__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JuBiterProtosScanSettings

@implementation JuBiterProtosScanSettings

@dynamic androidScanMode;
@dynamic serviceUuidsArray, serviceUuidsArray_Count;

typedef struct JuBiterProtosScanSettings__storage_ {
  uint32_t _has_storage_[1];
  int32_t androidScanMode;
  NSMutableArray *serviceUuidsArray;
} JuBiterProtosScanSettings__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "androidScanMode",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosScanSettings_FieldNumber_AndroidScanMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosScanSettings__storage_, androidScanMode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "serviceUuidsArray",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosScanSettings_FieldNumber_ServiceUuidsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JuBiterProtosScanSettings__storage_, serviceUuidsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosScanSettings class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosScanSettings__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JuBiterProtosScanResult

@implementation JuBiterProtosScanResult

@dynamic hasDevice, device;
@dynamic hasAdvertisementData, advertisementData;
@dynamic rssi;

typedef struct JuBiterProtosScanResult__storage_ {
  uint32_t _has_storage_[1];
  int32_t rssi;
  JuBiterProtosBluetoothDevice *device;
  JuBiterProtosAdvertisementData *advertisementData;
} JuBiterProtosScanResult__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "device",
        .dataTypeSpecific.className = GPBStringifySymbol(JuBiterProtosBluetoothDevice),
        .number = JuBiterProtosScanResult_FieldNumber_Device,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosScanResult__storage_, device),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "advertisementData",
        .dataTypeSpecific.className = GPBStringifySymbol(JuBiterProtosAdvertisementData),
        .number = JuBiterProtosScanResult_FieldNumber_AdvertisementData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JuBiterProtosScanResult__storage_, advertisementData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rssi",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosScanResult_FieldNumber_Rssi,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JuBiterProtosScanResult__storage_, rssi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosScanResult class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosScanResult__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JuBiterProtosConnectRequest

@implementation JuBiterProtosConnectRequest

@dynamic remoteId;
@dynamic timeout;
@dynamic androidAutoConnect;

typedef struct JuBiterProtosConnectRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t timeout;
  NSString *remoteId;
} JuBiterProtosConnectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remoteId",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosConnectRequest_FieldNumber_RemoteId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosConnectRequest__storage_, remoteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeout",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosConnectRequest_FieldNumber_Timeout,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JuBiterProtosConnectRequest__storage_, timeout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "androidAutoConnect",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosConnectRequest_FieldNumber_AndroidAutoConnect,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosConnectRequest class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosConnectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - JuBiterProtosBluetoothDevice

@implementation JuBiterProtosBluetoothDevice

@dynamic remoteId;
@dynamic name;
@dynamic type;

typedef struct JuBiterProtosBluetoothDevice__storage_ {
  uint32_t _has_storage_[1];
  JuBiterProtosBluetoothDevice_Type type;
  NSString *remoteId;
  NSString *name;
} JuBiterProtosBluetoothDevice__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remoteId",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosBluetoothDevice_FieldNumber_RemoteId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosBluetoothDevice__storage_, remoteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosBluetoothDevice_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JuBiterProtosBluetoothDevice__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = JuBiterProtosBluetoothDevice_Type_EnumDescriptor,
        .number = JuBiterProtosBluetoothDevice_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JuBiterProtosBluetoothDevice__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosBluetoothDevice class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosBluetoothDevice__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t JuBiterProtosBluetoothDevice_Type_RawValue(JuBiterProtosBluetoothDevice *message) {
  GPBDescriptor *descriptor = [JuBiterProtosBluetoothDevice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosBluetoothDevice_FieldNumber_Type];
  return GPBGetMessageInt32Field(message, field);
}

void SetJuBiterProtosBluetoothDevice_Type_RawValue(JuBiterProtosBluetoothDevice *message, int32_t value) {
  GPBDescriptor *descriptor = [JuBiterProtosBluetoothDevice descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosBluetoothDevice_FieldNumber_Type];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum JuBiterProtosBluetoothDevice_Type

GPBEnumDescriptor *JuBiterProtosBluetoothDevice_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Unknown\000Classic\000Le\000Dual\000";
    static const int32_t values[] = {
        JuBiterProtosBluetoothDevice_Type_Unknown,
        JuBiterProtosBluetoothDevice_Type_Classic,
        JuBiterProtosBluetoothDevice_Type_Le,
        JuBiterProtosBluetoothDevice_Type_Dual,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(JuBiterProtosBluetoothDevice_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:JuBiterProtosBluetoothDevice_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL JuBiterProtosBluetoothDevice_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case JuBiterProtosBluetoothDevice_Type_Unknown:
    case JuBiterProtosBluetoothDevice_Type_Classic:
    case JuBiterProtosBluetoothDevice_Type_Le:
    case JuBiterProtosBluetoothDevice_Type_Dual:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - JuBiterProtosDeviceStateResponse

@implementation JuBiterProtosDeviceStateResponse

@dynamic remoteId;
@dynamic state;
@dynamic deviceId;

typedef struct JuBiterProtosDeviceStateResponse__storage_ {
  uint32_t _has_storage_[1];
  JuBiterProtosDeviceStateResponse_BluetoothDeviceState state;
  int32_t deviceId;
  NSString *remoteId;
} JuBiterProtosDeviceStateResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "remoteId",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosDeviceStateResponse_FieldNumber_RemoteId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(JuBiterProtosDeviceStateResponse__storage_, remoteId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "state",
        .dataTypeSpecific.enumDescFunc = JuBiterProtosDeviceStateResponse_BluetoothDeviceState_EnumDescriptor,
        .number = JuBiterProtosDeviceStateResponse_FieldNumber_State,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(JuBiterProtosDeviceStateResponse__storage_, state),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "deviceId",
        .dataTypeSpecific.className = NULL,
        .number = JuBiterProtosDeviceStateResponse_FieldNumber_DeviceId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(JuBiterProtosDeviceStateResponse__storage_, deviceId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosDeviceStateResponse class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosDeviceStateResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t JuBiterProtosDeviceStateResponse_State_RawValue(JuBiterProtosDeviceStateResponse *message) {
  GPBDescriptor *descriptor = [JuBiterProtosDeviceStateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosDeviceStateResponse_FieldNumber_State];
  return GPBGetMessageInt32Field(message, field);
}

void SetJuBiterProtosDeviceStateResponse_State_RawValue(JuBiterProtosDeviceStateResponse *message, int32_t value) {
  GPBDescriptor *descriptor = [JuBiterProtosDeviceStateResponse descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:JuBiterProtosDeviceStateResponse_FieldNumber_State];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum JuBiterProtosDeviceStateResponse_BluetoothDeviceState

GPBEnumDescriptor *JuBiterProtosDeviceStateResponse_BluetoothDeviceState_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Disconnected\000Connecting\000Connected\000Discon"
        "necting\000";
    static const int32_t values[] = {
        JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Disconnected,
        JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Connecting,
        JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Connected,
        JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Disconnecting,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(JuBiterProtosDeviceStateResponse_BluetoothDeviceState)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:JuBiterProtosDeviceStateResponse_BluetoothDeviceState_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL JuBiterProtosDeviceStateResponse_BluetoothDeviceState_IsValidValue(int32_t value__) {
  switch (value__) {
    case JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Disconnected:
    case JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Connecting:
    case JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Connected:
    case JuBiterProtosDeviceStateResponse_BluetoothDeviceState_Disconnecting:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - JuBiterProtosConnectedDevicesResponse

@implementation JuBiterProtosConnectedDevicesResponse

@dynamic devicesArray, devicesArray_Count;

typedef struct JuBiterProtosConnectedDevicesResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *devicesArray;
} JuBiterProtosConnectedDevicesResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "devicesArray",
        .dataTypeSpecific.className = GPBStringifySymbol(JuBiterProtosBluetoothDevice),
        .number = JuBiterProtosConnectedDevicesResponse_FieldNumber_DevicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(JuBiterProtosConnectedDevicesResponse__storage_, devicesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[JuBiterProtosConnectedDevicesResponse class]
                                     rootClass:[JuBiterProtosJubiterblueRoot class]
                                          file:JuBiterProtosJubiterblueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(JuBiterProtosConnectedDevicesResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
