// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trc20_contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Trc20Contract.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - TronProtosTrc20ContractRoot

@implementation TronProtosTrc20ContractRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - TronProtosTrc20ContractRoot_FileDescriptor

static GPBFileDescriptor *TronProtosTrc20ContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"JUB.Proto.Tron"
                                                 objcPrefix:@"TronProtos"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TronProtosTransferTRC20Contract

@implementation TronProtosTransferTRC20Contract

@dynamic contractAddress;
@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TronProtosTransferTRC20Contract__storage_ {
  uint32_t _has_storage_[1];
  NSString *contractAddress;
  NSString *ownerAddress;
  NSString *toAddress;
  NSData *amount;
} TronProtosTransferTRC20Contract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "contractAddress",
        .dataTypeSpecific.className = NULL,
        .number = TronProtosTransferTRC20Contract_FieldNumber_ContractAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TronProtosTransferTRC20Contract__storage_, contractAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TronProtosTransferTRC20Contract_FieldNumber_OwnerAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TronProtosTransferTRC20Contract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TronProtosTransferTRC20Contract_FieldNumber_ToAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TronProtosTransferTRC20Contract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TronProtosTransferTRC20Contract_FieldNumber_Amount,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TronProtosTransferTRC20Contract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TronProtosTransferTRC20Contract class]
                                     rootClass:[TronProtosTrc20ContractRoot class]
                                          file:TronProtosTrc20ContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TronProtosTransferTRC20Contract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
