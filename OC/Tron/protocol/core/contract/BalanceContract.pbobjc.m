// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/balance_contract.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "core/contract/BalanceContract.pbobjc.h"
#import "core/contract/Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BalanceContractRoot

@implementation BalanceContractRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BalanceContractRoot_FileDescriptor

static GPBFileDescriptor *BalanceContractRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"protocol"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - FreezeBalanceContract

@implementation FreezeBalanceContract

@dynamic ownerAddress;
@dynamic frozenBalance;
@dynamic frozenDuration;
@dynamic resource;
@dynamic receiverAddress;

typedef struct FreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  ResourceCode resource;
  NSData *ownerAddress;
  NSData *receiverAddress;
  int64_t frozenBalance;
  int64_t frozenDuration;
} FreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "frozenBalance",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenBalance,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenBalance),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "frozenDuration",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_FrozenDuration,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, frozenDuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "resource",
        .dataTypeSpecific.enumDescFunc = ResourceCode_EnumDescriptor,
        .number = FreezeBalanceContract_FieldNumber_Resource,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, resource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiverAddress",
        .dataTypeSpecific.className = NULL,
        .number = FreezeBalanceContract_FieldNumber_ReceiverAddress,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(FreezeBalanceContract__storage_, receiverAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[FreezeBalanceContract class]
                                     rootClass:[BalanceContractRoot class]
                                          file:BalanceContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(FreezeBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t FreezeBalanceContract_Resource_RawValue(FreezeBalanceContract *message) {
  GPBDescriptor *descriptor = [FreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FreezeBalanceContract_FieldNumber_Resource];
  return GPBGetMessageInt32Field(message, field);
}

void SetFreezeBalanceContract_Resource_RawValue(FreezeBalanceContract *message, int32_t value) {
  GPBDescriptor *descriptor = [FreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:FreezeBalanceContract_FieldNumber_Resource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - UnfreezeBalanceContract

@implementation UnfreezeBalanceContract

@dynamic ownerAddress;
@dynamic resource;
@dynamic receiverAddress;

typedef struct UnfreezeBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  ResourceCode resource;
  NSData *ownerAddress;
  NSData *receiverAddress;
} UnfreezeBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "resource",
        .dataTypeSpecific.enumDescFunc = ResourceCode_EnumDescriptor,
        .number = UnfreezeBalanceContract_FieldNumber_Resource,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, resource),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "receiverAddress",
        .dataTypeSpecific.className = NULL,
        .number = UnfreezeBalanceContract_FieldNumber_ReceiverAddress,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UnfreezeBalanceContract__storage_, receiverAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UnfreezeBalanceContract class]
                                     rootClass:[BalanceContractRoot class]
                                          file:BalanceContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UnfreezeBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UnfreezeBalanceContract_Resource_RawValue(UnfreezeBalanceContract *message) {
  GPBDescriptor *descriptor = [UnfreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnfreezeBalanceContract_FieldNumber_Resource];
  return GPBGetMessageInt32Field(message, field);
}

void SetUnfreezeBalanceContract_Resource_RawValue(UnfreezeBalanceContract *message, int32_t value) {
  GPBDescriptor *descriptor = [UnfreezeBalanceContract descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UnfreezeBalanceContract_FieldNumber_Resource];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - WithdrawBalanceContract

@implementation WithdrawBalanceContract

@dynamic ownerAddress;

typedef struct WithdrawBalanceContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
} WithdrawBalanceContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = WithdrawBalanceContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(WithdrawBalanceContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[WithdrawBalanceContract class]
                                     rootClass:[BalanceContractRoot class]
                                          file:BalanceContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(WithdrawBalanceContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TransferContract

@implementation TransferContract

@dynamic ownerAddress;
@dynamic toAddress;
@dynamic amount;

typedef struct TransferContract__storage_ {
  uint32_t _has_storage_[1];
  NSData *ownerAddress;
  NSData *toAddress;
  int64_t amount;
} TransferContract__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "ownerAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_OwnerAddress,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TransferContract__storage_, ownerAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "toAddress",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_ToAddress,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TransferContract__storage_, toAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "amount",
        .dataTypeSpecific.className = NULL,
        .number = TransferContract_FieldNumber_Amount,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TransferContract__storage_, amount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TransferContract class]
                                     rootClass:[BalanceContractRoot class]
                                          file:BalanceContractRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TransferContract__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
