// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_NervosCKB.proto

#include "Jub_NervosCKB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fCommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Bip44Path_Jub_5fCommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fNervosCKB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fNervosCKB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fNervosCKB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputCKB_Jub_5fNervosCKB_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fNervosCKB_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputCKB_Jub_5fNervosCKB_2eproto;
namespace JUB {
namespace Proto {
namespace NervosCKB {
class ContextCfgCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContextCfgCKB> _instance;
} _ContextCfgCKB_default_instance_;
class CellDepCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellDepCKB> _instance;
} _CellDepCKB_default_instance_;
class CellScriptCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CellScriptCKB> _instance;
} _CellScriptCKB_default_instance_;
class InputCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InputCKB> _instance;
} _InputCKB_default_instance_;
class OutputCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputCKB> _instance;
} _OutputCKB_default_instance_;
class TransactionCKBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionCKB> _instance;
} _TransactionCKB_default_instance_;
}  // namespace NervosCKB
}  // namespace Proto
}  // namespace JUB
static void InitDefaultsscc_info_CellDepCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_CellDepCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::CellDepCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::CellDepCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CellDepCKB_Jub_5fNervosCKB_2eproto}, {}};

static void InitDefaultsscc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_CellScriptCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::CellScriptCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::CellScriptCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto}, {}};

static void InitDefaultsscc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_ContextCfgCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::ContextCfgCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::ContextCfgCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto}, {}};

static void InitDefaultsscc_info_InputCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_InputCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::InputCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::InputCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InputCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InputCKB_Jub_5fNervosCKB_2eproto}, {
      &scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto.base,
      &scc_info_Bip44Path_Jub_5fCommon_2eproto.base,}};

static void InitDefaultsscc_info_OutputCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_OutputCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::OutputCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::OutputCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OutputCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_OutputCKB_Jub_5fNervosCKB_2eproto}, {
      &scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto.base,
      &scc_info_Bip44Path_Jub_5fCommon_2eproto.base,}};

static void InitDefaultsscc_info_TransactionCKB_Jub_5fNervosCKB_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::NervosCKB::_TransactionCKB_default_instance_;
    new (ptr) ::JUB::Proto::NervosCKB::TransactionCKB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::NervosCKB::TransactionCKB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransactionCKB_Jub_5fNervosCKB_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TransactionCKB_Jub_5fNervosCKB_2eproto}, {
      &scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto.base,
      &scc_info_InputCKB_Jub_5fNervosCKB_2eproto.base,
      &scc_info_OutputCKB_Jub_5fNervosCKB_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Jub_5fNervosCKB_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Jub_5fNervosCKB_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Jub_5fNervosCKB_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Jub_5fNervosCKB_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::ContextCfgCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::ContextCfgCKB, main_path_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::ContextCfgCKB, main_net_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellDepCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellDepCKB, type_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellDepCKB, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellDepCKB, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellScriptCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellScriptCKB, code_hash_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellScriptCKB, hash_type_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::CellScriptCKB, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, pre_hash_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, pre_index_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, since_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, capacity_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, lock_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::InputCKB, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, capacity_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, lock_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, type_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, data_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::OutputCKB, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::TransactionCKB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::TransactionCKB, version_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::TransactionCKB, deps_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::TransactionCKB, inputs_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::NervosCKB::TransactionCKB, outputs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JUB::Proto::NervosCKB::ContextCfgCKB)},
  { 7, -1, sizeof(::JUB::Proto::NervosCKB::CellDepCKB)},
  { 15, -1, sizeof(::JUB::Proto::NervosCKB::CellScriptCKB)},
  { 23, -1, sizeof(::JUB::Proto::NervosCKB::InputCKB)},
  { 34, -1, sizeof(::JUB::Proto::NervosCKB::OutputCKB)},
  { 44, -1, sizeof(::JUB::Proto::NervosCKB::TransactionCKB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_ContextCfgCKB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_CellDepCKB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_CellScriptCKB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_InputCKB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_OutputCKB_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::NervosCKB::_TransactionCKB_default_instance_),
};

const char descriptor_table_protodef_Jub_5fNervosCKB_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023Jub_NervosCKB.proto\022\023JUB.Proto.NervosC"
  "KB\032\020Jub_Common.proto\"4\n\rContextCfgCKB\022\021\n"
  "\tmain_path\030\001 \001(\t\022\020\n\010main_net\030\002 \001(\010\":\n\nCe"
  "llDepCKB\022\014\n\004type\030\001 \001(\r\022\017\n\007tx_hash\030\002 \001(\t\022"
  "\r\n\005index\030\003 \001(\r\"C\n\rCellScriptCKB\022\021\n\tcode_"
  "hash\030\001 \001(\t\022\021\n\thash_type\030\002 \001(\r\022\014\n\004args\030\003 "
  "\001(\t\"\255\001\n\010InputCKB\022\020\n\010pre_hash\030\001 \001(\t\022\021\n\tpr"
  "e_index\030\002 \001(\r\022\r\n\005since\030\003 \001(\004\022\020\n\010capacity"
  "\030\004 \001(\004\0220\n\004lock\030\005 \001(\0132\".JUB.Proto.NervosC"
  "KB.CellScriptCKB\022)\n\004path\030\006 \001(\0132\033.JUB.Pro"
  "to.Common.Bip44Path\"\272\001\n\tOutputCKB\022\020\n\010cap"
  "acity\030\001 \001(\004\0220\n\004lock\030\002 \001(\0132\".JUB.Proto.Ne"
  "rvosCKB.CellScriptCKB\0220\n\004type\030\003 \001(\0132\".JU"
  "B.Proto.NervosCKB.CellScriptCKB\022\014\n\004data\030"
  "\004 \001(\t\022)\n\004path\030\005 \001(\0132\033.JUB.Proto.Common.B"
  "ip44Path\"\260\001\n\016TransactionCKB\022\017\n\007version\030\001"
  " \001(\r\022-\n\004deps\030\002 \003(\0132\037.JUB.Proto.NervosCKB"
  ".CellDepCKB\022-\n\006inputs\030\003 \003(\0132\035.JUB.Proto."
  "NervosCKB.InputCKB\022/\n\007outputs\030\004 \003(\0132\036.JU"
  "B.Proto.NervosCKB.OutputCKBB:\n\025com.jubit"
  "er.sdk.protoB\017NervosCKBProtos\242\002\017NervosCK"
  "BProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Jub_5fNervosCKB_2eproto_deps[1] = {
  &::descriptor_table_Jub_5fCommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Jub_5fNervosCKB_2eproto_sccs[6] = {
  &scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto.base,
  &scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto.base,
  &scc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto.base,
  &scc_info_InputCKB_Jub_5fNervosCKB_2eproto.base,
  &scc_info_OutputCKB_Jub_5fNervosCKB_2eproto.base,
  &scc_info_TransactionCKB_Jub_5fNervosCKB_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Jub_5fNervosCKB_2eproto_once;
static bool descriptor_table_Jub_5fNervosCKB_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fNervosCKB_2eproto = {
  &descriptor_table_Jub_5fNervosCKB_2eproto_initialized, descriptor_table_protodef_Jub_5fNervosCKB_2eproto, "Jub_NervosCKB.proto", 855,
  &descriptor_table_Jub_5fNervosCKB_2eproto_once, descriptor_table_Jub_5fNervosCKB_2eproto_sccs, descriptor_table_Jub_5fNervosCKB_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_Jub_5fNervosCKB_2eproto::offsets,
  file_level_metadata_Jub_5fNervosCKB_2eproto, 6, file_level_enum_descriptors_Jub_5fNervosCKB_2eproto, file_level_service_descriptors_Jub_5fNervosCKB_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Jub_5fNervosCKB_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Jub_5fNervosCKB_2eproto), true);
namespace JUB {
namespace Proto {
namespace NervosCKB {

// ===================================================================

void ContextCfgCKB::InitAsDefaultInstance() {
}
class ContextCfgCKB::_Internal {
 public:
};

ContextCfgCKB::ContextCfgCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.ContextCfgCKB)
}
ContextCfgCKB::ContextCfgCKB(const ContextCfgCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  main_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.main_path().empty()) {
    main_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_path_);
  }
  main_net_ = from.main_net_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.ContextCfgCKB)
}

void ContextCfgCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto.base);
  main_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_net_ = false;
}

ContextCfgCKB::~ContextCfgCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.ContextCfgCKB)
  SharedDtor();
}

void ContextCfgCKB::SharedDtor() {
  main_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContextCfgCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContextCfgCKB& ContextCfgCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContextCfgCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void ContextCfgCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  main_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  main_net_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ContextCfgCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string main_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_main_path(), ptr, ctx, "JUB.Proto.NervosCKB.ContextCfgCKB.main_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool main_net = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          main_net_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ContextCfgCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string main_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_main_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->main_path().data(), static_cast<int>(this->main_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.ContextCfgCKB.main_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool main_net = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &main_net_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.ContextCfgCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.ContextCfgCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ContextCfgCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_path = 1;
  if (this->main_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->main_path().data(), static_cast<int>(this->main_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.ContextCfgCKB.main_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->main_path(), output);
  }

  // bool main_net = 2;
  if (this->main_net() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->main_net(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.ContextCfgCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* ContextCfgCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string main_path = 1;
  if (this->main_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->main_path().data(), static_cast<int>(this->main_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.ContextCfgCKB.main_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->main_path(), target);
  }

  // bool main_net = 2;
  if (this->main_net() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->main_net(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.ContextCfgCKB)
  return target;
}

size_t ContextCfgCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string main_path = 1;
  if (this->main_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->main_path());
  }

  // bool main_net = 2;
  if (this->main_net() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContextCfgCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const ContextCfgCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContextCfgCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.ContextCfgCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.ContextCfgCKB)
    MergeFrom(*source);
  }
}

void ContextCfgCKB::MergeFrom(const ContextCfgCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.main_path().size() > 0) {

    main_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.main_path_);
  }
  if (from.main_net() != 0) {
    set_main_net(from.main_net());
  }
}

void ContextCfgCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContextCfgCKB::CopyFrom(const ContextCfgCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.ContextCfgCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContextCfgCKB::IsInitialized() const {
  return true;
}

void ContextCfgCKB::InternalSwap(ContextCfgCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  main_path_.Swap(&other->main_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(main_net_, other->main_net_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContextCfgCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CellDepCKB::InitAsDefaultInstance() {
}
class CellDepCKB::_Internal {
 public:
};

CellDepCKB::CellDepCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.CellDepCKB)
}
CellDepCKB::CellDepCKB(const CellDepCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tx_hash().empty()) {
    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.CellDepCKB)
}

void CellDepCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(index_));
}

CellDepCKB::~CellDepCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.CellDepCKB)
  SharedDtor();
}

void CellDepCKB::SharedDtor() {
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CellDepCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellDepCKB& CellDepCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellDepCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void CellDepCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.CellDepCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellDepCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tx_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tx_hash(), ptr, ctx, "JUB.Proto.NervosCKB.CellDepCKB.tx_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellDepCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.CellDepCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tx_hash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tx_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tx_hash().data(), static_cast<int>(this->tx_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.CellDepCKB.tx_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.CellDepCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.CellDepCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellDepCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.CellDepCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), static_cast<int>(this->tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellDepCKB.tx_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tx_hash(), output);
  }

  // uint32 index = 3;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.CellDepCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CellDepCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.CellDepCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tx_hash().data(), static_cast<int>(this->tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellDepCKB.tx_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tx_hash(), target);
  }

  // uint32 index = 3;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.CellDepCKB)
  return target;
}

size_t CellDepCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.CellDepCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_hash = 2;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tx_hash());
  }

  // uint32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // uint32 index = 3;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellDepCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.CellDepCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const CellDepCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellDepCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.CellDepCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.CellDepCKB)
    MergeFrom(*source);
  }
}

void CellDepCKB::MergeFrom(const CellDepCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.CellDepCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void CellDepCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.CellDepCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellDepCKB::CopyFrom(const CellDepCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.CellDepCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDepCKB::IsInitialized() const {
  return true;
}

void CellDepCKB::InternalSwap(CellDepCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDepCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CellScriptCKB::InitAsDefaultInstance() {
}
class CellScriptCKB::_Internal {
 public:
};

CellScriptCKB::CellScriptCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.CellScriptCKB)
}
CellScriptCKB::CellScriptCKB(const CellScriptCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.code_hash().empty()) {
    code_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_hash_);
  }
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.args().empty()) {
    args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  hash_type_ = from.hash_type_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.CellScriptCKB)
}

void CellScriptCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto.base);
  code_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_type_ = 0u;
}

CellScriptCKB::~CellScriptCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.CellScriptCKB)
  SharedDtor();
}

void CellScriptCKB::SharedDtor() {
  code_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CellScriptCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CellScriptCKB& CellScriptCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CellScriptCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void CellScriptCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.CellScriptCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  args_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_type_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CellScriptCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code_hash(), ptr, ctx, "JUB.Proto.NervosCKB.CellScriptCKB.code_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hash_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          hash_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_args(), ptr, ctx, "JUB.Proto.NervosCKB.CellScriptCKB.args");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CellScriptCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.CellScriptCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string code_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code_hash().data(), static_cast<int>(this->code_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.CellScriptCKB.code_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 hash_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hash_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string args = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), static_cast<int>(this->args().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.CellScriptCKB.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.CellScriptCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.CellScriptCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CellScriptCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.CellScriptCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code_hash = 1;
  if (this->code_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code_hash().data(), static_cast<int>(this->code_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellScriptCKB.code_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->code_hash(), output);
  }

  // uint32 hash_type = 2;
  if (this->hash_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->hash_type(), output);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellScriptCKB.args");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->args(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.CellScriptCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* CellScriptCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.CellScriptCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code_hash = 1;
  if (this->code_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code_hash().data(), static_cast<int>(this->code_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellScriptCKB.code_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->code_hash(), target);
  }

  // uint32 hash_type = 2;
  if (this->hash_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->hash_type(), target);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.CellScriptCKB.args");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->args(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.CellScriptCKB)
  return target;
}

size_t CellScriptCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.CellScriptCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code_hash = 1;
  if (this->code_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code_hash());
  }

  // string args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->args());
  }

  // uint32 hash_type = 2;
  if (this->hash_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->hash_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CellScriptCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.CellScriptCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const CellScriptCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CellScriptCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.CellScriptCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.CellScriptCKB)
    MergeFrom(*source);
  }
}

void CellScriptCKB::MergeFrom(const CellScriptCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.CellScriptCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code_hash().size() > 0) {

    code_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_hash_);
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.hash_type() != 0) {
    set_hash_type(from.hash_type());
  }
}

void CellScriptCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.CellScriptCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellScriptCKB::CopyFrom(const CellScriptCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.CellScriptCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellScriptCKB::IsInitialized() const {
  return true;
}

void CellScriptCKB::InternalSwap(CellScriptCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  code_hash_.Swap(&other->code_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  args_.Swap(&other->args_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(hash_type_, other->hash_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellScriptCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InputCKB::InitAsDefaultInstance() {
  ::JUB::Proto::NervosCKB::_InputCKB_default_instance_._instance.get_mutable()->lock_ = const_cast< ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      ::JUB::Proto::NervosCKB::CellScriptCKB::internal_default_instance());
  ::JUB::Proto::NervosCKB::_InputCKB_default_instance_._instance.get_mutable()->path_ = const_cast< ::JUB::Proto::Common::Bip44Path*>(
      ::JUB::Proto::Common::Bip44Path::internal_default_instance());
}
class InputCKB::_Internal {
 public:
  static const ::JUB::Proto::NervosCKB::CellScriptCKB& lock(const InputCKB* msg);
  static const ::JUB::Proto::Common::Bip44Path& path(const InputCKB* msg);
};

const ::JUB::Proto::NervosCKB::CellScriptCKB&
InputCKB::_Internal::lock(const InputCKB* msg) {
  return *msg->lock_;
}
const ::JUB::Proto::Common::Bip44Path&
InputCKB::_Internal::path(const InputCKB* msg) {
  return *msg->path_;
}
void InputCKB::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
InputCKB::InputCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.InputCKB)
}
InputCKB::InputCKB(const InputCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pre_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pre_hash().empty()) {
    pre_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pre_hash_);
  }
  if (from.has_lock()) {
    lock_ = new ::JUB::Proto::NervosCKB::CellScriptCKB(*from.lock_);
  } else {
    lock_ = nullptr;
  }
  if (from.has_path()) {
    path_ = new ::JUB::Proto::Common::Bip44Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  ::memcpy(&since_, &from.since_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_index_) -
    reinterpret_cast<char*>(&since_)) + sizeof(pre_index_));
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.InputCKB)
}

void InputCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InputCKB_Jub_5fNervosCKB_2eproto.base);
  pre_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_index_) -
      reinterpret_cast<char*>(&lock_)) + sizeof(pre_index_));
}

InputCKB::~InputCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.InputCKB)
  SharedDtor();
}

void InputCKB::SharedDtor() {
  pre_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lock_;
  if (this != internal_default_instance()) delete path_;
}

void InputCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InputCKB& InputCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InputCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void InputCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.InputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pre_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  ::memset(&since_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_index_) -
      reinterpret_cast<char*>(&since_)) + sizeof(pre_index_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InputCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pre_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_pre_hash(), ptr, ctx, "JUB.Proto.NervosCKB.InputCKB.pre_hash");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pre_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pre_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 since = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          since_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Common.Bip44Path path = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InputCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.InputCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string pre_hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_pre_hash()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->pre_hash().data(), static_cast<int>(this->pre_hash().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.InputCKB.pre_hash"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pre_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 since = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &since_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 capacity = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Common.Bip44Path path = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.InputCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.InputCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InputCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.InputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pre_hash = 1;
  if (this->pre_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pre_hash().data(), static_cast<int>(this->pre_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.InputCKB.pre_hash");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pre_hash(), output);
  }

  // uint32 pre_index = 2;
  if (this->pre_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->pre_index(), output);
  }

  // uint64 since = 3;
  if (this->since() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->since(), output);
  }

  // uint64 capacity = 4;
  if (this->capacity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->capacity(), output);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
  if (this->has_lock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::lock(this), output);
  }

  // .JUB.Proto.Common.Bip44Path path = 6;
  if (this->has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.InputCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* InputCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.InputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pre_hash = 1;
  if (this->pre_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->pre_hash().data(), static_cast<int>(this->pre_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.InputCKB.pre_hash");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->pre_hash(), target);
  }

  // uint32 pre_index = 2;
  if (this->pre_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->pre_index(), target);
  }

  // uint64 since = 3;
  if (this->since() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->since(), target);
  }

  // uint64 capacity = 4;
  if (this->capacity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->capacity(), target);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
  if (this->has_lock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::lock(this), target);
  }

  // .JUB.Proto.Common.Bip44Path path = 6;
  if (this->has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.InputCKB)
  return target;
}

size_t InputCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.InputCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pre_hash = 1;
  if (this->pre_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->pre_hash());
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
  if (this->has_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_);
  }

  // .JUB.Proto.Common.Bip44Path path = 6;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // uint64 since = 3;
  if (this->since() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->since());
  }

  // uint64 capacity = 4;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  // uint32 pre_index = 2;
  if (this->pre_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->pre_index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InputCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.InputCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const InputCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InputCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.InputCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.InputCKB)
    MergeFrom(*source);
  }
}

void InputCKB::MergeFrom(const InputCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.InputCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pre_hash().size() > 0) {

    pre_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pre_hash_);
  }
  if (from.has_lock()) {
    mutable_lock()->::JUB::Proto::NervosCKB::CellScriptCKB::MergeFrom(from.lock());
  }
  if (from.has_path()) {
    mutable_path()->::JUB::Proto::Common::Bip44Path::MergeFrom(from.path());
  }
  if (from.since() != 0) {
    set_since(from.since());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
  if (from.pre_index() != 0) {
    set_pre_index(from.pre_index());
  }
}

void InputCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.InputCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputCKB::CopyFrom(const InputCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.InputCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputCKB::IsInitialized() const {
  return true;
}

void InputCKB::InternalSwap(InputCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pre_hash_.Swap(&other->pre_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lock_, other->lock_);
  swap(path_, other->path_);
  swap(since_, other->since_);
  swap(capacity_, other->capacity_);
  swap(pre_index_, other->pre_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InputCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputCKB::InitAsDefaultInstance() {
  ::JUB::Proto::NervosCKB::_OutputCKB_default_instance_._instance.get_mutable()->lock_ = const_cast< ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      ::JUB::Proto::NervosCKB::CellScriptCKB::internal_default_instance());
  ::JUB::Proto::NervosCKB::_OutputCKB_default_instance_._instance.get_mutable()->type_ = const_cast< ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      ::JUB::Proto::NervosCKB::CellScriptCKB::internal_default_instance());
  ::JUB::Proto::NervosCKB::_OutputCKB_default_instance_._instance.get_mutable()->path_ = const_cast< ::JUB::Proto::Common::Bip44Path*>(
      ::JUB::Proto::Common::Bip44Path::internal_default_instance());
}
class OutputCKB::_Internal {
 public:
  static const ::JUB::Proto::NervosCKB::CellScriptCKB& lock(const OutputCKB* msg);
  static const ::JUB::Proto::NervosCKB::CellScriptCKB& type(const OutputCKB* msg);
  static const ::JUB::Proto::Common::Bip44Path& path(const OutputCKB* msg);
};

const ::JUB::Proto::NervosCKB::CellScriptCKB&
OutputCKB::_Internal::lock(const OutputCKB* msg) {
  return *msg->lock_;
}
const ::JUB::Proto::NervosCKB::CellScriptCKB&
OutputCKB::_Internal::type(const OutputCKB* msg) {
  return *msg->type_;
}
const ::JUB::Proto::Common::Bip44Path&
OutputCKB::_Internal::path(const OutputCKB* msg) {
  return *msg->path_;
}
void OutputCKB::clear_path() {
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
OutputCKB::OutputCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.OutputCKB)
}
OutputCKB::OutputCKB(const OutputCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_lock()) {
    lock_ = new ::JUB::Proto::NervosCKB::CellScriptCKB(*from.lock_);
  } else {
    lock_ = nullptr;
  }
  if (from.has_type()) {
    type_ = new ::JUB::Proto::NervosCKB::CellScriptCKB(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from.has_path()) {
    path_ = new ::JUB::Proto::Common::Bip44Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  capacity_ = from.capacity_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.OutputCKB)
}

void OutputCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputCKB_Jub_5fNervosCKB_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&lock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&lock_)) + sizeof(capacity_));
}

OutputCKB::~OutputCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.OutputCKB)
  SharedDtor();
}

void OutputCKB::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lock_;
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete path_;
}

void OutputCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputCKB& OutputCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void OutputCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.OutputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  capacity_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutputCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 capacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_data(), ptr, ctx, "JUB.Proto.NervosCKB.OutputCKB.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Common.Bip44Path path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutputCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.OutputCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 capacity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &capacity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.NervosCKB.OutputCKB.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Common.Bip44Path path = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.OutputCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.OutputCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutputCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.OutputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->capacity(), output);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
  if (this->has_lock()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::lock(this), output);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
  if (this->has_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::type(this), output);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.OutputCKB.data");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  // .JUB.Proto.Common.Bip44Path path = 5;
  if (this->has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::path(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.OutputCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.OutputCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->capacity(), target);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
  if (this->has_lock()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::lock(this), target);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
  if (this->has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target);
  }

  // string data = 4;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.NervosCKB.OutputCKB.data");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  // .JUB.Proto.Common.Bip44Path path = 5;
  if (this->has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::path(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.OutputCKB)
  return target;
}

size_t OutputCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.OutputCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
  if (this->has_lock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lock_);
  }

  // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .JUB.Proto.Common.Bip44Path path = 5;
  if (this->has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // uint64 capacity = 1;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->capacity());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.OutputCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.OutputCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.OutputCKB)
    MergeFrom(*source);
  }
}

void OutputCKB::MergeFrom(const OutputCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.OutputCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_lock()) {
    mutable_lock()->::JUB::Proto::NervosCKB::CellScriptCKB::MergeFrom(from.lock());
  }
  if (from.has_type()) {
    mutable_type()->::JUB::Proto::NervosCKB::CellScriptCKB::MergeFrom(from.type());
  }
  if (from.has_path()) {
    mutable_path()->::JUB::Proto::Common::Bip44Path::MergeFrom(from.path());
  }
  if (from.capacity() != 0) {
    set_capacity(from.capacity());
  }
}

void OutputCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.OutputCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputCKB::CopyFrom(const OutputCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.OutputCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputCKB::IsInitialized() const {
  return true;
}

void OutputCKB::InternalSwap(OutputCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lock_, other->lock_);
  swap(type_, other->type_);
  swap(path_, other->path_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionCKB::InitAsDefaultInstance() {
}
class TransactionCKB::_Internal {
 public:
};

TransactionCKB::TransactionCKB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.NervosCKB.TransactionCKB)
}
TransactionCKB::TransactionCKB(const TransactionCKB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      deps_(from.deps_),
      inputs_(from.inputs_),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.NervosCKB.TransactionCKB)
}

void TransactionCKB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionCKB_Jub_5fNervosCKB_2eproto.base);
  version_ = 0u;
}

TransactionCKB::~TransactionCKB() {
  // @@protoc_insertion_point(destructor:JUB.Proto.NervosCKB.TransactionCKB)
  SharedDtor();
}

void TransactionCKB::SharedDtor() {
}

void TransactionCKB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionCKB& TransactionCKB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionCKB_Jub_5fNervosCKB_2eproto.base);
  return *internal_default_instance();
}


void TransactionCKB::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.NervosCKB.TransactionCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deps_.Clear();
  inputs_.Clear();
  outputs_.Clear();
  version_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionCKB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_deps(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionCKB::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.NervosCKB.TransactionCKB)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_deps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.NervosCKB.TransactionCKB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.NervosCKB.TransactionCKB)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionCKB::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.NervosCKB.TransactionCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deps_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->deps(static_cast<int>(i)),
      output);
  }

  // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.NervosCKB.TransactionCKB)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionCKB::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.NervosCKB.TransactionCKB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 version = 1;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deps_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->deps(static_cast<int>(i)), target);
  }

  // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->inputs(static_cast<int>(i)), target);
  }

  // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.NervosCKB.TransactionCKB)
  return target;
}

size_t TransactionCKB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.NervosCKB.TransactionCKB)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->deps_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->deps(static_cast<int>(i)));
    }
  }

  // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  // uint32 version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionCKB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.NervosCKB.TransactionCKB)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionCKB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionCKB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.NervosCKB.TransactionCKB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.NervosCKB.TransactionCKB)
    MergeFrom(*source);
  }
}

void TransactionCKB::MergeFrom(const TransactionCKB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.NervosCKB.TransactionCKB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deps_.MergeFrom(from.deps_);
  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void TransactionCKB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.NervosCKB.TransactionCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionCKB::CopyFrom(const TransactionCKB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.NervosCKB.TransactionCKB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionCKB::IsInitialized() const {
  return true;
}

void TransactionCKB::InternalSwap(TransactionCKB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&deps_)->InternalSwap(CastToBase(&other->deps_));
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionCKB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NervosCKB
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::ContextCfgCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::ContextCfgCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::ContextCfgCKB >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::CellDepCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::CellDepCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::CellDepCKB >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::CellScriptCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::CellScriptCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::CellScriptCKB >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::InputCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::InputCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::InputCKB >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::OutputCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::OutputCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::OutputCKB >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::NervosCKB::TransactionCKB* Arena::CreateMaybeMessage< ::JUB::Proto::NervosCKB::TransactionCKB >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::NervosCKB::TransactionCKB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
