// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiter_nfc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jubiter_5fnfc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jubiter_5fnfc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jubiter_5fnfc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jubiter_5fnfc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jubiter_5fnfc_2eproto;
class NfcConnectRequest;
class NfcConnectRequestDefaultTypeInternal;
extern NfcConnectRequestDefaultTypeInternal _NfcConnectRequest_default_instance_;
class NfcConnectedResponse;
class NfcConnectedResponseDefaultTypeInternal;
extern NfcConnectedResponseDefaultTypeInternal _NfcConnectedResponse_default_instance_;
class NfcDevice;
class NfcDeviceDefaultTypeInternal;
extern NfcDeviceDefaultTypeInternal _NfcDevice_default_instance_;
class NfcDeviceStateResponse;
class NfcDeviceStateResponseDefaultTypeInternal;
extern NfcDeviceStateResponseDefaultTypeInternal _NfcDeviceStateResponse_default_instance_;
class NfcScanResult;
class NfcScanResultDefaultTypeInternal;
extern NfcScanResultDefaultTypeInternal _NfcScanResult_default_instance_;
class NfcState;
class NfcStateDefaultTypeInternal;
extern NfcStateDefaultTypeInternal _NfcState_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::NfcConnectRequest* Arena::CreateMaybeMessage<::NfcConnectRequest>(Arena*);
template<> ::NfcConnectedResponse* Arena::CreateMaybeMessage<::NfcConnectedResponse>(Arena*);
template<> ::NfcDevice* Arena::CreateMaybeMessage<::NfcDevice>(Arena*);
template<> ::NfcDeviceStateResponse* Arena::CreateMaybeMessage<::NfcDeviceStateResponse>(Arena*);
template<> ::NfcScanResult* Arena::CreateMaybeMessage<::NfcScanResult>(Arena*);
template<> ::NfcState* Arena::CreateMaybeMessage<::NfcState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum NfcState_State : int {
  NfcState_State_UNKNOWN = 0,
  NfcState_State_ON = 1,
  NfcState_State_OFF = 2,
  NfcState_State_NfcState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NfcState_State_NfcState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NfcState_State_IsValid(int value);
constexpr NfcState_State NfcState_State_State_MIN = NfcState_State_UNKNOWN;
constexpr NfcState_State NfcState_State_State_MAX = NfcState_State_OFF;
constexpr int NfcState_State_State_ARRAYSIZE = NfcState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfcState_State_descriptor();
template<typename T>
inline const std::string& NfcState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NfcState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NfcState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NfcState_State_descriptor(), enum_t_value);
}
inline bool NfcState_State_Parse(
    const std::string& name, NfcState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NfcState_State>(
    NfcState_State_descriptor(), name, value);
}
enum NfcDevice_Type : int {
  NfcDevice_Type_NFC = 0,
  NfcDevice_Type_NfcDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NfcDevice_Type_NfcDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NfcDevice_Type_IsValid(int value);
constexpr NfcDevice_Type NfcDevice_Type_Type_MIN = NfcDevice_Type_NFC;
constexpr NfcDevice_Type NfcDevice_Type_Type_MAX = NfcDevice_Type_NFC;
constexpr int NfcDevice_Type_Type_ARRAYSIZE = NfcDevice_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfcDevice_Type_descriptor();
template<typename T>
inline const std::string& NfcDevice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NfcDevice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NfcDevice_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NfcDevice_Type_descriptor(), enum_t_value);
}
inline bool NfcDevice_Type_Parse(
    const std::string& name, NfcDevice_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NfcDevice_Type>(
    NfcDevice_Type_descriptor(), name, value);
}
enum NfcDeviceStateResponse_NfcDeviceState : int {
  NfcDeviceStateResponse_NfcDeviceState_DISCONNECTED = 0,
  NfcDeviceStateResponse_NfcDeviceState_CONNECTED = 1,
  NfcDeviceStateResponse_NfcDeviceState_NfcDeviceStateResponse_NfcDeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NfcDeviceStateResponse_NfcDeviceState_NfcDeviceStateResponse_NfcDeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NfcDeviceStateResponse_NfcDeviceState_IsValid(int value);
constexpr NfcDeviceStateResponse_NfcDeviceState NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_MIN = NfcDeviceStateResponse_NfcDeviceState_DISCONNECTED;
constexpr NfcDeviceStateResponse_NfcDeviceState NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_MAX = NfcDeviceStateResponse_NfcDeviceState_CONNECTED;
constexpr int NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_ARRAYSIZE = NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NfcDeviceStateResponse_NfcDeviceState_descriptor();
template<typename T>
inline const std::string& NfcDeviceStateResponse_NfcDeviceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NfcDeviceStateResponse_NfcDeviceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NfcDeviceStateResponse_NfcDeviceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NfcDeviceStateResponse_NfcDeviceState_descriptor(), enum_t_value);
}
inline bool NfcDeviceStateResponse_NfcDeviceState_Parse(
    const std::string& name, NfcDeviceStateResponse_NfcDeviceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NfcDeviceStateResponse_NfcDeviceState>(
    NfcDeviceStateResponse_NfcDeviceState_descriptor(), name, value);
}
// ===================================================================

class NfcState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcState) */ {
 public:
  NfcState();
  virtual ~NfcState();

  NfcState(const NfcState& from);
  NfcState(NfcState&& from) noexcept
    : NfcState() {
    *this = ::std::move(from);
  }

  inline NfcState& operator=(const NfcState& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcState& operator=(NfcState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcState* internal_default_instance() {
    return reinterpret_cast<const NfcState*>(
               &_NfcState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NfcState& a, NfcState& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcState* New() const final {
    return CreateMaybeMessage<NfcState>(nullptr);
  }

  NfcState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcState& from);
  void MergeFrom(const NfcState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NfcState_State State;
  static constexpr State UNKNOWN =
    NfcState_State_UNKNOWN;
  static constexpr State ON =
    NfcState_State_ON;
  static constexpr State OFF =
    NfcState_State_OFF;
  static inline bool State_IsValid(int value) {
    return NfcState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    NfcState_State_State_MIN;
  static constexpr State State_MAX =
    NfcState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    NfcState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return NfcState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return NfcState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return NfcState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .NfcState.State state = 1;
  void clear_state();
  ::NfcState_State state() const;
  void set_state(::NfcState_State value);

  // @@protoc_insertion_point(class_scope:NfcState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// -------------------------------------------------------------------

class NfcScanResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcScanResult) */ {
 public:
  NfcScanResult();
  virtual ~NfcScanResult();

  NfcScanResult(const NfcScanResult& from);
  NfcScanResult(NfcScanResult&& from) noexcept
    : NfcScanResult() {
    *this = ::std::move(from);
  }

  inline NfcScanResult& operator=(const NfcScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcScanResult& operator=(NfcScanResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcScanResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcScanResult* internal_default_instance() {
    return reinterpret_cast<const NfcScanResult*>(
               &_NfcScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NfcScanResult& a, NfcScanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcScanResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcScanResult* New() const final {
    return CreateMaybeMessage<NfcScanResult>(nullptr);
  }

  NfcScanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcScanResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcScanResult& from);
  void MergeFrom(const NfcScanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcScanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcScanResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
  };
  // .NfcDevice device = 1;
  bool has_device() const;
  void clear_device();
  const ::NfcDevice& device() const;
  ::NfcDevice* release_device();
  ::NfcDevice* mutable_device();
  void set_allocated_device(::NfcDevice* device);

  // @@protoc_insertion_point(class_scope:NfcScanResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::NfcDevice* device_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// -------------------------------------------------------------------

class NfcConnectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcConnectRequest) */ {
 public:
  NfcConnectRequest();
  virtual ~NfcConnectRequest();

  NfcConnectRequest(const NfcConnectRequest& from);
  NfcConnectRequest(NfcConnectRequest&& from) noexcept
    : NfcConnectRequest() {
    *this = ::std::move(from);
  }

  inline NfcConnectRequest& operator=(const NfcConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcConnectRequest& operator=(NfcConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcConnectRequest* internal_default_instance() {
    return reinterpret_cast<const NfcConnectRequest*>(
               &_NfcConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NfcConnectRequest& a, NfcConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcConnectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcConnectRequest* New() const final {
    return CreateMaybeMessage<NfcConnectRequest>(nullptr);
  }

  NfcConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcConnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcConnectRequest& from);
  void MergeFrom(const NfcConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcConnectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteNameFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kAndroidAutoConnectFieldNumber = 4,
  };
  // string remote_name = 1;
  void clear_remote_name();
  const std::string& remote_name() const;
  void set_remote_name(const std::string& value);
  void set_remote_name(std::string&& value);
  void set_remote_name(const char* value);
  void set_remote_name(const char* value, size_t size);
  std::string* mutable_remote_name();
  std::string* release_remote_name();
  void set_allocated_remote_name(std::string* remote_name);

  // string remote_id = 2;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool android_auto_connect = 4;
  void clear_android_auto_connect();
  bool android_auto_connect() const;
  void set_android_auto_connect(bool value);

  // @@protoc_insertion_point(class_scope:NfcConnectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  bool android_auto_connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// -------------------------------------------------------------------

class NfcDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcDevice) */ {
 public:
  NfcDevice();
  virtual ~NfcDevice();

  NfcDevice(const NfcDevice& from);
  NfcDevice(NfcDevice&& from) noexcept
    : NfcDevice() {
    *this = ::std::move(from);
  }

  inline NfcDevice& operator=(const NfcDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcDevice& operator=(NfcDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcDevice* internal_default_instance() {
    return reinterpret_cast<const NfcDevice*>(
               &_NfcDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NfcDevice& a, NfcDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcDevice* New() const final {
    return CreateMaybeMessage<NfcDevice>(nullptr);
  }

  NfcDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcDevice& from);
  void MergeFrom(const NfcDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NfcDevice_Type Type;
  static constexpr Type NFC =
    NfcDevice_Type_NFC;
  static inline bool Type_IsValid(int value) {
    return NfcDevice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    NfcDevice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    NfcDevice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    NfcDevice_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return NfcDevice_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return NfcDevice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return NfcDevice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .NfcDevice.Type type = 3;
  void clear_type();
  ::NfcDevice_Type type() const;
  void set_type(::NfcDevice_Type value);

  // @@protoc_insertion_point(class_scope:NfcDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// -------------------------------------------------------------------

class NfcDeviceStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcDeviceStateResponse) */ {
 public:
  NfcDeviceStateResponse();
  virtual ~NfcDeviceStateResponse();

  NfcDeviceStateResponse(const NfcDeviceStateResponse& from);
  NfcDeviceStateResponse(NfcDeviceStateResponse&& from) noexcept
    : NfcDeviceStateResponse() {
    *this = ::std::move(from);
  }

  inline NfcDeviceStateResponse& operator=(const NfcDeviceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcDeviceStateResponse& operator=(NfcDeviceStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcDeviceStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcDeviceStateResponse* internal_default_instance() {
    return reinterpret_cast<const NfcDeviceStateResponse*>(
               &_NfcDeviceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NfcDeviceStateResponse& a, NfcDeviceStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcDeviceStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcDeviceStateResponse* New() const final {
    return CreateMaybeMessage<NfcDeviceStateResponse>(nullptr);
  }

  NfcDeviceStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcDeviceStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcDeviceStateResponse& from);
  void MergeFrom(const NfcDeviceStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcDeviceStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcDeviceStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NfcDeviceStateResponse_NfcDeviceState NfcDeviceState;
  static constexpr NfcDeviceState DISCONNECTED =
    NfcDeviceStateResponse_NfcDeviceState_DISCONNECTED;
  static constexpr NfcDeviceState CONNECTED =
    NfcDeviceStateResponse_NfcDeviceState_CONNECTED;
  static inline bool NfcDeviceState_IsValid(int value) {
    return NfcDeviceStateResponse_NfcDeviceState_IsValid(value);
  }
  static constexpr NfcDeviceState NfcDeviceState_MIN =
    NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_MIN;
  static constexpr NfcDeviceState NfcDeviceState_MAX =
    NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_MAX;
  static constexpr int NfcDeviceState_ARRAYSIZE =
    NfcDeviceStateResponse_NfcDeviceState_NfcDeviceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NfcDeviceState_descriptor() {
    return NfcDeviceStateResponse_NfcDeviceState_descriptor();
  }
  template<typename T>
  static inline const std::string& NfcDeviceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NfcDeviceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NfcDeviceState_Name.");
    return NfcDeviceStateResponse_NfcDeviceState_Name(enum_t_value);
  }
  static inline bool NfcDeviceState_Parse(const std::string& name,
      NfcDeviceState* value) {
    return NfcDeviceStateResponse_NfcDeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kDeviceIDFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // .NfcDeviceStateResponse.NfcDeviceState state = 2;
  void clear_state();
  ::NfcDeviceStateResponse_NfcDeviceState state() const;
  void set_state(::NfcDeviceStateResponse_NfcDeviceState value);

  // int32 deviceID = 3;
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:NfcDeviceStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// -------------------------------------------------------------------

class NfcConnectedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NfcConnectedResponse) */ {
 public:
  NfcConnectedResponse();
  virtual ~NfcConnectedResponse();

  NfcConnectedResponse(const NfcConnectedResponse& from);
  NfcConnectedResponse(NfcConnectedResponse&& from) noexcept
    : NfcConnectedResponse() {
    *this = ::std::move(from);
  }

  inline NfcConnectedResponse& operator=(const NfcConnectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NfcConnectedResponse& operator=(NfcConnectedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NfcConnectedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NfcConnectedResponse* internal_default_instance() {
    return reinterpret_cast<const NfcConnectedResponse*>(
               &_NfcConnectedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NfcConnectedResponse& a, NfcConnectedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NfcConnectedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NfcConnectedResponse* New() const final {
    return CreateMaybeMessage<NfcConnectedResponse>(nullptr);
  }

  NfcConnectedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NfcConnectedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NfcConnectedResponse& from);
  void MergeFrom(const NfcConnectedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NfcConnectedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NfcConnectedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fnfc_2eproto);
    return ::descriptor_table_jubiter_5fnfc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .NfcDevice devices = 1;
  int devices_size() const;
  void clear_devices();
  ::NfcDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NfcDevice >*
      mutable_devices();
  const ::NfcDevice& devices(int index) const;
  ::NfcDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NfcDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:NfcConnectedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NfcDevice > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fnfc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NfcState

// .NfcState.State state = 1;
inline void NfcState::clear_state() {
  state_ = 0;
}
inline ::NfcState_State NfcState::state() const {
  // @@protoc_insertion_point(field_get:NfcState.state)
  return static_cast< ::NfcState_State >(state_);
}
inline void NfcState::set_state(::NfcState_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NfcState.state)
}

// -------------------------------------------------------------------

// NfcScanResult

// .NfcDevice device = 1;
inline bool NfcScanResult::has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline void NfcScanResult::clear_device() {
  if (GetArenaNoVirtual() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::NfcDevice& NfcScanResult::device() const {
  const ::NfcDevice* p = device_;
  // @@protoc_insertion_point(field_get:NfcScanResult.device)
  return p != nullptr ? *p : *reinterpret_cast<const ::NfcDevice*>(
      &::_NfcDevice_default_instance_);
}
inline ::NfcDevice* NfcScanResult::release_device() {
  // @@protoc_insertion_point(field_release:NfcScanResult.device)
  
  ::NfcDevice* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::NfcDevice* NfcScanResult::mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::NfcDevice>(GetArenaNoVirtual());
    device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:NfcScanResult.device)
  return device_;
}
inline void NfcScanResult::set_allocated_device(::NfcDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:NfcScanResult.device)
}

// -------------------------------------------------------------------

// NfcConnectRequest

// string remote_name = 1;
inline void NfcConnectRequest::clear_remote_name() {
  remote_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NfcConnectRequest::remote_name() const {
  // @@protoc_insertion_point(field_get:NfcConnectRequest.remote_name)
  return remote_name_.GetNoArena();
}
inline void NfcConnectRequest::set_remote_name(const std::string& value) {
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfcConnectRequest.remote_name)
}
inline void NfcConnectRequest::set_remote_name(std::string&& value) {
  
  remote_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfcConnectRequest.remote_name)
}
inline void NfcConnectRequest::set_remote_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfcConnectRequest.remote_name)
}
inline void NfcConnectRequest::set_remote_name(const char* value, size_t size) {
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfcConnectRequest.remote_name)
}
inline std::string* NfcConnectRequest::mutable_remote_name() {
  
  // @@protoc_insertion_point(field_mutable:NfcConnectRequest.remote_name)
  return remote_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NfcConnectRequest::release_remote_name() {
  // @@protoc_insertion_point(field_release:NfcConnectRequest.remote_name)
  
  return remote_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NfcConnectRequest::set_allocated_remote_name(std::string* remote_name) {
  if (remote_name != nullptr) {
    
  } else {
    
  }
  remote_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_name);
  // @@protoc_insertion_point(field_set_allocated:NfcConnectRequest.remote_name)
}

// string remote_id = 2;
inline void NfcConnectRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NfcConnectRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:NfcConnectRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void NfcConnectRequest::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfcConnectRequest.remote_id)
}
inline void NfcConnectRequest::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfcConnectRequest.remote_id)
}
inline void NfcConnectRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfcConnectRequest.remote_id)
}
inline void NfcConnectRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfcConnectRequest.remote_id)
}
inline std::string* NfcConnectRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:NfcConnectRequest.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NfcConnectRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:NfcConnectRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NfcConnectRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:NfcConnectRequest.remote_id)
}

// int32 timeout = 3;
inline void NfcConnectRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NfcConnectRequest::timeout() const {
  // @@protoc_insertion_point(field_get:NfcConnectRequest.timeout)
  return timeout_;
}
inline void NfcConnectRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:NfcConnectRequest.timeout)
}

// bool android_auto_connect = 4;
inline void NfcConnectRequest::clear_android_auto_connect() {
  android_auto_connect_ = false;
}
inline bool NfcConnectRequest::android_auto_connect() const {
  // @@protoc_insertion_point(field_get:NfcConnectRequest.android_auto_connect)
  return android_auto_connect_;
}
inline void NfcConnectRequest::set_android_auto_connect(bool value) {
  
  android_auto_connect_ = value;
  // @@protoc_insertion_point(field_set:NfcConnectRequest.android_auto_connect)
}

// -------------------------------------------------------------------

// NfcDevice

// string remote_id = 1;
inline void NfcDevice::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NfcDevice::remote_id() const {
  // @@protoc_insertion_point(field_get:NfcDevice.remote_id)
  return remote_id_.GetNoArena();
}
inline void NfcDevice::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfcDevice.remote_id)
}
inline void NfcDevice::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfcDevice.remote_id)
}
inline void NfcDevice::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfcDevice.remote_id)
}
inline void NfcDevice::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfcDevice.remote_id)
}
inline std::string* NfcDevice::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:NfcDevice.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NfcDevice::release_remote_id() {
  // @@protoc_insertion_point(field_release:NfcDevice.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NfcDevice::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:NfcDevice.remote_id)
}

// string name = 2;
inline void NfcDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NfcDevice::name() const {
  // @@protoc_insertion_point(field_get:NfcDevice.name)
  return name_.GetNoArena();
}
inline void NfcDevice::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfcDevice.name)
}
inline void NfcDevice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfcDevice.name)
}
inline void NfcDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfcDevice.name)
}
inline void NfcDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfcDevice.name)
}
inline std::string* NfcDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:NfcDevice.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NfcDevice::release_name() {
  // @@protoc_insertion_point(field_release:NfcDevice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NfcDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:NfcDevice.name)
}

// .NfcDevice.Type type = 3;
inline void NfcDevice::clear_type() {
  type_ = 0;
}
inline ::NfcDevice_Type NfcDevice::type() const {
  // @@protoc_insertion_point(field_get:NfcDevice.type)
  return static_cast< ::NfcDevice_Type >(type_);
}
inline void NfcDevice::set_type(::NfcDevice_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:NfcDevice.type)
}

// -------------------------------------------------------------------

// NfcDeviceStateResponse

// string remote_id = 1;
inline void NfcDeviceStateResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NfcDeviceStateResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:NfcDeviceStateResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void NfcDeviceStateResponse::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NfcDeviceStateResponse.remote_id)
}
inline void NfcDeviceStateResponse::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NfcDeviceStateResponse.remote_id)
}
inline void NfcDeviceStateResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NfcDeviceStateResponse.remote_id)
}
inline void NfcDeviceStateResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NfcDeviceStateResponse.remote_id)
}
inline std::string* NfcDeviceStateResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:NfcDeviceStateResponse.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NfcDeviceStateResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:NfcDeviceStateResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NfcDeviceStateResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:NfcDeviceStateResponse.remote_id)
}

// .NfcDeviceStateResponse.NfcDeviceState state = 2;
inline void NfcDeviceStateResponse::clear_state() {
  state_ = 0;
}
inline ::NfcDeviceStateResponse_NfcDeviceState NfcDeviceStateResponse::state() const {
  // @@protoc_insertion_point(field_get:NfcDeviceStateResponse.state)
  return static_cast< ::NfcDeviceStateResponse_NfcDeviceState >(state_);
}
inline void NfcDeviceStateResponse::set_state(::NfcDeviceStateResponse_NfcDeviceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:NfcDeviceStateResponse.state)
}

// int32 deviceID = 3;
inline void NfcDeviceStateResponse::clear_deviceid() {
  deviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NfcDeviceStateResponse::deviceid() const {
  // @@protoc_insertion_point(field_get:NfcDeviceStateResponse.deviceID)
  return deviceid_;
}
inline void NfcDeviceStateResponse::set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:NfcDeviceStateResponse.deviceID)
}

// -------------------------------------------------------------------

// NfcConnectedResponse

// repeated .NfcDevice devices = 1;
inline int NfcConnectedResponse::devices_size() const {
  return devices_.size();
}
inline void NfcConnectedResponse::clear_devices() {
  devices_.Clear();
}
inline ::NfcDevice* NfcConnectedResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:NfcConnectedResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NfcDevice >*
NfcConnectedResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:NfcConnectedResponse.devices)
  return &devices_;
}
inline const ::NfcDevice& NfcConnectedResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:NfcConnectedResponse.devices)
  return devices_.Get(index);
}
inline ::NfcDevice* NfcConnectedResponse::add_devices() {
  // @@protoc_insertion_point(field_add:NfcConnectedResponse.devices)
  return devices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::NfcDevice >&
NfcConnectedResponse::devices() const {
  // @@protoc_insertion_point(field_list:NfcConnectedResponse.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::NfcState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NfcState_State>() {
  return ::NfcState_State_descriptor();
}
template <> struct is_proto_enum< ::NfcDevice_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NfcDevice_Type>() {
  return ::NfcDevice_Type_descriptor();
}
template <> struct is_proto_enum< ::NfcDeviceStateResponse_NfcDeviceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::NfcDeviceStateResponse_NfcDeviceState>() {
  return ::NfcDeviceStateResponse_NfcDeviceState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jubiter_5fnfc_2eproto
