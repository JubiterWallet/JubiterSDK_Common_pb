// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jubiter_bridge.proto

#include "jubiter_bridge.pb.h"
#include "jubiter_bridge.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace AppletBridge {

static const char* AppletBridgeServer_method_names[] = {
  "/AppletBridge.AppletBridgeServer/ListReaders",
  "/AppletBridge.AppletBridgeServer/Connect",
  "/AppletBridge.AppletBridgeServer/Disconnect",
  "/AppletBridge.AppletBridgeServer/SendApdu",
};

std::unique_ptr< AppletBridgeServer::Stub> AppletBridgeServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AppletBridgeServer::Stub> stub(new AppletBridgeServer::Stub(channel));
  return stub;
}

AppletBridgeServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListReaders_(AppletBridgeServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Connect_(AppletBridgeServer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Disconnect_(AppletBridgeServer_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendApdu_(AppletBridgeServer_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AppletBridgeServer::Stub::ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::AppletBridge::ListReadersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListReaders_, context, request, response);
}

void AppletBridgeServer::Stub::experimental_async::ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListReaders_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListReaders_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListReaders_, context, request, response, reactor);
}

void AppletBridgeServer::Stub::experimental_async::ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListReaders_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>* AppletBridgeServer::Stub::AsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::ListReadersResponse>::Create(channel_.get(), cq, rpcmethod_ListReaders_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>* AppletBridgeServer::Stub::PrepareAsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::ListReadersResponse>::Create(channel_.get(), cq, rpcmethod_ListReaders_, context, request, false);
}

::grpc::Status AppletBridgeServer::Stub::Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::AppletBridge::Reader* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Connect_, context, request, response);
}

void AppletBridgeServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

void AppletBridgeServer::Stub::experimental_async::Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Connect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>* AppletBridgeServer::Stub::AsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::Reader>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>* AppletBridgeServer::Stub::PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::Reader>::Create(channel_.get(), cq, rpcmethod_Connect_, context, request, false);
}

::grpc::Status AppletBridgeServer::Stub::Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Disconnect_, context, request, response);
}

void AppletBridgeServer::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

void AppletBridgeServer::Stub::experimental_async::Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Disconnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AppletBridgeServer::Stub::AsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Disconnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AppletBridgeServer::Stub::PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_Disconnect_, context, request, false);
}

::grpc::Status AppletBridgeServer::Stub::SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::AppletBridge::APDUResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendApdu_, context, request, response);
}

void AppletBridgeServer::Stub::experimental_async::SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendApdu_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendApdu_, context, request, response, std::move(f));
}

void AppletBridgeServer::Stub::experimental_async::SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendApdu_, context, request, response, reactor);
}

void AppletBridgeServer::Stub::experimental_async::SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendApdu_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>* AppletBridgeServer::Stub::AsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::APDUResponse>::Create(channel_.get(), cq, rpcmethod_SendApdu_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>* AppletBridgeServer::Stub::PrepareAsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::AppletBridge::APDUResponse>::Create(channel_.get(), cq, rpcmethod_SendApdu_, context, request, false);
}

AppletBridgeServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppletBridgeServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppletBridgeServer::Service, ::google::protobuf::Empty, ::AppletBridge::ListReadersResponse>(
          std::mem_fn(&AppletBridgeServer::Service::ListReaders), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppletBridgeServer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppletBridgeServer::Service, ::AppletBridge::Reader, ::AppletBridge::Reader>(
          std::mem_fn(&AppletBridgeServer::Service::Connect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppletBridgeServer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppletBridgeServer::Service, ::AppletBridge::Reader, ::google::protobuf::Empty>(
          std::mem_fn(&AppletBridgeServer::Service::Disconnect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AppletBridgeServer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AppletBridgeServer::Service, ::AppletBridge::APDURequest, ::AppletBridge::APDUResponse>(
          std::mem_fn(&AppletBridgeServer::Service::SendApdu), this)));
}

AppletBridgeServer::Service::~Service() {
}

::grpc::Status AppletBridgeServer::Service::ListReaders(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppletBridgeServer::Service::Connect(::grpc::ServerContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppletBridgeServer::Service::Disconnect(::grpc::ServerContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AppletBridgeServer::Service::SendApdu(::grpc::ServerContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AppletBridge

