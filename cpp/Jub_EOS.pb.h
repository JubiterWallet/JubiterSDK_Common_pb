// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_EOS.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fEOS_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fEOS_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Jub_Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fEOS_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fEOS_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fEOS_2eproto;
namespace JUB {
namespace Proto {
namespace EOS {
class ActionEOS;
class ActionEOSDefaultTypeInternal;
extern ActionEOSDefaultTypeInternal _ActionEOS_default_instance_;
class ActionListEOS;
class ActionListEOSDefaultTypeInternal;
extern ActionListEOSDefaultTypeInternal _ActionListEOS_default_instance_;
class BuyRamAction;
class BuyRamActionDefaultTypeInternal;
extern BuyRamActionDefaultTypeInternal _BuyRamAction_default_instance_;
class DelegateAction;
class DelegateActionDefaultTypeInternal;
extern DelegateActionDefaultTypeInternal _DelegateAction_default_instance_;
class SellRamAction;
class SellRamActionDefaultTypeInternal;
extern SellRamActionDefaultTypeInternal _SellRamAction_default_instance_;
class TransactionEOS;
class TransactionEOSDefaultTypeInternal;
extern TransactionEOSDefaultTypeInternal _TransactionEOS_default_instance_;
class TransferAction;
class TransferActionDefaultTypeInternal;
extern TransferActionDefaultTypeInternal _TransferAction_default_instance_;
}  // namespace EOS
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::EOS::ActionEOS* Arena::CreateMaybeMessage<::JUB::Proto::EOS::ActionEOS>(Arena*);
template<> ::JUB::Proto::EOS::ActionListEOS* Arena::CreateMaybeMessage<::JUB::Proto::EOS::ActionListEOS>(Arena*);
template<> ::JUB::Proto::EOS::BuyRamAction* Arena::CreateMaybeMessage<::JUB::Proto::EOS::BuyRamAction>(Arena*);
template<> ::JUB::Proto::EOS::DelegateAction* Arena::CreateMaybeMessage<::JUB::Proto::EOS::DelegateAction>(Arena*);
template<> ::JUB::Proto::EOS::SellRamAction* Arena::CreateMaybeMessage<::JUB::Proto::EOS::SellRamAction>(Arena*);
template<> ::JUB::Proto::EOS::TransactionEOS* Arena::CreateMaybeMessage<::JUB::Proto::EOS::TransactionEOS>(Arena*);
template<> ::JUB::Proto::EOS::TransferAction* Arena::CreateMaybeMessage<::JUB::Proto::EOS::TransferAction>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace EOS {

enum ENUM_EOS_ACTION_TYPE : int {
  XFER = 0,
  DELE = 1,
  UNDELE = 2,
  BUYRAM = 3,
  SELLRAM = 4,
  ENUM_EOS_ACTION_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_EOS_ACTION_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_EOS_ACTION_TYPE_IsValid(int value);
constexpr ENUM_EOS_ACTION_TYPE ENUM_EOS_ACTION_TYPE_MIN = XFER;
constexpr ENUM_EOS_ACTION_TYPE ENUM_EOS_ACTION_TYPE_MAX = SELLRAM;
constexpr int ENUM_EOS_ACTION_TYPE_ARRAYSIZE = ENUM_EOS_ACTION_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_EOS_ACTION_TYPE_descriptor();
template<typename T>
inline const std::string& ENUM_EOS_ACTION_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_EOS_ACTION_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_EOS_ACTION_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_EOS_ACTION_TYPE_descriptor(), enum_t_value);
}
inline bool ENUM_EOS_ACTION_TYPE_Parse(
    const std::string& name, ENUM_EOS_ACTION_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_EOS_ACTION_TYPE>(
    ENUM_EOS_ACTION_TYPE_descriptor(), name, value);
}
// ===================================================================

class TransferAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.TransferAction) */ {
 public:
  TransferAction();
  virtual ~TransferAction();

  TransferAction(const TransferAction& from);
  TransferAction(TransferAction&& from) noexcept
    : TransferAction() {
    *this = ::std::move(from);
  }

  inline TransferAction& operator=(const TransferAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferAction& operator=(TransferAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferAction* internal_default_instance() {
    return reinterpret_cast<const TransferAction*>(
               &_TransferAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransferAction& a, TransferAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferAction* New() const final {
    return CreateMaybeMessage<TransferAction>(nullptr);
  }

  TransferAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferAction& from);
  void MergeFrom(const TransferAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.TransferAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kAssetFieldNumber = 3,
    kMemoFieldNumber = 4,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);

  // string to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);

  // string asset = 3;
  void clear_asset();
  const std::string& asset() const;
  void set_asset(const std::string& value);
  void set_asset(std::string&& value);
  void set_asset(const char* value);
  void set_asset(const char* value, size_t size);
  std::string* mutable_asset();
  std::string* release_asset();
  void set_allocated_asset(std::string* asset);

  // string memo = 4;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.TransferAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class DelegateAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.DelegateAction) */ {
 public:
  DelegateAction();
  virtual ~DelegateAction();

  DelegateAction(const DelegateAction& from);
  DelegateAction(DelegateAction&& from) noexcept
    : DelegateAction() {
    *this = ::std::move(from);
  }

  inline DelegateAction& operator=(const DelegateAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegateAction& operator=(DelegateAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegateAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegateAction* internal_default_instance() {
    return reinterpret_cast<const DelegateAction*>(
               &_DelegateAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DelegateAction& a, DelegateAction& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegateAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegateAction* New() const final {
    return CreateMaybeMessage<DelegateAction>(nullptr);
  }

  DelegateAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegateAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegateAction& from);
  void MergeFrom(const DelegateAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegateAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.DelegateAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kReceiverFieldNumber = 2,
    kNetQtyFieldNumber = 3,
    kCpuQtyFieldNumber = 4,
    kStakeFieldNumber = 5,
  };
  // string from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);

  // string receiver = 2;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // string net_qty = 3;
  void clear_net_qty();
  const std::string& net_qty() const;
  void set_net_qty(const std::string& value);
  void set_net_qty(std::string&& value);
  void set_net_qty(const char* value);
  void set_net_qty(const char* value, size_t size);
  std::string* mutable_net_qty();
  std::string* release_net_qty();
  void set_allocated_net_qty(std::string* net_qty);

  // string cpu_qty = 4;
  void clear_cpu_qty();
  const std::string& cpu_qty() const;
  void set_cpu_qty(const std::string& value);
  void set_cpu_qty(std::string&& value);
  void set_cpu_qty(const char* value);
  void set_cpu_qty(const char* value, size_t size);
  std::string* mutable_cpu_qty();
  std::string* release_cpu_qty();
  void set_allocated_cpu_qty(std::string* cpu_qty);

  // bool stake = 5;
  void clear_stake();
  bool stake() const;
  void set_stake(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.DelegateAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr net_qty_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_qty_;
  bool stake_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class BuyRamAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.BuyRamAction) */ {
 public:
  BuyRamAction();
  virtual ~BuyRamAction();

  BuyRamAction(const BuyRamAction& from);
  BuyRamAction(BuyRamAction&& from) noexcept
    : BuyRamAction() {
    *this = ::std::move(from);
  }

  inline BuyRamAction& operator=(const BuyRamAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuyRamAction& operator=(BuyRamAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuyRamAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyRamAction* internal_default_instance() {
    return reinterpret_cast<const BuyRamAction*>(
               &_BuyRamAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BuyRamAction& a, BuyRamAction& b) {
    a.Swap(&b);
  }
  inline void Swap(BuyRamAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuyRamAction* New() const final {
    return CreateMaybeMessage<BuyRamAction>(nullptr);
  }

  BuyRamAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuyRamAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuyRamAction& from);
  void MergeFrom(const BuyRamAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyRamAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.BuyRamAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayerFieldNumber = 1,
    kQuantFieldNumber = 2,
    kReceiverFieldNumber = 3,
  };
  // string payer = 1;
  void clear_payer();
  const std::string& payer() const;
  void set_payer(const std::string& value);
  void set_payer(std::string&& value);
  void set_payer(const char* value);
  void set_payer(const char* value, size_t size);
  std::string* mutable_payer();
  std::string* release_payer();
  void set_allocated_payer(std::string* payer);

  // string quant = 2;
  void clear_quant();
  const std::string& quant() const;
  void set_quant(const std::string& value);
  void set_quant(std::string&& value);
  void set_quant(const char* value);
  void set_quant(const char* value, size_t size);
  std::string* mutable_quant();
  std::string* release_quant();
  void set_allocated_quant(std::string* quant);

  // string receiver = 3;
  void clear_receiver();
  const std::string& receiver() const;
  void set_receiver(const std::string& value);
  void set_receiver(std::string&& value);
  void set_receiver(const char* value);
  void set_receiver(const char* value, size_t size);
  std::string* mutable_receiver();
  std::string* release_receiver();
  void set_allocated_receiver(std::string* receiver);

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.BuyRamAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr quant_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receiver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class SellRamAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.SellRamAction) */ {
 public:
  SellRamAction();
  virtual ~SellRamAction();

  SellRamAction(const SellRamAction& from);
  SellRamAction(SellRamAction&& from) noexcept
    : SellRamAction() {
    *this = ::std::move(from);
  }

  inline SellRamAction& operator=(const SellRamAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline SellRamAction& operator=(SellRamAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SellRamAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SellRamAction* internal_default_instance() {
    return reinterpret_cast<const SellRamAction*>(
               &_SellRamAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SellRamAction& a, SellRamAction& b) {
    a.Swap(&b);
  }
  inline void Swap(SellRamAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SellRamAction* New() const final {
    return CreateMaybeMessage<SellRamAction>(nullptr);
  }

  SellRamAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SellRamAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SellRamAction& from);
  void MergeFrom(const SellRamAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SellRamAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.SellRamAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kByteFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // string byte = 2;
  void clear_byte();
  const std::string& byte() const;
  void set_byte(const std::string& value);
  void set_byte(std::string&& value);
  void set_byte(const char* value);
  void set_byte(const char* value, size_t size);
  std::string* mutable_byte();
  std::string* release_byte();
  void set_allocated_byte(std::string* byte);

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.SellRamAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr byte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class ActionEOS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.ActionEOS) */ {
 public:
  ActionEOS();
  virtual ~ActionEOS();

  ActionEOS(const ActionEOS& from);
  ActionEOS(ActionEOS&& from) noexcept
    : ActionEOS() {
    *this = ::std::move(from);
  }

  inline ActionEOS& operator=(const ActionEOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionEOS& operator=(ActionEOS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionEOS& default_instance();

  enum ActionCase {
    kXferAction = 4,
    kDeleAction = 5,
    kBuyRamAction = 6,
    kSellRamAction = 7,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionEOS* internal_default_instance() {
    return reinterpret_cast<const ActionEOS*>(
               &_ActionEOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActionEOS& a, ActionEOS& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionEOS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionEOS* New() const final {
    return CreateMaybeMessage<ActionEOS>(nullptr);
  }

  ActionEOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionEOS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionEOS& from);
  void MergeFrom(const ActionEOS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionEOS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.ActionEOS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 2,
    kNameFieldNumber = 3,
    kTypeFieldNumber = 1,
    kXferActionFieldNumber = 4,
    kDeleActionFieldNumber = 5,
    kBuyRamActionFieldNumber = 6,
    kSellRamActionFieldNumber = 7,
  };
  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .JUB.Proto.EOS.ENUM_EOS_ACTION_TYPE type = 1;
  void clear_type();
  ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE type() const;
  void set_type(::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE value);

  // .JUB.Proto.EOS.TransferAction xfer_action = 4;
  bool has_xfer_action() const;
  void clear_xfer_action();
  const ::JUB::Proto::EOS::TransferAction& xfer_action() const;
  ::JUB::Proto::EOS::TransferAction* release_xfer_action();
  ::JUB::Proto::EOS::TransferAction* mutable_xfer_action();
  void set_allocated_xfer_action(::JUB::Proto::EOS::TransferAction* xfer_action);

  // .JUB.Proto.EOS.DelegateAction dele_action = 5;
  bool has_dele_action() const;
  void clear_dele_action();
  const ::JUB::Proto::EOS::DelegateAction& dele_action() const;
  ::JUB::Proto::EOS::DelegateAction* release_dele_action();
  ::JUB::Proto::EOS::DelegateAction* mutable_dele_action();
  void set_allocated_dele_action(::JUB::Proto::EOS::DelegateAction* dele_action);

  // .JUB.Proto.EOS.BuyRamAction buy_ram_action = 6;
  bool has_buy_ram_action() const;
  void clear_buy_ram_action();
  const ::JUB::Proto::EOS::BuyRamAction& buy_ram_action() const;
  ::JUB::Proto::EOS::BuyRamAction* release_buy_ram_action();
  ::JUB::Proto::EOS::BuyRamAction* mutable_buy_ram_action();
  void set_allocated_buy_ram_action(::JUB::Proto::EOS::BuyRamAction* buy_ram_action);

  // .JUB.Proto.EOS.SellRamAction sell_ram_action = 7;
  bool has_sell_ram_action() const;
  void clear_sell_ram_action();
  const ::JUB::Proto::EOS::SellRamAction& sell_ram_action() const;
  ::JUB::Proto::EOS::SellRamAction* release_sell_ram_action();
  ::JUB::Proto::EOS::SellRamAction* mutable_sell_ram_action();
  void set_allocated_sell_ram_action(::JUB::Proto::EOS::SellRamAction* sell_ram_action);

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.ActionEOS)
 private:
  class _Internal;
  void set_has_xfer_action();
  void set_has_dele_action();
  void set_has_buy_ram_action();
  void set_has_sell_ram_action();

  inline bool has_action() const;
  inline void clear_has_action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  union ActionUnion {
    ActionUnion() {}
    ::JUB::Proto::EOS::TransferAction* xfer_action_;
    ::JUB::Proto::EOS::DelegateAction* dele_action_;
    ::JUB::Proto::EOS::BuyRamAction* buy_ram_action_;
    ::JUB::Proto::EOS::SellRamAction* sell_ram_action_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class ActionListEOS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.ActionListEOS) */ {
 public:
  ActionListEOS();
  virtual ~ActionListEOS();

  ActionListEOS(const ActionListEOS& from);
  ActionListEOS(ActionListEOS&& from) noexcept
    : ActionListEOS() {
    *this = ::std::move(from);
  }

  inline ActionListEOS& operator=(const ActionListEOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionListEOS& operator=(ActionListEOS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionListEOS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionListEOS* internal_default_instance() {
    return reinterpret_cast<const ActionListEOS*>(
               &_ActionListEOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ActionListEOS& a, ActionListEOS& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionListEOS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionListEOS* New() const final {
    return CreateMaybeMessage<ActionListEOS>(nullptr);
  }

  ActionListEOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionListEOS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionListEOS& from);
  void MergeFrom(const ActionListEOS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionListEOS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.ActionListEOS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 1,
  };
  // repeated .JUB.Proto.EOS.ActionEOS actions = 1;
  int actions_size() const;
  void clear_actions();
  ::JUB::Proto::EOS::ActionEOS* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::EOS::ActionEOS >*
      mutable_actions();
  const ::JUB::Proto::EOS::ActionEOS& actions(int index) const;
  ::JUB::Proto::EOS::ActionEOS* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::EOS::ActionEOS >&
      actions() const;

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.ActionListEOS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::EOS::ActionEOS > actions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// -------------------------------------------------------------------

class TransactionEOS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.EOS.TransactionEOS) */ {
 public:
  TransactionEOS();
  virtual ~TransactionEOS();

  TransactionEOS(const TransactionEOS& from);
  TransactionEOS(TransactionEOS&& from) noexcept
    : TransactionEOS() {
    *this = ::std::move(from);
  }

  inline TransactionEOS& operator=(const TransactionEOS& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionEOS& operator=(TransactionEOS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionEOS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionEOS* internal_default_instance() {
    return reinterpret_cast<const TransactionEOS*>(
               &_TransactionEOS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransactionEOS& a, TransactionEOS& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionEOS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionEOS* New() const final {
    return CreateMaybeMessage<TransactionEOS>(nullptr);
  }

  TransactionEOS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionEOS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionEOS& from);
  void MergeFrom(const TransactionEOS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionEOS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.EOS.TransactionEOS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fEOS_2eproto);
    return ::descriptor_table_Jub_5fEOS_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainIDFieldNumber = 2,
    kExpirationFieldNumber = 3,
    kReferenceBlockIdFieldNumber = 4,
    kReferenceBlockTimeFieldNumber = 5,
    kActionsInJSONFieldNumber = 6,
    kPathFieldNumber = 1,
  };
  // string chainID = 2;
  void clear_chainid();
  const std::string& chainid() const;
  void set_chainid(const std::string& value);
  void set_chainid(std::string&& value);
  void set_chainid(const char* value);
  void set_chainid(const char* value, size_t size);
  std::string* mutable_chainid();
  std::string* release_chainid();
  void set_allocated_chainid(std::string* chainid);

  // string expiration = 3;
  void clear_expiration();
  const std::string& expiration() const;
  void set_expiration(const std::string& value);
  void set_expiration(std::string&& value);
  void set_expiration(const char* value);
  void set_expiration(const char* value, size_t size);
  std::string* mutable_expiration();
  std::string* release_expiration();
  void set_allocated_expiration(std::string* expiration);

  // string referenceBlockId = 4;
  void clear_referenceblockid();
  const std::string& referenceblockid() const;
  void set_referenceblockid(const std::string& value);
  void set_referenceblockid(std::string&& value);
  void set_referenceblockid(const char* value);
  void set_referenceblockid(const char* value, size_t size);
  std::string* mutable_referenceblockid();
  std::string* release_referenceblockid();
  void set_allocated_referenceblockid(std::string* referenceblockid);

  // string referenceBlockTime = 5;
  void clear_referenceblocktime();
  const std::string& referenceblocktime() const;
  void set_referenceblocktime(const std::string& value);
  void set_referenceblocktime(std::string&& value);
  void set_referenceblocktime(const char* value);
  void set_referenceblocktime(const char* value, size_t size);
  std::string* mutable_referenceblocktime();
  std::string* release_referenceblocktime();
  void set_allocated_referenceblocktime(std::string* referenceblocktime);

  // string actionsInJSON = 6;
  void clear_actionsinjson();
  const std::string& actionsinjson() const;
  void set_actionsinjson(const std::string& value);
  void set_actionsinjson(std::string&& value);
  void set_actionsinjson(const char* value);
  void set_actionsinjson(const char* value, size_t size);
  std::string* mutable_actionsinjson();
  std::string* release_actionsinjson();
  void set_allocated_actionsinjson(std::string* actionsinjson);

  // .JUB.Proto.Common.Bip44Path path = 1;
  bool has_path() const;
  void clear_path();
  const ::JUB::Proto::Common::Bip44Path& path() const;
  ::JUB::Proto::Common::Bip44Path* release_path();
  ::JUB::Proto::Common::Bip44Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip44Path* path);

  // @@protoc_insertion_point(class_scope:JUB.Proto.EOS.TransactionEOS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr expiration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referenceblockid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr referenceblocktime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr actionsinjson_;
  ::JUB::Proto::Common::Bip44Path* path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fEOS_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferAction

// string from = 1;
inline void TransferAction::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferAction::from() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransferAction.from)
  return from_.GetNoArena();
}
inline void TransferAction::set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransferAction.from)
}
inline void TransferAction::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransferAction.from)
}
inline void TransferAction::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransferAction.from)
}
inline void TransferAction::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransferAction.from)
}
inline std::string* TransferAction::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransferAction.from)
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferAction::release_from() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransferAction.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAction::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransferAction.from)
}

// string to = 2;
inline void TransferAction::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferAction::to() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransferAction.to)
  return to_.GetNoArena();
}
inline void TransferAction::set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransferAction.to)
}
inline void TransferAction::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransferAction.to)
}
inline void TransferAction::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransferAction.to)
}
inline void TransferAction::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransferAction.to)
}
inline std::string* TransferAction::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransferAction.to)
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferAction::release_to() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransferAction.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAction::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransferAction.to)
}

// string asset = 3;
inline void TransferAction::clear_asset() {
  asset_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferAction::asset() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransferAction.asset)
  return asset_.GetNoArena();
}
inline void TransferAction::set_asset(const std::string& value) {
  
  asset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransferAction.asset)
}
inline void TransferAction::set_asset(std::string&& value) {
  
  asset_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransferAction.asset)
}
inline void TransferAction::set_asset(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransferAction.asset)
}
inline void TransferAction::set_asset(const char* value, size_t size) {
  
  asset_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransferAction.asset)
}
inline std::string* TransferAction::mutable_asset() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransferAction.asset)
  return asset_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferAction::release_asset() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransferAction.asset)
  
  return asset_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAction::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {
    
  } else {
    
  }
  asset_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransferAction.asset)
}

// string memo = 4;
inline void TransferAction::clear_memo() {
  memo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferAction::memo() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransferAction.memo)
  return memo_.GetNoArena();
}
inline void TransferAction::set_memo(const std::string& value) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransferAction.memo)
}
inline void TransferAction::set_memo(std::string&& value) {
  
  memo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransferAction.memo)
}
inline void TransferAction::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransferAction.memo)
}
inline void TransferAction::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransferAction.memo)
}
inline std::string* TransferAction::mutable_memo() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransferAction.memo)
  return memo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferAction::release_memo() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransferAction.memo)
  
  return memo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferAction::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransferAction.memo)
}

// -------------------------------------------------------------------

// DelegateAction

// string from = 1;
inline void DelegateAction::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegateAction::from() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.DelegateAction.from)
  return from_.GetNoArena();
}
inline void DelegateAction::set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.DelegateAction.from)
}
inline void DelegateAction::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.DelegateAction.from)
}
inline void DelegateAction::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.DelegateAction.from)
}
inline void DelegateAction::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.DelegateAction.from)
}
inline std::string* DelegateAction::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.DelegateAction.from)
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegateAction::release_from() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.DelegateAction.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegateAction::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.DelegateAction.from)
}

// string receiver = 2;
inline void DelegateAction::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegateAction::receiver() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.DelegateAction.receiver)
  return receiver_.GetNoArena();
}
inline void DelegateAction::set_receiver(const std::string& value) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.DelegateAction.receiver)
}
inline void DelegateAction::set_receiver(std::string&& value) {
  
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.DelegateAction.receiver)
}
inline void DelegateAction::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.DelegateAction.receiver)
}
inline void DelegateAction::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.DelegateAction.receiver)
}
inline std::string* DelegateAction::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.DelegateAction.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegateAction::release_receiver() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.DelegateAction.receiver)
  
  return receiver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegateAction::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.DelegateAction.receiver)
}

// string net_qty = 3;
inline void DelegateAction::clear_net_qty() {
  net_qty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegateAction::net_qty() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.DelegateAction.net_qty)
  return net_qty_.GetNoArena();
}
inline void DelegateAction::set_net_qty(const std::string& value) {
  
  net_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.DelegateAction.net_qty)
}
inline void DelegateAction::set_net_qty(std::string&& value) {
  
  net_qty_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.DelegateAction.net_qty)
}
inline void DelegateAction::set_net_qty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  net_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.DelegateAction.net_qty)
}
inline void DelegateAction::set_net_qty(const char* value, size_t size) {
  
  net_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.DelegateAction.net_qty)
}
inline std::string* DelegateAction::mutable_net_qty() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.DelegateAction.net_qty)
  return net_qty_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegateAction::release_net_qty() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.DelegateAction.net_qty)
  
  return net_qty_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegateAction::set_allocated_net_qty(std::string* net_qty) {
  if (net_qty != nullptr) {
    
  } else {
    
  }
  net_qty_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), net_qty);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.DelegateAction.net_qty)
}

// string cpu_qty = 4;
inline void DelegateAction::clear_cpu_qty() {
  cpu_qty_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegateAction::cpu_qty() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.DelegateAction.cpu_qty)
  return cpu_qty_.GetNoArena();
}
inline void DelegateAction::set_cpu_qty(const std::string& value) {
  
  cpu_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.DelegateAction.cpu_qty)
}
inline void DelegateAction::set_cpu_qty(std::string&& value) {
  
  cpu_qty_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.DelegateAction.cpu_qty)
}
inline void DelegateAction::set_cpu_qty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cpu_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.DelegateAction.cpu_qty)
}
inline void DelegateAction::set_cpu_qty(const char* value, size_t size) {
  
  cpu_qty_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.DelegateAction.cpu_qty)
}
inline std::string* DelegateAction::mutable_cpu_qty() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.DelegateAction.cpu_qty)
  return cpu_qty_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegateAction::release_cpu_qty() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.DelegateAction.cpu_qty)
  
  return cpu_qty_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegateAction::set_allocated_cpu_qty(std::string* cpu_qty) {
  if (cpu_qty != nullptr) {
    
  } else {
    
  }
  cpu_qty_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu_qty);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.DelegateAction.cpu_qty)
}

// bool stake = 5;
inline void DelegateAction::clear_stake() {
  stake_ = false;
}
inline bool DelegateAction::stake() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.DelegateAction.stake)
  return stake_;
}
inline void DelegateAction::set_stake(bool value) {
  
  stake_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.DelegateAction.stake)
}

// -------------------------------------------------------------------

// BuyRamAction

// string payer = 1;
inline void BuyRamAction::clear_payer() {
  payer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuyRamAction::payer() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.BuyRamAction.payer)
  return payer_.GetNoArena();
}
inline void BuyRamAction::set_payer(const std::string& value) {
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.BuyRamAction.payer)
}
inline void BuyRamAction::set_payer(std::string&& value) {
  
  payer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.BuyRamAction.payer)
}
inline void BuyRamAction::set_payer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.BuyRamAction.payer)
}
inline void BuyRamAction::set_payer(const char* value, size_t size) {
  
  payer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.BuyRamAction.payer)
}
inline std::string* BuyRamAction::mutable_payer() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.BuyRamAction.payer)
  return payer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuyRamAction::release_payer() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.BuyRamAction.payer)
  
  return payer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuyRamAction::set_allocated_payer(std::string* payer) {
  if (payer != nullptr) {
    
  } else {
    
  }
  payer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payer);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.BuyRamAction.payer)
}

// string quant = 2;
inline void BuyRamAction::clear_quant() {
  quant_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuyRamAction::quant() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.BuyRamAction.quant)
  return quant_.GetNoArena();
}
inline void BuyRamAction::set_quant(const std::string& value) {
  
  quant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.BuyRamAction.quant)
}
inline void BuyRamAction::set_quant(std::string&& value) {
  
  quant_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.BuyRamAction.quant)
}
inline void BuyRamAction::set_quant(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  quant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.BuyRamAction.quant)
}
inline void BuyRamAction::set_quant(const char* value, size_t size) {
  
  quant_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.BuyRamAction.quant)
}
inline std::string* BuyRamAction::mutable_quant() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.BuyRamAction.quant)
  return quant_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuyRamAction::release_quant() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.BuyRamAction.quant)
  
  return quant_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuyRamAction::set_allocated_quant(std::string* quant) {
  if (quant != nullptr) {
    
  } else {
    
  }
  quant_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), quant);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.BuyRamAction.quant)
}

// string receiver = 3;
inline void BuyRamAction::clear_receiver() {
  receiver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BuyRamAction::receiver() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.BuyRamAction.receiver)
  return receiver_.GetNoArena();
}
inline void BuyRamAction::set_receiver(const std::string& value) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.BuyRamAction.receiver)
}
inline void BuyRamAction::set_receiver(std::string&& value) {
  
  receiver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.BuyRamAction.receiver)
}
inline void BuyRamAction::set_receiver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.BuyRamAction.receiver)
}
inline void BuyRamAction::set_receiver(const char* value, size_t size) {
  
  receiver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.BuyRamAction.receiver)
}
inline std::string* BuyRamAction::mutable_receiver() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.BuyRamAction.receiver)
  return receiver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BuyRamAction::release_receiver() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.BuyRamAction.receiver)
  
  return receiver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BuyRamAction::set_allocated_receiver(std::string* receiver) {
  if (receiver != nullptr) {
    
  } else {
    
  }
  receiver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), receiver);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.BuyRamAction.receiver)
}

// -------------------------------------------------------------------

// SellRamAction

// string account = 1;
inline void SellRamAction::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SellRamAction::account() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.SellRamAction.account)
  return account_.GetNoArena();
}
inline void SellRamAction::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.SellRamAction.account)
}
inline void SellRamAction::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.SellRamAction.account)
}
inline void SellRamAction::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.SellRamAction.account)
}
inline void SellRamAction::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.SellRamAction.account)
}
inline std::string* SellRamAction::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.SellRamAction.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SellRamAction::release_account() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.SellRamAction.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SellRamAction::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.SellRamAction.account)
}

// string byte = 2;
inline void SellRamAction::clear_byte() {
  byte_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SellRamAction::byte() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.SellRamAction.byte)
  return byte_.GetNoArena();
}
inline void SellRamAction::set_byte(const std::string& value) {
  
  byte_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.SellRamAction.byte)
}
inline void SellRamAction::set_byte(std::string&& value) {
  
  byte_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.SellRamAction.byte)
}
inline void SellRamAction::set_byte(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  byte_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.SellRamAction.byte)
}
inline void SellRamAction::set_byte(const char* value, size_t size) {
  
  byte_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.SellRamAction.byte)
}
inline std::string* SellRamAction::mutable_byte() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.SellRamAction.byte)
  return byte_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SellRamAction::release_byte() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.SellRamAction.byte)
  
  return byte_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SellRamAction::set_allocated_byte(std::string* byte) {
  if (byte != nullptr) {
    
  } else {
    
  }
  byte_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), byte);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.SellRamAction.byte)
}

// -------------------------------------------------------------------

// ActionEOS

// .JUB.Proto.EOS.ENUM_EOS_ACTION_TYPE type = 1;
inline void ActionEOS::clear_type() {
  type_ = 0;
}
inline ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE ActionEOS::type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.type)
  return static_cast< ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE >(type_);
}
inline void ActionEOS::set_type(::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.ActionEOS.type)
}

// string currency = 2;
inline void ActionEOS::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActionEOS::currency() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.currency)
  return currency_.GetNoArena();
}
inline void ActionEOS::set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.ActionEOS.currency)
}
inline void ActionEOS::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.ActionEOS.currency)
}
inline void ActionEOS::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.ActionEOS.currency)
}
inline void ActionEOS::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.ActionEOS.currency)
}
inline std::string* ActionEOS::mutable_currency() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.currency)
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActionEOS::release_currency() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActionEOS::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.ActionEOS.currency)
}

// string name = 3;
inline void ActionEOS::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActionEOS::name() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.name)
  return name_.GetNoArena();
}
inline void ActionEOS::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.ActionEOS.name)
}
inline void ActionEOS::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.ActionEOS.name)
}
inline void ActionEOS::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.ActionEOS.name)
}
inline void ActionEOS::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.ActionEOS.name)
}
inline std::string* ActionEOS::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActionEOS::release_name() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActionEOS::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.ActionEOS.name)
}

// .JUB.Proto.EOS.TransferAction xfer_action = 4;
inline bool ActionEOS::has_xfer_action() const {
  return action_case() == kXferAction;
}
inline void ActionEOS::set_has_xfer_action() {
  _oneof_case_[0] = kXferAction;
}
inline void ActionEOS::clear_xfer_action() {
  if (has_xfer_action()) {
    delete action_.xfer_action_;
    clear_has_action();
  }
}
inline ::JUB::Proto::EOS::TransferAction* ActionEOS::release_xfer_action() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.xfer_action)
  if (has_xfer_action()) {
    clear_has_action();
      ::JUB::Proto::EOS::TransferAction* temp = action_.xfer_action_;
    action_.xfer_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JUB::Proto::EOS::TransferAction& ActionEOS::xfer_action() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.xfer_action)
  return has_xfer_action()
      ? *action_.xfer_action_
      : *reinterpret_cast< ::JUB::Proto::EOS::TransferAction*>(&::JUB::Proto::EOS::_TransferAction_default_instance_);
}
inline ::JUB::Proto::EOS::TransferAction* ActionEOS::mutable_xfer_action() {
  if (!has_xfer_action()) {
    clear_action();
    set_has_xfer_action();
    action_.xfer_action_ = CreateMaybeMessage< ::JUB::Proto::EOS::TransferAction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.xfer_action)
  return action_.xfer_action_;
}

// .JUB.Proto.EOS.DelegateAction dele_action = 5;
inline bool ActionEOS::has_dele_action() const {
  return action_case() == kDeleAction;
}
inline void ActionEOS::set_has_dele_action() {
  _oneof_case_[0] = kDeleAction;
}
inline void ActionEOS::clear_dele_action() {
  if (has_dele_action()) {
    delete action_.dele_action_;
    clear_has_action();
  }
}
inline ::JUB::Proto::EOS::DelegateAction* ActionEOS::release_dele_action() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.dele_action)
  if (has_dele_action()) {
    clear_has_action();
      ::JUB::Proto::EOS::DelegateAction* temp = action_.dele_action_;
    action_.dele_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JUB::Proto::EOS::DelegateAction& ActionEOS::dele_action() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.dele_action)
  return has_dele_action()
      ? *action_.dele_action_
      : *reinterpret_cast< ::JUB::Proto::EOS::DelegateAction*>(&::JUB::Proto::EOS::_DelegateAction_default_instance_);
}
inline ::JUB::Proto::EOS::DelegateAction* ActionEOS::mutable_dele_action() {
  if (!has_dele_action()) {
    clear_action();
    set_has_dele_action();
    action_.dele_action_ = CreateMaybeMessage< ::JUB::Proto::EOS::DelegateAction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.dele_action)
  return action_.dele_action_;
}

// .JUB.Proto.EOS.BuyRamAction buy_ram_action = 6;
inline bool ActionEOS::has_buy_ram_action() const {
  return action_case() == kBuyRamAction;
}
inline void ActionEOS::set_has_buy_ram_action() {
  _oneof_case_[0] = kBuyRamAction;
}
inline void ActionEOS::clear_buy_ram_action() {
  if (has_buy_ram_action()) {
    delete action_.buy_ram_action_;
    clear_has_action();
  }
}
inline ::JUB::Proto::EOS::BuyRamAction* ActionEOS::release_buy_ram_action() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.buy_ram_action)
  if (has_buy_ram_action()) {
    clear_has_action();
      ::JUB::Proto::EOS::BuyRamAction* temp = action_.buy_ram_action_;
    action_.buy_ram_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JUB::Proto::EOS::BuyRamAction& ActionEOS::buy_ram_action() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.buy_ram_action)
  return has_buy_ram_action()
      ? *action_.buy_ram_action_
      : *reinterpret_cast< ::JUB::Proto::EOS::BuyRamAction*>(&::JUB::Proto::EOS::_BuyRamAction_default_instance_);
}
inline ::JUB::Proto::EOS::BuyRamAction* ActionEOS::mutable_buy_ram_action() {
  if (!has_buy_ram_action()) {
    clear_action();
    set_has_buy_ram_action();
    action_.buy_ram_action_ = CreateMaybeMessage< ::JUB::Proto::EOS::BuyRamAction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.buy_ram_action)
  return action_.buy_ram_action_;
}

// .JUB.Proto.EOS.SellRamAction sell_ram_action = 7;
inline bool ActionEOS::has_sell_ram_action() const {
  return action_case() == kSellRamAction;
}
inline void ActionEOS::set_has_sell_ram_action() {
  _oneof_case_[0] = kSellRamAction;
}
inline void ActionEOS::clear_sell_ram_action() {
  if (has_sell_ram_action()) {
    delete action_.sell_ram_action_;
    clear_has_action();
  }
}
inline ::JUB::Proto::EOS::SellRamAction* ActionEOS::release_sell_ram_action() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.ActionEOS.sell_ram_action)
  if (has_sell_ram_action()) {
    clear_has_action();
      ::JUB::Proto::EOS::SellRamAction* temp = action_.sell_ram_action_;
    action_.sell_ram_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JUB::Proto::EOS::SellRamAction& ActionEOS::sell_ram_action() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionEOS.sell_ram_action)
  return has_sell_ram_action()
      ? *action_.sell_ram_action_
      : *reinterpret_cast< ::JUB::Proto::EOS::SellRamAction*>(&::JUB::Proto::EOS::_SellRamAction_default_instance_);
}
inline ::JUB::Proto::EOS::SellRamAction* ActionEOS::mutable_sell_ram_action() {
  if (!has_sell_ram_action()) {
    clear_action();
    set_has_sell_ram_action();
    action_.sell_ram_action_ = CreateMaybeMessage< ::JUB::Proto::EOS::SellRamAction >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionEOS.sell_ram_action)
  return action_.sell_ram_action_;
}

inline bool ActionEOS::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ActionEOS::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ActionEOS::ActionCase ActionEOS::action_case() const {
  return ActionEOS::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActionListEOS

// repeated .JUB.Proto.EOS.ActionEOS actions = 1;
inline int ActionListEOS::actions_size() const {
  return actions_.size();
}
inline void ActionListEOS::clear_actions() {
  actions_.Clear();
}
inline ::JUB::Proto::EOS::ActionEOS* ActionListEOS::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.ActionListEOS.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::EOS::ActionEOS >*
ActionListEOS::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.EOS.ActionListEOS.actions)
  return &actions_;
}
inline const ::JUB::Proto::EOS::ActionEOS& ActionListEOS::actions(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.ActionListEOS.actions)
  return actions_.Get(index);
}
inline ::JUB::Proto::EOS::ActionEOS* ActionListEOS::add_actions() {
  // @@protoc_insertion_point(field_add:JUB.Proto.EOS.ActionListEOS.actions)
  return actions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::EOS::ActionEOS >&
ActionListEOS::actions() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.EOS.ActionListEOS.actions)
  return actions_;
}

// -------------------------------------------------------------------

// TransactionEOS

// .JUB.Proto.Common.Bip44Path path = 1;
inline bool TransactionEOS::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline const ::JUB::Proto::Common::Bip44Path& TransactionEOS::path() const {
  const ::JUB::Proto::Common::Bip44Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip44Path*>(
      &::JUB::Proto::Common::_Bip44Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip44Path* TransactionEOS::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.path)
  
  ::JUB::Proto::Common::Bip44Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Common::Bip44Path* TransactionEOS::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Common::Bip44Path>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.path)
  return path_;
}
inline void TransactionEOS::set_allocated_path(::JUB::Proto::Common::Bip44Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.path)
}

// string chainID = 2;
inline void TransactionEOS::clear_chainid() {
  chainid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionEOS::chainid() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.chainID)
  return chainid_.GetNoArena();
}
inline void TransactionEOS::set_chainid(const std::string& value) {
  
  chainid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransactionEOS.chainID)
}
inline void TransactionEOS::set_chainid(std::string&& value) {
  
  chainid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransactionEOS.chainID)
}
inline void TransactionEOS::set_chainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chainid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransactionEOS.chainID)
}
inline void TransactionEOS::set_chainid(const char* value, size_t size) {
  
  chainid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransactionEOS.chainID)
}
inline std::string* TransactionEOS::mutable_chainid() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.chainID)
  return chainid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionEOS::release_chainid() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.chainID)
  
  return chainid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEOS::set_allocated_chainid(std::string* chainid) {
  if (chainid != nullptr) {
    
  } else {
    
  }
  chainid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chainid);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.chainID)
}

// string expiration = 3;
inline void TransactionEOS::clear_expiration() {
  expiration_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionEOS::expiration() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.expiration)
  return expiration_.GetNoArena();
}
inline void TransactionEOS::set_expiration(const std::string& value) {
  
  expiration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransactionEOS.expiration)
}
inline void TransactionEOS::set_expiration(std::string&& value) {
  
  expiration_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransactionEOS.expiration)
}
inline void TransactionEOS::set_expiration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expiration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransactionEOS.expiration)
}
inline void TransactionEOS::set_expiration(const char* value, size_t size) {
  
  expiration_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransactionEOS.expiration)
}
inline std::string* TransactionEOS::mutable_expiration() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.expiration)
  return expiration_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionEOS::release_expiration() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.expiration)
  
  return expiration_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEOS::set_allocated_expiration(std::string* expiration) {
  if (expiration != nullptr) {
    
  } else {
    
  }
  expiration_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), expiration);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.expiration)
}

// string referenceBlockId = 4;
inline void TransactionEOS::clear_referenceblockid() {
  referenceblockid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionEOS::referenceblockid() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
  return referenceblockid_.GetNoArena();
}
inline void TransactionEOS::set_referenceblockid(const std::string& value) {
  
  referenceblockid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
}
inline void TransactionEOS::set_referenceblockid(std::string&& value) {
  
  referenceblockid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
}
inline void TransactionEOS::set_referenceblockid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referenceblockid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
}
inline void TransactionEOS::set_referenceblockid(const char* value, size_t size) {
  
  referenceblockid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
}
inline std::string* TransactionEOS::mutable_referenceblockid() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
  return referenceblockid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionEOS::release_referenceblockid() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
  
  return referenceblockid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEOS::set_allocated_referenceblockid(std::string* referenceblockid) {
  if (referenceblockid != nullptr) {
    
  } else {
    
  }
  referenceblockid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referenceblockid);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.referenceBlockId)
}

// string referenceBlockTime = 5;
inline void TransactionEOS::clear_referenceblocktime() {
  referenceblocktime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionEOS::referenceblocktime() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
  return referenceblocktime_.GetNoArena();
}
inline void TransactionEOS::set_referenceblocktime(const std::string& value) {
  
  referenceblocktime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
}
inline void TransactionEOS::set_referenceblocktime(std::string&& value) {
  
  referenceblocktime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
}
inline void TransactionEOS::set_referenceblocktime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  referenceblocktime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
}
inline void TransactionEOS::set_referenceblocktime(const char* value, size_t size) {
  
  referenceblocktime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
}
inline std::string* TransactionEOS::mutable_referenceblocktime() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
  return referenceblocktime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionEOS::release_referenceblocktime() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
  
  return referenceblocktime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEOS::set_allocated_referenceblocktime(std::string* referenceblocktime) {
  if (referenceblocktime != nullptr) {
    
  } else {
    
  }
  referenceblocktime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), referenceblocktime);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.referenceBlockTime)
}

// string actionsInJSON = 6;
inline void TransactionEOS::clear_actionsinjson() {
  actionsinjson_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionEOS::actionsinjson() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
  return actionsinjson_.GetNoArena();
}
inline void TransactionEOS::set_actionsinjson(const std::string& value) {
  
  actionsinjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
}
inline void TransactionEOS::set_actionsinjson(std::string&& value) {
  
  actionsinjson_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
}
inline void TransactionEOS::set_actionsinjson(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  actionsinjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
}
inline void TransactionEOS::set_actionsinjson(const char* value, size_t size) {
  
  actionsinjson_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
}
inline std::string* TransactionEOS::mutable_actionsinjson() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
  return actionsinjson_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionEOS::release_actionsinjson() {
  // @@protoc_insertion_point(field_release:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
  
  return actionsinjson_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionEOS::set_allocated_actionsinjson(std::string* actionsinjson) {
  if (actionsinjson != nullptr) {
    
  } else {
    
  }
  actionsinjson_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), actionsinjson);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.EOS.TransactionEOS.actionsInJSON)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EOS
}  // namespace Proto
}  // namespace JUB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE>() {
  return ::JUB::Proto::EOS::ENUM_EOS_ACTION_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fEOS_2eproto
