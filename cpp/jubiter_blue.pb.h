// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiter_blue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jubiter_5fblue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jubiter_5fblue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jubiter_5fblue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jubiter_5fblue_2eproto;
class BluetoothAdvertisementData;
class BluetoothAdvertisementDataDefaultTypeInternal;
extern BluetoothAdvertisementDataDefaultTypeInternal _BluetoothAdvertisementData_default_instance_;
class BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse;
class BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal;
extern BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal _BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
class BluetoothAdvertisementData_ServiceDataEntry_DoNotUse;
class BluetoothAdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal;
extern BluetoothAdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal _BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
class BluetoothConnectRequest;
class BluetoothConnectRequestDefaultTypeInternal;
extern BluetoothConnectRequestDefaultTypeInternal _BluetoothConnectRequest_default_instance_;
class BluetoothConnectedResponse;
class BluetoothConnectedResponseDefaultTypeInternal;
extern BluetoothConnectedResponseDefaultTypeInternal _BluetoothConnectedResponse_default_instance_;
class BluetoothDevice;
class BluetoothDeviceDefaultTypeInternal;
extern BluetoothDeviceDefaultTypeInternal _BluetoothDevice_default_instance_;
class BluetoothDeviceStateResponse;
class BluetoothDeviceStateResponseDefaultTypeInternal;
extern BluetoothDeviceStateResponseDefaultTypeInternal _BluetoothDeviceStateResponse_default_instance_;
class BluetoothScanResult;
class BluetoothScanResultDefaultTypeInternal;
extern BluetoothScanResultDefaultTypeInternal _BluetoothScanResult_default_instance_;
class BluetoothState;
class BluetoothStateDefaultTypeInternal;
extern BluetoothStateDefaultTypeInternal _BluetoothState_default_instance_;
class EnrollFpState;
class EnrollFpStateDefaultTypeInternal;
extern EnrollFpStateDefaultTypeInternal _EnrollFpState_default_instance_;
class Int32Value;
class Int32ValueDefaultTypeInternal;
extern Int32ValueDefaultTypeInternal _Int32Value_default_instance_;
class ScanSettings;
class ScanSettingsDefaultTypeInternal;
extern ScanSettingsDefaultTypeInternal _ScanSettings_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BluetoothAdvertisementData* Arena::CreateMaybeMessage<::BluetoothAdvertisementData>(Arena*);
template<> ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse* Arena::CreateMaybeMessage<::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse>(Arena*);
template<> ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse* Arena::CreateMaybeMessage<::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse>(Arena*);
template<> ::BluetoothConnectRequest* Arena::CreateMaybeMessage<::BluetoothConnectRequest>(Arena*);
template<> ::BluetoothConnectedResponse* Arena::CreateMaybeMessage<::BluetoothConnectedResponse>(Arena*);
template<> ::BluetoothDevice* Arena::CreateMaybeMessage<::BluetoothDevice>(Arena*);
template<> ::BluetoothDeviceStateResponse* Arena::CreateMaybeMessage<::BluetoothDeviceStateResponse>(Arena*);
template<> ::BluetoothScanResult* Arena::CreateMaybeMessage<::BluetoothScanResult>(Arena*);
template<> ::BluetoothState* Arena::CreateMaybeMessage<::BluetoothState>(Arena*);
template<> ::EnrollFpState* Arena::CreateMaybeMessage<::EnrollFpState>(Arena*);
template<> ::Int32Value* Arena::CreateMaybeMessage<::Int32Value>(Arena*);
template<> ::ScanSettings* Arena::CreateMaybeMessage<::ScanSettings>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum BluetoothState_State : int {
  BluetoothState_State_UNKNOWN = 0,
  BluetoothState_State_UNAVAILABLE = 1,
  BluetoothState_State_UNAUTHORIZED = 2,
  BluetoothState_State_TURNING_ON = 3,
  BluetoothState_State_ON = 4,
  BluetoothState_State_TURNING_OFF = 5,
  BluetoothState_State_OFF = 6,
  BluetoothState_State_BluetoothState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BluetoothState_State_BluetoothState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BluetoothState_State_IsValid(int value);
constexpr BluetoothState_State BluetoothState_State_State_MIN = BluetoothState_State_UNKNOWN;
constexpr BluetoothState_State BluetoothState_State_State_MAX = BluetoothState_State_OFF;
constexpr int BluetoothState_State_State_ARRAYSIZE = BluetoothState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothState_State_descriptor();
template<typename T>
inline const std::string& BluetoothState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BluetoothState_State_descriptor(), enum_t_value);
}
inline bool BluetoothState_State_Parse(
    const std::string& name, BluetoothState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BluetoothState_State>(
    BluetoothState_State_descriptor(), name, value);
}
enum BluetoothDevice_Type : int {
  BluetoothDevice_Type_UNKNOWN = 0,
  BluetoothDevice_Type_CLASSIC = 1,
  BluetoothDevice_Type_LE = 2,
  BluetoothDevice_Type_DUAL = 3,
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BluetoothDevice_Type_BluetoothDevice_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BluetoothDevice_Type_IsValid(int value);
constexpr BluetoothDevice_Type BluetoothDevice_Type_Type_MIN = BluetoothDevice_Type_UNKNOWN;
constexpr BluetoothDevice_Type BluetoothDevice_Type_Type_MAX = BluetoothDevice_Type_DUAL;
constexpr int BluetoothDevice_Type_Type_ARRAYSIZE = BluetoothDevice_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothDevice_Type_descriptor();
template<typename T>
inline const std::string& BluetoothDevice_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothDevice_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothDevice_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BluetoothDevice_Type_descriptor(), enum_t_value);
}
inline bool BluetoothDevice_Type_Parse(
    const std::string& name, BluetoothDevice_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BluetoothDevice_Type>(
    BluetoothDevice_Type_descriptor(), name, value);
}
enum BluetoothDeviceStateResponse_BluetoothDeviceState : int {
  BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTED = 0,
  BluetoothDeviceStateResponse_BluetoothDeviceState_CONNECTING = 1,
  BluetoothDeviceStateResponse_BluetoothDeviceState_CONNECTED = 2,
  BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTING = 3,
  BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceStateResponse_BluetoothDeviceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceStateResponse_BluetoothDeviceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BluetoothDeviceStateResponse_BluetoothDeviceState_IsValid(int value);
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN = BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX = BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
constexpr int BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE = BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor();
template<typename T>
inline const std::string& BluetoothDeviceStateResponse_BluetoothDeviceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BluetoothDeviceStateResponse_BluetoothDeviceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BluetoothDeviceStateResponse_BluetoothDeviceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor(), enum_t_value);
}
inline bool BluetoothDeviceStateResponse_BluetoothDeviceState_Parse(
    const std::string& name, BluetoothDeviceStateResponse_BluetoothDeviceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BluetoothDeviceStateResponse_BluetoothDeviceState>(
    BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor(), name, value);
}
enum FpIdVerifyMode : int {
  FP_ID_VERIFY_MODE_UNSPECIFIED = 0,
  FP_ID_VERIFY_MODE_DEVICE = 1,
  FP_ID_VERIFY_MODE_9GRIDS = 2,
  FP_ID_VERIFY_MODE_APDU = 3,
  FP_ID_VERIFY_MODE_FPGT = 4,
  FpIdVerifyMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FpIdVerifyMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FpIdVerifyMode_IsValid(int value);
constexpr FpIdVerifyMode FpIdVerifyMode_MIN = FP_ID_VERIFY_MODE_UNSPECIFIED;
constexpr FpIdVerifyMode FpIdVerifyMode_MAX = FP_ID_VERIFY_MODE_FPGT;
constexpr int FpIdVerifyMode_ARRAYSIZE = FpIdVerifyMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FpIdVerifyMode_descriptor();
template<typename T>
inline const std::string& FpIdVerifyMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FpIdVerifyMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FpIdVerifyMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FpIdVerifyMode_descriptor(), enum_t_value);
}
inline bool FpIdVerifyMode_Parse(
    const std::string& name, FpIdVerifyMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FpIdVerifyMode>(
    FpIdVerifyMode_descriptor(), name, value);
}
// ===================================================================

class Int32Value :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Int32Value) */ {
 public:
  Int32Value();
  virtual ~Int32Value();

  Int32Value(const Int32Value& from);
  Int32Value(Int32Value&& from) noexcept
    : Int32Value() {
    *this = ::std::move(from);
  }

  inline Int32Value& operator=(const Int32Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Int32Value& operator=(Int32Value&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Int32Value& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Int32Value* internal_default_instance() {
    return reinterpret_cast<const Int32Value*>(
               &_Int32Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Int32Value& a, Int32Value& b) {
    a.Swap(&b);
  }
  inline void Swap(Int32Value* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Int32Value* New() const final {
    return CreateMaybeMessage<Int32Value>(nullptr);
  }

  Int32Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Int32Value>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Int32Value& from);
  void MergeFrom(const Int32Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Int32Value* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Int32Value";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Int32Value)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothState) */ {
 public:
  BluetoothState();
  virtual ~BluetoothState();

  BluetoothState(const BluetoothState& from);
  BluetoothState(BluetoothState&& from) noexcept
    : BluetoothState() {
    *this = ::std::move(from);
  }

  inline BluetoothState& operator=(const BluetoothState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothState& operator=(BluetoothState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothState* internal_default_instance() {
    return reinterpret_cast<const BluetoothState*>(
               &_BluetoothState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BluetoothState& a, BluetoothState& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothState* New() const final {
    return CreateMaybeMessage<BluetoothState>(nullptr);
  }

  BluetoothState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothState& from);
  void MergeFrom(const BluetoothState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BluetoothState_State State;
  static constexpr State UNKNOWN =
    BluetoothState_State_UNKNOWN;
  static constexpr State UNAVAILABLE =
    BluetoothState_State_UNAVAILABLE;
  static constexpr State UNAUTHORIZED =
    BluetoothState_State_UNAUTHORIZED;
  static constexpr State TURNING_ON =
    BluetoothState_State_TURNING_ON;
  static constexpr State ON =
    BluetoothState_State_ON;
  static constexpr State TURNING_OFF =
    BluetoothState_State_TURNING_OFF;
  static constexpr State OFF =
    BluetoothState_State_OFF;
  static inline bool State_IsValid(int value) {
    return BluetoothState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    BluetoothState_State_State_MIN;
  static constexpr State State_MAX =
    BluetoothState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    BluetoothState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return BluetoothState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return BluetoothState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return BluetoothState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .BluetoothState.State state = 1;
  void clear_state();
  ::BluetoothState_State state() const;
  void set_state(::BluetoothState_State value);

  // @@protoc_insertion_point(class_scope:BluetoothState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse();
  BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse& other);
  static const BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse*>(&_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class BluetoothAdvertisementData_ServiceDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  BluetoothAdvertisementData_ServiceDataEntry_DoNotUse();
  BluetoothAdvertisementData_ServiceDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BluetoothAdvertisementData_ServiceDataEntry_DoNotUse& other);
  static const BluetoothAdvertisementData_ServiceDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BluetoothAdvertisementData_ServiceDataEntry_DoNotUse*>(&_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "BluetoothAdvertisementData.ServiceDataEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class BluetoothAdvertisementData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothAdvertisementData) */ {
 public:
  BluetoothAdvertisementData();
  virtual ~BluetoothAdvertisementData();

  BluetoothAdvertisementData(const BluetoothAdvertisementData& from);
  BluetoothAdvertisementData(BluetoothAdvertisementData&& from) noexcept
    : BluetoothAdvertisementData() {
    *this = ::std::move(from);
  }

  inline BluetoothAdvertisementData& operator=(const BluetoothAdvertisementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothAdvertisementData& operator=(BluetoothAdvertisementData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothAdvertisementData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothAdvertisementData* internal_default_instance() {
    return reinterpret_cast<const BluetoothAdvertisementData*>(
               &_BluetoothAdvertisementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BluetoothAdvertisementData& a, BluetoothAdvertisementData& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothAdvertisementData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothAdvertisementData* New() const final {
    return CreateMaybeMessage<BluetoothAdvertisementData>(nullptr);
  }

  BluetoothAdvertisementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothAdvertisementData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothAdvertisementData& from);
  void MergeFrom(const BluetoothAdvertisementData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothAdvertisementData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothAdvertisementData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kManufacturerDataFieldNumber = 4,
    kServiceDataFieldNumber = 5,
    kServiceUuidsFieldNumber = 6,
    kLocalNameFieldNumber = 1,
    kTxPowerLevelFieldNumber = 2,
    kConnectableFieldNumber = 3,
  };
  // map<int32, bytes> manufacturer_data = 4;
  int manufacturer_data_size() const;
  void clear_manufacturer_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
      manufacturer_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
      mutable_manufacturer_data();

  // map<string, bytes> service_data = 5;
  int service_data_size() const;
  void clear_service_data();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      service_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_service_data();

  // repeated string service_uuids = 6;
  int service_uuids_size() const;
  void clear_service_uuids();
  const std::string& service_uuids(int index) const;
  std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const std::string& value);
  void set_service_uuids(int index, std::string&& value);
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  std::string* add_service_uuids();
  void add_service_uuids(const std::string& value);
  void add_service_uuids(std::string&& value);
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_uuids();

  // string local_name = 1;
  void clear_local_name();
  const std::string& local_name() const;
  void set_local_name(const std::string& value);
  void set_local_name(std::string&& value);
  void set_local_name(const char* value);
  void set_local_name(const char* value, size_t size);
  std::string* mutable_local_name();
  std::string* release_local_name();
  void set_allocated_local_name(std::string* local_name);

  // .Int32Value tx_power_level = 2;
  bool has_tx_power_level() const;
  void clear_tx_power_level();
  const ::Int32Value& tx_power_level() const;
  ::Int32Value* release_tx_power_level();
  ::Int32Value* mutable_tx_power_level();
  void set_allocated_tx_power_level(::Int32Value* tx_power_level);

  // bool connectable = 3;
  void clear_connectable();
  bool connectable() const;
  void set_connectable(bool value);

  // @@protoc_insertion_point(class_scope:BluetoothAdvertisementData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > manufacturer_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BluetoothAdvertisementData_ServiceDataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > service_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_uuids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_name_;
  ::Int32Value* tx_power_level_;
  bool connectable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class ScanSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScanSettings) */ {
 public:
  ScanSettings();
  virtual ~ScanSettings();

  ScanSettings(const ScanSettings& from);
  ScanSettings(ScanSettings&& from) noexcept
    : ScanSettings() {
    *this = ::std::move(from);
  }

  inline ScanSettings& operator=(const ScanSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanSettings& operator=(ScanSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanSettings* internal_default_instance() {
    return reinterpret_cast<const ScanSettings*>(
               &_ScanSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScanSettings& a, ScanSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanSettings* New() const final {
    return CreateMaybeMessage<ScanSettings>(nullptr);
  }

  ScanSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanSettings& from);
  void MergeFrom(const ScanSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScanSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceUuidsFieldNumber = 2,
    kAndroidScanModeFieldNumber = 1,
  };
  // repeated string service_uuids = 2;
  int service_uuids_size() const;
  void clear_service_uuids();
  const std::string& service_uuids(int index) const;
  std::string* mutable_service_uuids(int index);
  void set_service_uuids(int index, const std::string& value);
  void set_service_uuids(int index, std::string&& value);
  void set_service_uuids(int index, const char* value);
  void set_service_uuids(int index, const char* value, size_t size);
  std::string* add_service_uuids();
  void add_service_uuids(const std::string& value);
  void add_service_uuids(std::string&& value);
  void add_service_uuids(const char* value);
  void add_service_uuids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_uuids();

  // int32 android_scan_mode = 1;
  void clear_android_scan_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 android_scan_mode() const;
  void set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:ScanSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_uuids_;
  ::PROTOBUF_NAMESPACE_ID::int32 android_scan_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothScanResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothScanResult) */ {
 public:
  BluetoothScanResult();
  virtual ~BluetoothScanResult();

  BluetoothScanResult(const BluetoothScanResult& from);
  BluetoothScanResult(BluetoothScanResult&& from) noexcept
    : BluetoothScanResult() {
    *this = ::std::move(from);
  }

  inline BluetoothScanResult& operator=(const BluetoothScanResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothScanResult& operator=(BluetoothScanResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothScanResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothScanResult* internal_default_instance() {
    return reinterpret_cast<const BluetoothScanResult*>(
               &_BluetoothScanResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BluetoothScanResult& a, BluetoothScanResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothScanResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothScanResult* New() const final {
    return CreateMaybeMessage<BluetoothScanResult>(nullptr);
  }

  BluetoothScanResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothScanResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothScanResult& from);
  void MergeFrom(const BluetoothScanResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothScanResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothScanResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kAdvertisementDataFieldNumber = 2,
    kRssiFieldNumber = 3,
  };
  // .BluetoothDevice device = 1;
  bool has_device() const;
  void clear_device();
  const ::BluetoothDevice& device() const;
  ::BluetoothDevice* release_device();
  ::BluetoothDevice* mutable_device();
  void set_allocated_device(::BluetoothDevice* device);

  // .BluetoothAdvertisementData advertisement_data = 2;
  bool has_advertisement_data() const;
  void clear_advertisement_data();
  const ::BluetoothAdvertisementData& advertisement_data() const;
  ::BluetoothAdvertisementData* release_advertisement_data();
  ::BluetoothAdvertisementData* mutable_advertisement_data();
  void set_allocated_advertisement_data(::BluetoothAdvertisementData* advertisement_data);

  // int32 rssi = 3;
  void clear_rssi();
  ::PROTOBUF_NAMESPACE_ID::int32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:BluetoothScanResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::BluetoothDevice* device_;
  ::BluetoothAdvertisementData* advertisement_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 rssi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothConnectRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothConnectRequest) */ {
 public:
  BluetoothConnectRequest();
  virtual ~BluetoothConnectRequest();

  BluetoothConnectRequest(const BluetoothConnectRequest& from);
  BluetoothConnectRequest(BluetoothConnectRequest&& from) noexcept
    : BluetoothConnectRequest() {
    *this = ::std::move(from);
  }

  inline BluetoothConnectRequest& operator=(const BluetoothConnectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothConnectRequest& operator=(BluetoothConnectRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothConnectRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothConnectRequest* internal_default_instance() {
    return reinterpret_cast<const BluetoothConnectRequest*>(
               &_BluetoothConnectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BluetoothConnectRequest& a, BluetoothConnectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothConnectRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothConnectRequest* New() const final {
    return CreateMaybeMessage<BluetoothConnectRequest>(nullptr);
  }

  BluetoothConnectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothConnectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothConnectRequest& from);
  void MergeFrom(const BluetoothConnectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothConnectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothConnectRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteNameFieldNumber = 1,
    kRemoteIdFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kAndroidAutoConnectFieldNumber = 4,
  };
  // string remote_name = 1;
  void clear_remote_name();
  const std::string& remote_name() const;
  void set_remote_name(const std::string& value);
  void set_remote_name(std::string&& value);
  void set_remote_name(const char* value);
  void set_remote_name(const char* value, size_t size);
  std::string* mutable_remote_name();
  std::string* release_remote_name();
  void set_allocated_remote_name(std::string* remote_name);

  // string remote_id = 2;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // int32 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool android_auto_connect = 4;
  void clear_android_auto_connect();
  bool android_auto_connect() const;
  void set_android_auto_connect(bool value);

  // @@protoc_insertion_point(class_scope:BluetoothConnectRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_;
  bool android_auto_connect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothDevice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothDevice) */ {
 public:
  BluetoothDevice();
  virtual ~BluetoothDevice();

  BluetoothDevice(const BluetoothDevice& from);
  BluetoothDevice(BluetoothDevice&& from) noexcept
    : BluetoothDevice() {
    *this = ::std::move(from);
  }

  inline BluetoothDevice& operator=(const BluetoothDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothDevice& operator=(BluetoothDevice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothDevice* internal_default_instance() {
    return reinterpret_cast<const BluetoothDevice*>(
               &_BluetoothDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BluetoothDevice& a, BluetoothDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothDevice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDevice* New() const final {
    return CreateMaybeMessage<BluetoothDevice>(nullptr);
  }

  BluetoothDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothDevice& from);
  void MergeFrom(const BluetoothDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothDevice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BluetoothDevice_Type Type;
  static constexpr Type UNKNOWN =
    BluetoothDevice_Type_UNKNOWN;
  static constexpr Type CLASSIC =
    BluetoothDevice_Type_CLASSIC;
  static constexpr Type LE =
    BluetoothDevice_Type_LE;
  static constexpr Type DUAL =
    BluetoothDevice_Type_DUAL;
  static inline bool Type_IsValid(int value) {
    return BluetoothDevice_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BluetoothDevice_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BluetoothDevice_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BluetoothDevice_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BluetoothDevice_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BluetoothDevice_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return BluetoothDevice_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .BluetoothDevice.Type type = 3;
  void clear_type();
  ::BluetoothDevice_Type type() const;
  void set_type(::BluetoothDevice_Type value);

  // @@protoc_insertion_point(class_scope:BluetoothDevice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothDeviceStateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothDeviceStateResponse) */ {
 public:
  BluetoothDeviceStateResponse();
  virtual ~BluetoothDeviceStateResponse();

  BluetoothDeviceStateResponse(const BluetoothDeviceStateResponse& from);
  BluetoothDeviceStateResponse(BluetoothDeviceStateResponse&& from) noexcept
    : BluetoothDeviceStateResponse() {
    *this = ::std::move(from);
  }

  inline BluetoothDeviceStateResponse& operator=(const BluetoothDeviceStateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothDeviceStateResponse& operator=(BluetoothDeviceStateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothDeviceStateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothDeviceStateResponse* internal_default_instance() {
    return reinterpret_cast<const BluetoothDeviceStateResponse*>(
               &_BluetoothDeviceStateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BluetoothDeviceStateResponse& a, BluetoothDeviceStateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothDeviceStateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothDeviceStateResponse* New() const final {
    return CreateMaybeMessage<BluetoothDeviceStateResponse>(nullptr);
  }

  BluetoothDeviceStateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothDeviceStateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothDeviceStateResponse& from);
  void MergeFrom(const BluetoothDeviceStateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothDeviceStateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothDeviceStateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceState;
  static constexpr BluetoothDeviceState DISCONNECTED =
    BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTED;
  static constexpr BluetoothDeviceState CONNECTING =
    BluetoothDeviceStateResponse_BluetoothDeviceState_CONNECTING;
  static constexpr BluetoothDeviceState CONNECTED =
    BluetoothDeviceStateResponse_BluetoothDeviceState_CONNECTED;
  static constexpr BluetoothDeviceState DISCONNECTING =
    BluetoothDeviceStateResponse_BluetoothDeviceState_DISCONNECTING;
  static inline bool BluetoothDeviceState_IsValid(int value) {
    return BluetoothDeviceStateResponse_BluetoothDeviceState_IsValid(value);
  }
  static constexpr BluetoothDeviceState BluetoothDeviceState_MIN =
    BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MIN;
  static constexpr BluetoothDeviceState BluetoothDeviceState_MAX =
    BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_MAX;
  static constexpr int BluetoothDeviceState_ARRAYSIZE =
    BluetoothDeviceStateResponse_BluetoothDeviceState_BluetoothDeviceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  BluetoothDeviceState_descriptor() {
    return BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor();
  }
  template<typename T>
  static inline const std::string& BluetoothDeviceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, BluetoothDeviceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function BluetoothDeviceState_Name.");
    return BluetoothDeviceStateResponse_BluetoothDeviceState_Name(enum_t_value);
  }
  static inline bool BluetoothDeviceState_Parse(const std::string& name,
      BluetoothDeviceState* value) {
    return BluetoothDeviceStateResponse_BluetoothDeviceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kDeviceIDFieldNumber = 3,
  };
  // string remote_id = 1;
  void clear_remote_id();
  const std::string& remote_id() const;
  void set_remote_id(const std::string& value);
  void set_remote_id(std::string&& value);
  void set_remote_id(const char* value);
  void set_remote_id(const char* value, size_t size);
  std::string* mutable_remote_id();
  std::string* release_remote_id();
  void set_allocated_remote_id(std::string* remote_id);

  // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
  void clear_state();
  ::BluetoothDeviceStateResponse_BluetoothDeviceState state() const;
  void set_state(::BluetoothDeviceStateResponse_BluetoothDeviceState value);

  // int32 deviceID = 3;
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:BluetoothDeviceStateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_id_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class BluetoothConnectedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BluetoothConnectedResponse) */ {
 public:
  BluetoothConnectedResponse();
  virtual ~BluetoothConnectedResponse();

  BluetoothConnectedResponse(const BluetoothConnectedResponse& from);
  BluetoothConnectedResponse(BluetoothConnectedResponse&& from) noexcept
    : BluetoothConnectedResponse() {
    *this = ::std::move(from);
  }

  inline BluetoothConnectedResponse& operator=(const BluetoothConnectedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BluetoothConnectedResponse& operator=(BluetoothConnectedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BluetoothConnectedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BluetoothConnectedResponse* internal_default_instance() {
    return reinterpret_cast<const BluetoothConnectedResponse*>(
               &_BluetoothConnectedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BluetoothConnectedResponse& a, BluetoothConnectedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BluetoothConnectedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BluetoothConnectedResponse* New() const final {
    return CreateMaybeMessage<BluetoothConnectedResponse>(nullptr);
  }

  BluetoothConnectedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BluetoothConnectedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BluetoothConnectedResponse& from);
  void MergeFrom(const BluetoothConnectedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BluetoothConnectedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BluetoothConnectedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevicesFieldNumber = 1,
  };
  // repeated .BluetoothDevice devices = 1;
  int devices_size() const;
  void clear_devices();
  ::BluetoothDevice* mutable_devices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >*
      mutable_devices();
  const ::BluetoothDevice& devices(int index) const;
  ::BluetoothDevice* add_devices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >&
      devices() const;

  // @@protoc_insertion_point(class_scope:BluetoothConnectedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice > devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// -------------------------------------------------------------------

class EnrollFpState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EnrollFpState) */ {
 public:
  EnrollFpState();
  virtual ~EnrollFpState();

  EnrollFpState(const EnrollFpState& from);
  EnrollFpState(EnrollFpState&& from) noexcept
    : EnrollFpState() {
    *this = ::std::move(from);
  }

  inline EnrollFpState& operator=(const EnrollFpState& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnrollFpState& operator=(EnrollFpState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnrollFpState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnrollFpState* internal_default_instance() {
    return reinterpret_cast<const EnrollFpState*>(
               &_EnrollFpState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EnrollFpState& a, EnrollFpState& b) {
    a.Swap(&b);
  }
  inline void Swap(EnrollFpState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnrollFpState* New() const final {
    return CreateMaybeMessage<EnrollFpState>(nullptr);
  }

  EnrollFpState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnrollFpState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnrollFpState& from);
  void MergeFrom(const EnrollFpState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnrollFpState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EnrollFpState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fblue_2eproto);
    return ::descriptor_table_jubiter_5fblue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModalityIdFieldNumber = 1,
    kNextIndexFieldNumber = 2,
    kRemainingTimesFieldNumber = 3,
  };
  // int32 modality_id = 1;
  void clear_modality_id();
  ::PROTOBUF_NAMESPACE_ID::int32 modality_id() const;
  void set_modality_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 next_index = 2;
  void clear_next_index();
  ::PROTOBUF_NAMESPACE_ID::int32 next_index() const;
  void set_next_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 remaining_times = 3;
  void clear_remaining_times();
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_times() const;
  void set_remaining_times(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:EnrollFpState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 modality_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_index_;
  ::PROTOBUF_NAMESPACE_ID::int32 remaining_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fblue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Int32Value

// int32 value = 1;
inline void Int32Value::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Int32Value::value() const {
  // @@protoc_insertion_point(field_get:Int32Value.value)
  return value_;
}
inline void Int32Value::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:Int32Value.value)
}

// -------------------------------------------------------------------

// BluetoothState

// .BluetoothState.State state = 1;
inline void BluetoothState::clear_state() {
  state_ = 0;
}
inline ::BluetoothState_State BluetoothState::state() const {
  // @@protoc_insertion_point(field_get:BluetoothState.state)
  return static_cast< ::BluetoothState_State >(state_);
}
inline void BluetoothState::set_state(::BluetoothState_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BluetoothState.state)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BluetoothAdvertisementData

// string local_name = 1;
inline void BluetoothAdvertisementData::clear_local_name() {
  local_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothAdvertisementData::local_name() const {
  // @@protoc_insertion_point(field_get:BluetoothAdvertisementData.local_name)
  return local_name_.GetNoArena();
}
inline void BluetoothAdvertisementData::set_local_name(const std::string& value) {
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothAdvertisementData.local_name)
}
inline void BluetoothAdvertisementData::set_local_name(std::string&& value) {
  
  local_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothAdvertisementData.local_name)
}
inline void BluetoothAdvertisementData::set_local_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothAdvertisementData.local_name)
}
inline void BluetoothAdvertisementData::set_local_name(const char* value, size_t size) {
  
  local_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothAdvertisementData.local_name)
}
inline std::string* BluetoothAdvertisementData::mutable_local_name() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothAdvertisementData.local_name)
  return local_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothAdvertisementData::release_local_name() {
  // @@protoc_insertion_point(field_release:BluetoothAdvertisementData.local_name)
  
  return local_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothAdvertisementData::set_allocated_local_name(std::string* local_name) {
  if (local_name != nullptr) {
    
  } else {
    
  }
  local_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_name);
  // @@protoc_insertion_point(field_set_allocated:BluetoothAdvertisementData.local_name)
}

// .Int32Value tx_power_level = 2;
inline bool BluetoothAdvertisementData::has_tx_power_level() const {
  return this != internal_default_instance() && tx_power_level_ != nullptr;
}
inline void BluetoothAdvertisementData::clear_tx_power_level() {
  if (GetArenaNoVirtual() == nullptr && tx_power_level_ != nullptr) {
    delete tx_power_level_;
  }
  tx_power_level_ = nullptr;
}
inline const ::Int32Value& BluetoothAdvertisementData::tx_power_level() const {
  const ::Int32Value* p = tx_power_level_;
  // @@protoc_insertion_point(field_get:BluetoothAdvertisementData.tx_power_level)
  return p != nullptr ? *p : *reinterpret_cast<const ::Int32Value*>(
      &::_Int32Value_default_instance_);
}
inline ::Int32Value* BluetoothAdvertisementData::release_tx_power_level() {
  // @@protoc_insertion_point(field_release:BluetoothAdvertisementData.tx_power_level)
  
  ::Int32Value* temp = tx_power_level_;
  tx_power_level_ = nullptr;
  return temp;
}
inline ::Int32Value* BluetoothAdvertisementData::mutable_tx_power_level() {
  
  if (tx_power_level_ == nullptr) {
    auto* p = CreateMaybeMessage<::Int32Value>(GetArenaNoVirtual());
    tx_power_level_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BluetoothAdvertisementData.tx_power_level)
  return tx_power_level_;
}
inline void BluetoothAdvertisementData::set_allocated_tx_power_level(::Int32Value* tx_power_level) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tx_power_level_;
  }
  if (tx_power_level) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tx_power_level = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tx_power_level, submessage_arena);
    }
    
  } else {
    
  }
  tx_power_level_ = tx_power_level;
  // @@protoc_insertion_point(field_set_allocated:BluetoothAdvertisementData.tx_power_level)
}

// bool connectable = 3;
inline void BluetoothAdvertisementData::clear_connectable() {
  connectable_ = false;
}
inline bool BluetoothAdvertisementData::connectable() const {
  // @@protoc_insertion_point(field_get:BluetoothAdvertisementData.connectable)
  return connectable_;
}
inline void BluetoothAdvertisementData::set_connectable(bool value) {
  
  connectable_ = value;
  // @@protoc_insertion_point(field_set:BluetoothAdvertisementData.connectable)
}

// map<int32, bytes> manufacturer_data = 4;
inline int BluetoothAdvertisementData::manufacturer_data_size() const {
  return manufacturer_data_.size();
}
inline void BluetoothAdvertisementData::clear_manufacturer_data() {
  manufacturer_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >&
BluetoothAdvertisementData::manufacturer_data() const {
  // @@protoc_insertion_point(field_map:BluetoothAdvertisementData.manufacturer_data)
  return manufacturer_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >*
BluetoothAdvertisementData::mutable_manufacturer_data() {
  // @@protoc_insertion_point(field_mutable_map:BluetoothAdvertisementData.manufacturer_data)
  return manufacturer_data_.MutableMap();
}

// map<string, bytes> service_data = 5;
inline int BluetoothAdvertisementData::service_data_size() const {
  return service_data_.size();
}
inline void BluetoothAdvertisementData::clear_service_data() {
  service_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BluetoothAdvertisementData::service_data() const {
  // @@protoc_insertion_point(field_map:BluetoothAdvertisementData.service_data)
  return service_data_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BluetoothAdvertisementData::mutable_service_data() {
  // @@protoc_insertion_point(field_mutable_map:BluetoothAdvertisementData.service_data)
  return service_data_.MutableMap();
}

// repeated string service_uuids = 6;
inline int BluetoothAdvertisementData::service_uuids_size() const {
  return service_uuids_.size();
}
inline void BluetoothAdvertisementData::clear_service_uuids() {
  service_uuids_.Clear();
}
inline const std::string& BluetoothAdvertisementData::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothAdvertisementData.service_uuids)
  return service_uuids_.Get(index);
}
inline std::string* BluetoothAdvertisementData::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothAdvertisementData.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void BluetoothAdvertisementData::set_service_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BluetoothAdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
inline void BluetoothAdvertisementData::set_service_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BluetoothAdvertisementData.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
inline void BluetoothAdvertisementData::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BluetoothAdvertisementData.service_uuids)
}
inline void BluetoothAdvertisementData::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BluetoothAdvertisementData.service_uuids)
}
inline std::string* BluetoothAdvertisementData::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:BluetoothAdvertisementData.service_uuids)
  return service_uuids_.Add();
}
inline void BluetoothAdvertisementData::add_service_uuids(const std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BluetoothAdvertisementData.service_uuids)
}
inline void BluetoothAdvertisementData::add_service_uuids(std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BluetoothAdvertisementData.service_uuids)
}
inline void BluetoothAdvertisementData::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BluetoothAdvertisementData.service_uuids)
}
inline void BluetoothAdvertisementData::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BluetoothAdvertisementData.service_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BluetoothAdvertisementData::service_uuids() const {
  // @@protoc_insertion_point(field_list:BluetoothAdvertisementData.service_uuids)
  return service_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BluetoothAdvertisementData::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothAdvertisementData.service_uuids)
  return &service_uuids_;
}

// -------------------------------------------------------------------

// ScanSettings

// int32 android_scan_mode = 1;
inline void ScanSettings::clear_android_scan_mode() {
  android_scan_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanSettings::android_scan_mode() const {
  // @@protoc_insertion_point(field_get:ScanSettings.android_scan_mode)
  return android_scan_mode_;
}
inline void ScanSettings::set_android_scan_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  android_scan_mode_ = value;
  // @@protoc_insertion_point(field_set:ScanSettings.android_scan_mode)
}

// repeated string service_uuids = 2;
inline int ScanSettings::service_uuids_size() const {
  return service_uuids_.size();
}
inline void ScanSettings::clear_service_uuids() {
  service_uuids_.Clear();
}
inline const std::string& ScanSettings::service_uuids(int index) const {
  // @@protoc_insertion_point(field_get:ScanSettings.service_uuids)
  return service_uuids_.Get(index);
}
inline std::string* ScanSettings::mutable_service_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:ScanSettings.service_uuids)
  return service_uuids_.Mutable(index);
}
inline void ScanSettings::set_service_uuids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(value);
}
inline void ScanSettings::set_service_uuids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ScanSettings.service_uuids)
  service_uuids_.Mutable(index)->assign(std::move(value));
}
inline void ScanSettings::set_service_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ScanSettings.service_uuids)
}
inline void ScanSettings::set_service_uuids(int index, const char* value, size_t size) {
  service_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScanSettings.service_uuids)
}
inline std::string* ScanSettings::add_service_uuids() {
  // @@protoc_insertion_point(field_add_mutable:ScanSettings.service_uuids)
  return service_uuids_.Add();
}
inline void ScanSettings::add_service_uuids(const std::string& value) {
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(std::string&& value) {
  service_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ScanSettings.service_uuids)
}
inline void ScanSettings::add_service_uuids(const char* value, size_t size) {
  service_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ScanSettings.service_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScanSettings::service_uuids() const {
  // @@protoc_insertion_point(field_list:ScanSettings.service_uuids)
  return service_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScanSettings::mutable_service_uuids() {
  // @@protoc_insertion_point(field_mutable_list:ScanSettings.service_uuids)
  return &service_uuids_;
}

// -------------------------------------------------------------------

// BluetoothScanResult

// .BluetoothDevice device = 1;
inline bool BluetoothScanResult::has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline void BluetoothScanResult::clear_device() {
  if (GetArenaNoVirtual() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::BluetoothDevice& BluetoothScanResult::device() const {
  const ::BluetoothDevice* p = device_;
  // @@protoc_insertion_point(field_get:BluetoothScanResult.device)
  return p != nullptr ? *p : *reinterpret_cast<const ::BluetoothDevice*>(
      &::_BluetoothDevice_default_instance_);
}
inline ::BluetoothDevice* BluetoothScanResult::release_device() {
  // @@protoc_insertion_point(field_release:BluetoothScanResult.device)
  
  ::BluetoothDevice* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::BluetoothDevice* BluetoothScanResult::mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothDevice>(GetArenaNoVirtual());
    device_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BluetoothScanResult.device)
  return device_;
}
inline void BluetoothScanResult::set_allocated_device(::BluetoothDevice* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:BluetoothScanResult.device)
}

// .BluetoothAdvertisementData advertisement_data = 2;
inline bool BluetoothScanResult::has_advertisement_data() const {
  return this != internal_default_instance() && advertisement_data_ != nullptr;
}
inline void BluetoothScanResult::clear_advertisement_data() {
  if (GetArenaNoVirtual() == nullptr && advertisement_data_ != nullptr) {
    delete advertisement_data_;
  }
  advertisement_data_ = nullptr;
}
inline const ::BluetoothAdvertisementData& BluetoothScanResult::advertisement_data() const {
  const ::BluetoothAdvertisementData* p = advertisement_data_;
  // @@protoc_insertion_point(field_get:BluetoothScanResult.advertisement_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::BluetoothAdvertisementData*>(
      &::_BluetoothAdvertisementData_default_instance_);
}
inline ::BluetoothAdvertisementData* BluetoothScanResult::release_advertisement_data() {
  // @@protoc_insertion_point(field_release:BluetoothScanResult.advertisement_data)
  
  ::BluetoothAdvertisementData* temp = advertisement_data_;
  advertisement_data_ = nullptr;
  return temp;
}
inline ::BluetoothAdvertisementData* BluetoothScanResult::mutable_advertisement_data() {
  
  if (advertisement_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::BluetoothAdvertisementData>(GetArenaNoVirtual());
    advertisement_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:BluetoothScanResult.advertisement_data)
  return advertisement_data_;
}
inline void BluetoothScanResult::set_allocated_advertisement_data(::BluetoothAdvertisementData* advertisement_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete advertisement_data_;
  }
  if (advertisement_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      advertisement_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advertisement_data, submessage_arena);
    }
    
  } else {
    
  }
  advertisement_data_ = advertisement_data;
  // @@protoc_insertion_point(field_set_allocated:BluetoothScanResult.advertisement_data)
}

// int32 rssi = 3;
inline void BluetoothScanResult::clear_rssi() {
  rssi_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothScanResult::rssi() const {
  // @@protoc_insertion_point(field_get:BluetoothScanResult.rssi)
  return rssi_;
}
inline void BluetoothScanResult::set_rssi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rssi_ = value;
  // @@protoc_insertion_point(field_set:BluetoothScanResult.rssi)
}

// -------------------------------------------------------------------

// BluetoothConnectRequest

// string remote_name = 1;
inline void BluetoothConnectRequest::clear_remote_name() {
  remote_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothConnectRequest::remote_name() const {
  // @@protoc_insertion_point(field_get:BluetoothConnectRequest.remote_name)
  return remote_name_.GetNoArena();
}
inline void BluetoothConnectRequest::set_remote_name(const std::string& value) {
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothConnectRequest.remote_name)
}
inline void BluetoothConnectRequest::set_remote_name(std::string&& value) {
  
  remote_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothConnectRequest.remote_name)
}
inline void BluetoothConnectRequest::set_remote_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothConnectRequest.remote_name)
}
inline void BluetoothConnectRequest::set_remote_name(const char* value, size_t size) {
  
  remote_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothConnectRequest.remote_name)
}
inline std::string* BluetoothConnectRequest::mutable_remote_name() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothConnectRequest.remote_name)
  return remote_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothConnectRequest::release_remote_name() {
  // @@protoc_insertion_point(field_release:BluetoothConnectRequest.remote_name)
  
  return remote_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothConnectRequest::set_allocated_remote_name(std::string* remote_name) {
  if (remote_name != nullptr) {
    
  } else {
    
  }
  remote_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_name);
  // @@protoc_insertion_point(field_set_allocated:BluetoothConnectRequest.remote_name)
}

// string remote_id = 2;
inline void BluetoothConnectRequest::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothConnectRequest::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothConnectRequest.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothConnectRequest::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothConnectRequest.remote_id)
}
inline void BluetoothConnectRequest::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothConnectRequest.remote_id)
}
inline void BluetoothConnectRequest::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothConnectRequest.remote_id)
}
inline void BluetoothConnectRequest::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothConnectRequest.remote_id)
}
inline std::string* BluetoothConnectRequest::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothConnectRequest.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothConnectRequest::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothConnectRequest.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothConnectRequest::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothConnectRequest.remote_id)
}

// int32 timeout = 3;
inline void BluetoothConnectRequest::clear_timeout() {
  timeout_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothConnectRequest::timeout() const {
  // @@protoc_insertion_point(field_get:BluetoothConnectRequest.timeout)
  return timeout_;
}
inline void BluetoothConnectRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:BluetoothConnectRequest.timeout)
}

// bool android_auto_connect = 4;
inline void BluetoothConnectRequest::clear_android_auto_connect() {
  android_auto_connect_ = false;
}
inline bool BluetoothConnectRequest::android_auto_connect() const {
  // @@protoc_insertion_point(field_get:BluetoothConnectRequest.android_auto_connect)
  return android_auto_connect_;
}
inline void BluetoothConnectRequest::set_android_auto_connect(bool value) {
  
  android_auto_connect_ = value;
  // @@protoc_insertion_point(field_set:BluetoothConnectRequest.android_auto_connect)
}

// -------------------------------------------------------------------

// BluetoothDevice

// string remote_id = 1;
inline void BluetoothDevice::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothDevice::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothDevice::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.remote_id)
}
inline void BluetoothDevice::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.remote_id)
}
inline std::string* BluetoothDevice::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothDevice::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDevice::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.remote_id)
}

// string name = 2;
inline void BluetoothDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothDevice::name() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.name)
  return name_.GetNoArena();
}
inline void BluetoothDevice::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDevice.name)
}
inline void BluetoothDevice::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDevice.name)
}
inline std::string* BluetoothDevice::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDevice.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothDevice::release_name() {
  // @@protoc_insertion_point(field_release:BluetoothDevice.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDevice::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDevice.name)
}

// .BluetoothDevice.Type type = 3;
inline void BluetoothDevice::clear_type() {
  type_ = 0;
}
inline ::BluetoothDevice_Type BluetoothDevice::type() const {
  // @@protoc_insertion_point(field_get:BluetoothDevice.type)
  return static_cast< ::BluetoothDevice_Type >(type_);
}
inline void BluetoothDevice::set_type(::BluetoothDevice_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:BluetoothDevice.type)
}

// -------------------------------------------------------------------

// BluetoothDeviceStateResponse

// string remote_id = 1;
inline void BluetoothDeviceStateResponse::clear_remote_id() {
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BluetoothDeviceStateResponse::remote_id() const {
  // @@protoc_insertion_point(field_get:BluetoothDeviceStateResponse.remote_id)
  return remote_id_.GetNoArena();
}
inline void BluetoothDeviceStateResponse::set_remote_id(const std::string& value) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BluetoothDeviceStateResponse.remote_id)
}
inline void BluetoothDeviceStateResponse::set_remote_id(std::string&& value) {
  
  remote_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BluetoothDeviceStateResponse.remote_id)
}
inline void BluetoothDeviceStateResponse::set_remote_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BluetoothDeviceStateResponse.remote_id)
}
inline void BluetoothDeviceStateResponse::set_remote_id(const char* value, size_t size) {
  
  remote_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BluetoothDeviceStateResponse.remote_id)
}
inline std::string* BluetoothDeviceStateResponse::mutable_remote_id() {
  
  // @@protoc_insertion_point(field_mutable:BluetoothDeviceStateResponse.remote_id)
  return remote_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BluetoothDeviceStateResponse::release_remote_id() {
  // @@protoc_insertion_point(field_release:BluetoothDeviceStateResponse.remote_id)
  
  return remote_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BluetoothDeviceStateResponse::set_allocated_remote_id(std::string* remote_id) {
  if (remote_id != nullptr) {
    
  } else {
    
  }
  remote_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_id);
  // @@protoc_insertion_point(field_set_allocated:BluetoothDeviceStateResponse.remote_id)
}

// .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
inline void BluetoothDeviceStateResponse::clear_state() {
  state_ = 0;
}
inline ::BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::state() const {
  // @@protoc_insertion_point(field_get:BluetoothDeviceStateResponse.state)
  return static_cast< ::BluetoothDeviceStateResponse_BluetoothDeviceState >(state_);
}
inline void BluetoothDeviceStateResponse::set_state(::BluetoothDeviceStateResponse_BluetoothDeviceState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:BluetoothDeviceStateResponse.state)
}

// int32 deviceID = 3;
inline void BluetoothDeviceStateResponse::clear_deviceid() {
  deviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BluetoothDeviceStateResponse::deviceid() const {
  // @@protoc_insertion_point(field_get:BluetoothDeviceStateResponse.deviceID)
  return deviceid_;
}
inline void BluetoothDeviceStateResponse::set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deviceid_ = value;
  // @@protoc_insertion_point(field_set:BluetoothDeviceStateResponse.deviceID)
}

// -------------------------------------------------------------------

// BluetoothConnectedResponse

// repeated .BluetoothDevice devices = 1;
inline int BluetoothConnectedResponse::devices_size() const {
  return devices_.size();
}
inline void BluetoothConnectedResponse::clear_devices() {
  devices_.Clear();
}
inline ::BluetoothDevice* BluetoothConnectedResponse::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:BluetoothConnectedResponse.devices)
  return devices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >*
BluetoothConnectedResponse::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:BluetoothConnectedResponse.devices)
  return &devices_;
}
inline const ::BluetoothDevice& BluetoothConnectedResponse::devices(int index) const {
  // @@protoc_insertion_point(field_get:BluetoothConnectedResponse.devices)
  return devices_.Get(index);
}
inline ::BluetoothDevice* BluetoothConnectedResponse::add_devices() {
  // @@protoc_insertion_point(field_add:BluetoothConnectedResponse.devices)
  return devices_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::BluetoothDevice >&
BluetoothConnectedResponse::devices() const {
  // @@protoc_insertion_point(field_list:BluetoothConnectedResponse.devices)
  return devices_;
}

// -------------------------------------------------------------------

// EnrollFpState

// int32 modality_id = 1;
inline void EnrollFpState::clear_modality_id() {
  modality_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnrollFpState::modality_id() const {
  // @@protoc_insertion_point(field_get:EnrollFpState.modality_id)
  return modality_id_;
}
inline void EnrollFpState::set_modality_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  modality_id_ = value;
  // @@protoc_insertion_point(field_set:EnrollFpState.modality_id)
}

// int32 next_index = 2;
inline void EnrollFpState::clear_next_index() {
  next_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnrollFpState::next_index() const {
  // @@protoc_insertion_point(field_get:EnrollFpState.next_index)
  return next_index_;
}
inline void EnrollFpState::set_next_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_index_ = value;
  // @@protoc_insertion_point(field_set:EnrollFpState.next_index)
}

// int32 remaining_times = 3;
inline void EnrollFpState::clear_remaining_times() {
  remaining_times_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EnrollFpState::remaining_times() const {
  // @@protoc_insertion_point(field_get:EnrollFpState.remaining_times)
  return remaining_times_;
}
inline void EnrollFpState::set_remaining_times(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remaining_times_ = value;
  // @@protoc_insertion_point(field_set:EnrollFpState.remaining_times)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::BluetoothState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BluetoothState_State>() {
  return ::BluetoothState_State_descriptor();
}
template <> struct is_proto_enum< ::BluetoothDevice_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BluetoothDevice_Type>() {
  return ::BluetoothDevice_Type_descriptor();
}
template <> struct is_proto_enum< ::BluetoothDeviceStateResponse_BluetoothDeviceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::BluetoothDeviceStateResponse_BluetoothDeviceState>() {
  return ::BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor();
}
template <> struct is_proto_enum< ::FpIdVerifyMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::FpIdVerifyMode>() {
  return ::FpIdVerifyMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jubiter_5fblue_2eproto
