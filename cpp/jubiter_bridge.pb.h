// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiter_bridge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_jubiter_5fbridge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_jubiter_5fbridge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_jubiter_5fbridge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_jubiter_5fbridge_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jubiter_5fbridge_2eproto;
namespace AppletBridge {
class APDURequest;
class APDURequestDefaultTypeInternal;
extern APDURequestDefaultTypeInternal _APDURequest_default_instance_;
class APDUResponse;
class APDUResponseDefaultTypeInternal;
extern APDUResponseDefaultTypeInternal _APDUResponse_default_instance_;
class ListReadersResponse;
class ListReadersResponseDefaultTypeInternal;
extern ListReadersResponseDefaultTypeInternal _ListReadersResponse_default_instance_;
class Reader;
class ReaderDefaultTypeInternal;
extern ReaderDefaultTypeInternal _Reader_default_instance_;
}  // namespace AppletBridge
PROTOBUF_NAMESPACE_OPEN
template<> ::AppletBridge::APDURequest* Arena::CreateMaybeMessage<::AppletBridge::APDURequest>(Arena*);
template<> ::AppletBridge::APDUResponse* Arena::CreateMaybeMessage<::AppletBridge::APDUResponse>(Arena*);
template<> ::AppletBridge::ListReadersResponse* Arena::CreateMaybeMessage<::AppletBridge::ListReadersResponse>(Arena*);
template<> ::AppletBridge::Reader* Arena::CreateMaybeMessage<::AppletBridge::Reader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AppletBridge {

// ===================================================================

class Reader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppletBridge.Reader) */ {
 public:
  Reader();
  virtual ~Reader();

  Reader(const Reader& from);
  Reader(Reader&& from) noexcept
    : Reader() {
    *this = ::std::move(from);
  }

  inline Reader& operator=(const Reader& from) {
    CopyFrom(from);
    return *this;
  }
  inline Reader& operator=(Reader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Reader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reader* internal_default_instance() {
    return reinterpret_cast<const Reader*>(
               &_Reader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Reader& a, Reader& b) {
    a.Swap(&b);
  }
  inline void Swap(Reader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Reader* New() const final {
    return CreateMaybeMessage<Reader>(nullptr);
  }

  Reader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Reader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Reader& from);
  void MergeFrom(const Reader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppletBridge.Reader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fbridge_2eproto);
    return ::descriptor_table_jubiter_5fbridge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHandleFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // uint32 handle = 2;
  void clear_handle();
  ::PROTOBUF_NAMESPACE_ID::uint32 handle() const;
  void set_handle(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:AppletBridge.Reader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 handle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fbridge_2eproto;
};
// -------------------------------------------------------------------

class APDURequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppletBridge.APDURequest) */ {
 public:
  APDURequest();
  virtual ~APDURequest();

  APDURequest(const APDURequest& from);
  APDURequest(APDURequest&& from) noexcept
    : APDURequest() {
    *this = ::std::move(from);
  }

  inline APDURequest& operator=(const APDURequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline APDURequest& operator=(APDURequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APDURequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APDURequest* internal_default_instance() {
    return reinterpret_cast<const APDURequest*>(
               &_APDURequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(APDURequest& a, APDURequest& b) {
    a.Swap(&b);
  }
  inline void Swap(APDURequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APDURequest* New() const final {
    return CreateMaybeMessage<APDURequest>(nullptr);
  }

  APDURequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APDURequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APDURequest& from);
  void MergeFrom(const APDURequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APDURequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppletBridge.APDURequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fbridge_2eproto);
    return ::descriptor_table_jubiter_5fbridge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApduFieldNumber = 3,
    kReaderFieldNumber = 1,
  };
  // bytes apdu = 3;
  void clear_apdu();
  const std::string& apdu() const;
  void set_apdu(const std::string& value);
  void set_apdu(std::string&& value);
  void set_apdu(const char* value);
  void set_apdu(const void* value, size_t size);
  std::string* mutable_apdu();
  std::string* release_apdu();
  void set_allocated_apdu(std::string* apdu);

  // .AppletBridge.Reader reader = 1;
  bool has_reader() const;
  void clear_reader();
  const ::AppletBridge::Reader& reader() const;
  ::AppletBridge::Reader* release_reader();
  ::AppletBridge::Reader* mutable_reader();
  void set_allocated_reader(::AppletBridge::Reader* reader);

  // @@protoc_insertion_point(class_scope:AppletBridge.APDURequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apdu_;
  ::AppletBridge::Reader* reader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fbridge_2eproto;
};
// -------------------------------------------------------------------

class APDUResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppletBridge.APDUResponse) */ {
 public:
  APDUResponse();
  virtual ~APDUResponse();

  APDUResponse(const APDUResponse& from);
  APDUResponse(APDUResponse&& from) noexcept
    : APDUResponse() {
    *this = ::std::move(from);
  }

  inline APDUResponse& operator=(const APDUResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline APDUResponse& operator=(APDUResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const APDUResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const APDUResponse* internal_default_instance() {
    return reinterpret_cast<const APDUResponse*>(
               &_APDUResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(APDUResponse& a, APDUResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(APDUResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline APDUResponse* New() const final {
    return CreateMaybeMessage<APDUResponse>(nullptr);
  }

  APDUResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<APDUResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const APDUResponse& from);
  void MergeFrom(const APDUResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(APDUResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppletBridge.APDUResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fbridge_2eproto);
    return ::descriptor_table_jubiter_5fbridge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRespFieldNumber = 1,
  };
  // bytes resp = 1;
  void clear_resp();
  const std::string& resp() const;
  void set_resp(const std::string& value);
  void set_resp(std::string&& value);
  void set_resp(const char* value);
  void set_resp(const void* value, size_t size);
  std::string* mutable_resp();
  std::string* release_resp();
  void set_allocated_resp(std::string* resp);

  // @@protoc_insertion_point(class_scope:AppletBridge.APDUResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fbridge_2eproto;
};
// -------------------------------------------------------------------

class ListReadersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AppletBridge.ListReadersResponse) */ {
 public:
  ListReadersResponse();
  virtual ~ListReadersResponse();

  ListReadersResponse(const ListReadersResponse& from);
  ListReadersResponse(ListReadersResponse&& from) noexcept
    : ListReadersResponse() {
    *this = ::std::move(from);
  }

  inline ListReadersResponse& operator=(const ListReadersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListReadersResponse& operator=(ListReadersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListReadersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListReadersResponse* internal_default_instance() {
    return reinterpret_cast<const ListReadersResponse*>(
               &_ListReadersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListReadersResponse& a, ListReadersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListReadersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListReadersResponse* New() const final {
    return CreateMaybeMessage<ListReadersResponse>(nullptr);
  }

  ListReadersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListReadersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListReadersResponse& from);
  void MergeFrom(const ListReadersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListReadersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AppletBridge.ListReadersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_jubiter_5fbridge_2eproto);
    return ::descriptor_table_jubiter_5fbridge_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReadersFieldNumber = 1,
  };
  // repeated .AppletBridge.Reader readers = 1;
  int readers_size() const;
  void clear_readers();
  ::AppletBridge::Reader* mutable_readers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppletBridge::Reader >*
      mutable_readers();
  const ::AppletBridge::Reader& readers(int index) const;
  ::AppletBridge::Reader* add_readers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppletBridge::Reader >&
      readers() const;

  // @@protoc_insertion_point(class_scope:AppletBridge.ListReadersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppletBridge::Reader > readers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_jubiter_5fbridge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Reader

// string name = 1;
inline void Reader::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Reader::name() const {
  // @@protoc_insertion_point(field_get:AppletBridge.Reader.name)
  return name_.GetNoArena();
}
inline void Reader::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppletBridge.Reader.name)
}
inline void Reader::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppletBridge.Reader.name)
}
inline void Reader::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppletBridge.Reader.name)
}
inline void Reader::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppletBridge.Reader.name)
}
inline std::string* Reader::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:AppletBridge.Reader.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Reader::release_name() {
  // @@protoc_insertion_point(field_release:AppletBridge.Reader.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Reader::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AppletBridge.Reader.name)
}

// uint32 handle = 2;
inline void Reader::clear_handle() {
  handle_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Reader::handle() const {
  // @@protoc_insertion_point(field_get:AppletBridge.Reader.handle)
  return handle_;
}
inline void Reader::set_handle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  handle_ = value;
  // @@protoc_insertion_point(field_set:AppletBridge.Reader.handle)
}

// -------------------------------------------------------------------

// APDURequest

// .AppletBridge.Reader reader = 1;
inline bool APDURequest::has_reader() const {
  return this != internal_default_instance() && reader_ != nullptr;
}
inline void APDURequest::clear_reader() {
  if (GetArenaNoVirtual() == nullptr && reader_ != nullptr) {
    delete reader_;
  }
  reader_ = nullptr;
}
inline const ::AppletBridge::Reader& APDURequest::reader() const {
  const ::AppletBridge::Reader* p = reader_;
  // @@protoc_insertion_point(field_get:AppletBridge.APDURequest.reader)
  return p != nullptr ? *p : *reinterpret_cast<const ::AppletBridge::Reader*>(
      &::AppletBridge::_Reader_default_instance_);
}
inline ::AppletBridge::Reader* APDURequest::release_reader() {
  // @@protoc_insertion_point(field_release:AppletBridge.APDURequest.reader)
  
  ::AppletBridge::Reader* temp = reader_;
  reader_ = nullptr;
  return temp;
}
inline ::AppletBridge::Reader* APDURequest::mutable_reader() {
  
  if (reader_ == nullptr) {
    auto* p = CreateMaybeMessage<::AppletBridge::Reader>(GetArenaNoVirtual());
    reader_ = p;
  }
  // @@protoc_insertion_point(field_mutable:AppletBridge.APDURequest.reader)
  return reader_;
}
inline void APDURequest::set_allocated_reader(::AppletBridge::Reader* reader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reader_;
  }
  if (reader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reader, submessage_arena);
    }
    
  } else {
    
  }
  reader_ = reader;
  // @@protoc_insertion_point(field_set_allocated:AppletBridge.APDURequest.reader)
}

// bytes apdu = 3;
inline void APDURequest::clear_apdu() {
  apdu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APDURequest::apdu() const {
  // @@protoc_insertion_point(field_get:AppletBridge.APDURequest.apdu)
  return apdu_.GetNoArena();
}
inline void APDURequest::set_apdu(const std::string& value) {
  
  apdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppletBridge.APDURequest.apdu)
}
inline void APDURequest::set_apdu(std::string&& value) {
  
  apdu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppletBridge.APDURequest.apdu)
}
inline void APDURequest::set_apdu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppletBridge.APDURequest.apdu)
}
inline void APDURequest::set_apdu(const void* value, size_t size) {
  
  apdu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppletBridge.APDURequest.apdu)
}
inline std::string* APDURequest::mutable_apdu() {
  
  // @@protoc_insertion_point(field_mutable:AppletBridge.APDURequest.apdu)
  return apdu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APDURequest::release_apdu() {
  // @@protoc_insertion_point(field_release:AppletBridge.APDURequest.apdu)
  
  return apdu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APDURequest::set_allocated_apdu(std::string* apdu) {
  if (apdu != nullptr) {
    
  } else {
    
  }
  apdu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apdu);
  // @@protoc_insertion_point(field_set_allocated:AppletBridge.APDURequest.apdu)
}

// -------------------------------------------------------------------

// APDUResponse

// bytes resp = 1;
inline void APDUResponse::clear_resp() {
  resp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& APDUResponse::resp() const {
  // @@protoc_insertion_point(field_get:AppletBridge.APDUResponse.resp)
  return resp_.GetNoArena();
}
inline void APDUResponse::set_resp(const std::string& value) {
  
  resp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AppletBridge.APDUResponse.resp)
}
inline void APDUResponse::set_resp(std::string&& value) {
  
  resp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AppletBridge.APDUResponse.resp)
}
inline void APDUResponse::set_resp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AppletBridge.APDUResponse.resp)
}
inline void APDUResponse::set_resp(const void* value, size_t size) {
  
  resp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AppletBridge.APDUResponse.resp)
}
inline std::string* APDUResponse::mutable_resp() {
  
  // @@protoc_insertion_point(field_mutable:AppletBridge.APDUResponse.resp)
  return resp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* APDUResponse::release_resp() {
  // @@protoc_insertion_point(field_release:AppletBridge.APDUResponse.resp)
  
  return resp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void APDUResponse::set_allocated_resp(std::string* resp) {
  if (resp != nullptr) {
    
  } else {
    
  }
  resp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resp);
  // @@protoc_insertion_point(field_set_allocated:AppletBridge.APDUResponse.resp)
}

// -------------------------------------------------------------------

// ListReadersResponse

// repeated .AppletBridge.Reader readers = 1;
inline int ListReadersResponse::readers_size() const {
  return readers_.size();
}
inline void ListReadersResponse::clear_readers() {
  readers_.Clear();
}
inline ::AppletBridge::Reader* ListReadersResponse::mutable_readers(int index) {
  // @@protoc_insertion_point(field_mutable:AppletBridge.ListReadersResponse.readers)
  return readers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppletBridge::Reader >*
ListReadersResponse::mutable_readers() {
  // @@protoc_insertion_point(field_mutable_list:AppletBridge.ListReadersResponse.readers)
  return &readers_;
}
inline const ::AppletBridge::Reader& ListReadersResponse::readers(int index) const {
  // @@protoc_insertion_point(field_get:AppletBridge.ListReadersResponse.readers)
  return readers_.Get(index);
}
inline ::AppletBridge::Reader* ListReadersResponse::add_readers() {
  // @@protoc_insertion_point(field_add:AppletBridge.ListReadersResponse.readers)
  return readers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AppletBridge::Reader >&
ListReadersResponse::readers() const {
  // @@protoc_insertion_point(field_list:AppletBridge.ListReadersResponse.readers)
  return readers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AppletBridge

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_jubiter_5fbridge_2eproto
