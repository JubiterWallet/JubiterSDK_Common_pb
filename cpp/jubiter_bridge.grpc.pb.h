// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: jubiter_bridge.proto
#ifndef GRPC_jubiter_5fbridge_2eproto__INCLUDED
#define GRPC_jubiter_5fbridge_2eproto__INCLUDED

#include "jubiter_bridge.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace AppletBridge {

class AppletBridgeServer final {
 public:
  static constexpr char const* service_full_name() {
    return "AppletBridge.AppletBridgeServer";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::AppletBridge::ListReadersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>> AsyncListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>>(AsyncListReadersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>> PrepareAsyncListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>>(PrepareAsyncListReadersRaw(context, request, cq));
    }
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::AppletBridge::Reader* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>> AsyncConnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDisconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    virtual ::grpc::Status SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::AppletBridge::APDUResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>> AsyncSendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>>(AsyncSendApduRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>> PrepareAsyncSendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>>(PrepareAsyncSendApduRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>* AsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::ListReadersResponse>* PrepareAsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>* AsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::Reader>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>* AsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::AppletBridge::APDUResponse>* PrepareAsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::AppletBridge::ListReadersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>> AsyncListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>>(AsyncListReadersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>> PrepareAsyncListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>>(PrepareAsyncListReadersRaw(context, request, cq));
    }
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::AppletBridge::Reader* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>> AsyncConnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDisconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    ::grpc::Status SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::AppletBridge::APDUResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>> AsyncSendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>>(AsyncSendApduRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>> PrepareAsyncSendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>>(PrepareAsyncSendApduRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListReaders(::grpc::ClientContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListReaders(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::ListReadersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Connect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Connect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::Reader* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Disconnect(::grpc::ClientContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Disconnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)>) override;
      void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendApdu(::grpc::ClientContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendApdu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::AppletBridge::APDUResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>* AsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::ListReadersResponse>* PrepareAsyncListReadersRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>* AsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::Reader>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::AppletBridge::Reader& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>* AsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::AppletBridge::APDUResponse>* PrepareAsyncSendApduRaw(::grpc::ClientContext* context, const ::AppletBridge::APDURequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListReaders_;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_Disconnect_;
    const ::grpc::internal::RpcMethod rpcmethod_SendApdu_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListReaders(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response);
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response);
    virtual ::grpc::Status Disconnect(::grpc::ServerContext* context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response);
    virtual ::grpc::Status SendApdu(::grpc::ServerContext* context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListReaders() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReaders(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::AppletBridge::ListReadersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::AppletBridge::Reader* request, ::grpc::ServerAsyncResponseWriter< ::AppletBridge::Reader>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Disconnect() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::AppletBridge::Reader* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendApdu() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendApdu(::grpc::ServerContext* context, ::AppletBridge::APDURequest* request, ::grpc::ServerAsyncResponseWriter< ::AppletBridge::APDUResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListReaders<WithAsyncMethod_Connect<WithAsyncMethod_Disconnect<WithAsyncMethod_SendApdu<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListReaders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::AppletBridge::ListReadersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::google::protobuf::Empty* request, ::AppletBridge::ListReadersResponse* response) { return this->ListReaders(context, request, response); }));}
    void SetMessageAllocatorFor_ListReaders(
        ::grpc::experimental::MessageAllocator< ::google::protobuf::Empty, ::AppletBridge::ListReadersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::protobuf::Empty, ::AppletBridge::ListReadersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListReaders(
      ::grpc::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListReaders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Connect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::Reader, ::AppletBridge::Reader>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AppletBridge::Reader* request, ::AppletBridge::Reader* response) { return this->Connect(context, request, response); }));}
    void SetMessageAllocatorFor_Connect(
        ::grpc::experimental::MessageAllocator< ::AppletBridge::Reader, ::AppletBridge::Reader>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::Reader, ::AppletBridge::Reader>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Connect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Disconnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::Reader, ::google::protobuf::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AppletBridge::Reader* request, ::google::protobuf::Empty* response) { return this->Disconnect(context, request, response); }));}
    void SetMessageAllocatorFor_Disconnect(
        ::grpc::experimental::MessageAllocator< ::AppletBridge::Reader, ::google::protobuf::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::Reader, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Disconnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendApdu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::APDURequest, ::AppletBridge::APDUResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::AppletBridge::APDURequest* request, ::AppletBridge::APDUResponse* response) { return this->SendApdu(context, request, response); }));}
    void SetMessageAllocatorFor_SendApdu(
        ::grpc::experimental::MessageAllocator< ::AppletBridge::APDURequest, ::AppletBridge::APDUResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::AppletBridge::APDURequest, ::AppletBridge::APDUResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendApdu(
      ::grpc::CallbackServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendApdu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_ListReaders<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_Disconnect<ExperimentalWithCallbackMethod_SendApdu<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_ListReaders<ExperimentalWithCallbackMethod_Connect<ExperimentalWithCallbackMethod_Disconnect<ExperimentalWithCallbackMethod_SendApdu<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListReaders() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Disconnect() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendApdu() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListReaders() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListReaders(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Disconnect() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendApdu() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendApdu(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListReaders() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListReaders(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListReaders(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListReaders(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Connect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Connect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Connect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Disconnect() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Disconnect(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Disconnect(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendApdu() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendApdu(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendApdu(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendApdu(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListReaders : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListReaders() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::AppletBridge::ListReadersResponse>(std::bind(&WithStreamedUnaryMethod_ListReaders<BaseClass>::StreamedListReaders, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListReaders() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListReaders(::grpc::ServerContext* /*context*/, const ::google::protobuf::Empty* /*request*/, ::AppletBridge::ListReadersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListReaders(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::AppletBridge::ListReadersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::AppletBridge::Reader, ::AppletBridge::Reader>(std::bind(&WithStreamedUnaryMethod_Connect<BaseClass>::StreamedConnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::AppletBridge::Reader* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppletBridge::Reader,::AppletBridge::Reader>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Disconnect() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::AppletBridge::Reader, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_Disconnect<BaseClass>::StreamedDisconnect, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::AppletBridge::Reader* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppletBridge::Reader,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendApdu : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendApdu() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::AppletBridge::APDURequest, ::AppletBridge::APDUResponse>(std::bind(&WithStreamedUnaryMethod_SendApdu<BaseClass>::StreamedSendApdu, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendApdu() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendApdu(::grpc::ServerContext* /*context*/, const ::AppletBridge::APDURequest* /*request*/, ::AppletBridge::APDUResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendApdu(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::AppletBridge::APDURequest,::AppletBridge::APDUResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListReaders<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Disconnect<WithStreamedUnaryMethod_SendApdu<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListReaders<WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Disconnect<WithStreamedUnaryMethod_SendApdu<Service > > > > StreamedService;
};

}  // namespace AppletBridge


#endif  // GRPC_jubiter_5fbridge_2eproto__INCLUDED
