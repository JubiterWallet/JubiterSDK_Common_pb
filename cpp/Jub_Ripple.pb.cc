// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Ripple.proto

#include "Jub_Ripple.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fRipple_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PymtAmount_Jub_5fRipple_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Jub_5fRipple_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PymtXRP_Jub_5fRipple_2eproto;
namespace JUB {
namespace Proto {
namespace Ripple {
class PymtAmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PymtAmount> _instance;
} _PymtAmount_default_instance_;
class PymtXRPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PymtXRP> _instance;
} _PymtXRP_default_instance_;
class TransactionXRPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionXRP> _instance;
  const ::JUB::Proto::Ripple::PymtXRP* pymt_;
} _TransactionXRP_default_instance_;
}  // namespace Ripple
}  // namespace Proto
}  // namespace JUB
static void InitDefaultsscc_info_PymtAmount_Jub_5fRipple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::Ripple::_PymtAmount_default_instance_;
    new (ptr) ::JUB::Proto::Ripple::PymtAmount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Ripple::PymtAmount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PymtAmount_Jub_5fRipple_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PymtAmount_Jub_5fRipple_2eproto}, {}};

static void InitDefaultsscc_info_PymtXRP_Jub_5fRipple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::Ripple::_PymtXRP_default_instance_;
    new (ptr) ::JUB::Proto::Ripple::PymtXRP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Ripple::PymtXRP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PymtXRP_Jub_5fRipple_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PymtXRP_Jub_5fRipple_2eproto}, {
      &scc_info_PymtAmount_Jub_5fRipple_2eproto.base,}};

static void InitDefaultsscc_info_TransactionXRP_Jub_5fRipple_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::JUB::Proto::Ripple::_TransactionXRP_default_instance_;
    new (ptr) ::JUB::Proto::Ripple::TransactionXRP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JUB::Proto::Ripple::TransactionXRP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionXRP_Jub_5fRipple_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransactionXRP_Jub_5fRipple_2eproto}, {
      &scc_info_PymtXRP_Jub_5fRipple_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Jub_5fRipple_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Jub_5fRipple_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Jub_5fRipple_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Jub_5fRipple_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtAmount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtAmount, currency_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtAmount, value_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtAmount, issuer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, type_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, amount_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, destination_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, destination_tag_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, invoice_id_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, send_max_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::PymtXRP, deliver_min_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, account_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, type_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, fee_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, sequence_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, account_txn_id_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, flags_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, last_ledger_sequence_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, memos_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, source_tag_),
  offsetof(::JUB::Proto::Ripple::TransactionXRPDefaultTypeInternal, pymt_),
  PROTOBUF_FIELD_OFFSET(::JUB::Proto::Ripple::TransactionXRP, action_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::JUB::Proto::Ripple::PymtAmount)},
  { 8, -1, sizeof(::JUB::Proto::Ripple::PymtXRP)},
  { 20, -1, sizeof(::JUB::Proto::Ripple::TransactionXRP)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::Ripple::_PymtAmount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::Ripple::_PymtXRP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::JUB::Proto::Ripple::_TransactionXRP_default_instance_),
};

const char descriptor_table_protodef_Jub_5fRipple_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020Jub_Ripple.proto\022\020JUB.Proto.Ripple\"=\n\n"
  "PymtAmount\022\020\n\010currency\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\t\022\016\n\006issuer\030\003 \001(\t\"\220\002\n\007PymtXRP\0222\n\004type\030"
  "\001 \001(\0162$.JUB.Proto.Ripple.ENUM_XRP_PYMT_T"
  "YPE\022,\n\006amount\030\002 \001(\0132\034.JUB.Proto.Ripple.P"
  "ymtAmount\022\023\n\013destination\030\003 \001(\t\022\027\n\017destin"
  "ation_tag\030\004 \001(\t\022\022\n\ninvoice_id\030\005 \001(\t\022.\n\010s"
  "end_max\030\006 \001(\0132\034.JUB.Proto.Ripple.PymtAmo"
  "unt\0221\n\013deliver_min\030\007 \001(\0132\034.JUB.Proto.Rip"
  "ple.PymtAmount\"\217\002\n\016TransactionXRP\022\017\n\007acc"
  "ount\030\001 \001(\t\0220\n\004type\030\002 \001(\0162\".JUB.Proto.Rip"
  "ple.ENUM_XRP_TX_TYPE\022\013\n\003fee\030\003 \001(\t\022\020\n\010seq"
  "uence\030\004 \001(\t\022\026\n\016account_txn_id\030\005 \001(\t\022\r\n\005f"
  "lags\030\006 \001(\t\022\034\n\024last_ledger_sequence\030\007 \001(\t"
  "\022\r\n\005memos\030\010 \001(\t\022\022\n\nsource_tag\030\t \001(\t\022)\n\004p"
  "ymt\030\n \001(\0132\031.JUB.Proto.Ripple.PymtXRPH\000B\010"
  "\n\006action*\034\n\020ENUM_XRP_TX_TYPE\022\010\n\004PYMT\020\000*R"
  "\n\022ENUM_XRP_PYMT_TYPE\022\010\n\004DXRP\020\000\022\006\n\002FX\020\001\022\n"
  "\n\006CHECKS\020\002\022\n\n\006ESCROW\020\003\022\010\n\004PRTL\020\004\022\010\n\004CHAN"
  "\020\005B4\n\025com.jubiter.sdk.protoB\014RippleProto"
  "s\242\002\014RippleProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Jub_5fRipple_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Jub_5fRipple_2eproto_sccs[3] = {
  &scc_info_PymtAmount_Jub_5fRipple_2eproto.base,
  &scc_info_PymtXRP_Jub_5fRipple_2eproto.base,
  &scc_info_TransactionXRP_Jub_5fRipple_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Jub_5fRipple_2eproto_once;
static bool descriptor_table_Jub_5fRipple_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fRipple_2eproto = {
  &descriptor_table_Jub_5fRipple_2eproto_initialized, descriptor_table_protodef_Jub_5fRipple_2eproto, "Jub_Ripple.proto", 824,
  &descriptor_table_Jub_5fRipple_2eproto_once, descriptor_table_Jub_5fRipple_2eproto_sccs, descriptor_table_Jub_5fRipple_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Jub_5fRipple_2eproto::offsets,
  file_level_metadata_Jub_5fRipple_2eproto, 3, file_level_enum_descriptors_Jub_5fRipple_2eproto, file_level_service_descriptors_Jub_5fRipple_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Jub_5fRipple_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Jub_5fRipple_2eproto), true);
namespace JUB {
namespace Proto {
namespace Ripple {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_XRP_TX_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Jub_5fRipple_2eproto);
  return file_level_enum_descriptors_Jub_5fRipple_2eproto[0];
}
bool ENUM_XRP_TX_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_XRP_PYMT_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Jub_5fRipple_2eproto);
  return file_level_enum_descriptors_Jub_5fRipple_2eproto[1];
}
bool ENUM_XRP_PYMT_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PymtAmount::InitAsDefaultInstance() {
}
class PymtAmount::_Internal {
 public:
};

PymtAmount::PymtAmount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Ripple.PymtAmount)
}
PymtAmount::PymtAmount(const PymtAmount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.issuer().empty()) {
    issuer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Ripple.PymtAmount)
}

void PymtAmount::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PymtAmount_Jub_5fRipple_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PymtAmount::~PymtAmount() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Ripple.PymtAmount)
  SharedDtor();
}

void PymtAmount::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PymtAmount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PymtAmount& PymtAmount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PymtAmount_Jub_5fRipple_2eproto.base);
  return *internal_default_instance();
}


void PymtAmount::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Ripple.PymtAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  issuer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PymtAmount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_currency(), ptr, ctx, "JUB.Proto.Ripple.PymtAmount.currency");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value(), ptr, ctx, "JUB.Proto.Ripple.PymtAmount.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string issuer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_issuer(), ptr, ctx, "JUB.Proto.Ripple.PymtAmount.issuer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PymtAmount::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Ripple.PymtAmount)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string currency = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_currency()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->currency().data(), static_cast<int>(this->currency().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtAmount.currency"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtAmount.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string issuer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_issuer()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->issuer().data(), static_cast<int>(this->issuer().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtAmount.issuer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Ripple.PymtAmount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Ripple.PymtAmount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PymtAmount::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Ripple.PymtAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.currency");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->currency(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.value");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // string issuer = 3;
  if (this->issuer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.issuer");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->issuer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Ripple.PymtAmount)
}

::PROTOBUF_NAMESPACE_ID::uint8* PymtAmount::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Ripple.PymtAmount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->currency().data(), static_cast<int>(this->currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.currency");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->currency(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.value");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // string issuer = 3;
  if (this->issuer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->issuer().data(), static_cast<int>(this->issuer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtAmount.issuer");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->issuer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Ripple.PymtAmount)
  return target;
}

size_t PymtAmount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Ripple.PymtAmount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->currency());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value());
  }

  // string issuer = 3;
  if (this->issuer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->issuer());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PymtAmount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Ripple.PymtAmount)
  GOOGLE_DCHECK_NE(&from, this);
  const PymtAmount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PymtAmount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Ripple.PymtAmount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Ripple.PymtAmount)
    MergeFrom(*source);
  }
}

void PymtAmount::MergeFrom(const PymtAmount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Ripple.PymtAmount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.issuer().size() > 0) {

    issuer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.issuer_);
  }
}

void PymtAmount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Ripple.PymtAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PymtAmount::CopyFrom(const PymtAmount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Ripple.PymtAmount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PymtAmount::IsInitialized() const {
  return true;
}

void PymtAmount::InternalSwap(PymtAmount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  issuer_.Swap(&other->issuer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PymtAmount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PymtXRP::InitAsDefaultInstance() {
  ::JUB::Proto::Ripple::_PymtXRP_default_instance_._instance.get_mutable()->amount_ = const_cast< ::JUB::Proto::Ripple::PymtAmount*>(
      ::JUB::Proto::Ripple::PymtAmount::internal_default_instance());
  ::JUB::Proto::Ripple::_PymtXRP_default_instance_._instance.get_mutable()->send_max_ = const_cast< ::JUB::Proto::Ripple::PymtAmount*>(
      ::JUB::Proto::Ripple::PymtAmount::internal_default_instance());
  ::JUB::Proto::Ripple::_PymtXRP_default_instance_._instance.get_mutable()->deliver_min_ = const_cast< ::JUB::Proto::Ripple::PymtAmount*>(
      ::JUB::Proto::Ripple::PymtAmount::internal_default_instance());
}
class PymtXRP::_Internal {
 public:
  static const ::JUB::Proto::Ripple::PymtAmount& amount(const PymtXRP* msg);
  static const ::JUB::Proto::Ripple::PymtAmount& send_max(const PymtXRP* msg);
  static const ::JUB::Proto::Ripple::PymtAmount& deliver_min(const PymtXRP* msg);
};

const ::JUB::Proto::Ripple::PymtAmount&
PymtXRP::_Internal::amount(const PymtXRP* msg) {
  return *msg->amount_;
}
const ::JUB::Proto::Ripple::PymtAmount&
PymtXRP::_Internal::send_max(const PymtXRP* msg) {
  return *msg->send_max_;
}
const ::JUB::Proto::Ripple::PymtAmount&
PymtXRP::_Internal::deliver_min(const PymtXRP* msg) {
  return *msg->deliver_min_;
}
PymtXRP::PymtXRP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Ripple.PymtXRP)
}
PymtXRP::PymtXRP(const PymtXRP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.destination().empty()) {
    destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  destination_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.destination_tag().empty()) {
    destination_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_tag_);
  }
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.invoice_id().empty()) {
    invoice_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invoice_id_);
  }
  if (from.has_amount()) {
    amount_ = new ::JUB::Proto::Ripple::PymtAmount(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  if (from.has_send_max()) {
    send_max_ = new ::JUB::Proto::Ripple::PymtAmount(*from.send_max_);
  } else {
    send_max_ = nullptr;
  }
  if (from.has_deliver_min()) {
    deliver_min_ = new ::JUB::Proto::Ripple::PymtAmount(*from.deliver_min_);
  } else {
    deliver_min_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Ripple.PymtXRP)
}

void PymtXRP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PymtXRP_Jub_5fRipple_2eproto.base);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(type_));
}

PymtXRP::~PymtXRP() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Ripple.PymtXRP)
  SharedDtor();
}

void PymtXRP::SharedDtor() {
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
  if (this != internal_default_instance()) delete send_max_;
  if (this != internal_default_instance()) delete deliver_min_;
}

void PymtXRP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PymtXRP& PymtXRP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PymtXRP_Jub_5fRipple_2eproto.base);
  return *internal_default_instance();
}


void PymtXRP::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Ripple.PymtXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoice_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && deliver_min_ != nullptr) {
    delete deliver_min_;
  }
  deliver_min_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PymtXRP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Ripple.PymtAmount amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_destination(), ptr, ctx, "JUB.Proto.Ripple.PymtXRP.destination");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination_tag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_destination_tag(), ptr, ctx, "JUB.Proto.Ripple.PymtXRP.destination_tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string invoice_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_invoice_id(), ptr, ctx, "JUB.Proto.Ripple.PymtXRP.invoice_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Ripple.PymtAmount send_max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_send_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_deliver_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PymtXRP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Ripple.PymtXRP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Ripple.PymtAmount amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_amount()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_destination()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->destination().data(), static_cast<int>(this->destination().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtXRP.destination"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string destination_tag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_tag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->destination_tag().data(), static_cast<int>(this->destination_tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtXRP.destination_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string invoice_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_invoice_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->invoice_id().data(), static_cast<int>(this->invoice_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.PymtXRP.invoice_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Ripple.PymtAmount send_max = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_send_max()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_deliver_min()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Ripple.PymtXRP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Ripple.PymtXRP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PymtXRP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Ripple.PymtXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .JUB.Proto.Ripple.PymtAmount amount = 2;
  if (this->has_amount()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::amount(this), output);
  }

  // string destination = 3;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.destination");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination(), output);
  }

  // string destination_tag = 4;
  if (this->destination_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->destination_tag().data(), static_cast<int>(this->destination_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.destination_tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->destination_tag(), output);
  }

  // string invoice_id = 5;
  if (this->invoice_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->invoice_id().data(), static_cast<int>(this->invoice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.invoice_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->invoice_id(), output);
  }

  // .JUB.Proto.Ripple.PymtAmount send_max = 6;
  if (this->has_send_max()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::send_max(this), output);
  }

  // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
  if (this->has_deliver_min()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::deliver_min(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Ripple.PymtXRP)
}

::PROTOBUF_NAMESPACE_ID::uint8* PymtXRP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Ripple.PymtXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .JUB.Proto.Ripple.PymtAmount amount = 2;
  if (this->has_amount()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::amount(this), target);
  }

  // string destination = 3;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->destination().data(), static_cast<int>(this->destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.destination");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->destination(), target);
  }

  // string destination_tag = 4;
  if (this->destination_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->destination_tag().data(), static_cast<int>(this->destination_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.destination_tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->destination_tag(), target);
  }

  // string invoice_id = 5;
  if (this->invoice_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->invoice_id().data(), static_cast<int>(this->invoice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.PymtXRP.invoice_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->invoice_id(), target);
  }

  // .JUB.Proto.Ripple.PymtAmount send_max = 6;
  if (this->has_send_max()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::send_max(this), target);
  }

  // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
  if (this->has_deliver_min()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::deliver_min(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Ripple.PymtXRP)
  return target;
}

size_t PymtXRP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Ripple.PymtXRP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string destination = 3;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->destination());
  }

  // string destination_tag = 4;
  if (this->destination_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->destination_tag());
  }

  // string invoice_id = 5;
  if (this->invoice_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->invoice_id());
  }

  // .JUB.Proto.Ripple.PymtAmount amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // .JUB.Proto.Ripple.PymtAmount send_max = 6;
  if (this->has_send_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *send_max_);
  }

  // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
  if (this->has_deliver_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deliver_min_);
  }

  // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PymtXRP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Ripple.PymtXRP)
  GOOGLE_DCHECK_NE(&from, this);
  const PymtXRP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PymtXRP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Ripple.PymtXRP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Ripple.PymtXRP)
    MergeFrom(*source);
  }
}

void PymtXRP::MergeFrom(const PymtXRP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Ripple.PymtXRP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.destination_tag().size() > 0) {

    destination_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_tag_);
  }
  if (from.invoice_id().size() > 0) {

    invoice_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.invoice_id_);
  }
  if (from.has_amount()) {
    mutable_amount()->::JUB::Proto::Ripple::PymtAmount::MergeFrom(from.amount());
  }
  if (from.has_send_max()) {
    mutable_send_max()->::JUB::Proto::Ripple::PymtAmount::MergeFrom(from.send_max());
  }
  if (from.has_deliver_min()) {
    mutable_deliver_min()->::JUB::Proto::Ripple::PymtAmount::MergeFrom(from.deliver_min());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PymtXRP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Ripple.PymtXRP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PymtXRP::CopyFrom(const PymtXRP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Ripple.PymtXRP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PymtXRP::IsInitialized() const {
  return true;
}

void PymtXRP::InternalSwap(PymtXRP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_tag_.Swap(&other->destination_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  invoice_id_.Swap(&other->invoice_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(send_max_, other->send_max_);
  swap(deliver_min_, other->deliver_min_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PymtXRP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionXRP::InitAsDefaultInstance() {
  ::JUB::Proto::Ripple::_TransactionXRP_default_instance_.pymt_ = const_cast< ::JUB::Proto::Ripple::PymtXRP*>(
      ::JUB::Proto::Ripple::PymtXRP::internal_default_instance());
}
class TransactionXRP::_Internal {
 public:
  static const ::JUB::Proto::Ripple::PymtXRP& pymt(const TransactionXRP* msg);
};

const ::JUB::Proto::Ripple::PymtXRP&
TransactionXRP::_Internal::pymt(const TransactionXRP* msg) {
  return *msg->action_.pymt_;
}
void TransactionXRP::set_allocated_pymt(::JUB::Proto::Ripple::PymtXRP* pymt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (pymt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pymt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pymt, submessage_arena);
    }
    set_has_pymt();
    action_.pymt_ = pymt;
  }
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.pymt)
}
TransactionXRP::TransactionXRP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JUB.Proto.Ripple.TransactionXRP)
}
TransactionXRP::TransactionXRP(const TransactionXRP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.fee().empty()) {
    fee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sequence().empty()) {
    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  account_txn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_txn_id().empty()) {
    account_txn_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_txn_id_);
  }
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.flags().empty()) {
    flags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flags_);
  }
  last_ledger_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.last_ledger_sequence().empty()) {
    last_ledger_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_ledger_sequence_);
  }
  memos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.memos().empty()) {
    memos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memos_);
  }
  source_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.source_tag().empty()) {
    source_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_tag_);
  }
  type_ = from.type_;
  clear_has_action();
  switch (from.action_case()) {
    case kPymt: {
      mutable_pymt()->::JUB::Proto::Ripple::PymtXRP::MergeFrom(from.pymt());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:JUB.Proto.Ripple.TransactionXRP)
}

void TransactionXRP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionXRP_Jub_5fRipple_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_txn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_ledger_sequence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_has_action();
}

TransactionXRP::~TransactionXRP() {
  // @@protoc_insertion_point(destructor:JUB.Proto.Ripple.TransactionXRP)
  SharedDtor();
}

void TransactionXRP::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_txn_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_ledger_sequence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void TransactionXRP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionXRP& TransactionXRP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionXRP_Jub_5fRipple_2eproto.base);
  return *internal_default_instance();
}


void TransactionXRP::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:JUB.Proto.Ripple.TransactionXRP)
  switch (action_case()) {
    case kPymt: {
      delete action_.pymt_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void TransactionXRP::Clear() {
// @@protoc_insertion_point(message_clear_start:JUB.Proto.Ripple.TransactionXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_txn_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_ledger_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  clear_action();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionXRP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.account");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // string fee = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_fee(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.fee");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sequence(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account_txn_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_account_txn_id(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.account_txn_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_flags(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.flags");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_ledger_sequence = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_last_ledger_sequence(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_memos(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.memos");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_source_tag(), ptr, ctx, "JUB.Proto.Ripple.TransactionXRP.source_tag");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JUB.Proto.Ripple.PymtXRP pymt = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_pymt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionXRP::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:JUB.Proto.Ripple.TransactionXRP)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fee = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_fee()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->fee().data(), static_cast<int>(this->fee().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.fee"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sequence = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sequence().data(), static_cast<int>(this->sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_txn_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_account_txn_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->account_txn_id().data(), static_cast<int>(this->account_txn_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.account_txn_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string flags = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_flags()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->flags().data(), static_cast<int>(this->flags().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.flags"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string last_ledger_sequence = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_last_ledger_sequence()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->last_ledger_sequence().data(), static_cast<int>(this->last_ledger_sequence().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string memos = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_memos()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->memos().data(), static_cast<int>(this->memos().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.memos"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string source_tag = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_source_tag()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->source_tag().data(), static_cast<int>(this->source_tag().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "JUB.Proto.Ripple.TransactionXRP.source_tag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .JUB.Proto.Ripple.PymtXRP pymt = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pymt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:JUB.Proto.Ripple.TransactionXRP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:JUB.Proto.Ripple.TransactionXRP)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionXRP::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:JUB.Proto.Ripple.TransactionXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.account");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->account(), output);
  }

  // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.fee");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->fee(), output);
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sequence(), output);
  }

  // string account_txn_id = 5;
  if (this->account_txn_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_txn_id().data(), static_cast<int>(this->account_txn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.account_txn_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->account_txn_id(), output);
  }

  // string flags = 6;
  if (this->flags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), static_cast<int>(this->flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.flags");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->flags(), output);
  }

  // string last_ledger_sequence = 7;
  if (this->last_ledger_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_ledger_sequence().data(), static_cast<int>(this->last_ledger_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->last_ledger_sequence(), output);
  }

  // string memos = 8;
  if (this->memos().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->memos().data(), static_cast<int>(this->memos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.memos");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->memos(), output);
  }

  // string source_tag = 9;
  if (this->source_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_tag().data(), static_cast<int>(this->source_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.source_tag");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->source_tag(), output);
  }

  // .JUB.Proto.Ripple.PymtXRP pymt = 10;
  if (has_pymt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::pymt(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:JUB.Proto.Ripple.TransactionXRP)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionXRP::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:JUB.Proto.Ripple.TransactionXRP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.account");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->fee().data(), static_cast<int>(this->fee().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.fee");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->fee(), target);
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sequence().data(), static_cast<int>(this->sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->sequence(), target);
  }

  // string account_txn_id = 5;
  if (this->account_txn_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->account_txn_id().data(), static_cast<int>(this->account_txn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.account_txn_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->account_txn_id(), target);
  }

  // string flags = 6;
  if (this->flags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->flags().data(), static_cast<int>(this->flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.flags");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->flags(), target);
  }

  // string last_ledger_sequence = 7;
  if (this->last_ledger_sequence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->last_ledger_sequence().data(), static_cast<int>(this->last_ledger_sequence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->last_ledger_sequence(), target);
  }

  // string memos = 8;
  if (this->memos().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->memos().data(), static_cast<int>(this->memos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.memos");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->memos(), target);
  }

  // string source_tag = 9;
  if (this->source_tag().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->source_tag().data(), static_cast<int>(this->source_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JUB.Proto.Ripple.TransactionXRP.source_tag");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->source_tag(), target);
  }

  // .JUB.Proto.Ripple.PymtXRP pymt = 10;
  if (has_pymt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::pymt(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JUB.Proto.Ripple.TransactionXRP)
  return target;
}

size_t TransactionXRP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JUB.Proto.Ripple.TransactionXRP)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string fee = 3;
  if (this->fee().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->fee());
  }

  // string sequence = 4;
  if (this->sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sequence());
  }

  // string account_txn_id = 5;
  if (this->account_txn_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->account_txn_id());
  }

  // string flags = 6;
  if (this->flags().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->flags());
  }

  // string last_ledger_sequence = 7;
  if (this->last_ledger_sequence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->last_ledger_sequence());
  }

  // string memos = 8;
  if (this->memos().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->memos());
  }

  // string source_tag = 9;
  if (this->source_tag().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->source_tag());
  }

  // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  switch (action_case()) {
    // .JUB.Proto.Ripple.PymtXRP pymt = 10;
    case kPymt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.pymt_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionXRP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JUB.Proto.Ripple.TransactionXRP)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionXRP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionXRP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JUB.Proto.Ripple.TransactionXRP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JUB.Proto.Ripple.TransactionXRP)
    MergeFrom(*source);
  }
}

void TransactionXRP::MergeFrom(const TransactionXRP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JUB.Proto.Ripple.TransactionXRP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.fee().size() > 0) {

    fee_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fee_);
  }
  if (from.sequence().size() > 0) {

    sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sequence_);
  }
  if (from.account_txn_id().size() > 0) {

    account_txn_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_txn_id_);
  }
  if (from.flags().size() > 0) {

    flags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.flags_);
  }
  if (from.last_ledger_sequence().size() > 0) {

    last_ledger_sequence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_ledger_sequence_);
  }
  if (from.memos().size() > 0) {

    memos_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memos_);
  }
  if (from.source_tag().size() > 0) {

    source_tag_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_tag_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  switch (from.action_case()) {
    case kPymt: {
      mutable_pymt()->::JUB::Proto::Ripple::PymtXRP::MergeFrom(from.pymt());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void TransactionXRP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JUB.Proto.Ripple.TransactionXRP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionXRP::CopyFrom(const TransactionXRP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JUB.Proto.Ripple.TransactionXRP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionXRP::IsInitialized() const {
  return true;
}

void TransactionXRP::InternalSwap(TransactionXRP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fee_.Swap(&other->fee_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sequence_.Swap(&other->sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_txn_id_.Swap(&other->account_txn_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  flags_.Swap(&other->flags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_ledger_sequence_.Swap(&other->last_ledger_sequence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memos_.Swap(&other->memos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_tag_.Swap(&other->source_tag_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionXRP::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Ripple
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::JUB::Proto::Ripple::PymtAmount* Arena::CreateMaybeMessage< ::JUB::Proto::Ripple::PymtAmount >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::Ripple::PymtAmount >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::Ripple::PymtXRP* Arena::CreateMaybeMessage< ::JUB::Proto::Ripple::PymtXRP >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::Ripple::PymtXRP >(arena);
}
template<> PROTOBUF_NOINLINE ::JUB::Proto::Ripple::TransactionXRP* Arena::CreateMaybeMessage< ::JUB::Proto::Ripple::TransactionXRP >(Arena* arena) {
  return Arena::CreateInternal< ::JUB::Proto::Ripple::TransactionXRP >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
