// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Ripple.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fRipple_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fRipple_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fRipple_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fRipple_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fRipple_2eproto;
namespace JUB {
namespace Proto {
namespace Ripple {
class PymtAmount;
class PymtAmountDefaultTypeInternal;
extern PymtAmountDefaultTypeInternal _PymtAmount_default_instance_;
class PymtXRP;
class PymtXRPDefaultTypeInternal;
extern PymtXRPDefaultTypeInternal _PymtXRP_default_instance_;
class TransactionXRP;
class TransactionXRPDefaultTypeInternal;
extern TransactionXRPDefaultTypeInternal _TransactionXRP_default_instance_;
}  // namespace Ripple
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::Ripple::PymtAmount* Arena::CreateMaybeMessage<::JUB::Proto::Ripple::PymtAmount>(Arena*);
template<> ::JUB::Proto::Ripple::PymtXRP* Arena::CreateMaybeMessage<::JUB::Proto::Ripple::PymtXRP>(Arena*);
template<> ::JUB::Proto::Ripple::TransactionXRP* Arena::CreateMaybeMessage<::JUB::Proto::Ripple::TransactionXRP>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace Ripple {

enum ENUM_XRP_TX_TYPE : int {
  PYMT = 0,
  ENUM_XRP_TX_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_XRP_TX_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_XRP_TX_TYPE_IsValid(int value);
constexpr ENUM_XRP_TX_TYPE ENUM_XRP_TX_TYPE_MIN = PYMT;
constexpr ENUM_XRP_TX_TYPE ENUM_XRP_TX_TYPE_MAX = PYMT;
constexpr int ENUM_XRP_TX_TYPE_ARRAYSIZE = ENUM_XRP_TX_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_XRP_TX_TYPE_descriptor();
template<typename T>
inline const std::string& ENUM_XRP_TX_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_XRP_TX_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_XRP_TX_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_XRP_TX_TYPE_descriptor(), enum_t_value);
}
inline bool ENUM_XRP_TX_TYPE_Parse(
    const std::string& name, ENUM_XRP_TX_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_XRP_TX_TYPE>(
    ENUM_XRP_TX_TYPE_descriptor(), name, value);
}
enum ENUM_XRP_PYMT_TYPE : int {
  DXRP = 0,
  FX = 1,
  CHECKS = 2,
  ESCROW = 3,
  PRTL = 4,
  CHAN = 5,
  ENUM_XRP_PYMT_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_XRP_PYMT_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_XRP_PYMT_TYPE_IsValid(int value);
constexpr ENUM_XRP_PYMT_TYPE ENUM_XRP_PYMT_TYPE_MIN = DXRP;
constexpr ENUM_XRP_PYMT_TYPE ENUM_XRP_PYMT_TYPE_MAX = CHAN;
constexpr int ENUM_XRP_PYMT_TYPE_ARRAYSIZE = ENUM_XRP_PYMT_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_XRP_PYMT_TYPE_descriptor();
template<typename T>
inline const std::string& ENUM_XRP_PYMT_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_XRP_PYMT_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_XRP_PYMT_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_XRP_PYMT_TYPE_descriptor(), enum_t_value);
}
inline bool ENUM_XRP_PYMT_TYPE_Parse(
    const std::string& name, ENUM_XRP_PYMT_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_XRP_PYMT_TYPE>(
    ENUM_XRP_PYMT_TYPE_descriptor(), name, value);
}
// ===================================================================

class PymtAmount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ripple.PymtAmount) */ {
 public:
  PymtAmount();
  virtual ~PymtAmount();

  PymtAmount(const PymtAmount& from);
  PymtAmount(PymtAmount&& from) noexcept
    : PymtAmount() {
    *this = ::std::move(from);
  }

  inline PymtAmount& operator=(const PymtAmount& from) {
    CopyFrom(from);
    return *this;
  }
  inline PymtAmount& operator=(PymtAmount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PymtAmount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PymtAmount* internal_default_instance() {
    return reinterpret_cast<const PymtAmount*>(
               &_PymtAmount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PymtAmount& a, PymtAmount& b) {
    a.Swap(&b);
  }
  inline void Swap(PymtAmount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PymtAmount* New() const final {
    return CreateMaybeMessage<PymtAmount>(nullptr);
  }

  PymtAmount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PymtAmount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PymtAmount& from);
  void MergeFrom(const PymtAmount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PymtAmount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ripple.PymtAmount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fRipple_2eproto);
    return ::descriptor_table_Jub_5fRipple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kValueFieldNumber = 2,
    kIssuerFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string issuer = 3;
  void clear_issuer();
  const std::string& issuer() const;
  void set_issuer(const std::string& value);
  void set_issuer(std::string&& value);
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  std::string* mutable_issuer();
  std::string* release_issuer();
  void set_allocated_issuer(std::string* issuer);
  private:
  const std::string& _internal_issuer() const;
  void _internal_set_issuer(const std::string& value);
  std::string* _internal_mutable_issuer();
  public:

  // @@protoc_insertion_point(class_scope:JUB.Proto.Ripple.PymtAmount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr issuer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fRipple_2eproto;
};
// -------------------------------------------------------------------

class PymtXRP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ripple.PymtXRP) */ {
 public:
  PymtXRP();
  virtual ~PymtXRP();

  PymtXRP(const PymtXRP& from);
  PymtXRP(PymtXRP&& from) noexcept
    : PymtXRP() {
    *this = ::std::move(from);
  }

  inline PymtXRP& operator=(const PymtXRP& from) {
    CopyFrom(from);
    return *this;
  }
  inline PymtXRP& operator=(PymtXRP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PymtXRP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PymtXRP* internal_default_instance() {
    return reinterpret_cast<const PymtXRP*>(
               &_PymtXRP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PymtXRP& a, PymtXRP& b) {
    a.Swap(&b);
  }
  inline void Swap(PymtXRP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PymtXRP* New() const final {
    return CreateMaybeMessage<PymtXRP>(nullptr);
  }

  PymtXRP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PymtXRP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PymtXRP& from);
  void MergeFrom(const PymtXRP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PymtXRP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ripple.PymtXRP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fRipple_2eproto);
    return ::descriptor_table_Jub_5fRipple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 3,
    kDestinationTagFieldNumber = 4,
    kInvoiceIdFieldNumber = 5,
    kAmountFieldNumber = 2,
    kSendMaxFieldNumber = 6,
    kDeliverMinFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // string destination = 3;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // string destination_tag = 4;
  void clear_destination_tag();
  const std::string& destination_tag() const;
  void set_destination_tag(const std::string& value);
  void set_destination_tag(std::string&& value);
  void set_destination_tag(const char* value);
  void set_destination_tag(const char* value, size_t size);
  std::string* mutable_destination_tag();
  std::string* release_destination_tag();
  void set_allocated_destination_tag(std::string* destination_tag);
  private:
  const std::string& _internal_destination_tag() const;
  void _internal_set_destination_tag(const std::string& value);
  std::string* _internal_mutable_destination_tag();
  public:

  // string invoice_id = 5;
  void clear_invoice_id();
  const std::string& invoice_id() const;
  void set_invoice_id(const std::string& value);
  void set_invoice_id(std::string&& value);
  void set_invoice_id(const char* value);
  void set_invoice_id(const char* value, size_t size);
  std::string* mutable_invoice_id();
  std::string* release_invoice_id();
  void set_allocated_invoice_id(std::string* invoice_id);
  private:
  const std::string& _internal_invoice_id() const;
  void _internal_set_invoice_id(const std::string& value);
  std::string* _internal_mutable_invoice_id();
  public:

  // .JUB.Proto.Ripple.PymtAmount amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::JUB::Proto::Ripple::PymtAmount& amount() const;
  ::JUB::Proto::Ripple::PymtAmount* release_amount();
  ::JUB::Proto::Ripple::PymtAmount* mutable_amount();
  void set_allocated_amount(::JUB::Proto::Ripple::PymtAmount* amount);
  private:
  const ::JUB::Proto::Ripple::PymtAmount& _internal_amount() const;
  ::JUB::Proto::Ripple::PymtAmount* _internal_mutable_amount();
  public:

  // .JUB.Proto.Ripple.PymtAmount send_max = 6;
  bool has_send_max() const;
  private:
  bool _internal_has_send_max() const;
  public:
  void clear_send_max();
  const ::JUB::Proto::Ripple::PymtAmount& send_max() const;
  ::JUB::Proto::Ripple::PymtAmount* release_send_max();
  ::JUB::Proto::Ripple::PymtAmount* mutable_send_max();
  void set_allocated_send_max(::JUB::Proto::Ripple::PymtAmount* send_max);
  private:
  const ::JUB::Proto::Ripple::PymtAmount& _internal_send_max() const;
  ::JUB::Proto::Ripple::PymtAmount* _internal_mutable_send_max();
  public:

  // .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
  bool has_deliver_min() const;
  private:
  bool _internal_has_deliver_min() const;
  public:
  void clear_deliver_min();
  const ::JUB::Proto::Ripple::PymtAmount& deliver_min() const;
  ::JUB::Proto::Ripple::PymtAmount* release_deliver_min();
  ::JUB::Proto::Ripple::PymtAmount* mutable_deliver_min();
  void set_allocated_deliver_min(::JUB::Proto::Ripple::PymtAmount* deliver_min);
  private:
  const ::JUB::Proto::Ripple::PymtAmount& _internal_deliver_min() const;
  ::JUB::Proto::Ripple::PymtAmount* _internal_mutable_deliver_min();
  public:

  // .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
  void clear_type();
  ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE type() const;
  void set_type(::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE value);
  private:
  ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE _internal_type() const;
  void _internal_set_type(::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:JUB.Proto.Ripple.PymtXRP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_tag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoice_id_;
  ::JUB::Proto::Ripple::PymtAmount* amount_;
  ::JUB::Proto::Ripple::PymtAmount* send_max_;
  ::JUB::Proto::Ripple::PymtAmount* deliver_min_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fRipple_2eproto;
};
// -------------------------------------------------------------------

class TransactionXRP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Ripple.TransactionXRP) */ {
 public:
  TransactionXRP();
  virtual ~TransactionXRP();

  TransactionXRP(const TransactionXRP& from);
  TransactionXRP(TransactionXRP&& from) noexcept
    : TransactionXRP() {
    *this = ::std::move(from);
  }

  inline TransactionXRP& operator=(const TransactionXRP& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionXRP& operator=(TransactionXRP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionXRP& default_instance();

  enum ActionCase {
    kPymt = 10,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionXRP* internal_default_instance() {
    return reinterpret_cast<const TransactionXRP*>(
               &_TransactionXRP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TransactionXRP& a, TransactionXRP& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionXRP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionXRP* New() const final {
    return CreateMaybeMessage<TransactionXRP>(nullptr);
  }

  TransactionXRP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionXRP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionXRP& from);
  void MergeFrom(const TransactionXRP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionXRP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Ripple.TransactionXRP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fRipple_2eproto);
    return ::descriptor_table_Jub_5fRipple_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kFeeFieldNumber = 3,
    kSequenceFieldNumber = 4,
    kAccountTxnIdFieldNumber = 5,
    kFlagsFieldNumber = 6,
    kLastLedgerSequenceFieldNumber = 7,
    kMemosFieldNumber = 8,
    kSourceTagFieldNumber = 9,
    kTypeFieldNumber = 2,
    kPymtFieldNumber = 10,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string fee = 3;
  void clear_fee();
  const std::string& fee() const;
  void set_fee(const std::string& value);
  void set_fee(std::string&& value);
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  std::string* mutable_fee();
  std::string* release_fee();
  void set_allocated_fee(std::string* fee);
  private:
  const std::string& _internal_fee() const;
  void _internal_set_fee(const std::string& value);
  std::string* _internal_mutable_fee();
  public:

  // string sequence = 4;
  void clear_sequence();
  const std::string& sequence() const;
  void set_sequence(const std::string& value);
  void set_sequence(std::string&& value);
  void set_sequence(const char* value);
  void set_sequence(const char* value, size_t size);
  std::string* mutable_sequence();
  std::string* release_sequence();
  void set_allocated_sequence(std::string* sequence);
  private:
  const std::string& _internal_sequence() const;
  void _internal_set_sequence(const std::string& value);
  std::string* _internal_mutable_sequence();
  public:

  // string account_txn_id = 5;
  void clear_account_txn_id();
  const std::string& account_txn_id() const;
  void set_account_txn_id(const std::string& value);
  void set_account_txn_id(std::string&& value);
  void set_account_txn_id(const char* value);
  void set_account_txn_id(const char* value, size_t size);
  std::string* mutable_account_txn_id();
  std::string* release_account_txn_id();
  void set_allocated_account_txn_id(std::string* account_txn_id);
  private:
  const std::string& _internal_account_txn_id() const;
  void _internal_set_account_txn_id(const std::string& value);
  std::string* _internal_mutable_account_txn_id();
  public:

  // string flags = 6;
  void clear_flags();
  const std::string& flags() const;
  void set_flags(const std::string& value);
  void set_flags(std::string&& value);
  void set_flags(const char* value);
  void set_flags(const char* value, size_t size);
  std::string* mutable_flags();
  std::string* release_flags();
  void set_allocated_flags(std::string* flags);
  private:
  const std::string& _internal_flags() const;
  void _internal_set_flags(const std::string& value);
  std::string* _internal_mutable_flags();
  public:

  // string last_ledger_sequence = 7;
  void clear_last_ledger_sequence();
  const std::string& last_ledger_sequence() const;
  void set_last_ledger_sequence(const std::string& value);
  void set_last_ledger_sequence(std::string&& value);
  void set_last_ledger_sequence(const char* value);
  void set_last_ledger_sequence(const char* value, size_t size);
  std::string* mutable_last_ledger_sequence();
  std::string* release_last_ledger_sequence();
  void set_allocated_last_ledger_sequence(std::string* last_ledger_sequence);
  private:
  const std::string& _internal_last_ledger_sequence() const;
  void _internal_set_last_ledger_sequence(const std::string& value);
  std::string* _internal_mutable_last_ledger_sequence();
  public:

  // string memos = 8;
  void clear_memos();
  const std::string& memos() const;
  void set_memos(const std::string& value);
  void set_memos(std::string&& value);
  void set_memos(const char* value);
  void set_memos(const char* value, size_t size);
  std::string* mutable_memos();
  std::string* release_memos();
  void set_allocated_memos(std::string* memos);
  private:
  const std::string& _internal_memos() const;
  void _internal_set_memos(const std::string& value);
  std::string* _internal_mutable_memos();
  public:

  // string source_tag = 9;
  void clear_source_tag();
  const std::string& source_tag() const;
  void set_source_tag(const std::string& value);
  void set_source_tag(std::string&& value);
  void set_source_tag(const char* value);
  void set_source_tag(const char* value, size_t size);
  std::string* mutable_source_tag();
  std::string* release_source_tag();
  void set_allocated_source_tag(std::string* source_tag);
  private:
  const std::string& _internal_source_tag() const;
  void _internal_set_source_tag(const std::string& value);
  std::string* _internal_mutable_source_tag();
  public:

  // .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
  void clear_type();
  ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE type() const;
  void set_type(::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE value);
  private:
  ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE _internal_type() const;
  void _internal_set_type(::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE value);
  public:

  // .JUB.Proto.Ripple.PymtXRP pymt = 10;
  bool has_pymt() const;
  private:
  bool _internal_has_pymt() const;
  public:
  void clear_pymt();
  const ::JUB::Proto::Ripple::PymtXRP& pymt() const;
  ::JUB::Proto::Ripple::PymtXRP* release_pymt();
  ::JUB::Proto::Ripple::PymtXRP* mutable_pymt();
  void set_allocated_pymt(::JUB::Proto::Ripple::PymtXRP* pymt);
  private:
  const ::JUB::Proto::Ripple::PymtXRP& _internal_pymt() const;
  ::JUB::Proto::Ripple::PymtXRP* _internal_mutable_pymt();
  public:

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:JUB.Proto.Ripple.TransactionXRP)
 private:
  class _Internal;
  void set_has_pymt();

  inline bool has_action() const;
  inline void clear_has_action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fee_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_txn_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_ledger_sequence_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_tag_;
  int type_;
  union ActionUnion {
    ActionUnion() {}
    ::JUB::Proto::Ripple::PymtXRP* pymt_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Jub_5fRipple_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PymtAmount

// string currency = 1;
inline void PymtAmount::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtAmount::currency() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtAmount.currency)
  return _internal_currency();
}
inline void PymtAmount::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtAmount.currency)
}
inline std::string* PymtAmount::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtAmount.currency)
  return _internal_mutable_currency();
}
inline const std::string& PymtAmount::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void PymtAmount::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtAmount::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtAmount.currency)
}
inline void PymtAmount::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtAmount.currency)
}
inline void PymtAmount::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtAmount.currency)
}
inline std::string* PymtAmount::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtAmount::release_currency() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtAmount.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtAmount::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtAmount.currency)
}

// string value = 2;
inline void PymtAmount::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtAmount::value() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtAmount.value)
  return _internal_value();
}
inline void PymtAmount::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtAmount.value)
}
inline std::string* PymtAmount::mutable_value() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtAmount.value)
  return _internal_mutable_value();
}
inline const std::string& PymtAmount::_internal_value() const {
  return value_.GetNoArena();
}
inline void PymtAmount::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtAmount::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtAmount.value)
}
inline void PymtAmount::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtAmount.value)
}
inline void PymtAmount::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtAmount.value)
}
inline std::string* PymtAmount::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtAmount::release_value() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtAmount.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtAmount::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtAmount.value)
}

// string issuer = 3;
inline void PymtAmount::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtAmount::issuer() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtAmount.issuer)
  return _internal_issuer();
}
inline void PymtAmount::set_issuer(const std::string& value) {
  _internal_set_issuer(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtAmount.issuer)
}
inline std::string* PymtAmount::mutable_issuer() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtAmount.issuer)
  return _internal_mutable_issuer();
}
inline const std::string& PymtAmount::_internal_issuer() const {
  return issuer_.GetNoArena();
}
inline void PymtAmount::_internal_set_issuer(const std::string& value) {
  
  issuer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtAmount::set_issuer(std::string&& value) {
  
  issuer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtAmount.issuer)
}
inline void PymtAmount::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtAmount.issuer)
}
inline void PymtAmount::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtAmount.issuer)
}
inline std::string* PymtAmount::_internal_mutable_issuer() {
  
  return issuer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtAmount::release_issuer() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtAmount.issuer)
  
  return issuer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtAmount::set_allocated_issuer(std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtAmount.issuer)
}

// -------------------------------------------------------------------

// PymtXRP

// .JUB.Proto.Ripple.ENUM_XRP_PYMT_TYPE type = 1;
inline void PymtXRP::clear_type() {
  type_ = 0;
}
inline ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE PymtXRP::_internal_type() const {
  return static_cast< ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE >(type_);
}
inline ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE PymtXRP::type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.type)
  return _internal_type();
}
inline void PymtXRP::_internal_set_type(::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE value) {
  
  type_ = value;
}
inline void PymtXRP::set_type(::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtXRP.type)
}

// .JUB.Proto.Ripple.PymtAmount amount = 2;
inline bool PymtXRP::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool PymtXRP::has_amount() const {
  return _internal_has_amount();
}
inline void PymtXRP::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::_internal_amount() const {
  const ::JUB::Proto::Ripple::PymtAmount* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Ripple::PymtAmount*>(
      &::JUB::Proto::Ripple::_PymtAmount_default_instance_);
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::amount() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.amount)
  return _internal_amount();
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::release_amount() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.amount)
  
  ::JUB::Proto::Ripple::PymtAmount* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Ripple::PymtAmount>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.amount)
  return _internal_mutable_amount();
}
inline void PymtXRP::set_allocated_amount(::JUB::Proto::Ripple::PymtAmount* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.amount)
}

// string destination = 3;
inline void PymtXRP::clear_destination() {
  destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtXRP::destination() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.destination)
  return _internal_destination();
}
inline void PymtXRP::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtXRP.destination)
}
inline std::string* PymtXRP::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.destination)
  return _internal_mutable_destination();
}
inline const std::string& PymtXRP::_internal_destination() const {
  return destination_.GetNoArena();
}
inline void PymtXRP::_internal_set_destination(const std::string& value) {
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtXRP::set_destination(std::string&& value) {
  
  destination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtXRP.destination)
}
inline void PymtXRP::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtXRP.destination)
}
inline void PymtXRP::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtXRP.destination)
}
inline std::string* PymtXRP::_internal_mutable_destination() {
  
  return destination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtXRP::release_destination() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.destination)
  
  return destination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtXRP::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.destination)
}

// string destination_tag = 4;
inline void PymtXRP::clear_destination_tag() {
  destination_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtXRP::destination_tag() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.destination_tag)
  return _internal_destination_tag();
}
inline void PymtXRP::set_destination_tag(const std::string& value) {
  _internal_set_destination_tag(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtXRP.destination_tag)
}
inline std::string* PymtXRP::mutable_destination_tag() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.destination_tag)
  return _internal_mutable_destination_tag();
}
inline const std::string& PymtXRP::_internal_destination_tag() const {
  return destination_tag_.GetNoArena();
}
inline void PymtXRP::_internal_set_destination_tag(const std::string& value) {
  
  destination_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtXRP::set_destination_tag(std::string&& value) {
  
  destination_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtXRP.destination_tag)
}
inline void PymtXRP::set_destination_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtXRP.destination_tag)
}
inline void PymtXRP::set_destination_tag(const char* value, size_t size) {
  
  destination_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtXRP.destination_tag)
}
inline std::string* PymtXRP::_internal_mutable_destination_tag() {
  
  return destination_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtXRP::release_destination_tag() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.destination_tag)
  
  return destination_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtXRP::set_allocated_destination_tag(std::string* destination_tag) {
  if (destination_tag != nullptr) {
    
  } else {
    
  }
  destination_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_tag);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.destination_tag)
}

// string invoice_id = 5;
inline void PymtXRP::clear_invoice_id() {
  invoice_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PymtXRP::invoice_id() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.invoice_id)
  return _internal_invoice_id();
}
inline void PymtXRP::set_invoice_id(const std::string& value) {
  _internal_set_invoice_id(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.PymtXRP.invoice_id)
}
inline std::string* PymtXRP::mutable_invoice_id() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.invoice_id)
  return _internal_mutable_invoice_id();
}
inline const std::string& PymtXRP::_internal_invoice_id() const {
  return invoice_id_.GetNoArena();
}
inline void PymtXRP::_internal_set_invoice_id(const std::string& value) {
  
  invoice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PymtXRP::set_invoice_id(std::string&& value) {
  
  invoice_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.PymtXRP.invoice_id)
}
inline void PymtXRP::set_invoice_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  invoice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.PymtXRP.invoice_id)
}
inline void PymtXRP::set_invoice_id(const char* value, size_t size) {
  
  invoice_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.PymtXRP.invoice_id)
}
inline std::string* PymtXRP::_internal_mutable_invoice_id() {
  
  return invoice_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PymtXRP::release_invoice_id() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.invoice_id)
  
  return invoice_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PymtXRP::set_allocated_invoice_id(std::string* invoice_id) {
  if (invoice_id != nullptr) {
    
  } else {
    
  }
  invoice_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invoice_id);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.invoice_id)
}

// .JUB.Proto.Ripple.PymtAmount send_max = 6;
inline bool PymtXRP::_internal_has_send_max() const {
  return this != internal_default_instance() && send_max_ != nullptr;
}
inline bool PymtXRP::has_send_max() const {
  return _internal_has_send_max();
}
inline void PymtXRP::clear_send_max() {
  if (GetArenaNoVirtual() == nullptr && send_max_ != nullptr) {
    delete send_max_;
  }
  send_max_ = nullptr;
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::_internal_send_max() const {
  const ::JUB::Proto::Ripple::PymtAmount* p = send_max_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Ripple::PymtAmount*>(
      &::JUB::Proto::Ripple::_PymtAmount_default_instance_);
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::send_max() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.send_max)
  return _internal_send_max();
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::release_send_max() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.send_max)
  
  ::JUB::Proto::Ripple::PymtAmount* temp = send_max_;
  send_max_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::_internal_mutable_send_max() {
  
  if (send_max_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Ripple::PymtAmount>(GetArenaNoVirtual());
    send_max_ = p;
  }
  return send_max_;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::mutable_send_max() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.send_max)
  return _internal_mutable_send_max();
}
inline void PymtXRP::set_allocated_send_max(::JUB::Proto::Ripple::PymtAmount* send_max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete send_max_;
  }
  if (send_max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      send_max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_max, submessage_arena);
    }
    
  } else {
    
  }
  send_max_ = send_max;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.send_max)
}

// .JUB.Proto.Ripple.PymtAmount deliver_min = 7;
inline bool PymtXRP::_internal_has_deliver_min() const {
  return this != internal_default_instance() && deliver_min_ != nullptr;
}
inline bool PymtXRP::has_deliver_min() const {
  return _internal_has_deliver_min();
}
inline void PymtXRP::clear_deliver_min() {
  if (GetArenaNoVirtual() == nullptr && deliver_min_ != nullptr) {
    delete deliver_min_;
  }
  deliver_min_ = nullptr;
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::_internal_deliver_min() const {
  const ::JUB::Proto::Ripple::PymtAmount* p = deliver_min_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Ripple::PymtAmount*>(
      &::JUB::Proto::Ripple::_PymtAmount_default_instance_);
}
inline const ::JUB::Proto::Ripple::PymtAmount& PymtXRP::deliver_min() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.PymtXRP.deliver_min)
  return _internal_deliver_min();
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::release_deliver_min() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.PymtXRP.deliver_min)
  
  ::JUB::Proto::Ripple::PymtAmount* temp = deliver_min_;
  deliver_min_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::_internal_mutable_deliver_min() {
  
  if (deliver_min_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Ripple::PymtAmount>(GetArenaNoVirtual());
    deliver_min_ = p;
  }
  return deliver_min_;
}
inline ::JUB::Proto::Ripple::PymtAmount* PymtXRP::mutable_deliver_min() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.PymtXRP.deliver_min)
  return _internal_mutable_deliver_min();
}
inline void PymtXRP::set_allocated_deliver_min(::JUB::Proto::Ripple::PymtAmount* deliver_min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete deliver_min_;
  }
  if (deliver_min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      deliver_min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deliver_min, submessage_arena);
    }
    
  } else {
    
  }
  deliver_min_ = deliver_min;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.PymtXRP.deliver_min)
}

// -------------------------------------------------------------------

// TransactionXRP

// string account = 1;
inline void TransactionXRP::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::account() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.account)
  return _internal_account();
}
inline void TransactionXRP::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.account)
}
inline std::string* TransactionXRP::mutable_account() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.account)
  return _internal_mutable_account();
}
inline const std::string& TransactionXRP::_internal_account() const {
  return account_.GetNoArena();
}
inline void TransactionXRP::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.account)
}
inline void TransactionXRP::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.account)
}
inline void TransactionXRP::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.account)
}
inline std::string* TransactionXRP::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_account() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.account)
}

// .JUB.Proto.Ripple.ENUM_XRP_TX_TYPE type = 2;
inline void TransactionXRP::clear_type() {
  type_ = 0;
}
inline ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE TransactionXRP::_internal_type() const {
  return static_cast< ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE >(type_);
}
inline ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE TransactionXRP::type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.type)
  return _internal_type();
}
inline void TransactionXRP::_internal_set_type(::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE value) {
  
  type_ = value;
}
inline void TransactionXRP::set_type(::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.type)
}

// string fee = 3;
inline void TransactionXRP::clear_fee() {
  fee_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::fee() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.fee)
  return _internal_fee();
}
inline void TransactionXRP::set_fee(const std::string& value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.fee)
}
inline std::string* TransactionXRP::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.fee)
  return _internal_mutable_fee();
}
inline const std::string& TransactionXRP::_internal_fee() const {
  return fee_.GetNoArena();
}
inline void TransactionXRP::_internal_set_fee(const std::string& value) {
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_fee(std::string&& value) {
  
  fee_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.fee)
}
inline void TransactionXRP::set_fee(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.fee)
}
inline void TransactionXRP::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.fee)
}
inline std::string* TransactionXRP::_internal_mutable_fee() {
  
  return fee_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_fee() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.fee)
  
  return fee_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_fee(std::string* fee) {
  if (fee != nullptr) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.fee)
}

// string sequence = 4;
inline void TransactionXRP::clear_sequence() {
  sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::sequence() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.sequence)
  return _internal_sequence();
}
inline void TransactionXRP::set_sequence(const std::string& value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.sequence)
}
inline std::string* TransactionXRP::mutable_sequence() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.sequence)
  return _internal_mutable_sequence();
}
inline const std::string& TransactionXRP::_internal_sequence() const {
  return sequence_.GetNoArena();
}
inline void TransactionXRP::_internal_set_sequence(const std::string& value) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_sequence(std::string&& value) {
  
  sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.sequence)
}
inline void TransactionXRP::set_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.sequence)
}
inline void TransactionXRP::set_sequence(const char* value, size_t size) {
  
  sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.sequence)
}
inline std::string* TransactionXRP::_internal_mutable_sequence() {
  
  return sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_sequence() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.sequence)
  
  return sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_sequence(std::string* sequence) {
  if (sequence != nullptr) {
    
  } else {
    
  }
  sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sequence);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.sequence)
}

// string account_txn_id = 5;
inline void TransactionXRP::clear_account_txn_id() {
  account_txn_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::account_txn_id() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
  return _internal_account_txn_id();
}
inline void TransactionXRP::set_account_txn_id(const std::string& value) {
  _internal_set_account_txn_id(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
}
inline std::string* TransactionXRP::mutable_account_txn_id() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
  return _internal_mutable_account_txn_id();
}
inline const std::string& TransactionXRP::_internal_account_txn_id() const {
  return account_txn_id_.GetNoArena();
}
inline void TransactionXRP::_internal_set_account_txn_id(const std::string& value) {
  
  account_txn_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_account_txn_id(std::string&& value) {
  
  account_txn_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
}
inline void TransactionXRP::set_account_txn_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_txn_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
}
inline void TransactionXRP::set_account_txn_id(const char* value, size_t size) {
  
  account_txn_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
}
inline std::string* TransactionXRP::_internal_mutable_account_txn_id() {
  
  return account_txn_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_account_txn_id() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
  
  return account_txn_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_account_txn_id(std::string* account_txn_id) {
  if (account_txn_id != nullptr) {
    
  } else {
    
  }
  account_txn_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_txn_id);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.account_txn_id)
}

// string flags = 6;
inline void TransactionXRP::clear_flags() {
  flags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::flags() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.flags)
  return _internal_flags();
}
inline void TransactionXRP::set_flags(const std::string& value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.flags)
}
inline std::string* TransactionXRP::mutable_flags() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.flags)
  return _internal_mutable_flags();
}
inline const std::string& TransactionXRP::_internal_flags() const {
  return flags_.GetNoArena();
}
inline void TransactionXRP::_internal_set_flags(const std::string& value) {
  
  flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_flags(std::string&& value) {
  
  flags_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.flags)
}
inline void TransactionXRP::set_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.flags)
}
inline void TransactionXRP::set_flags(const char* value, size_t size) {
  
  flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.flags)
}
inline std::string* TransactionXRP::_internal_mutable_flags() {
  
  return flags_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_flags() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.flags)
  
  return flags_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_flags(std::string* flags) {
  if (flags != nullptr) {
    
  } else {
    
  }
  flags_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flags);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.flags)
}

// string last_ledger_sequence = 7;
inline void TransactionXRP::clear_last_ledger_sequence() {
  last_ledger_sequence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::last_ledger_sequence() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
  return _internal_last_ledger_sequence();
}
inline void TransactionXRP::set_last_ledger_sequence(const std::string& value) {
  _internal_set_last_ledger_sequence(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
}
inline std::string* TransactionXRP::mutable_last_ledger_sequence() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
  return _internal_mutable_last_ledger_sequence();
}
inline const std::string& TransactionXRP::_internal_last_ledger_sequence() const {
  return last_ledger_sequence_.GetNoArena();
}
inline void TransactionXRP::_internal_set_last_ledger_sequence(const std::string& value) {
  
  last_ledger_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_last_ledger_sequence(std::string&& value) {
  
  last_ledger_sequence_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
}
inline void TransactionXRP::set_last_ledger_sequence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_ledger_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
}
inline void TransactionXRP::set_last_ledger_sequence(const char* value, size_t size) {
  
  last_ledger_sequence_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
}
inline std::string* TransactionXRP::_internal_mutable_last_ledger_sequence() {
  
  return last_ledger_sequence_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_last_ledger_sequence() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
  
  return last_ledger_sequence_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_last_ledger_sequence(std::string* last_ledger_sequence) {
  if (last_ledger_sequence != nullptr) {
    
  } else {
    
  }
  last_ledger_sequence_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_ledger_sequence);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.last_ledger_sequence)
}

// string memos = 8;
inline void TransactionXRP::clear_memos() {
  memos_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::memos() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.memos)
  return _internal_memos();
}
inline void TransactionXRP::set_memos(const std::string& value) {
  _internal_set_memos(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.memos)
}
inline std::string* TransactionXRP::mutable_memos() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.memos)
  return _internal_mutable_memos();
}
inline const std::string& TransactionXRP::_internal_memos() const {
  return memos_.GetNoArena();
}
inline void TransactionXRP::_internal_set_memos(const std::string& value) {
  
  memos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_memos(std::string&& value) {
  
  memos_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.memos)
}
inline void TransactionXRP::set_memos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.memos)
}
inline void TransactionXRP::set_memos(const char* value, size_t size) {
  
  memos_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.memos)
}
inline std::string* TransactionXRP::_internal_mutable_memos() {
  
  return memos_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_memos() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.memos)
  
  return memos_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_memos(std::string* memos) {
  if (memos != nullptr) {
    
  } else {
    
  }
  memos_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memos);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.memos)
}

// string source_tag = 9;
inline void TransactionXRP::clear_source_tag() {
  source_tag_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionXRP::source_tag() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.source_tag)
  return _internal_source_tag();
}
inline void TransactionXRP::set_source_tag(const std::string& value) {
  _internal_set_source_tag(value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Ripple.TransactionXRP.source_tag)
}
inline std::string* TransactionXRP::mutable_source_tag() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.source_tag)
  return _internal_mutable_source_tag();
}
inline const std::string& TransactionXRP::_internal_source_tag() const {
  return source_tag_.GetNoArena();
}
inline void TransactionXRP::_internal_set_source_tag(const std::string& value) {
  
  source_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TransactionXRP::set_source_tag(std::string&& value) {
  
  source_tag_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Ripple.TransactionXRP.source_tag)
}
inline void TransactionXRP::set_source_tag(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Ripple.TransactionXRP.source_tag)
}
inline void TransactionXRP::set_source_tag(const char* value, size_t size) {
  
  source_tag_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Ripple.TransactionXRP.source_tag)
}
inline std::string* TransactionXRP::_internal_mutable_source_tag() {
  
  return source_tag_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionXRP::release_source_tag() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.source_tag)
  
  return source_tag_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionXRP::set_allocated_source_tag(std::string* source_tag) {
  if (source_tag != nullptr) {
    
  } else {
    
  }
  source_tag_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_tag);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Ripple.TransactionXRP.source_tag)
}

// .JUB.Proto.Ripple.PymtXRP pymt = 10;
inline bool TransactionXRP::_internal_has_pymt() const {
  return action_case() == kPymt;
}
inline bool TransactionXRP::has_pymt() const {
  return _internal_has_pymt();
}
inline void TransactionXRP::set_has_pymt() {
  _oneof_case_[0] = kPymt;
}
inline void TransactionXRP::clear_pymt() {
  if (_internal_has_pymt()) {
    delete action_.pymt_;
    clear_has_action();
  }
}
inline ::JUB::Proto::Ripple::PymtXRP* TransactionXRP::release_pymt() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Ripple.TransactionXRP.pymt)
  if (_internal_has_pymt()) {
    clear_has_action();
      ::JUB::Proto::Ripple::PymtXRP* temp = action_.pymt_;
    action_.pymt_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JUB::Proto::Ripple::PymtXRP& TransactionXRP::_internal_pymt() const {
  return _internal_has_pymt()
      ? *action_.pymt_
      : *reinterpret_cast< ::JUB::Proto::Ripple::PymtXRP*>(&::JUB::Proto::Ripple::_PymtXRP_default_instance_);
}
inline const ::JUB::Proto::Ripple::PymtXRP& TransactionXRP::pymt() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Ripple.TransactionXRP.pymt)
  return _internal_pymt();
}
inline ::JUB::Proto::Ripple::PymtXRP* TransactionXRP::_internal_mutable_pymt() {
  if (!_internal_has_pymt()) {
    clear_action();
    set_has_pymt();
    action_.pymt_ = CreateMaybeMessage< ::JUB::Proto::Ripple::PymtXRP >(
        GetArenaNoVirtual());
  }
  return action_.pymt_;
}
inline ::JUB::Proto::Ripple::PymtXRP* TransactionXRP::mutable_pymt() {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Ripple.TransactionXRP.pymt)
  return _internal_mutable_pymt();
}

inline bool TransactionXRP::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void TransactionXRP::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline TransactionXRP::ActionCase TransactionXRP::action_case() const {
  return TransactionXRP::ActionCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Ripple
}  // namespace Proto
}  // namespace JUB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE>() {
  return ::JUB::Proto::Ripple::ENUM_XRP_TX_TYPE_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE>() {
  return ::JUB::Proto::Ripple::ENUM_XRP_PYMT_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fRipple_2eproto
