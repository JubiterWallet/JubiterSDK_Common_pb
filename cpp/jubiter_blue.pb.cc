// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiter_blue.proto

#include "jubiter_blue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDevice_jubiter_5fblue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fblue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_jubiter_5fblue_2eproto;
class Int32ValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Int32Value> _instance;
} _Int32Value_default_instance_;
class BluetoothStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothState> _instance;
} _BluetoothState_default_instance_;
class BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse> _instance;
} _BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
class BluetoothAdvertisementData_ServiceDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothAdvertisementData_ServiceDataEntry_DoNotUse> _instance;
} _BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
class BluetoothAdvertisementDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothAdvertisementData> _instance;
} _BluetoothAdvertisementData_default_instance_;
class ScanSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ScanSettings> _instance;
} _ScanSettings_default_instance_;
class BluetoothScanResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothScanResult> _instance;
} _BluetoothScanResult_default_instance_;
class BluetoothConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothConnectRequest> _instance;
} _BluetoothConnectRequest_default_instance_;
class BluetoothDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothDevice> _instance;
} _BluetoothDevice_default_instance_;
class BluetoothDeviceStateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothDeviceStateResponse> _instance;
} _BluetoothDeviceStateResponse_default_instance_;
class BluetoothConnectedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BluetoothConnectedResponse> _instance;
} _BluetoothConnectedResponse_default_instance_;
class EnrollFpStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnrollFpState> _instance;
} _EnrollFpState_default_instance_;
static void InitDefaultsscc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothAdvertisementData_default_instance_;
    new (ptr) ::BluetoothAdvertisementData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothAdvertisementData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto}, {
      &scc_info_Int32Value_jubiter_5fblue_2eproto.base,
      &scc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto.base,
      &scc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto.base,}};

static void InitDefaultsscc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_;
    new (ptr) ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse();
  }
  ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_default_instance_;
    new (ptr) ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse();
  }
  ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothConnectRequest_default_instance_;
    new (ptr) ::BluetoothConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothConnectedResponse_default_instance_;
    new (ptr) ::BluetoothConnectedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothConnectedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto}, {
      &scc_info_BluetoothDevice_jubiter_5fblue_2eproto.base,}};

static void InitDefaultsscc_info_BluetoothDevice_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothDevice_default_instance_;
    new (ptr) ::BluetoothDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDevice_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothDevice_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothDeviceStateResponse_default_instance_;
    new (ptr) ::BluetoothDeviceStateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothDeviceStateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_BluetoothScanResult_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothScanResult_default_instance_;
    new (ptr) ::BluetoothScanResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothScanResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BluetoothScanResult_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_BluetoothScanResult_jubiter_5fblue_2eproto}, {
      &scc_info_BluetoothDevice_jubiter_5fblue_2eproto.base,
      &scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto.base,}};

static void InitDefaultsscc_info_BluetoothState_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BluetoothState_default_instance_;
    new (ptr) ::BluetoothState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BluetoothState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BluetoothState_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BluetoothState_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_EnrollFpState_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EnrollFpState_default_instance_;
    new (ptr) ::EnrollFpState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EnrollFpState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnrollFpState_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnrollFpState_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_Int32Value_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Int32Value_default_instance_;
    new (ptr) ::Int32Value();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Int32Value::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32Value_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Int32Value_jubiter_5fblue_2eproto}, {}};

static void InitDefaultsscc_info_ScanSettings_jubiter_5fblue_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ScanSettings_default_instance_;
    new (ptr) ::ScanSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ScanSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ScanSettings_jubiter_5fblue_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ScanSettings_jubiter_5fblue_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jubiter_5fblue_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_jubiter_5fblue_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jubiter_5fblue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jubiter_5fblue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Int32Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Int32Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothState, state_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, local_name_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, tx_power_level_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, connectable_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, manufacturer_data_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, service_data_),
  PROTOBUF_FIELD_OFFSET(::BluetoothAdvertisementData, service_uuids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ScanSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ScanSettings, android_scan_mode_),
  PROTOBUF_FIELD_OFFSET(::ScanSettings, service_uuids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothScanResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothScanResult, device_),
  PROTOBUF_FIELD_OFFSET(::BluetoothScanResult, advertisement_data_),
  PROTOBUF_FIELD_OFFSET(::BluetoothScanResult, rssi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectRequest, remote_name_),
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectRequest, remote_id_),
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectRequest, timeout_),
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectRequest, android_auto_connect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothDevice, remote_id_),
  PROTOBUF_FIELD_OFFSET(::BluetoothDevice, name_),
  PROTOBUF_FIELD_OFFSET(::BluetoothDevice, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothDeviceStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothDeviceStateResponse, remote_id_),
  PROTOBUF_FIELD_OFFSET(::BluetoothDeviceStateResponse, state_),
  PROTOBUF_FIELD_OFFSET(::BluetoothDeviceStateResponse, deviceid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BluetoothConnectedResponse, devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EnrollFpState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EnrollFpState, modality_id_),
  PROTOBUF_FIELD_OFFSET(::EnrollFpState, next_index_),
  PROTOBUF_FIELD_OFFSET(::EnrollFpState, remaining_times_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Int32Value)},
  { 6, -1, sizeof(::BluetoothState)},
  { 12, 19, sizeof(::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse)},
  { 21, 28, sizeof(::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse)},
  { 30, -1, sizeof(::BluetoothAdvertisementData)},
  { 41, -1, sizeof(::ScanSettings)},
  { 48, -1, sizeof(::BluetoothScanResult)},
  { 56, -1, sizeof(::BluetoothConnectRequest)},
  { 65, -1, sizeof(::BluetoothDevice)},
  { 73, -1, sizeof(::BluetoothDeviceStateResponse)},
  { 81, -1, sizeof(::BluetoothConnectedResponse)},
  { 87, -1, sizeof(::EnrollFpState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Int32Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothAdvertisementData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ScanSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothScanResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothDeviceStateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BluetoothConnectedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EnrollFpState_default_instance_),
};

const char descriptor_table_protodef_jubiter_5fblue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022jubiter_blue.proto\"\033\n\nInt32Value\022\r\n\005va"
  "lue\030\001 \001(\005\"\241\001\n\016BluetoothState\022$\n\005state\030\001 "
  "\001(\0162\025.BluetoothState.State\"i\n\005State\022\013\n\007U"
  "NKNOWN\020\000\022\017\n\013UNAVAILABLE\020\001\022\020\n\014UNAUTHORIZE"
  "D\020\002\022\016\n\nTURNING_ON\020\003\022\006\n\002ON\020\004\022\017\n\013TURNING_O"
  "FF\020\005\022\007\n\003OFF\020\006\"\200\003\n\032BluetoothAdvertisement"
  "Data\022\022\n\nlocal_name\030\001 \001(\t\022#\n\016tx_power_lev"
  "el\030\002 \001(\0132\013.Int32Value\022\023\n\013connectable\030\003 \001"
  "(\010\022L\n\021manufacturer_data\030\004 \003(\01321.Bluetoot"
  "hAdvertisementData.ManufacturerDataEntry"
  "\022B\n\014service_data\030\005 \003(\0132,.BluetoothAdvert"
  "isementData.ServiceDataEntry\022\025\n\rservice_"
  "uuids\030\006 \003(\t\0327\n\025ManufacturerDataEntry\022\013\n\003"
  "key\030\001 \001(\005\022\r\n\005value\030\002 \001(\014:\0028\001\0322\n\020ServiceD"
  "ataEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001"
  "\"@\n\014ScanSettings\022\031\n\021android_scan_mode\030\001 "
  "\001(\005\022\025\n\rservice_uuids\030\002 \003(\t\"~\n\023BluetoothS"
  "canResult\022 \n\006device\030\001 \001(\0132\020.BluetoothDev"
  "ice\0227\n\022advertisement_data\030\002 \001(\0132\033.Blueto"
  "othAdvertisementData\022\014\n\004rssi\030\003 \001(\005\"p\n\027Bl"
  "uetoothConnectRequest\022\023\n\013remote_name\030\001 \001"
  "(\t\022\021\n\tremote_id\030\002 \001(\t\022\017\n\007timeout\030\003 \001(\005\022\034"
  "\n\024android_auto_connect\030\004 \001(\010\"\213\001\n\017Bluetoo"
  "thDevice\022\021\n\tremote_id\030\001 \001(\t\022\014\n\004name\030\002 \001("
  "\t\022#\n\004type\030\003 \001(\0162\025.BluetoothDevice.Type\"2"
  "\n\004Type\022\013\n\007UNKNOWN\020\000\022\013\n\007CLASSIC\020\001\022\006\n\002LE\020\002"
  "\022\010\n\004DUAL\020\003\"\342\001\n\034BluetoothDeviceStateRespo"
  "nse\022\021\n\tremote_id\030\001 \001(\t\022A\n\005state\030\002 \001(\01622."
  "BluetoothDeviceStateResponse.BluetoothDe"
  "viceState\022\020\n\010deviceID\030\003 \001(\005\"Z\n\024Bluetooth"
  "DeviceState\022\020\n\014DISCONNECTED\020\000\022\016\n\nCONNECT"
  "ING\020\001\022\r\n\tCONNECTED\020\002\022\021\n\rDISCONNECTING\020\003\""
  "\?\n\032BluetoothConnectedResponse\022!\n\007devices"
  "\030\001 \003(\0132\020.BluetoothDevice\"Q\n\rEnrollFpStat"
  "e\022\023\n\013modality_id\030\001 \001(\005\022\022\n\nnext_index\030\002 \001"
  "(\005\022\027\n\017remaining_times\030\003 \001(\005*\247\001\n\016FpIdVeri"
  "fyMode\022!\n\035FP_ID_VERIFY_MODE_UNSPECIFIED\020"
  "\000\022\034\n\030FP_ID_VERIFY_MODE_DEVICE\020\001\022\034\n\030FP_ID"
  "_VERIFY_MODE_9GRIDS\020\002\022\032\n\026FP_ID_VERIFY_MO"
  "DE_APDU\020\003\022\032\n\026FP_ID_VERIFY_MODE_FPGT\020\004BB\n"
  "\031com.jubiter.plugin.protosB\021JuBiterBlueP"
  "rotos\242\002\021JuBiterBlueProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jubiter_5fblue_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jubiter_5fblue_2eproto_sccs[12] = {
  &scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothAdvertisementData_ServiceDataEntry_DoNotUse_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothDevice_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothScanResult_jubiter_5fblue_2eproto.base,
  &scc_info_BluetoothState_jubiter_5fblue_2eproto.base,
  &scc_info_EnrollFpState_jubiter_5fblue_2eproto.base,
  &scc_info_Int32Value_jubiter_5fblue_2eproto.base,
  &scc_info_ScanSettings_jubiter_5fblue_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jubiter_5fblue_2eproto_once;
static bool descriptor_table_jubiter_5fblue_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jubiter_5fblue_2eproto = {
  &descriptor_table_jubiter_5fblue_2eproto_initialized, descriptor_table_protodef_jubiter_5fblue_2eproto, "jubiter_blue.proto", 1673,
  &descriptor_table_jubiter_5fblue_2eproto_once, descriptor_table_jubiter_5fblue_2eproto_sccs, descriptor_table_jubiter_5fblue_2eproto_deps, 12, 0,
  schemas, file_default_instances, TableStruct_jubiter_5fblue_2eproto::offsets,
  file_level_metadata_jubiter_5fblue_2eproto, 12, file_level_enum_descriptors_jubiter_5fblue_2eproto, file_level_service_descriptors_jubiter_5fblue_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jubiter_5fblue_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jubiter_5fblue_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothState_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jubiter_5fblue_2eproto);
  return file_level_enum_descriptors_jubiter_5fblue_2eproto[0];
}
bool BluetoothState_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothState_State BluetoothState::UNKNOWN;
constexpr BluetoothState_State BluetoothState::UNAVAILABLE;
constexpr BluetoothState_State BluetoothState::UNAUTHORIZED;
constexpr BluetoothState_State BluetoothState::TURNING_ON;
constexpr BluetoothState_State BluetoothState::ON;
constexpr BluetoothState_State BluetoothState::TURNING_OFF;
constexpr BluetoothState_State BluetoothState::OFF;
constexpr BluetoothState_State BluetoothState::State_MIN;
constexpr BluetoothState_State BluetoothState::State_MAX;
constexpr int BluetoothState::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothDevice_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jubiter_5fblue_2eproto);
  return file_level_enum_descriptors_jubiter_5fblue_2eproto[1];
}
bool BluetoothDevice_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothDevice_Type BluetoothDevice::UNKNOWN;
constexpr BluetoothDevice_Type BluetoothDevice::CLASSIC;
constexpr BluetoothDevice_Type BluetoothDevice::LE;
constexpr BluetoothDevice_Type BluetoothDevice::DUAL;
constexpr BluetoothDevice_Type BluetoothDevice::Type_MIN;
constexpr BluetoothDevice_Type BluetoothDevice::Type_MAX;
constexpr int BluetoothDevice::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BluetoothDeviceStateResponse_BluetoothDeviceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jubiter_5fblue_2eproto);
  return file_level_enum_descriptors_jubiter_5fblue_2eproto[2];
}
bool BluetoothDeviceStateResponse_BluetoothDeviceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::DISCONNECTED;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::CONNECTING;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::CONNECTED;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::DISCONNECTING;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::BluetoothDeviceState_MIN;
constexpr BluetoothDeviceStateResponse_BluetoothDeviceState BluetoothDeviceStateResponse::BluetoothDeviceState_MAX;
constexpr int BluetoothDeviceStateResponse::BluetoothDeviceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FpIdVerifyMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_jubiter_5fblue_2eproto);
  return file_level_enum_descriptors_jubiter_5fblue_2eproto[3];
}
bool FpIdVerifyMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Int32Value::InitAsDefaultInstance() {
}
class Int32Value::_Internal {
 public:
};

Int32Value::Int32Value()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Int32Value)
}
Int32Value::Int32Value(const Int32Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:Int32Value)
}

void Int32Value::SharedCtor() {
  value_ = 0;
}

Int32Value::~Int32Value() {
  // @@protoc_insertion_point(destructor:Int32Value)
  SharedDtor();
}

void Int32Value::SharedDtor() {
}

void Int32Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Int32Value& Int32Value::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Int32Value_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void Int32Value::Clear() {
// @@protoc_insertion_point(message_clear_start:Int32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Int32Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Int32Value::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Int32Value)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Int32Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Int32Value)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Int32Value::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Int32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Int32Value)
}

::PROTOBUF_NAMESPACE_ID::uint8* Int32Value::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Int32Value)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Int32Value)
  return target;
}

size_t Int32Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Int32Value)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Int32Value::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Int32Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Int32Value* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Int32Value>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Int32Value)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Int32Value)
    MergeFrom(*source);
  }
}

void Int32Value::MergeFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Int32Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Int32Value::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Int32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Int32Value::CopyFrom(const Int32Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Int32Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Int32Value::IsInitialized() const {
  return true;
}

void Int32Value::InternalSwap(Int32Value* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Int32Value::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothState::InitAsDefaultInstance() {
}
class BluetoothState::_Internal {
 public:
};

BluetoothState::BluetoothState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothState)
}
BluetoothState::BluetoothState(const BluetoothState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:BluetoothState)
}

void BluetoothState::SharedCtor() {
  state_ = 0;
}

BluetoothState::~BluetoothState() {
  // @@protoc_insertion_point(destructor:BluetoothState)
  SharedDtor();
}

void BluetoothState::SharedDtor() {
}

void BluetoothState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothState& BluetoothState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothState_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothState::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BluetoothState.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::BluetoothState_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BluetoothState.State state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::BluetoothState_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothState.State state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothState)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothState.State state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothState)
  return target;
}

size_t BluetoothState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BluetoothState.State state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothState)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothState)
    MergeFrom(*source);
  }
}

void BluetoothState::MergeFrom(const BluetoothState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void BluetoothState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothState::CopyFrom(const BluetoothState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothState::IsInitialized() const {
  return true;
}

void BluetoothState::InternalSwap(BluetoothState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse() {}
BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::MergeFrom(const BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse() {}
BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::MergeFrom(const BluetoothAdvertisementData_ServiceDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BluetoothAdvertisementData::InitAsDefaultInstance() {
  ::_BluetoothAdvertisementData_default_instance_._instance.get_mutable()->tx_power_level_ = const_cast< ::Int32Value*>(
      ::Int32Value::internal_default_instance());
}
class BluetoothAdvertisementData::_Internal {
 public:
  static const ::Int32Value& tx_power_level(const BluetoothAdvertisementData* msg);
};

const ::Int32Value&
BluetoothAdvertisementData::_Internal::tx_power_level(const BluetoothAdvertisementData* msg) {
  return *msg->tx_power_level_;
}
BluetoothAdvertisementData::BluetoothAdvertisementData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothAdvertisementData)
}
BluetoothAdvertisementData::BluetoothAdvertisementData(const BluetoothAdvertisementData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_uuids_(from.service_uuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_data_.MergeFrom(from.manufacturer_data_);
  service_data_.MergeFrom(from.service_data_);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.local_name().empty()) {
    local_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_name_);
  }
  if (from.has_tx_power_level()) {
    tx_power_level_ = new ::Int32Value(*from.tx_power_level_);
  } else {
    tx_power_level_ = nullptr;
  }
  connectable_ = from.connectable_;
  // @@protoc_insertion_point(copy_constructor:BluetoothAdvertisementData)
}

void BluetoothAdvertisementData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto.base);
  local_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tx_power_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connectable_) -
      reinterpret_cast<char*>(&tx_power_level_)) + sizeof(connectable_));
}

BluetoothAdvertisementData::~BluetoothAdvertisementData() {
  // @@protoc_insertion_point(destructor:BluetoothAdvertisementData)
  SharedDtor();
}

void BluetoothAdvertisementData::SharedDtor() {
  local_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tx_power_level_;
}

void BluetoothAdvertisementData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothAdvertisementData& BluetoothAdvertisementData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothAdvertisementData_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothAdvertisementData::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothAdvertisementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manufacturer_data_.Clear();
  service_data_.Clear();
  service_uuids_.Clear();
  local_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tx_power_level_ != nullptr) {
    delete tx_power_level_;
  }
  tx_power_level_ = nullptr;
  connectable_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothAdvertisementData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string local_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_local_name(), ptr, ctx, "BluetoothAdvertisementData.local_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Int32Value tx_power_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_tx_power_level(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool connectable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          connectable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, bytes> manufacturer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&manufacturer_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // map<string, bytes> service_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&service_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated string service_uuids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_service_uuids(), ptr, ctx, "BluetoothAdvertisementData.service_uuids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothAdvertisementData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothAdvertisementData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string local_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_local_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->local_name().data(), static_cast<int>(this->local_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothAdvertisementData.local_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Int32Value tx_power_level = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tx_power_level()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool connectable = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &connectable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int32, bytes> manufacturer_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int32, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string > > parser(&manufacturer_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> service_data = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              BluetoothAdvertisementData_ServiceDataEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&service_data_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothAdvertisementData.ServiceDataEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service_uuids = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_service_uuids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_uuids(this->service_uuids_size() - 1).data(),
            static_cast<int>(this->service_uuids(this->service_uuids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothAdvertisementData.service_uuids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothAdvertisementData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothAdvertisementData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothAdvertisementData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothAdvertisementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_name = 1;
  if (this->local_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), static_cast<int>(this->local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothAdvertisementData.local_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->local_name(), output);
  }

  // .Int32Value tx_power_level = 2;
  if (this->has_tx_power_level()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::tx_power_level(this), output);
  }

  // bool connectable = 3;
  if (this->connectable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->connectable(), output);
  }

  // map<int32, bytes> manufacturer_data = 4;
  if (!this->manufacturer_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->manufacturer_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->manufacturer_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->manufacturer_data().begin();
          it != this->manufacturer_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::SerializeToCodedStream(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->manufacturer_data().begin();
          it != this->manufacturer_data().end(); ++it) {
        BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::SerializeToCodedStream(4, it->first, it->second, output);
      }
    }
  }

  // map<string, bytes> service_data = 5;
  if (!this->service_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BluetoothAdvertisementData.ServiceDataEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->service_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->service_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->service_data().begin();
          it != this->service_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Funcs::SerializeToCodedStream(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->service_data().begin();
          it != this->service_data().end(); ++it) {
        BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Funcs::SerializeToCodedStream(5, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string service_uuids = 6;
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_uuids(i).data(), static_cast<int>(this->service_uuids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothAdvertisementData.service_uuids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      6, this->service_uuids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothAdvertisementData)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothAdvertisementData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothAdvertisementData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_name = 1;
  if (this->local_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->local_name().data(), static_cast<int>(this->local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothAdvertisementData.local_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->local_name(), target);
  }

  // .Int32Value tx_power_level = 2;
  if (this->has_tx_power_level()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::tx_power_level(this), target);
  }

  // bool connectable = 3;
  if (this->connectable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->connectable(), target);
  }

  // map<int32, bytes> manufacturer_data = 4;
  if (!this->manufacturer_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->manufacturer_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->manufacturer_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->manufacturer_data().begin();
          it != this->manufacturer_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::SerializeToArray(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
          it = this->manufacturer_data().begin();
          it != this->manufacturer_data().end(); ++it) {
        target = BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::SerializeToArray(4, it->first, it->second, target);
      }
    }
  }

  // map<string, bytes> service_data = 5;
  if (!this->service_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "BluetoothAdvertisementData.ServiceDataEntry.key");
      }
    };

    if (false &&
        this->service_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->service_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->service_data().begin();
          it != this->service_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Funcs::SerializeToArray(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->service_data().begin();
          it != this->service_data().end(); ++it) {
        target = BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Funcs::SerializeToArray(5, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string service_uuids = 6;
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_uuids(i).data(), static_cast<int>(this->service_uuids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothAdvertisementData.service_uuids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(6, this->service_uuids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothAdvertisementData)
  return target;
}

size_t BluetoothAdvertisementData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothAdvertisementData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, bytes> manufacturer_data = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->manufacturer_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, std::string >::const_iterator
      it = this->manufacturer_data().begin();
      it != this->manufacturer_data().end(); ++it) {
    total_size += BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> service_data = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->service_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->service_data().begin();
      it != this->service_data().end(); ++it) {
    total_size += BluetoothAdvertisementData_ServiceDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string service_uuids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->service_uuids_size());
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->service_uuids(i));
  }

  // string local_name = 1;
  if (this->local_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->local_name());
  }

  // .Int32Value tx_power_level = 2;
  if (this->has_tx_power_level()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tx_power_level_);
  }

  // bool connectable = 3;
  if (this->connectable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothAdvertisementData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothAdvertisementData)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothAdvertisementData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothAdvertisementData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothAdvertisementData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothAdvertisementData)
    MergeFrom(*source);
  }
}

void BluetoothAdvertisementData::MergeFrom(const BluetoothAdvertisementData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothAdvertisementData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  manufacturer_data_.MergeFrom(from.manufacturer_data_);
  service_data_.MergeFrom(from.service_data_);
  service_uuids_.MergeFrom(from.service_uuids_);
  if (from.local_name().size() > 0) {

    local_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_name_);
  }
  if (from.has_tx_power_level()) {
    mutable_tx_power_level()->::Int32Value::MergeFrom(from.tx_power_level());
  }
  if (from.connectable() != 0) {
    set_connectable(from.connectable());
  }
}

void BluetoothAdvertisementData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothAdvertisementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothAdvertisementData::CopyFrom(const BluetoothAdvertisementData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothAdvertisementData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothAdvertisementData::IsInitialized() const {
  return true;
}

void BluetoothAdvertisementData::InternalSwap(BluetoothAdvertisementData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  manufacturer_data_.Swap(&other->manufacturer_data_);
  service_data_.Swap(&other->service_data_);
  service_uuids_.InternalSwap(CastToBase(&other->service_uuids_));
  local_name_.Swap(&other->local_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tx_power_level_, other->tx_power_level_);
  swap(connectable_, other->connectable_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothAdvertisementData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ScanSettings::InitAsDefaultInstance() {
}
class ScanSettings::_Internal {
 public:
};

ScanSettings::ScanSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ScanSettings)
}
ScanSettings::ScanSettings(const ScanSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      service_uuids_(from.service_uuids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  android_scan_mode_ = from.android_scan_mode_;
  // @@protoc_insertion_point(copy_constructor:ScanSettings)
}

void ScanSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ScanSettings_jubiter_5fblue_2eproto.base);
  android_scan_mode_ = 0;
}

ScanSettings::~ScanSettings() {
  // @@protoc_insertion_point(destructor:ScanSettings)
  SharedDtor();
}

void ScanSettings::SharedDtor() {
}

void ScanSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ScanSettings& ScanSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ScanSettings_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void ScanSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:ScanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_uuids_.Clear();
  android_scan_mode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ScanSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 android_scan_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          android_scan_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string service_uuids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_service_uuids(), ptr, ctx, "ScanSettings.service_uuids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ScanSettings::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:ScanSettings)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 android_scan_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &android_scan_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string service_uuids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_service_uuids()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->service_uuids(this->service_uuids_size() - 1).data(),
            static_cast<int>(this->service_uuids(this->service_uuids_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "ScanSettings.service_uuids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ScanSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ScanSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ScanSettings::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ScanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 android_scan_mode = 1;
  if (this->android_scan_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->android_scan_mode(), output);
  }

  // repeated string service_uuids = 2;
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_uuids(i).data(), static_cast<int>(this->service_uuids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ScanSettings.service_uuids");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->service_uuids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ScanSettings)
}

::PROTOBUF_NAMESPACE_ID::uint8* ScanSettings::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ScanSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 android_scan_mode = 1;
  if (this->android_scan_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->android_scan_mode(), target);
  }

  // repeated string service_uuids = 2;
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->service_uuids(i).data(), static_cast<int>(this->service_uuids(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ScanSettings.service_uuids");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->service_uuids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ScanSettings)
  return target;
}

size_t ScanSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ScanSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_uuids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->service_uuids_size());
  for (int i = 0, n = this->service_uuids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->service_uuids(i));
  }

  // int32 android_scan_mode = 1;
  if (this->android_scan_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->android_scan_mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScanSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ScanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ScanSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScanSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ScanSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ScanSettings)
    MergeFrom(*source);
  }
}

void ScanSettings::MergeFrom(const ScanSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ScanSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  service_uuids_.MergeFrom(from.service_uuids_);
  if (from.android_scan_mode() != 0) {
    set_android_scan_mode(from.android_scan_mode());
  }
}

void ScanSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ScanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScanSettings::CopyFrom(const ScanSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ScanSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanSettings::IsInitialized() const {
  return true;
}

void ScanSettings::InternalSwap(ScanSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_uuids_.InternalSwap(CastToBase(&other->service_uuids_));
  swap(android_scan_mode_, other->android_scan_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothScanResult::InitAsDefaultInstance() {
  ::_BluetoothScanResult_default_instance_._instance.get_mutable()->device_ = const_cast< ::BluetoothDevice*>(
      ::BluetoothDevice::internal_default_instance());
  ::_BluetoothScanResult_default_instance_._instance.get_mutable()->advertisement_data_ = const_cast< ::BluetoothAdvertisementData*>(
      ::BluetoothAdvertisementData::internal_default_instance());
}
class BluetoothScanResult::_Internal {
 public:
  static const ::BluetoothDevice& device(const BluetoothScanResult* msg);
  static const ::BluetoothAdvertisementData& advertisement_data(const BluetoothScanResult* msg);
};

const ::BluetoothDevice&
BluetoothScanResult::_Internal::device(const BluetoothScanResult* msg) {
  return *msg->device_;
}
const ::BluetoothAdvertisementData&
BluetoothScanResult::_Internal::advertisement_data(const BluetoothScanResult* msg) {
  return *msg->advertisement_data_;
}
BluetoothScanResult::BluetoothScanResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothScanResult)
}
BluetoothScanResult::BluetoothScanResult(const BluetoothScanResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_device()) {
    device_ = new ::BluetoothDevice(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from.has_advertisement_data()) {
    advertisement_data_ = new ::BluetoothAdvertisementData(*from.advertisement_data_);
  } else {
    advertisement_data_ = nullptr;
  }
  rssi_ = from.rssi_;
  // @@protoc_insertion_point(copy_constructor:BluetoothScanResult)
}

void BluetoothScanResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothScanResult_jubiter_5fblue_2eproto.base);
  ::memset(&device_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&device_)) + sizeof(rssi_));
}

BluetoothScanResult::~BluetoothScanResult() {
  // @@protoc_insertion_point(destructor:BluetoothScanResult)
  SharedDtor();
}

void BluetoothScanResult::SharedDtor() {
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete advertisement_data_;
}

void BluetoothScanResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothScanResult& BluetoothScanResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothScanResult_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothScanResult::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && advertisement_data_ != nullptr) {
    delete advertisement_data_;
  }
  advertisement_data_ = nullptr;
  rssi_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothScanResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .BluetoothDevice device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothAdvertisementData advertisement_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_advertisement_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rssi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothScanResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothScanResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .BluetoothDevice device = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BluetoothAdvertisementData advertisement_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_advertisement_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rssi = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &rssi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothScanResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothScanResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothScanResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothDevice device = 1;
  if (this->has_device()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::device(this), output);
  }

  // .BluetoothAdvertisementData advertisement_data = 2;
  if (this->has_advertisement_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::advertisement_data(this), output);
  }

  // int32 rssi = 3;
  if (this->rssi() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->rssi(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothScanResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothScanResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothScanResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .BluetoothDevice device = 1;
  if (this->has_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::device(this), target);
  }

  // .BluetoothAdvertisementData advertisement_data = 2;
  if (this->has_advertisement_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::advertisement_data(this), target);
  }

  // int32 rssi = 3;
  if (this->rssi() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->rssi(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothScanResult)
  return target;
}

size_t BluetoothScanResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothScanResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .BluetoothDevice device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .BluetoothAdvertisementData advertisement_data = 2;
  if (this->has_advertisement_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *advertisement_data_);
  }

  // int32 rssi = 3;
  if (this->rssi() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->rssi());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothScanResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothScanResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothScanResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothScanResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothScanResult)
    MergeFrom(*source);
  }
}

void BluetoothScanResult::MergeFrom(const BluetoothScanResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothScanResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    mutable_device()->::BluetoothDevice::MergeFrom(from.device());
  }
  if (from.has_advertisement_data()) {
    mutable_advertisement_data()->::BluetoothAdvertisementData::MergeFrom(from.advertisement_data());
  }
  if (from.rssi() != 0) {
    set_rssi(from.rssi());
  }
}

void BluetoothScanResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothScanResult::CopyFrom(const BluetoothScanResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothScanResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothScanResult::IsInitialized() const {
  return true;
}

void BluetoothScanResult::InternalSwap(BluetoothScanResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(device_, other->device_);
  swap(advertisement_data_, other->advertisement_data_);
  swap(rssi_, other->rssi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothScanResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothConnectRequest::InitAsDefaultInstance() {
}
class BluetoothConnectRequest::_Internal {
 public:
};

BluetoothConnectRequest::BluetoothConnectRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothConnectRequest)
}
BluetoothConnectRequest::BluetoothConnectRequest(const BluetoothConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.remote_name().empty()) {
    remote_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_name_);
  }
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.remote_id().empty()) {
    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&android_auto_connect_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(android_auto_connect_));
  // @@protoc_insertion_point(copy_constructor:BluetoothConnectRequest)
}

void BluetoothConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto.base);
  remote_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&android_auto_connect_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(android_auto_connect_));
}

BluetoothConnectRequest::~BluetoothConnectRequest() {
  // @@protoc_insertion_point(destructor:BluetoothConnectRequest)
  SharedDtor();
}

void BluetoothConnectRequest::SharedDtor() {
  remote_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothConnectRequest& BluetoothConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothConnectRequest_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&android_auto_connect_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(android_auto_connect_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_name(), ptr, ctx, "BluetoothConnectRequest.remote_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_id(), ptr, ctx, "BluetoothConnectRequest.remote_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool android_auto_connect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          android_auto_connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothConnectRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothConnectRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string remote_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_name().data(), static_cast<int>(this->remote_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothConnectRequest.remote_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_id().data(), static_cast<int>(this->remote_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothConnectRequest.remote_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeout = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool android_auto_connect = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &android_auto_connect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothConnectRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothConnectRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothConnectRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_name = 1;
  if (this->remote_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_name().data(), static_cast<int>(this->remote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothConnectRequest.remote_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_name(), output);
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothConnectRequest.remote_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->remote_id(), output);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->timeout(), output);
  }

  // bool android_auto_connect = 4;
  if (this->android_auto_connect() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->android_auto_connect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothConnectRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothConnectRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_name = 1;
  if (this->remote_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_name().data(), static_cast<int>(this->remote_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothConnectRequest.remote_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_name(), target);
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothConnectRequest.remote_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->remote_id(), target);
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->timeout(), target);
  }

  // bool android_auto_connect = 4;
  if (this->android_auto_connect() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->android_auto_connect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothConnectRequest)
  return target;
}

size_t BluetoothConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothConnectRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_name = 1;
  if (this->remote_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_name());
  }

  // string remote_id = 2;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_id());
  }

  // int32 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->timeout());
  }

  // bool android_auto_connect = 4;
  if (this->android_auto_connect() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothConnectRequest)
    MergeFrom(*source);
  }
}

void BluetoothConnectRequest::MergeFrom(const BluetoothConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_name().size() > 0) {

    remote_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_name_);
  }
  if (from.remote_id().size() > 0) {

    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  if (from.timeout() != 0) {
    set_timeout(from.timeout());
  }
  if (from.android_auto_connect() != 0) {
    set_android_auto_connect(from.android_auto_connect());
  }
}

void BluetoothConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothConnectRequest::CopyFrom(const BluetoothConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothConnectRequest::IsInitialized() const {
  return true;
}

void BluetoothConnectRequest::InternalSwap(BluetoothConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_name_.Swap(&other->remote_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timeout_, other->timeout_);
  swap(android_auto_connect_, other->android_auto_connect_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothDevice::InitAsDefaultInstance() {
}
class BluetoothDevice::_Internal {
 public:
};

BluetoothDevice::BluetoothDevice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothDevice)
}
BluetoothDevice::BluetoothDevice(const BluetoothDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.remote_id().empty()) {
    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:BluetoothDevice)
}

void BluetoothDevice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothDevice_jubiter_5fblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

BluetoothDevice::~BluetoothDevice() {
  // @@protoc_insertion_point(destructor:BluetoothDevice)
  SharedDtor();
}

void BluetoothDevice::SharedDtor() {
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothDevice& BluetoothDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothDevice_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_id(), ptr, ctx, "BluetoothDevice.remote_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "BluetoothDevice.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothDevice.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::BluetoothDevice_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothDevice::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothDevice)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string remote_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_id().data(), static_cast<int>(this->remote_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothDevice.remote_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothDevice.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BluetoothDevice.Type type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::BluetoothDevice_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothDevice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothDevice::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.remote_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .BluetoothDevice.Type type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothDevice)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothDevice::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.remote_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDevice.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .BluetoothDevice.Type type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothDevice)
  return target;
}

size_t BluetoothDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothDevice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .BluetoothDevice.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothDevice)
    MergeFrom(*source);
  }
}

void BluetoothDevice::MergeFrom(const BluetoothDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {

    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BluetoothDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothDevice::CopyFrom(const BluetoothDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothDevice::IsInitialized() const {
  return true;
}

void BluetoothDevice::InternalSwap(BluetoothDevice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothDeviceStateResponse::InitAsDefaultInstance() {
}
class BluetoothDeviceStateResponse::_Internal {
 public:
};

BluetoothDeviceStateResponse::BluetoothDeviceStateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothDeviceStateResponse)
}
BluetoothDeviceStateResponse::BluetoothDeviceStateResponse(const BluetoothDeviceStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.remote_id().empty()) {
    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&state_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:BluetoothDeviceStateResponse)
}

void BluetoothDeviceStateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto.base);
  remote_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deviceid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(deviceid_));
}

BluetoothDeviceStateResponse::~BluetoothDeviceStateResponse() {
  // @@protoc_insertion_point(destructor:BluetoothDeviceStateResponse)
  SharedDtor();
}

void BluetoothDeviceStateResponse::SharedDtor() {
  remote_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BluetoothDeviceStateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothDeviceStateResponse& BluetoothDeviceStateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothDeviceStateResponse_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothDeviceStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothDeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deviceid_) -
      reinterpret_cast<char*>(&state_)) + sizeof(deviceid_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothDeviceStateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remote_id(), ptr, ctx, "BluetoothDeviceStateResponse.remote_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::BluetoothDeviceStateResponse_BluetoothDeviceState>(val));
        } else goto handle_unusual;
        continue;
      // int32 deviceID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothDeviceStateResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothDeviceStateResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string remote_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remote_id().data(), static_cast<int>(this->remote_id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "BluetoothDeviceStateResponse.remote_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::BluetoothDeviceStateResponse_BluetoothDeviceState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deviceID = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &deviceid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothDeviceStateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothDeviceStateResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothDeviceStateResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothDeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDeviceStateResponse.remote_id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->remote_id(), output);
  }

  // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // int32 deviceID = 3;
  if (this->deviceid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->deviceid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothDeviceStateResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothDeviceStateResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothDeviceStateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remote_id().data(), static_cast<int>(this->remote_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "BluetoothDeviceStateResponse.remote_id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->remote_id(), target);
  }

  // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // int32 deviceID = 3;
  if (this->deviceid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->deviceid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothDeviceStateResponse)
  return target;
}

size_t BluetoothDeviceStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothDeviceStateResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_id = 1;
  if (this->remote_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remote_id());
  }

  // .BluetoothDeviceStateResponse.BluetoothDeviceState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // int32 deviceID = 3;
  if (this->deviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->deviceid());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothDeviceStateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothDeviceStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothDeviceStateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothDeviceStateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothDeviceStateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothDeviceStateResponse)
    MergeFrom(*source);
  }
}

void BluetoothDeviceStateResponse::MergeFrom(const BluetoothDeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothDeviceStateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_id().size() > 0) {

    remote_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_id_);
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.deviceid() != 0) {
    set_deviceid(from.deviceid());
  }
}

void BluetoothDeviceStateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothDeviceStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothDeviceStateResponse::CopyFrom(const BluetoothDeviceStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothDeviceStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothDeviceStateResponse::IsInitialized() const {
  return true;
}

void BluetoothDeviceStateResponse::InternalSwap(BluetoothDeviceStateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_id_.Swap(&other->remote_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
  swap(deviceid_, other->deviceid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothDeviceStateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BluetoothConnectedResponse::InitAsDefaultInstance() {
}
class BluetoothConnectedResponse::_Internal {
 public:
};

BluetoothConnectedResponse::BluetoothConnectedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BluetoothConnectedResponse)
}
BluetoothConnectedResponse::BluetoothConnectedResponse(const BluetoothConnectedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:BluetoothConnectedResponse)
}

void BluetoothConnectedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto.base);
}

BluetoothConnectedResponse::~BluetoothConnectedResponse() {
  // @@protoc_insertion_point(destructor:BluetoothConnectedResponse)
  SharedDtor();
}

void BluetoothConnectedResponse::SharedDtor() {
}

void BluetoothConnectedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BluetoothConnectedResponse& BluetoothConnectedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BluetoothConnectedResponse_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void BluetoothConnectedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:BluetoothConnectedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BluetoothConnectedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .BluetoothDevice devices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_devices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BluetoothConnectedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:BluetoothConnectedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BluetoothDevice devices = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BluetoothConnectedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BluetoothConnectedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BluetoothConnectedResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BluetoothConnectedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BluetoothDevice devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->devices(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BluetoothConnectedResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* BluetoothConnectedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BluetoothConnectedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .BluetoothDevice devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devices(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BluetoothConnectedResponse)
  return target;
}

size_t BluetoothConnectedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BluetoothConnectedResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .BluetoothDevice devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BluetoothConnectedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BluetoothConnectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BluetoothConnectedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BluetoothConnectedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BluetoothConnectedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BluetoothConnectedResponse)
    MergeFrom(*source);
  }
}

void BluetoothConnectedResponse::MergeFrom(const BluetoothConnectedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BluetoothConnectedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void BluetoothConnectedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BluetoothConnectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BluetoothConnectedResponse::CopyFrom(const BluetoothConnectedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BluetoothConnectedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BluetoothConnectedResponse::IsInitialized() const {
  return true;
}

void BluetoothConnectedResponse::InternalSwap(BluetoothConnectedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&devices_)->InternalSwap(CastToBase(&other->devices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BluetoothConnectedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnrollFpState::InitAsDefaultInstance() {
}
class EnrollFpState::_Internal {
 public:
};

EnrollFpState::EnrollFpState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnrollFpState)
}
EnrollFpState::EnrollFpState(const EnrollFpState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&modality_id_, &from.modality_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&remaining_times_) -
    reinterpret_cast<char*>(&modality_id_)) + sizeof(remaining_times_));
  // @@protoc_insertion_point(copy_constructor:EnrollFpState)
}

void EnrollFpState::SharedCtor() {
  ::memset(&modality_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_times_) -
      reinterpret_cast<char*>(&modality_id_)) + sizeof(remaining_times_));
}

EnrollFpState::~EnrollFpState() {
  // @@protoc_insertion_point(destructor:EnrollFpState)
  SharedDtor();
}

void EnrollFpState::SharedDtor() {
}

void EnrollFpState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnrollFpState& EnrollFpState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnrollFpState_jubiter_5fblue_2eproto.base);
  return *internal_default_instance();
}


void EnrollFpState::Clear() {
// @@protoc_insertion_point(message_clear_start:EnrollFpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&modality_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remaining_times_) -
      reinterpret_cast<char*>(&modality_id_)) + sizeof(remaining_times_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnrollFpState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 modality_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          modality_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          next_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 remaining_times = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remaining_times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnrollFpState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnrollFpState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 modality_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &modality_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 next_index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 remaining_times = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaining_times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnrollFpState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnrollFpState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnrollFpState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnrollFpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modality_id = 1;
  if (this->modality_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->modality_id(), output);
  }

  // int32 next_index = 2;
  if (this->next_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->next_index(), output);
  }

  // int32 remaining_times = 3;
  if (this->remaining_times() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->remaining_times(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnrollFpState)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnrollFpState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnrollFpState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 modality_id = 1;
  if (this->modality_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->modality_id(), target);
  }

  // int32 next_index = 2;
  if (this->next_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->next_index(), target);
  }

  // int32 remaining_times = 3;
  if (this->remaining_times() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->remaining_times(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnrollFpState)
  return target;
}

size_t EnrollFpState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EnrollFpState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 modality_id = 1;
  if (this->modality_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->modality_id());
  }

  // int32 next_index = 2;
  if (this->next_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->next_index());
  }

  // int32 remaining_times = 3;
  if (this->remaining_times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->remaining_times());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnrollFpState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EnrollFpState)
  GOOGLE_DCHECK_NE(&from, this);
  const EnrollFpState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnrollFpState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EnrollFpState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EnrollFpState)
    MergeFrom(*source);
  }
}

void EnrollFpState::MergeFrom(const EnrollFpState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EnrollFpState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.modality_id() != 0) {
    set_modality_id(from.modality_id());
  }
  if (from.next_index() != 0) {
    set_next_index(from.next_index());
  }
  if (from.remaining_times() != 0) {
    set_remaining_times(from.remaining_times());
  }
}

void EnrollFpState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EnrollFpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnrollFpState::CopyFrom(const EnrollFpState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EnrollFpState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnrollFpState::IsInitialized() const {
  return true;
}

void EnrollFpState::InternalSwap(EnrollFpState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(modality_id_, other->modality_id_);
  swap(next_index_, other->next_index_);
  swap(remaining_times_, other->remaining_times_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnrollFpState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Int32Value* Arena::CreateMaybeMessage< ::Int32Value >(Arena* arena) {
  return Arena::CreateInternal< ::Int32Value >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothState* Arena::CreateMaybeMessage< ::BluetoothState >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothState >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothAdvertisementData_ManufacturerDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothAdvertisementData_ServiceDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothAdvertisementData* Arena::CreateMaybeMessage< ::BluetoothAdvertisementData >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothAdvertisementData >(arena);
}
template<> PROTOBUF_NOINLINE ::ScanSettings* Arena::CreateMaybeMessage< ::ScanSettings >(Arena* arena) {
  return Arena::CreateInternal< ::ScanSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothScanResult* Arena::CreateMaybeMessage< ::BluetoothScanResult >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothScanResult >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothConnectRequest* Arena::CreateMaybeMessage< ::BluetoothConnectRequest >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothDevice* Arena::CreateMaybeMessage< ::BluetoothDevice >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothDeviceStateResponse* Arena::CreateMaybeMessage< ::BluetoothDeviceStateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothDeviceStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::BluetoothConnectedResponse* Arena::CreateMaybeMessage< ::BluetoothConnectedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::BluetoothConnectedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::EnrollFpState* Arena::CreateMaybeMessage< ::EnrollFpState >(Arena* arena) {
  return Arena::CreateInternal< ::EnrollFpState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
