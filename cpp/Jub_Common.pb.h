// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fCommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fCommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fCommon_2eproto;
namespace JUB {
namespace Proto {
namespace Common {
class Bip44Path;
class Bip44PathDefaultTypeInternal;
extern Bip44PathDefaultTypeInternal _Bip44Path_default_instance_;
class ContextCfg;
class ContextCfgDefaultTypeInternal;
extern ContextCfgDefaultTypeInternal _ContextCfg_default_instance_;
class DeviceInfo;
class DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class DeviceType;
class DeviceTypeDefaultTypeInternal;
extern DeviceTypeDefaultTypeInternal _DeviceType_default_instance_;
class ResultAny;
class ResultAnyDefaultTypeInternal;
extern ResultAnyDefaultTypeInternal _ResultAny_default_instance_;
class ResultInt;
class ResultIntDefaultTypeInternal;
extern ResultIntDefaultTypeInternal _ResultInt_default_instance_;
class ResultString;
class ResultStringDefaultTypeInternal;
extern ResultStringDefaultTypeInternal _ResultString_default_instance_;
class RootKeyStatus;
class RootKeyStatusDefaultTypeInternal;
extern RootKeyStatusDefaultTypeInternal _RootKeyStatus_default_instance_;
class Slip48Path;
class Slip48PathDefaultTypeInternal;
extern Slip48PathDefaultTypeInternal _Slip48Path_default_instance_;
}  // namespace Common
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::Common::Bip44Path* Arena::CreateMaybeMessage<::JUB::Proto::Common::Bip44Path>(Arena*);
template<> ::JUB::Proto::Common::ContextCfg* Arena::CreateMaybeMessage<::JUB::Proto::Common::ContextCfg>(Arena*);
template<> ::JUB::Proto::Common::DeviceInfo* Arena::CreateMaybeMessage<::JUB::Proto::Common::DeviceInfo>(Arena*);
template<> ::JUB::Proto::Common::DeviceType* Arena::CreateMaybeMessage<::JUB::Proto::Common::DeviceType>(Arena*);
template<> ::JUB::Proto::Common::ResultAny* Arena::CreateMaybeMessage<::JUB::Proto::Common::ResultAny>(Arena*);
template<> ::JUB::Proto::Common::ResultInt* Arena::CreateMaybeMessage<::JUB::Proto::Common::ResultInt>(Arena*);
template<> ::JUB::Proto::Common::ResultString* Arena::CreateMaybeMessage<::JUB::Proto::Common::ResultString>(Arena*);
template<> ::JUB::Proto::Common::RootKeyStatus* Arena::CreateMaybeMessage<::JUB::Proto::Common::RootKeyStatus>(Arena*);
template<> ::JUB::Proto::Common::Slip48Path* Arena::CreateMaybeMessage<::JUB::Proto::Common::Slip48Path>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace Common {

enum DeviceType_ComMode : int {
  DeviceType_ComMode_COM_MODE_UNSPECIFIED = 0,
  DeviceType_ComMode_COM_MODE_SWI = 1,
  DeviceType_ComMode_COM_MODE_HID = 2,
  DeviceType_ComMode_COM_MODE_BLE = 3,
  DeviceType_ComMode_COM_MODE_NFC = 4,
  DeviceType_ComMode_DeviceType_ComMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_ComMode_DeviceType_ComMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_ComMode_IsValid(int value);
constexpr DeviceType_ComMode DeviceType_ComMode_ComMode_MIN = DeviceType_ComMode_COM_MODE_UNSPECIFIED;
constexpr DeviceType_ComMode DeviceType_ComMode_ComMode_MAX = DeviceType_ComMode_COM_MODE_NFC;
constexpr int DeviceType_ComMode_ComMode_ARRAYSIZE = DeviceType_ComMode_ComMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_ComMode_descriptor();
template<typename T>
inline const std::string& DeviceType_ComMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType_ComMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_ComMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_ComMode_descriptor(), enum_t_value);
}
inline bool DeviceType_ComMode_Parse(
    const std::string& name, DeviceType_ComMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType_ComMode>(
    DeviceType_ComMode_descriptor(), name, value);
}
enum DeviceType_PrdsClass : int {
  DeviceType_PrdsClass_PRDS_CLASS_UNSPECIFIED = 0,
  DeviceType_PrdsClass_PRDS_CLASS_VD = 1,
  DeviceType_PrdsClass_PRDS_CLASS_BLADE = 2,
  DeviceType_PrdsClass_PRDS_CLASS_BIO = 3,
  DeviceType_PrdsClass_PRDS_CLASS_LITE = 4,
  DeviceType_PrdsClass_DeviceType_PrdsClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceType_PrdsClass_DeviceType_PrdsClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceType_PrdsClass_IsValid(int value);
constexpr DeviceType_PrdsClass DeviceType_PrdsClass_PrdsClass_MIN = DeviceType_PrdsClass_PRDS_CLASS_UNSPECIFIED;
constexpr DeviceType_PrdsClass DeviceType_PrdsClass_PrdsClass_MAX = DeviceType_PrdsClass_PRDS_CLASS_LITE;
constexpr int DeviceType_PrdsClass_PrdsClass_ARRAYSIZE = DeviceType_PrdsClass_PrdsClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceType_PrdsClass_descriptor();
template<typename T>
inline const std::string& DeviceType_PrdsClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceType_PrdsClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceType_PrdsClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceType_PrdsClass_descriptor(), enum_t_value);
}
inline bool DeviceType_PrdsClass_Parse(
    const std::string& name, DeviceType_PrdsClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceType_PrdsClass>(
    DeviceType_PrdsClass_descriptor(), name, value);
}
enum RootKeyStatus_Status : int {
  RootKeyStatus_Status_HAS_PIN = 0,
  RootKeyStatus_Status_RESETTED = 2,
  RootKeyStatus_Status_HAS_ROOT_KEY = 90,
  RootKeyStatus_Status_RootKeyStatus_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RootKeyStatus_Status_RootKeyStatus_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RootKeyStatus_Status_IsValid(int value);
constexpr RootKeyStatus_Status RootKeyStatus_Status_Status_MIN = RootKeyStatus_Status_HAS_PIN;
constexpr RootKeyStatus_Status RootKeyStatus_Status_Status_MAX = RootKeyStatus_Status_HAS_ROOT_KEY;
constexpr int RootKeyStatus_Status_Status_ARRAYSIZE = RootKeyStatus_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RootKeyStatus_Status_descriptor();
template<typename T>
inline const std::string& RootKeyStatus_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RootKeyStatus_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RootKeyStatus_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RootKeyStatus_Status_descriptor(), enum_t_value);
}
inline bool RootKeyStatus_Status_Parse(
    const std::string& name, RootKeyStatus_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RootKeyStatus_Status>(
    RootKeyStatus_Status_descriptor(), name, value);
}
enum ENUM_GRAPHENE_ROLE : int {
  OWNER = 0,
  ACTIVE = 1,
  ENUM_GRAPHENE_ROLE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_GRAPHENE_ROLE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_GRAPHENE_ROLE_IsValid(int value);
constexpr ENUM_GRAPHENE_ROLE ENUM_GRAPHENE_ROLE_MIN = OWNER;
constexpr ENUM_GRAPHENE_ROLE ENUM_GRAPHENE_ROLE_MAX = ACTIVE;
constexpr int ENUM_GRAPHENE_ROLE_ARRAYSIZE = ENUM_GRAPHENE_ROLE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_GRAPHENE_ROLE_descriptor();
template<typename T>
inline const std::string& ENUM_GRAPHENE_ROLE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_GRAPHENE_ROLE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_GRAPHENE_ROLE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_GRAPHENE_ROLE_descriptor(), enum_t_value);
}
inline bool ENUM_GRAPHENE_ROLE_Parse(
    const std::string& name, ENUM_GRAPHENE_ROLE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_GRAPHENE_ROLE>(
    ENUM_GRAPHENE_ROLE_descriptor(), name, value);
}
enum ENUM_MNEMONIC_STRENGTH : int {
  STRENGTH128 = 0,
  STRENGTH192 = 1,
  STRENGTH256 = 2,
  ENUM_MNEMONIC_STRENGTH_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_MNEMONIC_STRENGTH_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_MNEMONIC_STRENGTH_IsValid(int value);
constexpr ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MIN = STRENGTH128;
constexpr ENUM_MNEMONIC_STRENGTH ENUM_MNEMONIC_STRENGTH_MAX = STRENGTH256;
constexpr int ENUM_MNEMONIC_STRENGTH_ARRAYSIZE = ENUM_MNEMONIC_STRENGTH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_MNEMONIC_STRENGTH_descriptor();
template<typename T>
inline const std::string& ENUM_MNEMONIC_STRENGTH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_MNEMONIC_STRENGTH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_MNEMONIC_STRENGTH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_MNEMONIC_STRENGTH_descriptor(), enum_t_value);
}
inline bool ENUM_MNEMONIC_STRENGTH_Parse(
    const std::string& name, ENUM_MNEMONIC_STRENGTH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_MNEMONIC_STRENGTH>(
    ENUM_MNEMONIC_STRENGTH_descriptor(), name, value);
}
enum CURVES : int {
  SECP256K1 = 0,
  ED25519 = 1,
  NIST256P1 = 2,
  CURVES_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CURVES_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CURVES_IsValid(int value);
constexpr CURVES CURVES_MIN = SECP256K1;
constexpr CURVES CURVES_MAX = NIST256P1;
constexpr int CURVES_ARRAYSIZE = CURVES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CURVES_descriptor();
template<typename T>
inline const std::string& CURVES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CURVES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CURVES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CURVES_descriptor(), enum_t_value);
}
inline bool CURVES_Parse(
    const std::string& name, CURVES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CURVES>(
    CURVES_descriptor(), name, value);
}
enum ENUM_PUB_FORMAT : int {
  HEX = 0,
  XPUB = 1,
  ENUM_PUB_FORMAT_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ENUM_PUB_FORMAT_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ENUM_PUB_FORMAT_IsValid(int value);
constexpr ENUM_PUB_FORMAT ENUM_PUB_FORMAT_MIN = HEX;
constexpr ENUM_PUB_FORMAT ENUM_PUB_FORMAT_MAX = XPUB;
constexpr int ENUM_PUB_FORMAT_ARRAYSIZE = ENUM_PUB_FORMAT_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ENUM_PUB_FORMAT_descriptor();
template<typename T>
inline const std::string& ENUM_PUB_FORMAT_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ENUM_PUB_FORMAT>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ENUM_PUB_FORMAT_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ENUM_PUB_FORMAT_descriptor(), enum_t_value);
}
inline bool ENUM_PUB_FORMAT_Parse(
    const std::string& name, ENUM_PUB_FORMAT* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ENUM_PUB_FORMAT>(
    ENUM_PUB_FORMAT_descriptor(), name, value);
}
// ===================================================================

class DeviceType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.DeviceType) */ {
 public:
  DeviceType();
  virtual ~DeviceType();

  DeviceType(const DeviceType& from);
  DeviceType(DeviceType&& from) noexcept
    : DeviceType() {
    *this = ::std::move(from);
  }

  inline DeviceType& operator=(const DeviceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceType& operator=(DeviceType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceType* internal_default_instance() {
    return reinterpret_cast<const DeviceType*>(
               &_DeviceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceType& a, DeviceType& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceType* New() const final {
    return CreateMaybeMessage<DeviceType>(nullptr);
  }

  DeviceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceType& from);
  void MergeFrom(const DeviceType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.DeviceType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DeviceType_ComMode ComMode;
  static constexpr ComMode COM_MODE_UNSPECIFIED =
    DeviceType_ComMode_COM_MODE_UNSPECIFIED;
  static constexpr ComMode COM_MODE_SWI =
    DeviceType_ComMode_COM_MODE_SWI;
  static constexpr ComMode COM_MODE_HID =
    DeviceType_ComMode_COM_MODE_HID;
  static constexpr ComMode COM_MODE_BLE =
    DeviceType_ComMode_COM_MODE_BLE;
  static constexpr ComMode COM_MODE_NFC =
    DeviceType_ComMode_COM_MODE_NFC;
  static inline bool ComMode_IsValid(int value) {
    return DeviceType_ComMode_IsValid(value);
  }
  static constexpr ComMode ComMode_MIN =
    DeviceType_ComMode_ComMode_MIN;
  static constexpr ComMode ComMode_MAX =
    DeviceType_ComMode_ComMode_MAX;
  static constexpr int ComMode_ARRAYSIZE =
    DeviceType_ComMode_ComMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ComMode_descriptor() {
    return DeviceType_ComMode_descriptor();
  }
  template<typename T>
  static inline const std::string& ComMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ComMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ComMode_Name.");
    return DeviceType_ComMode_Name(enum_t_value);
  }
  static inline bool ComMode_Parse(const std::string& name,
      ComMode* value) {
    return DeviceType_ComMode_Parse(name, value);
  }

  typedef DeviceType_PrdsClass PrdsClass;
  static constexpr PrdsClass PRDS_CLASS_UNSPECIFIED =
    DeviceType_PrdsClass_PRDS_CLASS_UNSPECIFIED;
  static constexpr PrdsClass PRDS_CLASS_VD =
    DeviceType_PrdsClass_PRDS_CLASS_VD;
  static constexpr PrdsClass PRDS_CLASS_BLADE =
    DeviceType_PrdsClass_PRDS_CLASS_BLADE;
  static constexpr PrdsClass PRDS_CLASS_BIO =
    DeviceType_PrdsClass_PRDS_CLASS_BIO;
  static constexpr PrdsClass PRDS_CLASS_LITE =
    DeviceType_PrdsClass_PRDS_CLASS_LITE;
  static inline bool PrdsClass_IsValid(int value) {
    return DeviceType_PrdsClass_IsValid(value);
  }
  static constexpr PrdsClass PrdsClass_MIN =
    DeviceType_PrdsClass_PrdsClass_MIN;
  static constexpr PrdsClass PrdsClass_MAX =
    DeviceType_PrdsClass_PrdsClass_MAX;
  static constexpr int PrdsClass_ARRAYSIZE =
    DeviceType_PrdsClass_PrdsClass_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PrdsClass_descriptor() {
    return DeviceType_PrdsClass_descriptor();
  }
  template<typename T>
  static inline const std::string& PrdsClass_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PrdsClass>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PrdsClass_Name.");
    return DeviceType_PrdsClass_Name(enum_t_value);
  }
  static inline bool PrdsClass_Parse(const std::string& name,
      PrdsClass* value) {
    return DeviceType_PrdsClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComModeFieldNumber = 1,
    kPrdsClassFieldNumber = 2,
  };
  // .JUB.Proto.Common.DeviceType.ComMode com_mode = 1;
  void clear_com_mode();
  ::JUB::Proto::Common::DeviceType_ComMode com_mode() const;
  void set_com_mode(::JUB::Proto::Common::DeviceType_ComMode value);

  // .JUB.Proto.Common.DeviceType.PrdsClass prds_class = 2;
  void clear_prds_class();
  ::JUB::Proto::Common::DeviceType_PrdsClass prds_class() const;
  void set_prds_class(::JUB::Proto::Common::DeviceType_PrdsClass value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.DeviceType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int com_mode_;
  int prds_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class RootKeyStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.RootKeyStatus) */ {
 public:
  RootKeyStatus();
  virtual ~RootKeyStatus();

  RootKeyStatus(const RootKeyStatus& from);
  RootKeyStatus(RootKeyStatus&& from) noexcept
    : RootKeyStatus() {
    *this = ::std::move(from);
  }

  inline RootKeyStatus& operator=(const RootKeyStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline RootKeyStatus& operator=(RootKeyStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RootKeyStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RootKeyStatus* internal_default_instance() {
    return reinterpret_cast<const RootKeyStatus*>(
               &_RootKeyStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RootKeyStatus& a, RootKeyStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(RootKeyStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RootKeyStatus* New() const final {
    return CreateMaybeMessage<RootKeyStatus>(nullptr);
  }

  RootKeyStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RootKeyStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RootKeyStatus& from);
  void MergeFrom(const RootKeyStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RootKeyStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.RootKeyStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RootKeyStatus_Status Status;
  static constexpr Status HAS_PIN =
    RootKeyStatus_Status_HAS_PIN;
  static constexpr Status RESETTED =
    RootKeyStatus_Status_RESETTED;
  static constexpr Status HAS_ROOT_KEY =
    RootKeyStatus_Status_HAS_ROOT_KEY;
  static inline bool Status_IsValid(int value) {
    return RootKeyStatus_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    RootKeyStatus_Status_Status_MIN;
  static constexpr Status Status_MAX =
    RootKeyStatus_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    RootKeyStatus_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return RootKeyStatus_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return RootKeyStatus_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return RootKeyStatus_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .JUB.Proto.Common.RootKeyStatus.Status status = 1;
  void clear_status();
  ::JUB::Proto::Common::RootKeyStatus_Status status() const;
  void set_status(::JUB::Proto::Common::RootKeyStatus_Status value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.RootKeyStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class Bip44Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.Bip44Path) */ {
 public:
  Bip44Path();
  virtual ~Bip44Path();

  Bip44Path(const Bip44Path& from);
  Bip44Path(Bip44Path&& from) noexcept
    : Bip44Path() {
    *this = ::std::move(from);
  }

  inline Bip44Path& operator=(const Bip44Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bip44Path& operator=(Bip44Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bip44Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bip44Path* internal_default_instance() {
    return reinterpret_cast<const Bip44Path*>(
               &_Bip44Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bip44Path& a, Bip44Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Bip44Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bip44Path* New() const final {
    return CreateMaybeMessage<Bip44Path>(nullptr);
  }

  Bip44Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bip44Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bip44Path& from);
  void MergeFrom(const Bip44Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bip44Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.Bip44Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressIndexFieldNumber = 2,
    kChangeFieldNumber = 1,
  };
  // uint64 address_index = 2;
  void clear_address_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 address_index() const;
  void set_address_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // bool change = 1;
  void clear_change();
  bool change() const;
  void set_change(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.Bip44Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_index_;
  bool change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class Slip48Path :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.Slip48Path) */ {
 public:
  Slip48Path();
  virtual ~Slip48Path();

  Slip48Path(const Slip48Path& from);
  Slip48Path(Slip48Path&& from) noexcept
    : Slip48Path() {
    *this = ::std::move(from);
  }

  inline Slip48Path& operator=(const Slip48Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slip48Path& operator=(Slip48Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Slip48Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Slip48Path* internal_default_instance() {
    return reinterpret_cast<const Slip48Path*>(
               &_Slip48Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Slip48Path& a, Slip48Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Slip48Path* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Slip48Path* New() const final {
    return CreateMaybeMessage<Slip48Path>(nullptr);
  }

  Slip48Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Slip48Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Slip48Path& from);
  void MergeFrom(const Slip48Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slip48Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.Slip48Path";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
    kAddressIndexFieldNumber = 3,
    kKeyIndexFieldNumber = 4,
    kRoleFieldNumber = 2,
  };
  // uint64 network = 1;
  void clear_network();
  ::PROTOBUF_NAMESPACE_ID::uint64 network() const;
  void set_network(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 address_index = 3;
  void clear_address_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 address_index() const;
  void set_address_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 key_index = 4;
  void clear_key_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 key_index() const;
  void set_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .JUB.Proto.Common.ENUM_GRAPHENE_ROLE role = 2;
  void clear_role();
  ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE role() const;
  void set_role(::JUB::Proto::Common::ENUM_GRAPHENE_ROLE value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.Slip48Path)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 network_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_index_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ContextCfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ContextCfg) */ {
 public:
  ContextCfg();
  virtual ~ContextCfg();

  ContextCfg(const ContextCfg& from);
  ContextCfg(ContextCfg&& from) noexcept
    : ContextCfg() {
    *this = ::std::move(from);
  }

  inline ContextCfg& operator=(const ContextCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextCfg& operator=(ContextCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContextCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContextCfg* internal_default_instance() {
    return reinterpret_cast<const ContextCfg*>(
               &_ContextCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContextCfg& a, ContextCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextCfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContextCfg* New() const final {
    return CreateMaybeMessage<ContextCfg>(nullptr);
  }

  ContextCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContextCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContextCfg& from);
  void MergeFrom(const ContextCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ContextCfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPathFieldNumber = 1,
  };
  // string main_path = 1;
  void clear_main_path();
  const std::string& main_path() const;
  void set_main_path(const std::string& value);
  void set_main_path(std::string&& value);
  void set_main_path(const char* value);
  void set_main_path(const char* value, size_t size);
  std::string* mutable_main_path();
  std::string* release_main_path();
  void set_allocated_main_path(std::string* main_path);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ContextCfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.DeviceInfo) */ {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return CreateMaybeMessage<DeviceInfo>(nullptr);
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.DeviceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
    kLabelFieldNumber = 2,
    kBleVersionFieldNumber = 3,
    kFirmwareVersionFieldNumber = 4,
    kPinRetryFieldNumber = 5,
    kPinMaxRetryFieldNumber = 6,
  };
  // string sn = 1;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);

  // string label = 2;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);

  // string ble_version = 3;
  void clear_ble_version();
  const std::string& ble_version() const;
  void set_ble_version(const std::string& value);
  void set_ble_version(std::string&& value);
  void set_ble_version(const char* value);
  void set_ble_version(const char* value, size_t size);
  std::string* mutable_ble_version();
  std::string* release_ble_version();
  void set_allocated_ble_version(std::string* ble_version);

  // string firmware_version = 4;
  void clear_firmware_version();
  const std::string& firmware_version() const;
  void set_firmware_version(const std::string& value);
  void set_firmware_version(std::string&& value);
  void set_firmware_version(const char* value);
  void set_firmware_version(const char* value, size_t size);
  std::string* mutable_firmware_version();
  std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* firmware_version);

  // uint32 pin_retry = 5;
  void clear_pin_retry();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_retry() const;
  void set_pin_retry(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pin_max_retry = 6;
  void clear_pin_max_retry();
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_max_retry() const;
  void set_pin_max_retry(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.DeviceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ble_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_version_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_retry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pin_max_retry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ResultInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultInt) */ {
 public:
  ResultInt();
  virtual ~ResultInt();

  ResultInt(const ResultInt& from);
  ResultInt(ResultInt&& from) noexcept
    : ResultInt() {
    *this = ::std::move(from);
  }

  inline ResultInt& operator=(const ResultInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultInt& operator=(ResultInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultInt* internal_default_instance() {
    return reinterpret_cast<const ResultInt*>(
               &_ResultInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ResultInt& a, ResultInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultInt* New() const final {
    return CreateMaybeMessage<ResultInt>(nullptr);
  }

  ResultInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultInt& from);
  void MergeFrom(const ResultInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ResultInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateCodeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // uint64 state_code = 1;
  void clear_state_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code() const;
  void set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ResultString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultString) */ {
 public:
  ResultString();
  virtual ~ResultString();

  ResultString(const ResultString& from);
  ResultString(ResultString&& from) noexcept
    : ResultString() {
    *this = ::std::move(from);
  }

  inline ResultString& operator=(const ResultString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultString& operator=(ResultString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultString* internal_default_instance() {
    return reinterpret_cast<const ResultString*>(
               &_ResultString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResultString& a, ResultString& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultString* New() const final {
    return CreateMaybeMessage<ResultString>(nullptr);
  }

  ResultString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultString& from);
  void MergeFrom(const ResultString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ResultString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStateCodeFieldNumber = 1,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // uint64 state_code = 1;
  void clear_state_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code() const;
  void set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// -------------------------------------------------------------------

class ResultAny :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Common.ResultAny) */ {
 public:
  ResultAny();
  virtual ~ResultAny();

  ResultAny(const ResultAny& from);
  ResultAny(ResultAny&& from) noexcept
    : ResultAny() {
    *this = ::std::move(from);
  }

  inline ResultAny& operator=(const ResultAny& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultAny& operator=(ResultAny&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResultAny& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResultAny* internal_default_instance() {
    return reinterpret_cast<const ResultAny*>(
               &_ResultAny_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResultAny& a, ResultAny& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultAny* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResultAny* New() const final {
    return CreateMaybeMessage<ResultAny>(nullptr);
  }

  ResultAny* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResultAny>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResultAny& from);
  void MergeFrom(const ResultAny& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultAny* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Common.ResultAny";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fCommon_2eproto);
    return ::descriptor_table_Jub_5fCommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kStateCodeFieldNumber = 1,
  };
  // repeated .google.protobuf.Any value = 2;
  int value_size() const;
  void clear_value();
  PROTOBUF_NAMESPACE_ID::Any* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
      mutable_value();
  const PROTOBUF_NAMESPACE_ID::Any& value(int index) const;
  PROTOBUF_NAMESPACE_ID::Any* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
      value() const;

  // uint64 state_code = 1;
  void clear_state_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code() const;
  void set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Common.ResultAny)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any > value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 state_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fCommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceType

// .JUB.Proto.Common.DeviceType.ComMode com_mode = 1;
inline void DeviceType::clear_com_mode() {
  com_mode_ = 0;
}
inline ::JUB::Proto::Common::DeviceType_ComMode DeviceType::com_mode() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceType.com_mode)
  return static_cast< ::JUB::Proto::Common::DeviceType_ComMode >(com_mode_);
}
inline void DeviceType::set_com_mode(::JUB::Proto::Common::DeviceType_ComMode value) {
  
  com_mode_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceType.com_mode)
}

// .JUB.Proto.Common.DeviceType.PrdsClass prds_class = 2;
inline void DeviceType::clear_prds_class() {
  prds_class_ = 0;
}
inline ::JUB::Proto::Common::DeviceType_PrdsClass DeviceType::prds_class() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceType.prds_class)
  return static_cast< ::JUB::Proto::Common::DeviceType_PrdsClass >(prds_class_);
}
inline void DeviceType::set_prds_class(::JUB::Proto::Common::DeviceType_PrdsClass value) {
  
  prds_class_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceType.prds_class)
}

// -------------------------------------------------------------------

// RootKeyStatus

// .JUB.Proto.Common.RootKeyStatus.Status status = 1;
inline void RootKeyStatus::clear_status() {
  status_ = 0;
}
inline ::JUB::Proto::Common::RootKeyStatus_Status RootKeyStatus::status() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.RootKeyStatus.status)
  return static_cast< ::JUB::Proto::Common::RootKeyStatus_Status >(status_);
}
inline void RootKeyStatus::set_status(::JUB::Proto::Common::RootKeyStatus_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.RootKeyStatus.status)
}

// -------------------------------------------------------------------

// Bip44Path

// bool change = 1;
inline void Bip44Path::clear_change() {
  change_ = false;
}
inline bool Bip44Path::change() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip44Path.change)
  return change_;
}
inline void Bip44Path::set_change(bool value) {
  
  change_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip44Path.change)
}

// uint64 address_index = 2;
inline void Bip44Path::clear_address_index() {
  address_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Bip44Path::address_index() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Bip44Path.address_index)
  return address_index_;
}
inline void Bip44Path::set_address_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_index_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Bip44Path.address_index)
}

// -------------------------------------------------------------------

// Slip48Path

// uint64 network = 1;
inline void Slip48Path::clear_network() {
  network_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Slip48Path::network() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Slip48Path.network)
  return network_;
}
inline void Slip48Path::set_network(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  network_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Slip48Path.network)
}

// .JUB.Proto.Common.ENUM_GRAPHENE_ROLE role = 2;
inline void Slip48Path::clear_role() {
  role_ = 0;
}
inline ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE Slip48Path::role() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Slip48Path.role)
  return static_cast< ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE >(role_);
}
inline void Slip48Path::set_role(::JUB::Proto::Common::ENUM_GRAPHENE_ROLE value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Slip48Path.role)
}

// uint64 address_index = 3;
inline void Slip48Path::clear_address_index() {
  address_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Slip48Path::address_index() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Slip48Path.address_index)
  return address_index_;
}
inline void Slip48Path::set_address_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  address_index_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Slip48Path.address_index)
}

// uint64 key_index = 4;
inline void Slip48Path::clear_key_index() {
  key_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Slip48Path::key_index() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.Slip48Path.key_index)
  return key_index_;
}
inline void Slip48Path::set_key_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_index_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.Slip48Path.key_index)
}

// -------------------------------------------------------------------

// ContextCfg

// string main_path = 1;
inline void ContextCfg::clear_main_path() {
  main_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContextCfg::main_path() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ContextCfg.main_path)
  return main_path_.GetNoArena();
}
inline void ContextCfg::set_main_path(const std::string& value) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ContextCfg.main_path)
}
inline void ContextCfg::set_main_path(std::string&& value) {
  
  main_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.ContextCfg.main_path)
}
inline void ContextCfg::set_main_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.ContextCfg.main_path)
}
inline void ContextCfg::set_main_path(const char* value, size_t size) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.ContextCfg.main_path)
}
inline std::string* ContextCfg::mutable_main_path() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.ContextCfg.main_path)
  return main_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContextCfg::release_main_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.ContextCfg.main_path)
  
  return main_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContextCfg::set_allocated_main_path(std::string* main_path) {
  if (main_path != nullptr) {
    
  } else {
    
  }
  main_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_path);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.ContextCfg.main_path)
}

// -------------------------------------------------------------------

// DeviceInfo

// string sn = 1;
inline void DeviceInfo::clear_sn() {
  sn_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::sn() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.GetNoArena();
}
inline void DeviceInfo::set_sn(const std::string& value) {
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(std::string&& value) {
  
  sn_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.sn)
}
inline void DeviceInfo::set_sn(const char* value, size_t size) {
  
  sn_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.sn)
}
inline std::string* DeviceInfo::mutable_sn() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.sn)
  return sn_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_sn() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.sn)
  
  return sn_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.sn)
}

// string label = 2;
inline void DeviceInfo::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::label() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.label)
  return label_.GetNoArena();
}
inline void DeviceInfo::set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.label)
}
inline void DeviceInfo::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.label)
}
inline std::string* DeviceInfo::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.label)
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_label() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.label)
}

// string ble_version = 3;
inline void DeviceInfo::clear_ble_version() {
  ble_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::ble_version() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.ble_version)
  return ble_version_.GetNoArena();
}
inline void DeviceInfo::set_ble_version(const std::string& value) {
  
  ble_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.ble_version)
}
inline void DeviceInfo::set_ble_version(std::string&& value) {
  
  ble_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.ble_version)
}
inline void DeviceInfo::set_ble_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ble_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.ble_version)
}
inline void DeviceInfo::set_ble_version(const char* value, size_t size) {
  
  ble_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.ble_version)
}
inline std::string* DeviceInfo::mutable_ble_version() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.ble_version)
  return ble_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_ble_version() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.ble_version)
  
  return ble_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_ble_version(std::string* ble_version) {
  if (ble_version != nullptr) {
    
  } else {
    
  }
  ble_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ble_version);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.ble_version)
}

// string firmware_version = 4;
inline void DeviceInfo::clear_firmware_version() {
  firmware_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DeviceInfo::firmware_version() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.firmware_version)
  return firmware_version_.GetNoArena();
}
inline void DeviceInfo::set_firmware_version(const std::string& value) {
  
  firmware_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.firmware_version)
}
inline void DeviceInfo::set_firmware_version(std::string&& value) {
  
  firmware_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.DeviceInfo.firmware_version)
}
inline void DeviceInfo::set_firmware_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.DeviceInfo.firmware_version)
}
inline void DeviceInfo::set_firmware_version(const char* value, size_t size) {
  
  firmware_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.DeviceInfo.firmware_version)
}
inline std::string* DeviceInfo::mutable_firmware_version() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.DeviceInfo.firmware_version)
  return firmware_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DeviceInfo::release_firmware_version() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.DeviceInfo.firmware_version)
  
  return firmware_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DeviceInfo::set_allocated_firmware_version(std::string* firmware_version) {
  if (firmware_version != nullptr) {
    
  } else {
    
  }
  firmware_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware_version);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.DeviceInfo.firmware_version)
}

// uint32 pin_retry = 5;
inline void DeviceInfo::clear_pin_retry() {
  pin_retry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::pin_retry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pin_retry)
  return pin_retry_;
}
inline void DeviceInfo::set_pin_retry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_retry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pin_retry)
}

// uint32 pin_max_retry = 6;
inline void DeviceInfo::clear_pin_max_retry() {
  pin_max_retry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceInfo::pin_max_retry() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.DeviceInfo.pin_max_retry)
  return pin_max_retry_;
}
inline void DeviceInfo::set_pin_max_retry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pin_max_retry_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.DeviceInfo.pin_max_retry)
}

// -------------------------------------------------------------------

// ResultInt

// uint64 state_code = 1;
inline void ResultInt::clear_state_code() {
  state_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultInt::state_code() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.state_code)
  return state_code_;
}
inline void ResultInt::set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  state_code_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.state_code)
}

// uint32 value = 2;
inline void ResultInt::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ResultInt::value() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultInt.value)
  return value_;
}
inline void ResultInt::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultInt.value)
}

// -------------------------------------------------------------------

// ResultString

// uint64 state_code = 1;
inline void ResultString::clear_state_code() {
  state_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultString::state_code() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.state_code)
  return state_code_;
}
inline void ResultString::set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  state_code_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.state_code)
}

// string value = 2;
inline void ResultString::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ResultString::value() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultString.value)
  return value_.GetNoArena();
}
inline void ResultString::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultString.value)
}
inline void ResultString::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Common.ResultString.value)
}
inline void ResultString::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Common.ResultString.value)
}
inline void ResultString::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Common.ResultString.value)
}
inline std::string* ResultString::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.ResultString.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ResultString::release_value() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Common.ResultString.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ResultString::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Common.ResultString.value)
}

// -------------------------------------------------------------------

// ResultAny

// uint64 state_code = 1;
inline void ResultAny::clear_state_code() {
  state_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResultAny::state_code() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultAny.state_code)
  return state_code_;
}
inline void ResultAny::set_state_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  state_code_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.Common.ResultAny.state_code)
}

// repeated .google.protobuf.Any value = 2;
inline int ResultAny::value_size() const {
  return value_.size();
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultAny::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Common.ResultAny.value)
  return value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >*
ResultAny::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.Common.ResultAny.value)
  return &value_;
}
inline const PROTOBUF_NAMESPACE_ID::Any& ResultAny::value(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Common.ResultAny.value)
  return value_.Get(index);
}
inline PROTOBUF_NAMESPACE_ID::Any* ResultAny::add_value() {
  // @@protoc_insertion_point(field_add:JUB.Proto.Common.ResultAny.value)
  return value_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< PROTOBUF_NAMESPACE_ID::Any >&
ResultAny::value() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.Common.ResultAny.value)
  return value_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Proto
}  // namespace JUB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::JUB::Proto::Common::DeviceType_ComMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::DeviceType_ComMode>() {
  return ::JUB::Proto::Common::DeviceType_ComMode_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::DeviceType_PrdsClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::DeviceType_PrdsClass>() {
  return ::JUB::Proto::Common::DeviceType_PrdsClass_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::RootKeyStatus_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::RootKeyStatus_Status>() {
  return ::JUB::Proto::Common::RootKeyStatus_Status_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE>() {
  return ::JUB::Proto::Common::ENUM_GRAPHENE_ROLE_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH>() {
  return ::JUB::Proto::Common::ENUM_MNEMONIC_STRENGTH_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::CURVES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::CURVES>() {
  return ::JUB::Proto::Common::CURVES_descriptor();
}
template <> struct is_proto_enum< ::JUB::Proto::Common::ENUM_PUB_FORMAT> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JUB::Proto::Common::ENUM_PUB_FORMAT>() {
  return ::JUB::Proto::Common::ENUM_PUB_FORMAT_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fCommon_2eproto
