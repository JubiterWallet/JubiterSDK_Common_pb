// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_NervosCKB.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Jub_5fNervosCKB_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Jub_5fNervosCKB_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Jub_Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Jub_5fNervosCKB_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Jub_5fNervosCKB_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Jub_5fNervosCKB_2eproto;
namespace JUB {
namespace Proto {
namespace NervosCKB {
class CellDepCKB;
class CellDepCKBDefaultTypeInternal;
extern CellDepCKBDefaultTypeInternal _CellDepCKB_default_instance_;
class CellScriptCKB;
class CellScriptCKBDefaultTypeInternal;
extern CellScriptCKBDefaultTypeInternal _CellScriptCKB_default_instance_;
class ContextCfgCKB;
class ContextCfgCKBDefaultTypeInternal;
extern ContextCfgCKBDefaultTypeInternal _ContextCfgCKB_default_instance_;
class InputCKB;
class InputCKBDefaultTypeInternal;
extern InputCKBDefaultTypeInternal _InputCKB_default_instance_;
class OutputCKB;
class OutputCKBDefaultTypeInternal;
extern OutputCKBDefaultTypeInternal _OutputCKB_default_instance_;
class TransactionCKB;
class TransactionCKBDefaultTypeInternal;
extern TransactionCKBDefaultTypeInternal _TransactionCKB_default_instance_;
}  // namespace NervosCKB
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::NervosCKB::CellDepCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::CellDepCKB>(Arena*);
template<> ::JUB::Proto::NervosCKB::CellScriptCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::CellScriptCKB>(Arena*);
template<> ::JUB::Proto::NervosCKB::ContextCfgCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::ContextCfgCKB>(Arena*);
template<> ::JUB::Proto::NervosCKB::InputCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::InputCKB>(Arena*);
template<> ::JUB::Proto::NervosCKB::OutputCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::OutputCKB>(Arena*);
template<> ::JUB::Proto::NervosCKB::TransactionCKB* Arena::CreateMaybeMessage<::JUB::Proto::NervosCKB::TransactionCKB>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace NervosCKB {

// ===================================================================

class ContextCfgCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.ContextCfgCKB) */ {
 public:
  ContextCfgCKB();
  virtual ~ContextCfgCKB();

  ContextCfgCKB(const ContextCfgCKB& from);
  ContextCfgCKB(ContextCfgCKB&& from) noexcept
    : ContextCfgCKB() {
    *this = ::std::move(from);
  }

  inline ContextCfgCKB& operator=(const ContextCfgCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContextCfgCKB& operator=(ContextCfgCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContextCfgCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContextCfgCKB* internal_default_instance() {
    return reinterpret_cast<const ContextCfgCKB*>(
               &_ContextCfgCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContextCfgCKB& a, ContextCfgCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(ContextCfgCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContextCfgCKB* New() const final {
    return CreateMaybeMessage<ContextCfgCKB>(nullptr);
  }

  ContextCfgCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContextCfgCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContextCfgCKB& from);
  void MergeFrom(const ContextCfgCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContextCfgCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.ContextCfgCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainPathFieldNumber = 1,
    kMainNetFieldNumber = 2,
  };
  // string main_path = 1;
  void clear_main_path();
  const std::string& main_path() const;
  void set_main_path(const std::string& value);
  void set_main_path(std::string&& value);
  void set_main_path(const char* value);
  void set_main_path(const char* value, size_t size);
  std::string* mutable_main_path();
  std::string* release_main_path();
  void set_allocated_main_path(std::string* main_path);

  // bool main_net = 2;
  void clear_main_net();
  bool main_net() const;
  void set_main_net(bool value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.ContextCfgCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_path_;
  bool main_net_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// -------------------------------------------------------------------

class CellDepCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.CellDepCKB) */ {
 public:
  CellDepCKB();
  virtual ~CellDepCKB();

  CellDepCKB(const CellDepCKB& from);
  CellDepCKB(CellDepCKB&& from) noexcept
    : CellDepCKB() {
    *this = ::std::move(from);
  }

  inline CellDepCKB& operator=(const CellDepCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellDepCKB& operator=(CellDepCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellDepCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellDepCKB* internal_default_instance() {
    return reinterpret_cast<const CellDepCKB*>(
               &_CellDepCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CellDepCKB& a, CellDepCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(CellDepCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellDepCKB* New() const final {
    return CreateMaybeMessage<CellDepCKB>(nullptr);
  }

  CellDepCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellDepCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellDepCKB& from);
  void MergeFrom(const CellDepCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellDepCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.CellDepCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHashFieldNumber = 2,
    kTypeFieldNumber = 1,
    kIndexFieldNumber = 3,
  };
  // string tx_hash = 2;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);

  // uint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 index = 3;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.CellDepCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// -------------------------------------------------------------------

class CellScriptCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.CellScriptCKB) */ {
 public:
  CellScriptCKB();
  virtual ~CellScriptCKB();

  CellScriptCKB(const CellScriptCKB& from);
  CellScriptCKB(CellScriptCKB&& from) noexcept
    : CellScriptCKB() {
    *this = ::std::move(from);
  }

  inline CellScriptCKB& operator=(const CellScriptCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellScriptCKB& operator=(CellScriptCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CellScriptCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CellScriptCKB* internal_default_instance() {
    return reinterpret_cast<const CellScriptCKB*>(
               &_CellScriptCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CellScriptCKB& a, CellScriptCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(CellScriptCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CellScriptCKB* New() const final {
    return CreateMaybeMessage<CellScriptCKB>(nullptr);
  }

  CellScriptCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CellScriptCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CellScriptCKB& from);
  void MergeFrom(const CellScriptCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellScriptCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.CellScriptCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeHashFieldNumber = 1,
    kArgsFieldNumber = 3,
    kHashTypeFieldNumber = 2,
  };
  // string code_hash = 1;
  void clear_code_hash();
  const std::string& code_hash() const;
  void set_code_hash(const std::string& value);
  void set_code_hash(std::string&& value);
  void set_code_hash(const char* value);
  void set_code_hash(const char* value, size_t size);
  std::string* mutable_code_hash();
  std::string* release_code_hash();
  void set_allocated_code_hash(std::string* code_hash);

  // string args = 3;
  void clear_args();
  const std::string& args() const;
  void set_args(const std::string& value);
  void set_args(std::string&& value);
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  std::string* mutable_args();
  std::string* release_args();
  void set_allocated_args(std::string* args);

  // uint32 hash_type = 2;
  void clear_hash_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_type() const;
  void set_hash_type(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.CellScriptCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hash_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// -------------------------------------------------------------------

class InputCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.InputCKB) */ {
 public:
  InputCKB();
  virtual ~InputCKB();

  InputCKB(const InputCKB& from);
  InputCKB(InputCKB&& from) noexcept
    : InputCKB() {
    *this = ::std::move(from);
  }

  inline InputCKB& operator=(const InputCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline InputCKB& operator=(InputCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InputCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InputCKB* internal_default_instance() {
    return reinterpret_cast<const InputCKB*>(
               &_InputCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InputCKB& a, InputCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(InputCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InputCKB* New() const final {
    return CreateMaybeMessage<InputCKB>(nullptr);
  }

  InputCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InputCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InputCKB& from);
  void MergeFrom(const InputCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InputCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.InputCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreHashFieldNumber = 1,
    kLockFieldNumber = 5,
    kPathFieldNumber = 6,
    kSinceFieldNumber = 3,
    kCapacityFieldNumber = 4,
    kPreIndexFieldNumber = 2,
  };
  // string pre_hash = 1;
  void clear_pre_hash();
  const std::string& pre_hash() const;
  void set_pre_hash(const std::string& value);
  void set_pre_hash(std::string&& value);
  void set_pre_hash(const char* value);
  void set_pre_hash(const char* value, size_t size);
  std::string* mutable_pre_hash();
  std::string* release_pre_hash();
  void set_allocated_pre_hash(std::string* pre_hash);

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
  bool has_lock() const;
  void clear_lock();
  const ::JUB::Proto::NervosCKB::CellScriptCKB& lock() const;
  ::JUB::Proto::NervosCKB::CellScriptCKB* release_lock();
  ::JUB::Proto::NervosCKB::CellScriptCKB* mutable_lock();
  void set_allocated_lock(::JUB::Proto::NervosCKB::CellScriptCKB* lock);

  // .JUB.Proto.Common.Bip44Path path = 6;
  bool has_path() const;
  void clear_path();
  const ::JUB::Proto::Common::Bip44Path& path() const;
  ::JUB::Proto::Common::Bip44Path* release_path();
  ::JUB::Proto::Common::Bip44Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip44Path* path);

  // uint64 since = 3;
  void clear_since();
  ::PROTOBUF_NAMESPACE_ID::uint64 since() const;
  void set_since(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 capacity = 4;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 pre_index = 2;
  void clear_pre_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_index() const;
  void set_pre_index(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.InputCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_hash_;
  ::JUB::Proto::NervosCKB::CellScriptCKB* lock_;
  ::JUB::Proto::Common::Bip44Path* path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 since_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// -------------------------------------------------------------------

class OutputCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.OutputCKB) */ {
 public:
  OutputCKB();
  virtual ~OutputCKB();

  OutputCKB(const OutputCKB& from);
  OutputCKB(OutputCKB&& from) noexcept
    : OutputCKB() {
    *this = ::std::move(from);
  }

  inline OutputCKB& operator=(const OutputCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutputCKB& operator=(OutputCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutputCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutputCKB* internal_default_instance() {
    return reinterpret_cast<const OutputCKB*>(
               &_OutputCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OutputCKB& a, OutputCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(OutputCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutputCKB* New() const final {
    return CreateMaybeMessage<OutputCKB>(nullptr);
  }

  OutputCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutputCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutputCKB& from);
  void MergeFrom(const OutputCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutputCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.OutputCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 4,
    kLockFieldNumber = 2,
    kTypeFieldNumber = 3,
    kPathFieldNumber = 5,
    kCapacityFieldNumber = 1,
  };
  // string data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
  bool has_lock() const;
  void clear_lock();
  const ::JUB::Proto::NervosCKB::CellScriptCKB& lock() const;
  ::JUB::Proto::NervosCKB::CellScriptCKB* release_lock();
  ::JUB::Proto::NervosCKB::CellScriptCKB* mutable_lock();
  void set_allocated_lock(::JUB::Proto::NervosCKB::CellScriptCKB* lock);

  // .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
  bool has_type() const;
  void clear_type();
  const ::JUB::Proto::NervosCKB::CellScriptCKB& type() const;
  ::JUB::Proto::NervosCKB::CellScriptCKB* release_type();
  ::JUB::Proto::NervosCKB::CellScriptCKB* mutable_type();
  void set_allocated_type(::JUB::Proto::NervosCKB::CellScriptCKB* type);

  // .JUB.Proto.Common.Bip44Path path = 5;
  bool has_path() const;
  void clear_path();
  const ::JUB::Proto::Common::Bip44Path& path() const;
  ::JUB::Proto::Common::Bip44Path* release_path();
  ::JUB::Proto::Common::Bip44Path* mutable_path();
  void set_allocated_path(::JUB::Proto::Common::Bip44Path* path);

  // uint64 capacity = 1;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.OutputCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::JUB::Proto::NervosCKB::CellScriptCKB* lock_;
  ::JUB::Proto::NervosCKB::CellScriptCKB* type_;
  ::JUB::Proto::Common::Bip44Path* path_;
  ::PROTOBUF_NAMESPACE_ID::uint64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// -------------------------------------------------------------------

class TransactionCKB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.NervosCKB.TransactionCKB) */ {
 public:
  TransactionCKB();
  virtual ~TransactionCKB();

  TransactionCKB(const TransactionCKB& from);
  TransactionCKB(TransactionCKB&& from) noexcept
    : TransactionCKB() {
    *this = ::std::move(from);
  }

  inline TransactionCKB& operator=(const TransactionCKB& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionCKB& operator=(TransactionCKB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionCKB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionCKB* internal_default_instance() {
    return reinterpret_cast<const TransactionCKB*>(
               &_TransactionCKB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TransactionCKB& a, TransactionCKB& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionCKB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionCKB* New() const final {
    return CreateMaybeMessage<TransactionCKB>(nullptr);
  }

  TransactionCKB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionCKB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionCKB& from);
  void MergeFrom(const TransactionCKB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionCKB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.NervosCKB.TransactionCKB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Jub_5fNervosCKB_2eproto);
    return ::descriptor_table_Jub_5fNervosCKB_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDepsFieldNumber = 2,
    kInputsFieldNumber = 3,
    kOutputsFieldNumber = 4,
    kVersionFieldNumber = 1,
  };
  // repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
  int deps_size() const;
  void clear_deps();
  ::JUB::Proto::NervosCKB::CellDepCKB* mutable_deps(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::CellDepCKB >*
      mutable_deps();
  const ::JUB::Proto::NervosCKB::CellDepCKB& deps(int index) const;
  ::JUB::Proto::NervosCKB::CellDepCKB* add_deps();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::CellDepCKB >&
      deps() const;

  // repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  ::JUB::Proto::NervosCKB::InputCKB* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::InputCKB >*
      mutable_inputs();
  const ::JUB::Proto::NervosCKB::InputCKB& inputs(int index) const;
  ::JUB::Proto::NervosCKB::InputCKB* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::InputCKB >&
      inputs() const;

  // repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
  int outputs_size() const;
  void clear_outputs();
  ::JUB::Proto::NervosCKB::OutputCKB* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::OutputCKB >*
      mutable_outputs();
  const ::JUB::Proto::NervosCKB::OutputCKB& outputs(int index) const;
  ::JUB::Proto::NervosCKB::OutputCKB* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::OutputCKB >&
      outputs() const;

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:JUB.Proto.NervosCKB.TransactionCKB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::CellDepCKB > deps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::InputCKB > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::OutputCKB > outputs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Jub_5fNervosCKB_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContextCfgCKB

// string main_path = 1;
inline void ContextCfgCKB::clear_main_path() {
  main_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ContextCfgCKB::main_path() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
  return main_path_.GetNoArena();
}
inline void ContextCfgCKB::set_main_path(const std::string& value) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
}
inline void ContextCfgCKB::set_main_path(std::string&& value) {
  
  main_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
}
inline void ContextCfgCKB::set_main_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
}
inline void ContextCfgCKB::set_main_path(const char* value, size_t size) {
  
  main_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
}
inline std::string* ContextCfgCKB::mutable_main_path() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
  return main_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContextCfgCKB::release_main_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
  
  return main_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContextCfgCKB::set_allocated_main_path(std::string* main_path) {
  if (main_path != nullptr) {
    
  } else {
    
  }
  main_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main_path);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.ContextCfgCKB.main_path)
}

// bool main_net = 2;
inline void ContextCfgCKB::clear_main_net() {
  main_net_ = false;
}
inline bool ContextCfgCKB::main_net() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.ContextCfgCKB.main_net)
  return main_net_;
}
inline void ContextCfgCKB::set_main_net(bool value) {
  
  main_net_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.ContextCfgCKB.main_net)
}

// -------------------------------------------------------------------

// CellDepCKB

// uint32 type = 1;
inline void CellDepCKB::clear_type() {
  type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellDepCKB::type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellDepCKB.type)
  return type_;
}
inline void CellDepCKB::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellDepCKB.type)
}

// string tx_hash = 2;
inline void CellDepCKB::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellDepCKB::tx_hash() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
  return tx_hash_.GetNoArena();
}
inline void CellDepCKB::set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
}
inline void CellDepCKB::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
}
inline void CellDepCKB::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
}
inline void CellDepCKB::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
}
inline std::string* CellDepCKB::mutable_tx_hash() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellDepCKB::release_tx_hash() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellDepCKB::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.CellDepCKB.tx_hash)
}

// uint32 index = 3;
inline void CellDepCKB::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellDepCKB::index() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellDepCKB.index)
  return index_;
}
inline void CellDepCKB::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellDepCKB.index)
}

// -------------------------------------------------------------------

// CellScriptCKB

// string code_hash = 1;
inline void CellScriptCKB::clear_code_hash() {
  code_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellScriptCKB::code_hash() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
  return code_hash_.GetNoArena();
}
inline void CellScriptCKB::set_code_hash(const std::string& value) {
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
}
inline void CellScriptCKB::set_code_hash(std::string&& value) {
  
  code_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
}
inline void CellScriptCKB::set_code_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
}
inline void CellScriptCKB::set_code_hash(const char* value, size_t size) {
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
}
inline std::string* CellScriptCKB::mutable_code_hash() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
  return code_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellScriptCKB::release_code_hash() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
  
  return code_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellScriptCKB::set_allocated_code_hash(std::string* code_hash) {
  if (code_hash != nullptr) {
    
  } else {
    
  }
  code_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code_hash);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.CellScriptCKB.code_hash)
}

// uint32 hash_type = 2;
inline void CellScriptCKB::clear_hash_type() {
  hash_type_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CellScriptCKB::hash_type() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellScriptCKB.hash_type)
  return hash_type_;
}
inline void CellScriptCKB::set_hash_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hash_type_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellScriptCKB.hash_type)
}

// string args = 3;
inline void CellScriptCKB::clear_args() {
  args_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CellScriptCKB::args() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.CellScriptCKB.args)
  return args_.GetNoArena();
}
inline void CellScriptCKB::set_args(const std::string& value) {
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.CellScriptCKB.args)
}
inline void CellScriptCKB::set_args(std::string&& value) {
  
  args_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.CellScriptCKB.args)
}
inline void CellScriptCKB::set_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.CellScriptCKB.args)
}
inline void CellScriptCKB::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.CellScriptCKB.args)
}
inline std::string* CellScriptCKB::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.CellScriptCKB.args)
  return args_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CellScriptCKB::release_args() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.CellScriptCKB.args)
  
  return args_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CellScriptCKB::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.CellScriptCKB.args)
}

// -------------------------------------------------------------------

// InputCKB

// string pre_hash = 1;
inline void InputCKB::clear_pre_hash() {
  pre_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InputCKB::pre_hash() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.pre_hash)
  return pre_hash_.GetNoArena();
}
inline void InputCKB::set_pre_hash(const std::string& value) {
  
  pre_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.InputCKB.pre_hash)
}
inline void InputCKB::set_pre_hash(std::string&& value) {
  
  pre_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.InputCKB.pre_hash)
}
inline void InputCKB::set_pre_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pre_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.InputCKB.pre_hash)
}
inline void InputCKB::set_pre_hash(const char* value, size_t size) {
  
  pre_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.InputCKB.pre_hash)
}
inline std::string* InputCKB::mutable_pre_hash() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.InputCKB.pre_hash)
  return pre_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InputCKB::release_pre_hash() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.InputCKB.pre_hash)
  
  return pre_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InputCKB::set_allocated_pre_hash(std::string* pre_hash) {
  if (pre_hash != nullptr) {
    
  } else {
    
  }
  pre_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_hash);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.InputCKB.pre_hash)
}

// uint32 pre_index = 2;
inline void InputCKB::clear_pre_index() {
  pre_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InputCKB::pre_index() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.pre_index)
  return pre_index_;
}
inline void InputCKB::set_pre_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pre_index_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.InputCKB.pre_index)
}

// uint64 since = 3;
inline void InputCKB::clear_since() {
  since_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputCKB::since() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.since)
  return since_;
}
inline void InputCKB::set_since(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  since_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.InputCKB.since)
}

// uint64 capacity = 4;
inline void InputCKB::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InputCKB::capacity() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.capacity)
  return capacity_;
}
inline void InputCKB::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.InputCKB.capacity)
}

// .JUB.Proto.NervosCKB.CellScriptCKB lock = 5;
inline bool InputCKB::has_lock() const {
  return this != internal_default_instance() && lock_ != nullptr;
}
inline void InputCKB::clear_lock() {
  if (GetArenaNoVirtual() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
}
inline const ::JUB::Proto::NervosCKB::CellScriptCKB& InputCKB::lock() const {
  const ::JUB::Proto::NervosCKB::CellScriptCKB* p = lock_;
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.lock)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      &::JUB::Proto::NervosCKB::_CellScriptCKB_default_instance_);
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* InputCKB::release_lock() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.InputCKB.lock)
  
  ::JUB::Proto::NervosCKB::CellScriptCKB* temp = lock_;
  lock_ = nullptr;
  return temp;
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* InputCKB::mutable_lock() {
  
  if (lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::NervosCKB::CellScriptCKB>(GetArenaNoVirtual());
    lock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.InputCKB.lock)
  return lock_;
}
inline void InputCKB::set_allocated_lock(::JUB::Proto::NervosCKB::CellScriptCKB* lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lock_;
  }
  if (lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock, submessage_arena);
    }
    
  } else {
    
  }
  lock_ = lock;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.InputCKB.lock)
}

// .JUB.Proto.Common.Bip44Path path = 6;
inline bool InputCKB::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline const ::JUB::Proto::Common::Bip44Path& InputCKB::path() const {
  const ::JUB::Proto::Common::Bip44Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.InputCKB.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip44Path*>(
      &::JUB::Proto::Common::_Bip44Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip44Path* InputCKB::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.InputCKB.path)
  
  ::JUB::Proto::Common::Bip44Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Common::Bip44Path* InputCKB::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Common::Bip44Path>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.InputCKB.path)
  return path_;
}
inline void InputCKB::set_allocated_path(::JUB::Proto::Common::Bip44Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.InputCKB.path)
}

// -------------------------------------------------------------------

// OutputCKB

// uint64 capacity = 1;
inline void OutputCKB::clear_capacity() {
  capacity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OutputCKB::capacity() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.OutputCKB.capacity)
  return capacity_;
}
inline void OutputCKB::set_capacity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  capacity_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.OutputCKB.capacity)
}

// .JUB.Proto.NervosCKB.CellScriptCKB lock = 2;
inline bool OutputCKB::has_lock() const {
  return this != internal_default_instance() && lock_ != nullptr;
}
inline void OutputCKB::clear_lock() {
  if (GetArenaNoVirtual() == nullptr && lock_ != nullptr) {
    delete lock_;
  }
  lock_ = nullptr;
}
inline const ::JUB::Proto::NervosCKB::CellScriptCKB& OutputCKB::lock() const {
  const ::JUB::Proto::NervosCKB::CellScriptCKB* p = lock_;
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.OutputCKB.lock)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      &::JUB::Proto::NervosCKB::_CellScriptCKB_default_instance_);
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* OutputCKB::release_lock() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.OutputCKB.lock)
  
  ::JUB::Proto::NervosCKB::CellScriptCKB* temp = lock_;
  lock_ = nullptr;
  return temp;
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* OutputCKB::mutable_lock() {
  
  if (lock_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::NervosCKB::CellScriptCKB>(GetArenaNoVirtual());
    lock_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.OutputCKB.lock)
  return lock_;
}
inline void OutputCKB::set_allocated_lock(::JUB::Proto::NervosCKB::CellScriptCKB* lock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lock_;
  }
  if (lock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lock, submessage_arena);
    }
    
  } else {
    
  }
  lock_ = lock;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.OutputCKB.lock)
}

// .JUB.Proto.NervosCKB.CellScriptCKB type = 3;
inline bool OutputCKB::has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline void OutputCKB::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::JUB::Proto::NervosCKB::CellScriptCKB& OutputCKB::type() const {
  const ::JUB::Proto::NervosCKB::CellScriptCKB* p = type_;
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.OutputCKB.type)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::NervosCKB::CellScriptCKB*>(
      &::JUB::Proto::NervosCKB::_CellScriptCKB_default_instance_);
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* OutputCKB::release_type() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.OutputCKB.type)
  
  ::JUB::Proto::NervosCKB::CellScriptCKB* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::JUB::Proto::NervosCKB::CellScriptCKB* OutputCKB::mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::NervosCKB::CellScriptCKB>(GetArenaNoVirtual());
    type_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.OutputCKB.type)
  return type_;
}
inline void OutputCKB::set_allocated_type(::JUB::Proto::NervosCKB::CellScriptCKB* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.OutputCKB.type)
}

// string data = 4;
inline void OutputCKB::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutputCKB::data() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.OutputCKB.data)
  return data_.GetNoArena();
}
inline void OutputCKB::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.OutputCKB.data)
}
inline void OutputCKB::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.NervosCKB.OutputCKB.data)
}
inline void OutputCKB::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.NervosCKB.OutputCKB.data)
}
inline void OutputCKB::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.NervosCKB.OutputCKB.data)
}
inline std::string* OutputCKB::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.OutputCKB.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutputCKB::release_data() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.OutputCKB.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutputCKB::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.OutputCKB.data)
}

// .JUB.Proto.Common.Bip44Path path = 5;
inline bool OutputCKB::has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline const ::JUB::Proto::Common::Bip44Path& OutputCKB::path() const {
  const ::JUB::Proto::Common::Bip44Path* p = path_;
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.OutputCKB.path)
  return p != nullptr ? *p : *reinterpret_cast<const ::JUB::Proto::Common::Bip44Path*>(
      &::JUB::Proto::Common::_Bip44Path_default_instance_);
}
inline ::JUB::Proto::Common::Bip44Path* OutputCKB::release_path() {
  // @@protoc_insertion_point(field_release:JUB.Proto.NervosCKB.OutputCKB.path)
  
  ::JUB::Proto::Common::Bip44Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::JUB::Proto::Common::Bip44Path* OutputCKB::mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::JUB::Proto::Common::Bip44Path>(GetArenaNoVirtual());
    path_ = p;
  }
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.OutputCKB.path)
  return path_;
}
inline void OutputCKB::set_allocated_path(::JUB::Proto::Common::Bip44Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.NervosCKB.OutputCKB.path)
}

// -------------------------------------------------------------------

// TransactionCKB

// uint32 version = 1;
inline void TransactionCKB::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TransactionCKB::version() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.TransactionCKB.version)
  return version_;
}
inline void TransactionCKB::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:JUB.Proto.NervosCKB.TransactionCKB.version)
}

// repeated .JUB.Proto.NervosCKB.CellDepCKB deps = 2;
inline int TransactionCKB::deps_size() const {
  return deps_.size();
}
inline void TransactionCKB::clear_deps() {
  deps_.Clear();
}
inline ::JUB::Proto::NervosCKB::CellDepCKB* TransactionCKB::mutable_deps(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.TransactionCKB.deps)
  return deps_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::CellDepCKB >*
TransactionCKB::mutable_deps() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.NervosCKB.TransactionCKB.deps)
  return &deps_;
}
inline const ::JUB::Proto::NervosCKB::CellDepCKB& TransactionCKB::deps(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.TransactionCKB.deps)
  return deps_.Get(index);
}
inline ::JUB::Proto::NervosCKB::CellDepCKB* TransactionCKB::add_deps() {
  // @@protoc_insertion_point(field_add:JUB.Proto.NervosCKB.TransactionCKB.deps)
  return deps_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::CellDepCKB >&
TransactionCKB::deps() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.NervosCKB.TransactionCKB.deps)
  return deps_;
}

// repeated .JUB.Proto.NervosCKB.InputCKB inputs = 3;
inline int TransactionCKB::inputs_size() const {
  return inputs_.size();
}
inline void TransactionCKB::clear_inputs() {
  inputs_.Clear();
}
inline ::JUB::Proto::NervosCKB::InputCKB* TransactionCKB::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.TransactionCKB.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::InputCKB >*
TransactionCKB::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.NervosCKB.TransactionCKB.inputs)
  return &inputs_;
}
inline const ::JUB::Proto::NervosCKB::InputCKB& TransactionCKB::inputs(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.TransactionCKB.inputs)
  return inputs_.Get(index);
}
inline ::JUB::Proto::NervosCKB::InputCKB* TransactionCKB::add_inputs() {
  // @@protoc_insertion_point(field_add:JUB.Proto.NervosCKB.TransactionCKB.inputs)
  return inputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::InputCKB >&
TransactionCKB::inputs() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.NervosCKB.TransactionCKB.inputs)
  return inputs_;
}

// repeated .JUB.Proto.NervosCKB.OutputCKB outputs = 4;
inline int TransactionCKB::outputs_size() const {
  return outputs_.size();
}
inline void TransactionCKB::clear_outputs() {
  outputs_.Clear();
}
inline ::JUB::Proto::NervosCKB::OutputCKB* TransactionCKB::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:JUB.Proto.NervosCKB.TransactionCKB.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::OutputCKB >*
TransactionCKB::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:JUB.Proto.NervosCKB.TransactionCKB.outputs)
  return &outputs_;
}
inline const ::JUB::Proto::NervosCKB::OutputCKB& TransactionCKB::outputs(int index) const {
  // @@protoc_insertion_point(field_get:JUB.Proto.NervosCKB.TransactionCKB.outputs)
  return outputs_.Get(index);
}
inline ::JUB::Proto::NervosCKB::OutputCKB* TransactionCKB::add_outputs() {
  // @@protoc_insertion_point(field_add:JUB.Proto.NervosCKB.TransactionCKB.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JUB::Proto::NervosCKB::OutputCKB >&
TransactionCKB::outputs() const {
  // @@protoc_insertion_point(field_list:JUB.Proto.NervosCKB.TransactionCKB.outputs)
  return outputs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace NervosCKB
}  // namespace Proto
}  // namespace JUB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Jub_5fNervosCKB_2eproto
