// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trc20_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trc20_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trc20_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trc20_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trc20_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trc20_5fcontract_2eproto;
namespace JUB {
namespace Proto {
namespace Tron {
class TransferTRC20Contract;
class TransferTRC20ContractDefaultTypeInternal;
extern TransferTRC20ContractDefaultTypeInternal _TransferTRC20Contract_default_instance_;
}  // namespace Tron
}  // namespace Proto
}  // namespace JUB
PROTOBUF_NAMESPACE_OPEN
template<> ::JUB::Proto::Tron::TransferTRC20Contract* Arena::CreateMaybeMessage<::JUB::Proto::Tron::TransferTRC20Contract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace JUB {
namespace Proto {
namespace Tron {

// ===================================================================

class TransferTRC20Contract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JUB.Proto.Tron.TransferTRC20Contract) */ {
 public:
  TransferTRC20Contract();
  virtual ~TransferTRC20Contract();

  TransferTRC20Contract(const TransferTRC20Contract& from);
  TransferTRC20Contract(TransferTRC20Contract&& from) noexcept
    : TransferTRC20Contract() {
    *this = ::std::move(from);
  }

  inline TransferTRC20Contract& operator=(const TransferTRC20Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransferTRC20Contract& operator=(TransferTRC20Contract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransferTRC20Contract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransferTRC20Contract* internal_default_instance() {
    return reinterpret_cast<const TransferTRC20Contract*>(
               &_TransferTRC20Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransferTRC20Contract& a, TransferTRC20Contract& b) {
    a.Swap(&b);
  }
  inline void Swap(TransferTRC20Contract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransferTRC20Contract* New() const final {
    return CreateMaybeMessage<TransferTRC20Contract>(nullptr);
  }

  TransferTRC20Contract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransferTRC20Contract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransferTRC20Contract& from);
  void MergeFrom(const TransferTRC20Contract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransferTRC20Contract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JUB.Proto.Tron.TransferTRC20Contract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trc20_5fcontract_2eproto);
    return ::descriptor_table_trc20_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContractAddressFieldNumber = 1,
    kOwnerAddressFieldNumber = 2,
    kToAddressFieldNumber = 3,
    kAmountFieldNumber = 4,
  };
  // string contract_address = 1;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const char* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // string owner_address = 2;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const char* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // string to_address = 3;
  void clear_to_address();
  const std::string& to_address() const;
  void set_to_address(const std::string& value);
  void set_to_address(std::string&& value);
  void set_to_address(const char* value);
  void set_to_address(const char* value, size_t size);
  std::string* mutable_to_address();
  std::string* release_to_address();
  void set_allocated_to_address(std::string* to_address);

  // bytes amount = 4;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const void* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);

  // @@protoc_insertion_point(class_scope:JUB.Proto.Tron.TransferTRC20Contract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trc20_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransferTRC20Contract

// string contract_address = 1;
inline void TransferTRC20Contract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferTRC20Contract::contract_address() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
  return contract_address_.GetNoArena();
}
inline void TransferTRC20Contract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
}
inline void TransferTRC20Contract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
}
inline void TransferTRC20Contract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
}
inline void TransferTRC20Contract::set_contract_address(const char* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
}
inline std::string* TransferTRC20Contract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferTRC20Contract::release_contract_address() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTRC20Contract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Tron.TransferTRC20Contract.contract_address)
}

// string owner_address = 2;
inline void TransferTRC20Contract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferTRC20Contract::owner_address() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
  return owner_address_.GetNoArena();
}
inline void TransferTRC20Contract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
}
inline void TransferTRC20Contract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
}
inline void TransferTRC20Contract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
}
inline void TransferTRC20Contract::set_owner_address(const char* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
}
inline std::string* TransferTRC20Contract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferTRC20Contract::release_owner_address() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTRC20Contract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Tron.TransferTRC20Contract.owner_address)
}

// string to_address = 3;
inline void TransferTRC20Contract::clear_to_address() {
  to_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferTRC20Contract::to_address() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Tron.TransferTRC20Contract.to_address)
  return to_address_.GetNoArena();
}
inline void TransferTRC20Contract::set_to_address(const std::string& value) {
  
  to_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Tron.TransferTRC20Contract.to_address)
}
inline void TransferTRC20Contract::set_to_address(std::string&& value) {
  
  to_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Tron.TransferTRC20Contract.to_address)
}
inline void TransferTRC20Contract::set_to_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Tron.TransferTRC20Contract.to_address)
}
inline void TransferTRC20Contract::set_to_address(const char* value, size_t size) {
  
  to_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Tron.TransferTRC20Contract.to_address)
}
inline std::string* TransferTRC20Contract::mutable_to_address() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Tron.TransferTRC20Contract.to_address)
  return to_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferTRC20Contract::release_to_address() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Tron.TransferTRC20Contract.to_address)
  
  return to_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTRC20Contract::set_allocated_to_address(std::string* to_address) {
  if (to_address != nullptr) {
    
  } else {
    
  }
  to_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_address);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Tron.TransferTRC20Contract.to_address)
}

// bytes amount = 4;
inline void TransferTRC20Contract::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransferTRC20Contract::amount() const {
  // @@protoc_insertion_point(field_get:JUB.Proto.Tron.TransferTRC20Contract.amount)
  return amount_.GetNoArena();
}
inline void TransferTRC20Contract::set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:JUB.Proto.Tron.TransferTRC20Contract.amount)
}
inline void TransferTRC20Contract::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JUB.Proto.Tron.TransferTRC20Contract.amount)
}
inline void TransferTRC20Contract::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JUB.Proto.Tron.TransferTRC20Contract.amount)
}
inline void TransferTRC20Contract::set_amount(const void* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JUB.Proto.Tron.TransferTRC20Contract.amount)
}
inline std::string* TransferTRC20Contract::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:JUB.Proto.Tron.TransferTRC20Contract.amount)
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransferTRC20Contract::release_amount() {
  // @@protoc_insertion_point(field_release:JUB.Proto.Tron.TransferTRC20Contract.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransferTRC20Contract::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:JUB.Proto.Tron.TransferTRC20Contract.amount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Tron
}  // namespace Proto
}  // namespace JUB

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trc20_5fcontract_2eproto
