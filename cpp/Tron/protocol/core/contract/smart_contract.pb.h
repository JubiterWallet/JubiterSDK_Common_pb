// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/smart_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fsmart_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fsmart_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "core/Tron.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fsmart_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto;
namespace protocol {
class ClearABIContract;
class ClearABIContractDefaultTypeInternal;
extern ClearABIContractDefaultTypeInternal _ClearABIContract_default_instance_;
class CreateSmartContract;
class CreateSmartContractDefaultTypeInternal;
extern CreateSmartContractDefaultTypeInternal _CreateSmartContract_default_instance_;
class SmartContract;
class SmartContractDefaultTypeInternal;
extern SmartContractDefaultTypeInternal _SmartContract_default_instance_;
class SmartContract_ABI;
class SmartContract_ABIDefaultTypeInternal;
extern SmartContract_ABIDefaultTypeInternal _SmartContract_ABI_default_instance_;
class SmartContract_ABI_Entry;
class SmartContract_ABI_EntryDefaultTypeInternal;
extern SmartContract_ABI_EntryDefaultTypeInternal _SmartContract_ABI_Entry_default_instance_;
class SmartContract_ABI_Entry_Param;
class SmartContract_ABI_Entry_ParamDefaultTypeInternal;
extern SmartContract_ABI_Entry_ParamDefaultTypeInternal _SmartContract_ABI_Entry_Param_default_instance_;
class TriggerSmartContract;
class TriggerSmartContractDefaultTypeInternal;
extern TriggerSmartContractDefaultTypeInternal _TriggerSmartContract_default_instance_;
class UpdateEnergyLimitContract;
class UpdateEnergyLimitContractDefaultTypeInternal;
extern UpdateEnergyLimitContractDefaultTypeInternal _UpdateEnergyLimitContract_default_instance_;
class UpdateSettingContract;
class UpdateSettingContractDefaultTypeInternal;
extern UpdateSettingContractDefaultTypeInternal _UpdateSettingContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::ClearABIContract* Arena::CreateMaybeMessage<::protocol::ClearABIContract>(Arena*);
template<> ::protocol::CreateSmartContract* Arena::CreateMaybeMessage<::protocol::CreateSmartContract>(Arena*);
template<> ::protocol::SmartContract* Arena::CreateMaybeMessage<::protocol::SmartContract>(Arena*);
template<> ::protocol::SmartContract_ABI* Arena::CreateMaybeMessage<::protocol::SmartContract_ABI>(Arena*);
template<> ::protocol::SmartContract_ABI_Entry* Arena::CreateMaybeMessage<::protocol::SmartContract_ABI_Entry>(Arena*);
template<> ::protocol::SmartContract_ABI_Entry_Param* Arena::CreateMaybeMessage<::protocol::SmartContract_ABI_Entry_Param>(Arena*);
template<> ::protocol::TriggerSmartContract* Arena::CreateMaybeMessage<::protocol::TriggerSmartContract>(Arena*);
template<> ::protocol::UpdateEnergyLimitContract* Arena::CreateMaybeMessage<::protocol::UpdateEnergyLimitContract>(Arena*);
template<> ::protocol::UpdateSettingContract* Arena::CreateMaybeMessage<::protocol::UpdateSettingContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum SmartContract_ABI_Entry_EntryType : int {
  SmartContract_ABI_Entry_EntryType_UnknownEntryType = 0,
  SmartContract_ABI_Entry_EntryType_Constructor = 1,
  SmartContract_ABI_Entry_EntryType_Function = 2,
  SmartContract_ABI_Entry_EntryType_Event = 3,
  SmartContract_ABI_Entry_EntryType_Fallback = 4,
  SmartContract_ABI_Entry_EntryType_SmartContract_ABI_Entry_EntryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SmartContract_ABI_Entry_EntryType_SmartContract_ABI_Entry_EntryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SmartContract_ABI_Entry_EntryType_IsValid(int value);
constexpr SmartContract_ABI_Entry_EntryType SmartContract_ABI_Entry_EntryType_EntryType_MIN = SmartContract_ABI_Entry_EntryType_UnknownEntryType;
constexpr SmartContract_ABI_Entry_EntryType SmartContract_ABI_Entry_EntryType_EntryType_MAX = SmartContract_ABI_Entry_EntryType_Fallback;
constexpr int SmartContract_ABI_Entry_EntryType_EntryType_ARRAYSIZE = SmartContract_ABI_Entry_EntryType_EntryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmartContract_ABI_Entry_EntryType_descriptor();
template<typename T>
inline const std::string& SmartContract_ABI_Entry_EntryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SmartContract_ABI_Entry_EntryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SmartContract_ABI_Entry_EntryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SmartContract_ABI_Entry_EntryType_descriptor(), enum_t_value);
}
inline bool SmartContract_ABI_Entry_EntryType_Parse(
    const std::string& name, SmartContract_ABI_Entry_EntryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SmartContract_ABI_Entry_EntryType>(
    SmartContract_ABI_Entry_EntryType_descriptor(), name, value);
}
enum SmartContract_ABI_Entry_StateMutabilityType : int {
  SmartContract_ABI_Entry_StateMutabilityType_UnknownMutabilityType = 0,
  SmartContract_ABI_Entry_StateMutabilityType_Pure = 1,
  SmartContract_ABI_Entry_StateMutabilityType_View = 2,
  SmartContract_ABI_Entry_StateMutabilityType_Nonpayable = 3,
  SmartContract_ABI_Entry_StateMutabilityType_Payable = 4,
  SmartContract_ABI_Entry_StateMutabilityType_SmartContract_ABI_Entry_StateMutabilityType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SmartContract_ABI_Entry_StateMutabilityType_SmartContract_ABI_Entry_StateMutabilityType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SmartContract_ABI_Entry_StateMutabilityType_IsValid(int value);
constexpr SmartContract_ABI_Entry_StateMutabilityType SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_MIN = SmartContract_ABI_Entry_StateMutabilityType_UnknownMutabilityType;
constexpr SmartContract_ABI_Entry_StateMutabilityType SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_MAX = SmartContract_ABI_Entry_StateMutabilityType_Payable;
constexpr int SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_ARRAYSIZE = SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SmartContract_ABI_Entry_StateMutabilityType_descriptor();
template<typename T>
inline const std::string& SmartContract_ABI_Entry_StateMutabilityType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SmartContract_ABI_Entry_StateMutabilityType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SmartContract_ABI_Entry_StateMutabilityType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SmartContract_ABI_Entry_StateMutabilityType_descriptor(), enum_t_value);
}
inline bool SmartContract_ABI_Entry_StateMutabilityType_Parse(
    const std::string& name, SmartContract_ABI_Entry_StateMutabilityType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SmartContract_ABI_Entry_StateMutabilityType>(
    SmartContract_ABI_Entry_StateMutabilityType_descriptor(), name, value);
}
// ===================================================================

class SmartContract_ABI_Entry_Param :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SmartContract.ABI.Entry.Param) */ {
 public:
  SmartContract_ABI_Entry_Param();
  virtual ~SmartContract_ABI_Entry_Param();

  SmartContract_ABI_Entry_Param(const SmartContract_ABI_Entry_Param& from);
  SmartContract_ABI_Entry_Param(SmartContract_ABI_Entry_Param&& from) noexcept
    : SmartContract_ABI_Entry_Param() {
    *this = ::std::move(from);
  }

  inline SmartContract_ABI_Entry_Param& operator=(const SmartContract_ABI_Entry_Param& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContract_ABI_Entry_Param& operator=(SmartContract_ABI_Entry_Param&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContract_ABI_Entry_Param& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContract_ABI_Entry_Param* internal_default_instance() {
    return reinterpret_cast<const SmartContract_ABI_Entry_Param*>(
               &_SmartContract_ABI_Entry_Param_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SmartContract_ABI_Entry_Param& a, SmartContract_ABI_Entry_Param& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContract_ABI_Entry_Param* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContract_ABI_Entry_Param* New() const final {
    return CreateMaybeMessage<SmartContract_ABI_Entry_Param>(nullptr);
  }

  SmartContract_ABI_Entry_Param* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContract_ABI_Entry_Param>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContract_ABI_Entry_Param& from);
  void MergeFrom(const SmartContract_ABI_Entry_Param& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContract_ABI_Entry_Param* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SmartContract.ABI.Entry.Param";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIndexedFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);

  // bool indexed = 1;
  void clear_indexed();
  bool indexed() const;
  void set_indexed(bool value);

  // @@protoc_insertion_point(class_scope:protocol.SmartContract.ABI.Entry.Param)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  bool indexed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SmartContract_ABI_Entry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SmartContract.ABI.Entry) */ {
 public:
  SmartContract_ABI_Entry();
  virtual ~SmartContract_ABI_Entry();

  SmartContract_ABI_Entry(const SmartContract_ABI_Entry& from);
  SmartContract_ABI_Entry(SmartContract_ABI_Entry&& from) noexcept
    : SmartContract_ABI_Entry() {
    *this = ::std::move(from);
  }

  inline SmartContract_ABI_Entry& operator=(const SmartContract_ABI_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContract_ABI_Entry& operator=(SmartContract_ABI_Entry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContract_ABI_Entry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContract_ABI_Entry* internal_default_instance() {
    return reinterpret_cast<const SmartContract_ABI_Entry*>(
               &_SmartContract_ABI_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SmartContract_ABI_Entry& a, SmartContract_ABI_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContract_ABI_Entry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContract_ABI_Entry* New() const final {
    return CreateMaybeMessage<SmartContract_ABI_Entry>(nullptr);
  }

  SmartContract_ABI_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContract_ABI_Entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContract_ABI_Entry& from);
  void MergeFrom(const SmartContract_ABI_Entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContract_ABI_Entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SmartContract.ABI.Entry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SmartContract_ABI_Entry_Param Param;

  typedef SmartContract_ABI_Entry_EntryType EntryType;
  static constexpr EntryType UnknownEntryType =
    SmartContract_ABI_Entry_EntryType_UnknownEntryType;
  static constexpr EntryType Constructor =
    SmartContract_ABI_Entry_EntryType_Constructor;
  static constexpr EntryType Function =
    SmartContract_ABI_Entry_EntryType_Function;
  static constexpr EntryType Event =
    SmartContract_ABI_Entry_EntryType_Event;
  static constexpr EntryType Fallback =
    SmartContract_ABI_Entry_EntryType_Fallback;
  static inline bool EntryType_IsValid(int value) {
    return SmartContract_ABI_Entry_EntryType_IsValid(value);
  }
  static constexpr EntryType EntryType_MIN =
    SmartContract_ABI_Entry_EntryType_EntryType_MIN;
  static constexpr EntryType EntryType_MAX =
    SmartContract_ABI_Entry_EntryType_EntryType_MAX;
  static constexpr int EntryType_ARRAYSIZE =
    SmartContract_ABI_Entry_EntryType_EntryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EntryType_descriptor() {
    return SmartContract_ABI_Entry_EntryType_descriptor();
  }
  template<typename T>
  static inline const std::string& EntryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EntryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EntryType_Name.");
    return SmartContract_ABI_Entry_EntryType_Name(enum_t_value);
  }
  static inline bool EntryType_Parse(const std::string& name,
      EntryType* value) {
    return SmartContract_ABI_Entry_EntryType_Parse(name, value);
  }

  typedef SmartContract_ABI_Entry_StateMutabilityType StateMutabilityType;
  static constexpr StateMutabilityType UnknownMutabilityType =
    SmartContract_ABI_Entry_StateMutabilityType_UnknownMutabilityType;
  static constexpr StateMutabilityType Pure =
    SmartContract_ABI_Entry_StateMutabilityType_Pure;
  static constexpr StateMutabilityType View =
    SmartContract_ABI_Entry_StateMutabilityType_View;
  static constexpr StateMutabilityType Nonpayable =
    SmartContract_ABI_Entry_StateMutabilityType_Nonpayable;
  static constexpr StateMutabilityType Payable =
    SmartContract_ABI_Entry_StateMutabilityType_Payable;
  static inline bool StateMutabilityType_IsValid(int value) {
    return SmartContract_ABI_Entry_StateMutabilityType_IsValid(value);
  }
  static constexpr StateMutabilityType StateMutabilityType_MIN =
    SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_MIN;
  static constexpr StateMutabilityType StateMutabilityType_MAX =
    SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_MAX;
  static constexpr int StateMutabilityType_ARRAYSIZE =
    SmartContract_ABI_Entry_StateMutabilityType_StateMutabilityType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  StateMutabilityType_descriptor() {
    return SmartContract_ABI_Entry_StateMutabilityType_descriptor();
  }
  template<typename T>
  static inline const std::string& StateMutabilityType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, StateMutabilityType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function StateMutabilityType_Name.");
    return SmartContract_ABI_Entry_StateMutabilityType_Name(enum_t_value);
  }
  static inline bool StateMutabilityType_Parse(const std::string& name,
      StateMutabilityType* value) {
    return SmartContract_ABI_Entry_StateMutabilityType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 4,
    kOutputsFieldNumber = 5,
    kNameFieldNumber = 3,
    kAnonymousFieldNumber = 1,
    kConstantFieldNumber = 2,
    kPayableFieldNumber = 7,
    kTypeFieldNumber = 6,
    kStateMutabilityFieldNumber = 8,
  };
  // repeated .protocol.SmartContract.ABI.Entry.Param inputs = 4;
  int inputs_size() const;
  void clear_inputs();
  ::protocol::SmartContract_ABI_Entry_Param* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >*
      mutable_inputs();
  const ::protocol::SmartContract_ABI_Entry_Param& inputs(int index) const;
  ::protocol::SmartContract_ABI_Entry_Param* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >&
      inputs() const;

  // repeated .protocol.SmartContract.ABI.Entry.Param outputs = 5;
  int outputs_size() const;
  void clear_outputs();
  ::protocol::SmartContract_ABI_Entry_Param* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >*
      mutable_outputs();
  const ::protocol::SmartContract_ABI_Entry_Param& outputs(int index) const;
  ::protocol::SmartContract_ABI_Entry_Param* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >&
      outputs() const;

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bool anonymous = 1;
  void clear_anonymous();
  bool anonymous() const;
  void set_anonymous(bool value);

  // bool constant = 2;
  void clear_constant();
  bool constant() const;
  void set_constant(bool value);

  // bool payable = 7;
  void clear_payable();
  bool payable() const;
  void set_payable(bool value);

  // .protocol.SmartContract.ABI.Entry.EntryType type = 6;
  void clear_type();
  ::protocol::SmartContract_ABI_Entry_EntryType type() const;
  void set_type(::protocol::SmartContract_ABI_Entry_EntryType value);

  // .protocol.SmartContract.ABI.Entry.StateMutabilityType stateMutability = 8;
  void clear_statemutability();
  ::protocol::SmartContract_ABI_Entry_StateMutabilityType statemutability() const;
  void set_statemutability(::protocol::SmartContract_ABI_Entry_StateMutabilityType value);

  // @@protoc_insertion_point(class_scope:protocol.SmartContract.ABI.Entry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool anonymous_;
  bool constant_;
  bool payable_;
  int type_;
  int statemutability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SmartContract_ABI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SmartContract.ABI) */ {
 public:
  SmartContract_ABI();
  virtual ~SmartContract_ABI();

  SmartContract_ABI(const SmartContract_ABI& from);
  SmartContract_ABI(SmartContract_ABI&& from) noexcept
    : SmartContract_ABI() {
    *this = ::std::move(from);
  }

  inline SmartContract_ABI& operator=(const SmartContract_ABI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContract_ABI& operator=(SmartContract_ABI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContract_ABI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContract_ABI* internal_default_instance() {
    return reinterpret_cast<const SmartContract_ABI*>(
               &_SmartContract_ABI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SmartContract_ABI& a, SmartContract_ABI& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContract_ABI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContract_ABI* New() const final {
    return CreateMaybeMessage<SmartContract_ABI>(nullptr);
  }

  SmartContract_ABI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContract_ABI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContract_ABI& from);
  void MergeFrom(const SmartContract_ABI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContract_ABI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SmartContract.ABI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SmartContract_ABI_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntrysFieldNumber = 1,
  };
  // repeated .protocol.SmartContract.ABI.Entry entrys = 1;
  int entrys_size() const;
  void clear_entrys();
  ::protocol::SmartContract_ABI_Entry* mutable_entrys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry >*
      mutable_entrys();
  const ::protocol::SmartContract_ABI_Entry& entrys(int index) const;
  ::protocol::SmartContract_ABI_Entry* add_entrys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry >&
      entrys() const;

  // @@protoc_insertion_point(class_scope:protocol.SmartContract.ABI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry > entrys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SmartContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SmartContract) */ {
 public:
  SmartContract();
  virtual ~SmartContract();

  SmartContract(const SmartContract& from);
  SmartContract(SmartContract&& from) noexcept
    : SmartContract() {
    *this = ::std::move(from);
  }

  inline SmartContract& operator=(const SmartContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline SmartContract& operator=(SmartContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SmartContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SmartContract* internal_default_instance() {
    return reinterpret_cast<const SmartContract*>(
               &_SmartContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SmartContract& a, SmartContract& b) {
    a.Swap(&b);
  }
  inline void Swap(SmartContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SmartContract* New() const final {
    return CreateMaybeMessage<SmartContract>(nullptr);
  }

  SmartContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SmartContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SmartContract& from);
  void MergeFrom(const SmartContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SmartContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SmartContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SmartContract_ABI ABI;

  // accessors -------------------------------------------------------

  enum : int {
    kOriginAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kBytecodeFieldNumber = 4,
    kNameFieldNumber = 7,
    kCodeHashFieldNumber = 9,
    kTrxHashFieldNumber = 10,
    kAbiFieldNumber = 3,
    kCallValueFieldNumber = 5,
    kConsumeUserResourcePercentFieldNumber = 6,
    kOriginEnergyLimitFieldNumber = 8,
  };
  // bytes origin_address = 1;
  void clear_origin_address();
  const std::string& origin_address() const;
  void set_origin_address(const std::string& value);
  void set_origin_address(std::string&& value);
  void set_origin_address(const char* value);
  void set_origin_address(const void* value, size_t size);
  std::string* mutable_origin_address();
  std::string* release_origin_address();
  void set_allocated_origin_address(std::string* origin_address);

  // bytes contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // bytes bytecode = 4;
  void clear_bytecode();
  const std::string& bytecode() const;
  void set_bytecode(const std::string& value);
  void set_bytecode(std::string&& value);
  void set_bytecode(const char* value);
  void set_bytecode(const void* value, size_t size);
  std::string* mutable_bytecode();
  std::string* release_bytecode();
  void set_allocated_bytecode(std::string* bytecode);

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes code_hash = 9;
  void clear_code_hash();
  const std::string& code_hash() const;
  void set_code_hash(const std::string& value);
  void set_code_hash(std::string&& value);
  void set_code_hash(const char* value);
  void set_code_hash(const void* value, size_t size);
  std::string* mutable_code_hash();
  std::string* release_code_hash();
  void set_allocated_code_hash(std::string* code_hash);

  // bytes trx_hash = 10;
  void clear_trx_hash();
  const std::string& trx_hash() const;
  void set_trx_hash(const std::string& value);
  void set_trx_hash(std::string&& value);
  void set_trx_hash(const char* value);
  void set_trx_hash(const void* value, size_t size);
  std::string* mutable_trx_hash();
  std::string* release_trx_hash();
  void set_allocated_trx_hash(std::string* trx_hash);

  // .protocol.SmartContract.ABI abi = 3;
  bool has_abi() const;
  void clear_abi();
  const ::protocol::SmartContract_ABI& abi() const;
  ::protocol::SmartContract_ABI* release_abi();
  ::protocol::SmartContract_ABI* mutable_abi();
  void set_allocated_abi(::protocol::SmartContract_ABI* abi);

  // int64 call_value = 5;
  void clear_call_value();
  ::PROTOBUF_NAMESPACE_ID::int64 call_value() const;
  void set_call_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 consume_user_resource_percent = 6;
  void clear_consume_user_resource_percent();
  ::PROTOBUF_NAMESPACE_ID::int64 consume_user_resource_percent() const;
  void set_consume_user_resource_percent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 origin_energy_limit = 8;
  void clear_origin_energy_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_limit() const;
  void set_origin_energy_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.SmartContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trx_hash_;
  ::protocol::SmartContract_ABI* abi_;
  ::PROTOBUF_NAMESPACE_ID::int64 call_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 consume_user_resource_percent_;
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class CreateSmartContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CreateSmartContract) */ {
 public:
  CreateSmartContract();
  virtual ~CreateSmartContract();

  CreateSmartContract(const CreateSmartContract& from);
  CreateSmartContract(CreateSmartContract&& from) noexcept
    : CreateSmartContract() {
    *this = ::std::move(from);
  }

  inline CreateSmartContract& operator=(const CreateSmartContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSmartContract& operator=(CreateSmartContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSmartContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSmartContract* internal_default_instance() {
    return reinterpret_cast<const CreateSmartContract*>(
               &_CreateSmartContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateSmartContract& a, CreateSmartContract& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSmartContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSmartContract* New() const final {
    return CreateMaybeMessage<CreateSmartContract>(nullptr);
  }

  CreateSmartContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSmartContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSmartContract& from);
  void MergeFrom(const CreateSmartContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSmartContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CreateSmartContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kNewContractFieldNumber = 2,
    kCallTokenValueFieldNumber = 3,
    kTokenIdFieldNumber = 4,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // .protocol.SmartContract new_contract = 2;
  bool has_new_contract() const;
  void clear_new_contract();
  const ::protocol::SmartContract& new_contract() const;
  ::protocol::SmartContract* release_new_contract();
  ::protocol::SmartContract* mutable_new_contract();
  void set_allocated_new_contract(::protocol::SmartContract* new_contract);

  // int64 call_token_value = 3;
  void clear_call_token_value();
  ::PROTOBUF_NAMESPACE_ID::int64 call_token_value() const;
  void set_call_token_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 token_id = 4;
  void clear_token_id();
  ::PROTOBUF_NAMESPACE_ID::int64 token_id() const;
  void set_token_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.CreateSmartContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::protocol::SmartContract* new_contract_;
  ::PROTOBUF_NAMESPACE_ID::int64 call_token_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class TriggerSmartContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TriggerSmartContract) */ {
 public:
  TriggerSmartContract();
  virtual ~TriggerSmartContract();

  TriggerSmartContract(const TriggerSmartContract& from);
  TriggerSmartContract(TriggerSmartContract&& from) noexcept
    : TriggerSmartContract() {
    *this = ::std::move(from);
  }

  inline TriggerSmartContract& operator=(const TriggerSmartContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerSmartContract& operator=(TriggerSmartContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TriggerSmartContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TriggerSmartContract* internal_default_instance() {
    return reinterpret_cast<const TriggerSmartContract*>(
               &_TriggerSmartContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TriggerSmartContract& a, TriggerSmartContract& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerSmartContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TriggerSmartContract* New() const final {
    return CreateMaybeMessage<TriggerSmartContract>(nullptr);
  }

  TriggerSmartContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TriggerSmartContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TriggerSmartContract& from);
  void MergeFrom(const TriggerSmartContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerSmartContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TriggerSmartContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kDataFieldNumber = 4,
    kCallValueFieldNumber = 3,
    kCallTokenValueFieldNumber = 5,
    kTokenIdFieldNumber = 6,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // bytes data = 4;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // int64 call_value = 3;
  void clear_call_value();
  ::PROTOBUF_NAMESPACE_ID::int64 call_value() const;
  void set_call_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 call_token_value = 5;
  void clear_call_token_value();
  ::PROTOBUF_NAMESPACE_ID::int64 call_token_value() const;
  void set_call_token_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 token_id = 6;
  void clear_token_id();
  ::PROTOBUF_NAMESPACE_ID::int64 token_id() const;
  void set_token_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TriggerSmartContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 call_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 call_token_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 token_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class ClearABIContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ClearABIContract) */ {
 public:
  ClearABIContract();
  virtual ~ClearABIContract();

  ClearABIContract(const ClearABIContract& from);
  ClearABIContract(ClearABIContract&& from) noexcept
    : ClearABIContract() {
    *this = ::std::move(from);
  }

  inline ClearABIContract& operator=(const ClearABIContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearABIContract& operator=(ClearABIContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearABIContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearABIContract* internal_default_instance() {
    return reinterpret_cast<const ClearABIContract*>(
               &_ClearABIContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClearABIContract& a, ClearABIContract& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearABIContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearABIContract* New() const final {
    return CreateMaybeMessage<ClearABIContract>(nullptr);
  }

  ClearABIContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearABIContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearABIContract& from);
  void MergeFrom(const ClearABIContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearABIContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ClearABIContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // @@protoc_insertion_point(class_scope:protocol.ClearABIContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UpdateSettingContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateSettingContract) */ {
 public:
  UpdateSettingContract();
  virtual ~UpdateSettingContract();

  UpdateSettingContract(const UpdateSettingContract& from);
  UpdateSettingContract(UpdateSettingContract&& from) noexcept
    : UpdateSettingContract() {
    *this = ::std::move(from);
  }

  inline UpdateSettingContract& operator=(const UpdateSettingContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSettingContract& operator=(UpdateSettingContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSettingContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSettingContract* internal_default_instance() {
    return reinterpret_cast<const UpdateSettingContract*>(
               &_UpdateSettingContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateSettingContract& a, UpdateSettingContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSettingContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSettingContract* New() const final {
    return CreateMaybeMessage<UpdateSettingContract>(nullptr);
  }

  UpdateSettingContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSettingContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSettingContract& from);
  void MergeFrom(const UpdateSettingContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSettingContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UpdateSettingContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kConsumeUserResourcePercentFieldNumber = 3,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // int64 consume_user_resource_percent = 3;
  void clear_consume_user_resource_percent();
  ::PROTOBUF_NAMESPACE_ID::int64 consume_user_resource_percent() const;
  void set_consume_user_resource_percent(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.UpdateSettingContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 consume_user_resource_percent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class UpdateEnergyLimitContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateEnergyLimitContract) */ {
 public:
  UpdateEnergyLimitContract();
  virtual ~UpdateEnergyLimitContract();

  UpdateEnergyLimitContract(const UpdateEnergyLimitContract& from);
  UpdateEnergyLimitContract(UpdateEnergyLimitContract&& from) noexcept
    : UpdateEnergyLimitContract() {
    *this = ::std::move(from);
  }

  inline UpdateEnergyLimitContract& operator=(const UpdateEnergyLimitContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateEnergyLimitContract& operator=(UpdateEnergyLimitContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateEnergyLimitContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateEnergyLimitContract* internal_default_instance() {
    return reinterpret_cast<const UpdateEnergyLimitContract*>(
               &_UpdateEnergyLimitContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateEnergyLimitContract& a, UpdateEnergyLimitContract& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateEnergyLimitContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateEnergyLimitContract* New() const final {
    return CreateMaybeMessage<UpdateEnergyLimitContract>(nullptr);
  }

  UpdateEnergyLimitContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateEnergyLimitContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateEnergyLimitContract& from);
  void MergeFrom(const UpdateEnergyLimitContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateEnergyLimitContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UpdateEnergyLimitContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fsmart_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kContractAddressFieldNumber = 2,
    kOriginEnergyLimitFieldNumber = 3,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes contract_address = 2;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // int64 origin_energy_limit = 3;
  void clear_origin_energy_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_limit() const;
  void set_origin_energy_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.UpdateEnergyLimitContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fsmart_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SmartContract_ABI_Entry_Param

// bool indexed = 1;
inline void SmartContract_ABI_Entry_Param::clear_indexed() {
  indexed_ = false;
}
inline bool SmartContract_ABI_Entry_Param::indexed() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.Param.indexed)
  return indexed_;
}
inline void SmartContract_ABI_Entry_Param::set_indexed(bool value) {
  
  indexed_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.Param.indexed)
}

// string name = 2;
inline void SmartContract_ABI_Entry_Param::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract_ABI_Entry_Param::name() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.Param.name)
  return name_.GetNoArena();
}
inline void SmartContract_ABI_Entry_Param::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.Param.name)
}
inline void SmartContract_ABI_Entry_Param::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.ABI.Entry.Param.name)
}
inline void SmartContract_ABI_Entry_Param::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.ABI.Entry.Param.name)
}
inline void SmartContract_ABI_Entry_Param::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.ABI.Entry.Param.name)
}
inline std::string* SmartContract_ABI_Entry_Param::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.Entry.Param.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract_ABI_Entry_Param::release_name() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.ABI.Entry.Param.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract_ABI_Entry_Param::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.ABI.Entry.Param.name)
}

// string type = 3;
inline void SmartContract_ABI_Entry_Param::clear_type() {
  type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract_ABI_Entry_Param::type() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.Param.type)
  return type_.GetNoArena();
}
inline void SmartContract_ABI_Entry_Param::set_type(const std::string& value) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.Param.type)
}
inline void SmartContract_ABI_Entry_Param::set_type(std::string&& value) {
  
  type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.ABI.Entry.Param.type)
}
inline void SmartContract_ABI_Entry_Param::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.ABI.Entry.Param.type)
}
inline void SmartContract_ABI_Entry_Param::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.ABI.Entry.Param.type)
}
inline std::string* SmartContract_ABI_Entry_Param::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.Entry.Param.type)
  return type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract_ABI_Entry_Param::release_type() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.ABI.Entry.Param.type)
  
  return type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract_ABI_Entry_Param::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.ABI.Entry.Param.type)
}

// -------------------------------------------------------------------

// SmartContract_ABI_Entry

// bool anonymous = 1;
inline void SmartContract_ABI_Entry::clear_anonymous() {
  anonymous_ = false;
}
inline bool SmartContract_ABI_Entry::anonymous() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.anonymous)
  return anonymous_;
}
inline void SmartContract_ABI_Entry::set_anonymous(bool value) {
  
  anonymous_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.anonymous)
}

// bool constant = 2;
inline void SmartContract_ABI_Entry::clear_constant() {
  constant_ = false;
}
inline bool SmartContract_ABI_Entry::constant() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.constant)
  return constant_;
}
inline void SmartContract_ABI_Entry::set_constant(bool value) {
  
  constant_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.constant)
}

// string name = 3;
inline void SmartContract_ABI_Entry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract_ABI_Entry::name() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.name)
  return name_.GetNoArena();
}
inline void SmartContract_ABI_Entry::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.name)
}
inline void SmartContract_ABI_Entry::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.ABI.Entry.name)
}
inline void SmartContract_ABI_Entry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.ABI.Entry.name)
}
inline void SmartContract_ABI_Entry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.ABI.Entry.name)
}
inline std::string* SmartContract_ABI_Entry::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.Entry.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract_ABI_Entry::release_name() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.ABI.Entry.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract_ABI_Entry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.ABI.Entry.name)
}

// repeated .protocol.SmartContract.ABI.Entry.Param inputs = 4;
inline int SmartContract_ABI_Entry::inputs_size() const {
  return inputs_.size();
}
inline void SmartContract_ABI_Entry::clear_inputs() {
  inputs_.Clear();
}
inline ::protocol::SmartContract_ABI_Entry_Param* SmartContract_ABI_Entry::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.Entry.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >*
SmartContract_ABI_Entry::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SmartContract.ABI.Entry.inputs)
  return &inputs_;
}
inline const ::protocol::SmartContract_ABI_Entry_Param& SmartContract_ABI_Entry::inputs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.inputs)
  return inputs_.Get(index);
}
inline ::protocol::SmartContract_ABI_Entry_Param* SmartContract_ABI_Entry::add_inputs() {
  // @@protoc_insertion_point(field_add:protocol.SmartContract.ABI.Entry.inputs)
  return inputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >&
SmartContract_ABI_Entry::inputs() const {
  // @@protoc_insertion_point(field_list:protocol.SmartContract.ABI.Entry.inputs)
  return inputs_;
}

// repeated .protocol.SmartContract.ABI.Entry.Param outputs = 5;
inline int SmartContract_ABI_Entry::outputs_size() const {
  return outputs_.size();
}
inline void SmartContract_ABI_Entry::clear_outputs() {
  outputs_.Clear();
}
inline ::protocol::SmartContract_ABI_Entry_Param* SmartContract_ABI_Entry::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.Entry.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >*
SmartContract_ABI_Entry::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SmartContract.ABI.Entry.outputs)
  return &outputs_;
}
inline const ::protocol::SmartContract_ABI_Entry_Param& SmartContract_ABI_Entry::outputs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.outputs)
  return outputs_.Get(index);
}
inline ::protocol::SmartContract_ABI_Entry_Param* SmartContract_ABI_Entry::add_outputs() {
  // @@protoc_insertion_point(field_add:protocol.SmartContract.ABI.Entry.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry_Param >&
SmartContract_ABI_Entry::outputs() const {
  // @@protoc_insertion_point(field_list:protocol.SmartContract.ABI.Entry.outputs)
  return outputs_;
}

// .protocol.SmartContract.ABI.Entry.EntryType type = 6;
inline void SmartContract_ABI_Entry::clear_type() {
  type_ = 0;
}
inline ::protocol::SmartContract_ABI_Entry_EntryType SmartContract_ABI_Entry::type() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.type)
  return static_cast< ::protocol::SmartContract_ABI_Entry_EntryType >(type_);
}
inline void SmartContract_ABI_Entry::set_type(::protocol::SmartContract_ABI_Entry_EntryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.type)
}

// bool payable = 7;
inline void SmartContract_ABI_Entry::clear_payable() {
  payable_ = false;
}
inline bool SmartContract_ABI_Entry::payable() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.payable)
  return payable_;
}
inline void SmartContract_ABI_Entry::set_payable(bool value) {
  
  payable_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.payable)
}

// .protocol.SmartContract.ABI.Entry.StateMutabilityType stateMutability = 8;
inline void SmartContract_ABI_Entry::clear_statemutability() {
  statemutability_ = 0;
}
inline ::protocol::SmartContract_ABI_Entry_StateMutabilityType SmartContract_ABI_Entry::statemutability() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.Entry.stateMutability)
  return static_cast< ::protocol::SmartContract_ABI_Entry_StateMutabilityType >(statemutability_);
}
inline void SmartContract_ABI_Entry::set_statemutability(::protocol::SmartContract_ABI_Entry_StateMutabilityType value) {
  
  statemutability_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.ABI.Entry.stateMutability)
}

// -------------------------------------------------------------------

// SmartContract_ABI

// repeated .protocol.SmartContract.ABI.Entry entrys = 1;
inline int SmartContract_ABI::entrys_size() const {
  return entrys_.size();
}
inline void SmartContract_ABI::clear_entrys() {
  entrys_.Clear();
}
inline ::protocol::SmartContract_ABI_Entry* SmartContract_ABI::mutable_entrys(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.ABI.entrys)
  return entrys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry >*
SmartContract_ABI::mutable_entrys() {
  // @@protoc_insertion_point(field_mutable_list:protocol.SmartContract.ABI.entrys)
  return &entrys_;
}
inline const ::protocol::SmartContract_ABI_Entry& SmartContract_ABI::entrys(int index) const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.ABI.entrys)
  return entrys_.Get(index);
}
inline ::protocol::SmartContract_ABI_Entry* SmartContract_ABI::add_entrys() {
  // @@protoc_insertion_point(field_add:protocol.SmartContract.ABI.entrys)
  return entrys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::SmartContract_ABI_Entry >&
SmartContract_ABI::entrys() const {
  // @@protoc_insertion_point(field_list:protocol.SmartContract.ABI.entrys)
  return entrys_;
}

// -------------------------------------------------------------------

// SmartContract

// bytes origin_address = 1;
inline void SmartContract::clear_origin_address() {
  origin_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::origin_address() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.origin_address)
  return origin_address_.GetNoArena();
}
inline void SmartContract::set_origin_address(const std::string& value) {
  
  origin_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.origin_address)
}
inline void SmartContract::set_origin_address(std::string&& value) {
  
  origin_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.origin_address)
}
inline void SmartContract::set_origin_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  origin_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.origin_address)
}
inline void SmartContract::set_origin_address(const void* value, size_t size) {
  
  origin_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.origin_address)
}
inline std::string* SmartContract::mutable_origin_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.origin_address)
  return origin_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_origin_address() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.origin_address)
  
  return origin_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_origin_address(std::string* origin_address) {
  if (origin_address != nullptr) {
    
  } else {
    
  }
  origin_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), origin_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.origin_address)
}

// bytes contract_address = 2;
inline void SmartContract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.contract_address)
  return contract_address_.GetNoArena();
}
inline void SmartContract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.contract_address)
}
inline void SmartContract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.contract_address)
}
inline void SmartContract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.contract_address)
}
inline void SmartContract::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.contract_address)
}
inline std::string* SmartContract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.contract_address)
}

// .protocol.SmartContract.ABI abi = 3;
inline bool SmartContract::has_abi() const {
  return this != internal_default_instance() && abi_ != nullptr;
}
inline void SmartContract::clear_abi() {
  if (GetArenaNoVirtual() == nullptr && abi_ != nullptr) {
    delete abi_;
  }
  abi_ = nullptr;
}
inline const ::protocol::SmartContract_ABI& SmartContract::abi() const {
  const ::protocol::SmartContract_ABI* p = abi_;
  // @@protoc_insertion_point(field_get:protocol.SmartContract.abi)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::SmartContract_ABI*>(
      &::protocol::_SmartContract_ABI_default_instance_);
}
inline ::protocol::SmartContract_ABI* SmartContract::release_abi() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.abi)
  
  ::protocol::SmartContract_ABI* temp = abi_;
  abi_ = nullptr;
  return temp;
}
inline ::protocol::SmartContract_ABI* SmartContract::mutable_abi() {
  
  if (abi_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::SmartContract_ABI>(GetArenaNoVirtual());
    abi_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.abi)
  return abi_;
}
inline void SmartContract::set_allocated_abi(::protocol::SmartContract_ABI* abi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete abi_;
  }
  if (abi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      abi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abi, submessage_arena);
    }
    
  } else {
    
  }
  abi_ = abi;
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.abi)
}

// bytes bytecode = 4;
inline void SmartContract::clear_bytecode() {
  bytecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::bytecode() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.bytecode)
  return bytecode_.GetNoArena();
}
inline void SmartContract::set_bytecode(const std::string& value) {
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.bytecode)
}
inline void SmartContract::set_bytecode(std::string&& value) {
  
  bytecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.bytecode)
}
inline void SmartContract::set_bytecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.bytecode)
}
inline void SmartContract::set_bytecode(const void* value, size_t size) {
  
  bytecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.bytecode)
}
inline std::string* SmartContract::mutable_bytecode() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.bytecode)
  return bytecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_bytecode() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.bytecode)
  
  return bytecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_bytecode(std::string* bytecode) {
  if (bytecode != nullptr) {
    
  } else {
    
  }
  bytecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytecode);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.bytecode)
}

// int64 call_value = 5;
inline void SmartContract::clear_call_value() {
  call_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SmartContract::call_value() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.call_value)
  return call_value_;
}
inline void SmartContract::set_call_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  call_value_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.call_value)
}

// int64 consume_user_resource_percent = 6;
inline void SmartContract::clear_consume_user_resource_percent() {
  consume_user_resource_percent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SmartContract::consume_user_resource_percent() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.consume_user_resource_percent)
  return consume_user_resource_percent_;
}
inline void SmartContract::set_consume_user_resource_percent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  consume_user_resource_percent_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.consume_user_resource_percent)
}

// string name = 7;
inline void SmartContract::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::name() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.name)
  return name_.GetNoArena();
}
inline void SmartContract::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.name)
}
inline void SmartContract::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.name)
}
inline void SmartContract::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.name)
}
inline void SmartContract::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.name)
}
inline std::string* SmartContract::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_name() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.name)
}

// int64 origin_energy_limit = 8;
inline void SmartContract::clear_origin_energy_limit() {
  origin_energy_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SmartContract::origin_energy_limit() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.origin_energy_limit)
  return origin_energy_limit_;
}
inline void SmartContract::set_origin_energy_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  origin_energy_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.SmartContract.origin_energy_limit)
}

// bytes code_hash = 9;
inline void SmartContract::clear_code_hash() {
  code_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::code_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.code_hash)
  return code_hash_.GetNoArena();
}
inline void SmartContract::set_code_hash(const std::string& value) {
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.code_hash)
}
inline void SmartContract::set_code_hash(std::string&& value) {
  
  code_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.code_hash)
}
inline void SmartContract::set_code_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.code_hash)
}
inline void SmartContract::set_code_hash(const void* value, size_t size) {
  
  code_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.code_hash)
}
inline std::string* SmartContract::mutable_code_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.code_hash)
  return code_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_code_hash() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.code_hash)
  
  return code_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_code_hash(std::string* code_hash) {
  if (code_hash != nullptr) {
    
  } else {
    
  }
  code_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.code_hash)
}

// bytes trx_hash = 10;
inline void SmartContract::clear_trx_hash() {
  trx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SmartContract::trx_hash() const {
  // @@protoc_insertion_point(field_get:protocol.SmartContract.trx_hash)
  return trx_hash_.GetNoArena();
}
inline void SmartContract::set_trx_hash(const std::string& value) {
  
  trx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SmartContract.trx_hash)
}
inline void SmartContract::set_trx_hash(std::string&& value) {
  
  trx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SmartContract.trx_hash)
}
inline void SmartContract::set_trx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SmartContract.trx_hash)
}
inline void SmartContract::set_trx_hash(const void* value, size_t size) {
  
  trx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SmartContract.trx_hash)
}
inline std::string* SmartContract::mutable_trx_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SmartContract.trx_hash)
  return trx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SmartContract::release_trx_hash() {
  // @@protoc_insertion_point(field_release:protocol.SmartContract.trx_hash)
  
  return trx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SmartContract::set_allocated_trx_hash(std::string* trx_hash) {
  if (trx_hash != nullptr) {
    
  } else {
    
  }
  trx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trx_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.SmartContract.trx_hash)
}

// -------------------------------------------------------------------

// CreateSmartContract

// bytes owner_address = 1;
inline void CreateSmartContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CreateSmartContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSmartContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void CreateSmartContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.CreateSmartContract.owner_address)
}
inline void CreateSmartContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.CreateSmartContract.owner_address)
}
inline void CreateSmartContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.CreateSmartContract.owner_address)
}
inline void CreateSmartContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.CreateSmartContract.owner_address)
}
inline std::string* CreateSmartContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.CreateSmartContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CreateSmartContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.CreateSmartContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CreateSmartContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.CreateSmartContract.owner_address)
}

// .protocol.SmartContract new_contract = 2;
inline bool CreateSmartContract::has_new_contract() const {
  return this != internal_default_instance() && new_contract_ != nullptr;
}
inline void CreateSmartContract::clear_new_contract() {
  if (GetArenaNoVirtual() == nullptr && new_contract_ != nullptr) {
    delete new_contract_;
  }
  new_contract_ = nullptr;
}
inline const ::protocol::SmartContract& CreateSmartContract::new_contract() const {
  const ::protocol::SmartContract* p = new_contract_;
  // @@protoc_insertion_point(field_get:protocol.CreateSmartContract.new_contract)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::SmartContract*>(
      &::protocol::_SmartContract_default_instance_);
}
inline ::protocol::SmartContract* CreateSmartContract::release_new_contract() {
  // @@protoc_insertion_point(field_release:protocol.CreateSmartContract.new_contract)
  
  ::protocol::SmartContract* temp = new_contract_;
  new_contract_ = nullptr;
  return temp;
}
inline ::protocol::SmartContract* CreateSmartContract::mutable_new_contract() {
  
  if (new_contract_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::SmartContract>(GetArenaNoVirtual());
    new_contract_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.CreateSmartContract.new_contract)
  return new_contract_;
}
inline void CreateSmartContract::set_allocated_new_contract(::protocol::SmartContract* new_contract) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete new_contract_;
  }
  if (new_contract) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      new_contract = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_contract, submessage_arena);
    }
    
  } else {
    
  }
  new_contract_ = new_contract;
  // @@protoc_insertion_point(field_set_allocated:protocol.CreateSmartContract.new_contract)
}

// int64 call_token_value = 3;
inline void CreateSmartContract::clear_call_token_value() {
  call_token_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateSmartContract::call_token_value() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSmartContract.call_token_value)
  return call_token_value_;
}
inline void CreateSmartContract::set_call_token_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  call_token_value_ = value;
  // @@protoc_insertion_point(field_set:protocol.CreateSmartContract.call_token_value)
}

// int64 token_id = 4;
inline void CreateSmartContract::clear_token_id() {
  token_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CreateSmartContract::token_id() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSmartContract.token_id)
  return token_id_;
}
inline void CreateSmartContract::set_token_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  token_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.CreateSmartContract.token_id)
}

// -------------------------------------------------------------------

// TriggerSmartContract

// bytes owner_address = 1;
inline void TriggerSmartContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TriggerSmartContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void TriggerSmartContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.owner_address)
}
inline void TriggerSmartContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TriggerSmartContract.owner_address)
}
inline void TriggerSmartContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TriggerSmartContract.owner_address)
}
inline void TriggerSmartContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TriggerSmartContract.owner_address)
}
inline std::string* TriggerSmartContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TriggerSmartContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSmartContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.TriggerSmartContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSmartContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TriggerSmartContract.owner_address)
}

// bytes contract_address = 2;
inline void TriggerSmartContract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TriggerSmartContract::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.contract_address)
  return contract_address_.GetNoArena();
}
inline void TriggerSmartContract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.contract_address)
}
inline void TriggerSmartContract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TriggerSmartContract.contract_address)
}
inline void TriggerSmartContract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TriggerSmartContract.contract_address)
}
inline void TriggerSmartContract::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TriggerSmartContract.contract_address)
}
inline std::string* TriggerSmartContract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TriggerSmartContract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSmartContract::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.TriggerSmartContract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSmartContract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TriggerSmartContract.contract_address)
}

// int64 call_value = 3;
inline void TriggerSmartContract::clear_call_value() {
  call_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerSmartContract::call_value() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.call_value)
  return call_value_;
}
inline void TriggerSmartContract::set_call_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  call_value_ = value;
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.call_value)
}

// bytes data = 4;
inline void TriggerSmartContract::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TriggerSmartContract::data() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.data)
  return data_.GetNoArena();
}
inline void TriggerSmartContract::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.data)
}
inline void TriggerSmartContract::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TriggerSmartContract.data)
}
inline void TriggerSmartContract::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TriggerSmartContract.data)
}
inline void TriggerSmartContract::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TriggerSmartContract.data)
}
inline std::string* TriggerSmartContract::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TriggerSmartContract.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TriggerSmartContract::release_data() {
  // @@protoc_insertion_point(field_release:protocol.TriggerSmartContract.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TriggerSmartContract::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.TriggerSmartContract.data)
}

// int64 call_token_value = 5;
inline void TriggerSmartContract::clear_call_token_value() {
  call_token_value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerSmartContract::call_token_value() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.call_token_value)
  return call_token_value_;
}
inline void TriggerSmartContract::set_call_token_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  call_token_value_ = value;
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.call_token_value)
}

// int64 token_id = 6;
inline void TriggerSmartContract::clear_token_id() {
  token_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TriggerSmartContract::token_id() const {
  // @@protoc_insertion_point(field_get:protocol.TriggerSmartContract.token_id)
  return token_id_;
}
inline void TriggerSmartContract::set_token_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  token_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.TriggerSmartContract.token_id)
}

// -------------------------------------------------------------------

// ClearABIContract

// bytes owner_address = 1;
inline void ClearABIContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClearABIContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.ClearABIContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void ClearABIContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ClearABIContract.owner_address)
}
inline void ClearABIContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ClearABIContract.owner_address)
}
inline void ClearABIContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ClearABIContract.owner_address)
}
inline void ClearABIContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ClearABIContract.owner_address)
}
inline std::string* ClearABIContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ClearABIContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClearABIContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.ClearABIContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClearABIContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ClearABIContract.owner_address)
}

// bytes contract_address = 2;
inline void ClearABIContract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ClearABIContract::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.ClearABIContract.contract_address)
  return contract_address_.GetNoArena();
}
inline void ClearABIContract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ClearABIContract.contract_address)
}
inline void ClearABIContract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ClearABIContract.contract_address)
}
inline void ClearABIContract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ClearABIContract.contract_address)
}
inline void ClearABIContract::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ClearABIContract.contract_address)
}
inline std::string* ClearABIContract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ClearABIContract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ClearABIContract::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.ClearABIContract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ClearABIContract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.ClearABIContract.contract_address)
}

// -------------------------------------------------------------------

// UpdateSettingContract

// bytes owner_address = 1;
inline void UpdateSettingContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateSettingContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateSettingContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void UpdateSettingContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateSettingContract.owner_address)
}
inline void UpdateSettingContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateSettingContract.owner_address)
}
inline void UpdateSettingContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateSettingContract.owner_address)
}
inline void UpdateSettingContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateSettingContract.owner_address)
}
inline std::string* UpdateSettingContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateSettingContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateSettingContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateSettingContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSettingContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateSettingContract.owner_address)
}

// bytes contract_address = 2;
inline void UpdateSettingContract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateSettingContract::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateSettingContract.contract_address)
  return contract_address_.GetNoArena();
}
inline void UpdateSettingContract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateSettingContract.contract_address)
}
inline void UpdateSettingContract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateSettingContract.contract_address)
}
inline void UpdateSettingContract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateSettingContract.contract_address)
}
inline void UpdateSettingContract::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateSettingContract.contract_address)
}
inline std::string* UpdateSettingContract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateSettingContract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateSettingContract::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateSettingContract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateSettingContract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateSettingContract.contract_address)
}

// int64 consume_user_resource_percent = 3;
inline void UpdateSettingContract::clear_consume_user_resource_percent() {
  consume_user_resource_percent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateSettingContract::consume_user_resource_percent() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateSettingContract.consume_user_resource_percent)
  return consume_user_resource_percent_;
}
inline void UpdateSettingContract::set_consume_user_resource_percent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  consume_user_resource_percent_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpdateSettingContract.consume_user_resource_percent)
}

// -------------------------------------------------------------------

// UpdateEnergyLimitContract

// bytes owner_address = 1;
inline void UpdateEnergyLimitContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateEnergyLimitContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateEnergyLimitContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void UpdateEnergyLimitContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateEnergyLimitContract.owner_address)
}
inline void UpdateEnergyLimitContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateEnergyLimitContract.owner_address)
}
inline void UpdateEnergyLimitContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateEnergyLimitContract.owner_address)
}
inline void UpdateEnergyLimitContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateEnergyLimitContract.owner_address)
}
inline std::string* UpdateEnergyLimitContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateEnergyLimitContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateEnergyLimitContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateEnergyLimitContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateEnergyLimitContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateEnergyLimitContract.owner_address)
}

// bytes contract_address = 2;
inline void UpdateEnergyLimitContract::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpdateEnergyLimitContract::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateEnergyLimitContract.contract_address)
  return contract_address_.GetNoArena();
}
inline void UpdateEnergyLimitContract::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.UpdateEnergyLimitContract.contract_address)
}
inline void UpdateEnergyLimitContract::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateEnergyLimitContract.contract_address)
}
inline void UpdateEnergyLimitContract::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.UpdateEnergyLimitContract.contract_address)
}
inline void UpdateEnergyLimitContract::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateEnergyLimitContract.contract_address)
}
inline std::string* UpdateEnergyLimitContract::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.UpdateEnergyLimitContract.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpdateEnergyLimitContract::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.UpdateEnergyLimitContract.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateEnergyLimitContract::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateEnergyLimitContract.contract_address)
}

// int64 origin_energy_limit = 3;
inline void UpdateEnergyLimitContract::clear_origin_energy_limit() {
  origin_energy_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 UpdateEnergyLimitContract::origin_energy_limit() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateEnergyLimitContract.origin_energy_limit)
  return origin_energy_limit_;
}
inline void UpdateEnergyLimitContract::set_origin_energy_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  origin_energy_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.UpdateEnergyLimitContract.origin_energy_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::SmartContract_ABI_Entry_EntryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::SmartContract_ABI_Entry_EntryType>() {
  return ::protocol::SmartContract_ABI_Entry_EntryType_descriptor();
}
template <> struct is_proto_enum< ::protocol::SmartContract_ABI_Entry_StateMutabilityType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::SmartContract_ABI_Entry_StateMutabilityType>() {
  return ::protocol::SmartContract_ABI_Entry_StateMutabilityType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fsmart_5fcontract_2eproto
