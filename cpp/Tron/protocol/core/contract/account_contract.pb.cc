// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/account_contract.proto

#include "core/contract/account_contract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Permission_core_2fTron_2eproto;
namespace protocol {
class AccountCreateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountCreateContract> _instance;
} _AccountCreateContract_default_instance_;
class AccountUpdateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountUpdateContract> _instance;
} _AccountUpdateContract_default_instance_;
class SetAccountIdContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAccountIdContract> _instance;
} _SetAccountIdContract_default_instance_;
class AccountPermissionUpdateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountPermissionUpdateContract> _instance;
} _AccountPermissionUpdateContract_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_AccountCreateContract_default_instance_;
    new (ptr) ::protocol::AccountCreateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::AccountCreateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_AccountPermissionUpdateContract_default_instance_;
    new (ptr) ::protocol::AccountPermissionUpdateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::AccountPermissionUpdateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto}, {
      &scc_info_Permission_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_AccountUpdateContract_default_instance_;
    new (ptr) ::protocol::AccountUpdateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::AccountUpdateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_SetAccountIdContract_default_instance_;
    new (ptr) ::protocol::SetAccountIdContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::SetAccountIdContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2faccount_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2faccount_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2faccount_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, account_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountCreateContract, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, account_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountUpdateContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, account_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::SetAccountIdContract, owner_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, owner_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, witness_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountPermissionUpdateContract, actives_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::AccountCreateContract)},
  { 8, -1, sizeof(::protocol::AccountUpdateContract)},
  { 15, -1, sizeof(::protocol::SetAccountIdContract)},
  { 22, -1, sizeof(::protocol::AccountPermissionUpdateContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountCreateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountUpdateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SetAccountIdContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountPermissionUpdateContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2faccount_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/account_contract.proto\022\010"
  "protocol\032\017core/Tron.proto\"l\n\025AccountCrea"
  "teContract\022\025\n\rowner_address\030\001 \001(\014\022\027\n\017acc"
  "ount_address\030\002 \001(\014\022#\n\004type\030\003 \001(\0162\025.proto"
  "col.AccountType\"D\n\025AccountUpdateContract"
  "\022\024\n\014account_name\030\001 \001(\014\022\025\n\rowner_address\030"
  "\002 \001(\014\"A\n\024SetAccountIdContract\022\022\n\naccount"
  "_id\030\001 \001(\014\022\025\n\rowner_address\030\002 \001(\014\"\253\001\n\037Acc"
  "ountPermissionUpdateContract\022\025\n\rowner_ad"
  "dress\030\001 \001(\014\022#\n\005owner\030\002 \001(\0132\024.protocol.Pe"
  "rmission\022%\n\007witness\030\003 \001(\0132\024.protocol.Per"
  "mission\022%\n\007actives\030\004 \003(\0132\024.protocol.Perm"
  "issionBE\n\030org.tron.protos.contractZ)gith"
  "ub.com/tronprotocol/grpc-gateway/coreb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_deps[1] = {
  &::descriptor_table_core_2fTron_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_sccs[4] = {
  &scc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto.base,
  &scc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base,
  &scc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base,
  &scc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once;
static bool descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto = {
  &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_initialized, descriptor_table_protodef_core_2fcontract_2faccount_5fcontract_2eproto, "core/contract/account_contract.proto", 565,
  &descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_once, descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_sccs, descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_core_2fcontract_2faccount_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2faccount_5fcontract_2eproto, 4, file_level_enum_descriptors_core_2fcontract_2faccount_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2faccount_5fcontract_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fcontract_2faccount_5fcontract_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto), true);
namespace protocol {

// ===================================================================

void AccountCreateContract::InitAsDefaultInstance() {
}
class AccountCreateContract::_Internal {
 public:
};

AccountCreateContract::AccountCreateContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AccountCreateContract)
}
AccountCreateContract::AccountCreateContract(const AccountCreateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_address().empty()) {
    account_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_address_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.AccountCreateContract)
}

void AccountCreateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

AccountCreateContract::~AccountCreateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountCreateContract)
  SharedDtor();
}

void AccountCreateContract::SharedDtor() {
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountCreateContract& AccountCreateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountCreateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void AccountCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountCreateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.AccountType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::AccountType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountCreateContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AccountCreateContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes owner_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.AccountType type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AccountCreateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AccountCreateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountCreateContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AccountCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->owner_address(), output);
  }

  // bytes account_address = 2;
  if (this->account_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->account_address(), output);
  }

  // .protocol.AccountType type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AccountCreateContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountCreateContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->owner_address(), target);
  }

  // bytes account_address = 2;
  if (this->account_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->account_address(), target);
  }

  // .protocol.AccountType type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountCreateContract)
  return target;
}

size_t AccountCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountCreateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  // bytes account_address = 2;
  if (this->account_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account_address());
  }

  // .protocol.AccountType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountCreateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AccountCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountCreateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountCreateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AccountCreateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AccountCreateContract)
    MergeFrom(*source);
  }
}

void AccountCreateContract::MergeFrom(const AccountCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.account_address().size() > 0) {

    account_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_address_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void AccountCreateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AccountCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountCreateContract::CopyFrom(const AccountCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountCreateContract::IsInitialized() const {
  return true;
}

void AccountCreateContract::InternalSwap(AccountCreateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_address_.Swap(&other->account_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountCreateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountUpdateContract::InitAsDefaultInstance() {
}
class AccountUpdateContract::_Internal {
 public:
};

AccountUpdateContract::AccountUpdateContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AccountUpdateContract)
}
AccountUpdateContract::AccountUpdateContract(const AccountUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_name().empty()) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountUpdateContract)
}

void AccountUpdateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountUpdateContract::~AccountUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountUpdateContract)
  SharedDtor();
}

void AccountUpdateContract::SharedDtor() {
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountUpdateContract& AccountUpdateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void AccountUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountUpdateContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AccountUpdateContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes owner_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AccountUpdateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AccountUpdateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountUpdateContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AccountUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account_name(), output);
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->owner_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AccountUpdateContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountUpdateContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account_name(), target);
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountUpdateContract)
  return target;
}

size_t AccountUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountUpdateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account_name());
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountUpdateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AccountUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountUpdateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountUpdateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AccountUpdateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AccountUpdateContract)
    MergeFrom(*source);
  }
}

void AccountUpdateContract::MergeFrom(const AccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
}

void AccountUpdateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AccountUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountUpdateContract::CopyFrom(const AccountUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountUpdateContract::IsInitialized() const {
  return true;
}

void AccountUpdateContract::InternalSwap(AccountUpdateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountUpdateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAccountIdContract::InitAsDefaultInstance() {
}
class SetAccountIdContract::_Internal {
 public:
};

SetAccountIdContract::SetAccountIdContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SetAccountIdContract)
}
SetAccountIdContract::SetAccountIdContract(const SetAccountIdContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SetAccountIdContract)
}

void SetAccountIdContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAccountIdContract::~SetAccountIdContract() {
  // @@protoc_insertion_point(destructor:protocol.SetAccountIdContract)
  SharedDtor();
}

void SetAccountIdContract::SharedDtor() {
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAccountIdContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAccountIdContract& SetAccountIdContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAccountIdContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void SetAccountIdContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SetAccountIdContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetAccountIdContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes owner_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetAccountIdContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SetAccountIdContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes owner_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SetAccountIdContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SetAccountIdContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetAccountIdContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SetAccountIdContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_id = 1;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account_id(), output);
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->owner_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SetAccountIdContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAccountIdContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SetAccountIdContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_id = 1;
  if (this->account_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account_id(), target);
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->owner_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SetAccountIdContract)
  return target;
}

size_t SetAccountIdContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SetAccountIdContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account_id = 1;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account_id());
  }

  // bytes owner_address = 2;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAccountIdContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.SetAccountIdContract)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAccountIdContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAccountIdContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.SetAccountIdContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.SetAccountIdContract)
    MergeFrom(*source);
  }
}

void SetAccountIdContract::MergeFrom(const SetAccountIdContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SetAccountIdContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
}

void SetAccountIdContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.SetAccountIdContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAccountIdContract::CopyFrom(const SetAccountIdContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SetAccountIdContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAccountIdContract::IsInitialized() const {
  return true;
}

void SetAccountIdContract::InternalSwap(SetAccountIdContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAccountIdContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccountPermissionUpdateContract::InitAsDefaultInstance() {
  ::protocol::_AccountPermissionUpdateContract_default_instance_._instance.get_mutable()->owner_ = const_cast< ::protocol::Permission*>(
      ::protocol::Permission::internal_default_instance());
  ::protocol::_AccountPermissionUpdateContract_default_instance_._instance.get_mutable()->witness_ = const_cast< ::protocol::Permission*>(
      ::protocol::Permission::internal_default_instance());
}
class AccountPermissionUpdateContract::_Internal {
 public:
  static const ::protocol::Permission& owner(const AccountPermissionUpdateContract* msg);
  static const ::protocol::Permission& witness(const AccountPermissionUpdateContract* msg);
};

const ::protocol::Permission&
AccountPermissionUpdateContract::_Internal::owner(const AccountPermissionUpdateContract* msg) {
  return *msg->owner_;
}
const ::protocol::Permission&
AccountPermissionUpdateContract::_Internal::witness(const AccountPermissionUpdateContract* msg) {
  return *msg->witness_;
}
void AccountPermissionUpdateContract::clear_owner() {
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
}
void AccountPermissionUpdateContract::clear_witness() {
  if (GetArenaNoVirtual() == nullptr && witness_ != nullptr) {
    delete witness_;
  }
  witness_ = nullptr;
}
void AccountPermissionUpdateContract::clear_actives() {
  actives_.Clear();
}
AccountPermissionUpdateContract::AccountPermissionUpdateContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AccountPermissionUpdateContract)
}
AccountPermissionUpdateContract::AccountPermissionUpdateContract(const AccountPermissionUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actives_(from.actives_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.has_owner()) {
    owner_ = new ::protocol::Permission(*from.owner_);
  } else {
    owner_ = nullptr;
  }
  if (from.has_witness()) {
    witness_ = new ::protocol::Permission(*from.witness_);
  } else {
    witness_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountPermissionUpdateContract)
}

void AccountPermissionUpdateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&owner_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&witness_) -
      reinterpret_cast<char*>(&owner_)) + sizeof(witness_));
}

AccountPermissionUpdateContract::~AccountPermissionUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.AccountPermissionUpdateContract)
  SharedDtor();
}

void AccountPermissionUpdateContract::SharedDtor() {
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete owner_;
  if (this != internal_default_instance()) delete witness_;
}

void AccountPermissionUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountPermissionUpdateContract& AccountPermissionUpdateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountPermissionUpdateContract_core_2fcontract_2faccount_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void AccountPermissionUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountPermissionUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actives_.Clear();
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && owner_ != nullptr) {
    delete owner_;
  }
  owner_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && witness_ != nullptr) {
    delete witness_;
  }
  witness_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountPermissionUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission owner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_owner(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission witness = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_witness(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Permission actives = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actives(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountPermissionUpdateContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AccountPermissionUpdateContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes owner_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Permission owner = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Permission witness = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_witness()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Permission actives = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_actives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AccountPermissionUpdateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AccountPermissionUpdateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountPermissionUpdateContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AccountPermissionUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->owner_address(), output);
  }

  // .protocol.Permission owner = 2;
  if (this->has_owner()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::owner(this), output);
  }

  // .protocol.Permission witness = 3;
  if (this->has_witness()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::witness(this), output);
  }

  // repeated .protocol.Permission actives = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actives_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->actives(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AccountPermissionUpdateContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountPermissionUpdateContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountPermissionUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->owner_address(), target);
  }

  // .protocol.Permission owner = 2;
  if (this->has_owner()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::owner(this), target);
  }

  // .protocol.Permission witness = 3;
  if (this->has_witness()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::witness(this), target);
  }

  // repeated .protocol.Permission actives = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actives_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->actives(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountPermissionUpdateContract)
  return target;
}

size_t AccountPermissionUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountPermissionUpdateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Permission actives = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->actives_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->actives(static_cast<int>(i)));
    }
  }

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  // .protocol.Permission owner = 2;
  if (this->has_owner()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_);
  }

  // .protocol.Permission witness = 3;
  if (this->has_witness()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *witness_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountPermissionUpdateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AccountPermissionUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountPermissionUpdateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountPermissionUpdateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AccountPermissionUpdateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AccountPermissionUpdateContract)
    MergeFrom(*source);
  }
}

void AccountPermissionUpdateContract::MergeFrom(const AccountPermissionUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountPermissionUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actives_.MergeFrom(from.actives_);
  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.has_owner()) {
    mutable_owner()->::protocol::Permission::MergeFrom(from.owner());
  }
  if (from.has_witness()) {
    mutable_witness()->::protocol::Permission::MergeFrom(from.witness());
  }
}

void AccountPermissionUpdateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AccountPermissionUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountPermissionUpdateContract::CopyFrom(const AccountPermissionUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountPermissionUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountPermissionUpdateContract::IsInitialized() const {
  return true;
}

void AccountPermissionUpdateContract::InternalSwap(AccountPermissionUpdateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actives_)->InternalSwap(CastToBase(&other->actives_));
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(owner_, other->owner_);
  swap(witness_, other->witness_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountPermissionUpdateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AccountCreateContract* Arena::CreateMaybeMessage< ::protocol::AccountCreateContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::AccountCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountUpdateContract* Arena::CreateMaybeMessage< ::protocol::AccountUpdateContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::AccountUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SetAccountIdContract* Arena::CreateMaybeMessage< ::protocol::SetAccountIdContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::SetAccountIdContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::AccountPermissionUpdateContract* Arena::CreateMaybeMessage< ::protocol::AccountPermissionUpdateContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::AccountPermissionUpdateContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
