// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/witness_contract.proto

#include "core/contract/witness_contract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fwitness_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto;
namespace protocol {
class WitnessCreateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WitnessCreateContract> _instance;
} _WitnessCreateContract_default_instance_;
class WitnessUpdateContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WitnessUpdateContract> _instance;
} _WitnessUpdateContract_default_instance_;
class VoteWitnessContract_VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract_Vote> _instance;
} _VoteWitnessContract_Vote_default_instance_;
class VoteWitnessContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VoteWitnessContract> _instance;
} _VoteWitnessContract_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_VoteWitnessContract_default_instance_;
    new (ptr) ::protocol::VoteWitnessContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::VoteWitnessContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto}, {
      &scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_VoteWitnessContract_Vote_default_instance_;
    new (ptr) ::protocol::VoteWitnessContract_Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::VoteWitnessContract_Vote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_WitnessCreateContract_default_instance_;
    new (ptr) ::protocol::WitnessCreateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::WitnessCreateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_WitnessUpdateContract_default_instance_;
    new (ptr) ::protocol::WitnessUpdateContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::WitnessUpdateContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessCreateContract, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::WitnessUpdateContract, update_url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract_Vote, vote_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, owner_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::VoteWitnessContract, support_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::WitnessCreateContract)},
  { 7, -1, sizeof(::protocol::WitnessUpdateContract)},
  { 14, -1, sizeof(::protocol::VoteWitnessContract_Vote)},
  { 21, -1, sizeof(::protocol::VoteWitnessContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WitnessCreateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_WitnessUpdateContract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_VoteWitnessContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fwitness_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$core/contract/witness_contract.proto\022\010"
  "protocol\";\n\025WitnessCreateContract\022\025\n\rown"
  "er_address\030\001 \001(\014\022\013\n\003url\030\002 \001(\014\"B\n\025Witness"
  "UpdateContract\022\025\n\rowner_address\030\001 \001(\014\022\022\n"
  "\nupdate_url\030\014 \001(\014\"\242\001\n\023VoteWitnessContrac"
  "t\022\025\n\rowner_address\030\001 \001(\014\0221\n\005votes\030\002 \003(\0132"
  "\".protocol.VoteWitnessContract.Vote\022\017\n\007s"
  "upport\030\003 \001(\010\0320\n\004Vote\022\024\n\014vote_address\030\001 \001"
  "(\014\022\022\n\nvote_count\030\002 \001(\003BE\n\030org.tron.proto"
  "s.contractZ)github.com/tronprotocol/grpc"
  "-gateway/coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_sccs[4] = {
  &scc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto.base,
  &scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto.base,
  &scc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base,
  &scc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once;
static bool descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto = {
  &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_initialized, descriptor_table_protodef_core_2fcontract_2fwitness_5fcontract_2eproto, "core/contract/witness_contract.proto", 421,
  &descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_once, descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_sccs, descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fwitness_5fcontract_2eproto, 4, file_level_enum_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fwitness_5fcontract_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fcontract_2fwitness_5fcontract_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto), true);
namespace protocol {

// ===================================================================

void WitnessCreateContract::InitAsDefaultInstance() {
}
class WitnessCreateContract::_Internal {
 public:
};

WitnessCreateContract::WitnessCreateContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.WitnessCreateContract)
}
WitnessCreateContract::WitnessCreateContract(const WitnessCreateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WitnessCreateContract)
}

void WitnessCreateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WitnessCreateContract::~WitnessCreateContract() {
  // @@protoc_insertion_point(destructor:protocol.WitnessCreateContract)
  SharedDtor();
}

void WitnessCreateContract::SharedDtor() {
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WitnessCreateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WitnessCreateContract& WitnessCreateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WitnessCreateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void WitnessCreateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WitnessCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WitnessCreateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WitnessCreateContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.WitnessCreateContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes owner_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes url = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.WitnessCreateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.WitnessCreateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WitnessCreateContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.WitnessCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->owner_address(), output);
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.WitnessCreateContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* WitnessCreateContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WitnessCreateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->owner_address(), target);
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WitnessCreateContract)
  return target;
}

size_t WitnessCreateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WitnessCreateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  // bytes url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->url());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WitnessCreateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.WitnessCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WitnessCreateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WitnessCreateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.WitnessCreateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.WitnessCreateContract)
    MergeFrom(*source);
  }
}

void WitnessCreateContract::MergeFrom(const WitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WitnessCreateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
}

void WitnessCreateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.WitnessCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessCreateContract::CopyFrom(const WitnessCreateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WitnessCreateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessCreateContract::IsInitialized() const {
  return true;
}

void WitnessCreateContract::InternalSwap(WitnessCreateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WitnessCreateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WitnessUpdateContract::InitAsDefaultInstance() {
}
class WitnessUpdateContract::_Internal {
 public:
};

WitnessUpdateContract::WitnessUpdateContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.WitnessUpdateContract)
}
WitnessUpdateContract::WitnessUpdateContract(const WitnessUpdateContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.update_url().empty()) {
    update_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.update_url_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.WitnessUpdateContract)
}

void WitnessUpdateContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WitnessUpdateContract::~WitnessUpdateContract() {
  // @@protoc_insertion_point(destructor:protocol.WitnessUpdateContract)
  SharedDtor();
}

void WitnessUpdateContract::SharedDtor() {
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WitnessUpdateContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WitnessUpdateContract& WitnessUpdateContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WitnessUpdateContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void WitnessUpdateContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.WitnessUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* WitnessUpdateContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes update_url = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_update_url(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool WitnessUpdateContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.WitnessUpdateContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes owner_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes update_url = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_url()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.WitnessUpdateContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.WitnessUpdateContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void WitnessUpdateContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.WitnessUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->owner_address(), output);
  }

  // bytes update_url = 12;
  if (this->update_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->update_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.WitnessUpdateContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* WitnessUpdateContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.WitnessUpdateContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->owner_address(), target);
  }

  // bytes update_url = 12;
  if (this->update_url().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        12, this->update_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.WitnessUpdateContract)
  return target;
}

size_t WitnessUpdateContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.WitnessUpdateContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  // bytes update_url = 12;
  if (this->update_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->update_url());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WitnessUpdateContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.WitnessUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  const WitnessUpdateContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WitnessUpdateContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.WitnessUpdateContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.WitnessUpdateContract)
    MergeFrom(*source);
  }
}

void WitnessUpdateContract::MergeFrom(const WitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.WitnessUpdateContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.update_url().size() > 0) {

    update_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.update_url_);
  }
}

void WitnessUpdateContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.WitnessUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WitnessUpdateContract::CopyFrom(const WitnessUpdateContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.WitnessUpdateContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WitnessUpdateContract::IsInitialized() const {
  return true;
}

void WitnessUpdateContract::InternalSwap(WitnessUpdateContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  update_url_.Swap(&other->update_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WitnessUpdateContract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoteWitnessContract_Vote::InitAsDefaultInstance() {
}
class VoteWitnessContract_Vote::_Internal {
 public:
};

VoteWitnessContract_Vote::VoteWitnessContract_Vote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.VoteWitnessContract.Vote)
}
VoteWitnessContract_Vote::VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vote_address().empty()) {
    vote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract.Vote)
}

void VoteWitnessContract_Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
}

VoteWitnessContract_Vote::~VoteWitnessContract_Vote() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract.Vote)
  SharedDtor();
}

void VoteWitnessContract_Vote::SharedDtor() {
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract_Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract_Vote& VoteWitnessContract_Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_Vote_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract_Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteWitnessContract_Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vote_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteWitnessContract_Vote::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.VoteWitnessContract.Vote)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes vote_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vote_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &vote_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.VoteWitnessContract.Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.VoteWitnessContract.Vote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteWitnessContract_Vote::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vote_address(), output);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->vote_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.VoteWitnessContract.Vote)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract_Vote::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->vote_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract.Vote)
  return target;
}

size_t VoteWitnessContract_Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract.Vote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->vote_address());
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->vote_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract_Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract_Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract_Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.VoteWitnessContract.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.VoteWitnessContract.Vote)
    MergeFrom(*source);
  }
}

void VoteWitnessContract_Vote::MergeFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vote_address().size() > 0) {

    vote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
  }
  if (from.vote_count() != 0) {
    set_vote_count(from.vote_count());
  }
}

void VoteWitnessContract_Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract_Vote::CopyFrom(const VoteWitnessContract_Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract_Vote::IsInitialized() const {
  return true;
}

void VoteWitnessContract_Vote::InternalSwap(VoteWitnessContract_Vote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vote_address_.Swap(&other->vote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract_Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VoteWitnessContract::InitAsDefaultInstance() {
}
class VoteWitnessContract::_Internal {
 public:
};

VoteWitnessContract::VoteWitnessContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.VoteWitnessContract)
}
VoteWitnessContract::VoteWitnessContract(const VoteWitnessContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      votes_(from.votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.owner_address().empty()) {
    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  support_ = from.support_;
  // @@protoc_insertion_point(copy_constructor:protocol.VoteWitnessContract)
}

void VoteWitnessContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  owner_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_ = false;
}

VoteWitnessContract::~VoteWitnessContract() {
  // @@protoc_insertion_point(destructor:protocol.VoteWitnessContract)
  SharedDtor();
}

void VoteWitnessContract::SharedDtor() {
  owner_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteWitnessContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VoteWitnessContract& VoteWitnessContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VoteWitnessContract_core_2fcontract_2fwitness_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void VoteWitnessContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  support_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VoteWitnessContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes owner_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_owner_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.VoteWitnessContract.Vote votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bool support = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VoteWitnessContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.VoteWitnessContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes owner_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_owner_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.VoteWitnessContract.Vote votes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool support = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &support_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.VoteWitnessContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.VoteWitnessContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VoteWitnessContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->owner_address(), output);
  }

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->votes(static_cast<int>(i)),
      output);
  }

  // bool support = 3;
  if (this->support() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->support(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.VoteWitnessContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteWitnessContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.VoteWitnessContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->owner_address(), target);
  }

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->votes(static_cast<int>(i)), target);
  }

  // bool support = 3;
  if (this->support() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->support(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.VoteWitnessContract)
  return target;
}

size_t VoteWitnessContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.VoteWitnessContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->votes(static_cast<int>(i)));
    }
  }

  // bytes owner_address = 1;
  if (this->owner_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->owner_address());
  }

  // bool support = 3;
  if (this->support() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteWitnessContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteWitnessContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteWitnessContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.VoteWitnessContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.VoteWitnessContract)
    MergeFrom(*source);
  }
}

void VoteWitnessContract::MergeFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.VoteWitnessContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  if (from.owner_address().size() > 0) {

    owner_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.owner_address_);
  }
  if (from.support() != 0) {
    set_support(from.support());
  }
}

void VoteWitnessContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteWitnessContract::CopyFrom(const VoteWitnessContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.VoteWitnessContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteWitnessContract::IsInitialized() const {
  return true;
}

void VoteWitnessContract::InternalSwap(VoteWitnessContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&votes_)->InternalSwap(CastToBase(&other->votes_));
  owner_address_.Swap(&other->owner_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(support_, other->support_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteWitnessContract::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::WitnessCreateContract* Arena::CreateMaybeMessage< ::protocol::WitnessCreateContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::WitnessCreateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::WitnessUpdateContract* Arena::CreateMaybeMessage< ::protocol::WitnessUpdateContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::WitnessUpdateContract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract_Vote* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract_Vote >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::VoteWitnessContract_Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::VoteWitnessContract* Arena::CreateMaybeMessage< ::protocol::VoteWitnessContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::VoteWitnessContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
