// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/account_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2faccount_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2faccount_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "core/Tron.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2faccount_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2faccount_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto;
namespace protocol {
class AccountCreateContract;
class AccountCreateContractDefaultTypeInternal;
extern AccountCreateContractDefaultTypeInternal _AccountCreateContract_default_instance_;
class AccountPermissionUpdateContract;
class AccountPermissionUpdateContractDefaultTypeInternal;
extern AccountPermissionUpdateContractDefaultTypeInternal _AccountPermissionUpdateContract_default_instance_;
class AccountUpdateContract;
class AccountUpdateContractDefaultTypeInternal;
extern AccountUpdateContractDefaultTypeInternal _AccountUpdateContract_default_instance_;
class SetAccountIdContract;
class SetAccountIdContractDefaultTypeInternal;
extern SetAccountIdContractDefaultTypeInternal _SetAccountIdContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::AccountCreateContract* Arena::CreateMaybeMessage<::protocol::AccountCreateContract>(Arena*);
template<> ::protocol::AccountPermissionUpdateContract* Arena::CreateMaybeMessage<::protocol::AccountPermissionUpdateContract>(Arena*);
template<> ::protocol::AccountUpdateContract* Arena::CreateMaybeMessage<::protocol::AccountUpdateContract>(Arena*);
template<> ::protocol::SetAccountIdContract* Arena::CreateMaybeMessage<::protocol::SetAccountIdContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class AccountCreateContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountCreateContract) */ {
 public:
  AccountCreateContract();
  virtual ~AccountCreateContract();

  AccountCreateContract(const AccountCreateContract& from);
  AccountCreateContract(AccountCreateContract&& from) noexcept
    : AccountCreateContract() {
    *this = ::std::move(from);
  }

  inline AccountCreateContract& operator=(const AccountCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCreateContract& operator=(AccountCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountCreateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountCreateContract* internal_default_instance() {
    return reinterpret_cast<const AccountCreateContract*>(
               &_AccountCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountCreateContract& a, AccountCreateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCreateContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountCreateContract* New() const final {
    return CreateMaybeMessage<AccountCreateContract>(nullptr);
  }

  AccountCreateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountCreateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountCreateContract& from);
  void MergeFrom(const AccountCreateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCreateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountCreateContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kAccountAddressFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes account_address = 2;
  void clear_account_address();
  const std::string& account_address() const;
  void set_account_address(const std::string& value);
  void set_account_address(std::string&& value);
  void set_account_address(const char* value);
  void set_account_address(const void* value, size_t size);
  std::string* mutable_account_address();
  std::string* release_account_address();
  void set_allocated_account_address(std::string* account_address);

  // .protocol.AccountType type = 3;
  void clear_type();
  ::protocol::AccountType type() const;
  void set_type(::protocol::AccountType value);

  // @@protoc_insertion_point(class_scope:protocol.AccountCreateContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_address_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2faccount_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountUpdateContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountUpdateContract) */ {
 public:
  AccountUpdateContract();
  virtual ~AccountUpdateContract();

  AccountUpdateContract(const AccountUpdateContract& from);
  AccountUpdateContract(AccountUpdateContract&& from) noexcept
    : AccountUpdateContract() {
    *this = ::std::move(from);
  }

  inline AccountUpdateContract& operator=(const AccountUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdateContract& operator=(AccountUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountUpdateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountUpdateContract* internal_default_instance() {
    return reinterpret_cast<const AccountUpdateContract*>(
               &_AccountUpdateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountUpdateContract& a, AccountUpdateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdateContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountUpdateContract* New() const final {
    return CreateMaybeMessage<AccountUpdateContract>(nullptr);
  }

  AccountUpdateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountUpdateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountUpdateContract& from);
  void MergeFrom(const AccountUpdateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountUpdateContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 1,
    kOwnerAddressFieldNumber = 2,
  };
  // bytes account_name = 1;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const void* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // bytes owner_address = 2;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.AccountUpdateContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2faccount_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class SetAccountIdContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.SetAccountIdContract) */ {
 public:
  SetAccountIdContract();
  virtual ~SetAccountIdContract();

  SetAccountIdContract(const SetAccountIdContract& from);
  SetAccountIdContract(SetAccountIdContract&& from) noexcept
    : SetAccountIdContract() {
    *this = ::std::move(from);
  }

  inline SetAccountIdContract& operator=(const SetAccountIdContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAccountIdContract& operator=(SetAccountIdContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAccountIdContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAccountIdContract* internal_default_instance() {
    return reinterpret_cast<const SetAccountIdContract*>(
               &_SetAccountIdContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetAccountIdContract& a, SetAccountIdContract& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAccountIdContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAccountIdContract* New() const final {
    return CreateMaybeMessage<SetAccountIdContract>(nullptr);
  }

  SetAccountIdContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAccountIdContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAccountIdContract& from);
  void MergeFrom(const SetAccountIdContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAccountIdContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.SetAccountIdContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kOwnerAddressFieldNumber = 2,
  };
  // bytes account_id = 1;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const void* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // bytes owner_address = 2;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // @@protoc_insertion_point(class_scope:protocol.SetAccountIdContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2faccount_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class AccountPermissionUpdateContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountPermissionUpdateContract) */ {
 public:
  AccountPermissionUpdateContract();
  virtual ~AccountPermissionUpdateContract();

  AccountPermissionUpdateContract(const AccountPermissionUpdateContract& from);
  AccountPermissionUpdateContract(AccountPermissionUpdateContract&& from) noexcept
    : AccountPermissionUpdateContract() {
    *this = ::std::move(from);
  }

  inline AccountPermissionUpdateContract& operator=(const AccountPermissionUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPermissionUpdateContract& operator=(AccountPermissionUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountPermissionUpdateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountPermissionUpdateContract* internal_default_instance() {
    return reinterpret_cast<const AccountPermissionUpdateContract*>(
               &_AccountPermissionUpdateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountPermissionUpdateContract& a, AccountPermissionUpdateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPermissionUpdateContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountPermissionUpdateContract* New() const final {
    return CreateMaybeMessage<AccountPermissionUpdateContract>(nullptr);
  }

  AccountPermissionUpdateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountPermissionUpdateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountPermissionUpdateContract& from);
  void MergeFrom(const AccountPermissionUpdateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPermissionUpdateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountPermissionUpdateContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2faccount_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActivesFieldNumber = 4,
    kOwnerAddressFieldNumber = 1,
    kOwnerFieldNumber = 2,
    kWitnessFieldNumber = 3,
  };
  // repeated .protocol.Permission actives = 4;
  int actives_size() const;
  void clear_actives();
  ::protocol::Permission* mutable_actives(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >*
      mutable_actives();
  const ::protocol::Permission& actives(int index) const;
  ::protocol::Permission* add_actives();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >&
      actives() const;

  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // .protocol.Permission owner = 2;
  bool has_owner() const;
  void clear_owner();
  const ::protocol::Permission& owner() const;
  ::protocol::Permission* release_owner();
  ::protocol::Permission* mutable_owner();
  void set_allocated_owner(::protocol::Permission* owner);

  // .protocol.Permission witness = 3;
  bool has_witness() const;
  void clear_witness();
  const ::protocol::Permission& witness() const;
  ::protocol::Permission* release_witness();
  ::protocol::Permission* mutable_witness();
  void set_allocated_witness(::protocol::Permission* witness);

  // @@protoc_insertion_point(class_scope:protocol.AccountPermissionUpdateContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission > actives_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::protocol::Permission* owner_;
  ::protocol::Permission* witness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2faccount_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountCreateContract

// bytes owner_address = 1;
inline void AccountCreateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AccountCreateContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.owner_address)
}
inline void AccountCreateContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountCreateContract.owner_address)
}
inline void AccountCreateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountCreateContract.owner_address)
}
inline void AccountCreateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountCreateContract.owner_address)
}
inline std::string* AccountCreateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountCreateContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountCreateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCreateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountCreateContract.owner_address)
}

// bytes account_address = 2;
inline void AccountCreateContract::clear_account_address() {
  account_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountCreateContract::account_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.account_address)
  return account_address_.GetNoArena();
}
inline void AccountCreateContract::set_account_address(const std::string& value) {
  
  account_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.account_address)
}
inline void AccountCreateContract::set_account_address(std::string&& value) {
  
  account_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountCreateContract.account_address)
}
inline void AccountCreateContract::set_account_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountCreateContract.account_address)
}
inline void AccountCreateContract::set_account_address(const void* value, size_t size) {
  
  account_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountCreateContract.account_address)
}
inline std::string* AccountCreateContract::mutable_account_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountCreateContract.account_address)
  return account_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountCreateContract::release_account_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountCreateContract.account_address)
  
  return account_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountCreateContract::set_allocated_account_address(std::string* account_address) {
  if (account_address != nullptr) {
    
  } else {
    
  }
  account_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountCreateContract.account_address)
}

// .protocol.AccountType type = 3;
inline void AccountCreateContract::clear_type() {
  type_ = 0;
}
inline ::protocol::AccountType AccountCreateContract::type() const {
  // @@protoc_insertion_point(field_get:protocol.AccountCreateContract.type)
  return static_cast< ::protocol::AccountType >(type_);
}
inline void AccountCreateContract::set_type(::protocol::AccountType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.AccountCreateContract.type)
}

// -------------------------------------------------------------------

// AccountUpdateContract

// bytes account_name = 1;
inline void AccountUpdateContract::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateContract::account_name() const {
  // @@protoc_insertion_point(field_get:protocol.AccountUpdateContract.account_name)
  return account_name_.GetNoArena();
}
inline void AccountUpdateContract::set_account_name(const std::string& value) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountUpdateContract.account_name)
}
inline void AccountUpdateContract::set_account_name(std::string&& value) {
  
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountUpdateContract.account_name)
}
inline void AccountUpdateContract::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountUpdateContract.account_name)
}
inline void AccountUpdateContract::set_account_name(const void* value, size_t size) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountUpdateContract.account_name)
}
inline std::string* AccountUpdateContract::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountUpdateContract.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateContract::release_account_name() {
  // @@protoc_insertion_point(field_release:protocol.AccountUpdateContract.account_name)
  
  return account_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateContract::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountUpdateContract.account_name)
}

// bytes owner_address = 2;
inline void AccountUpdateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountUpdateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountUpdateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AccountUpdateContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountUpdateContract.owner_address)
}
inline void AccountUpdateContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountUpdateContract.owner_address)
}
inline void AccountUpdateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountUpdateContract.owner_address)
}
inline void AccountUpdateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountUpdateContract.owner_address)
}
inline std::string* AccountUpdateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountUpdateContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountUpdateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountUpdateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountUpdateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountUpdateContract.owner_address)
}

// -------------------------------------------------------------------

// SetAccountIdContract

// bytes account_id = 1;
inline void SetAccountIdContract::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAccountIdContract::account_id() const {
  // @@protoc_insertion_point(field_get:protocol.SetAccountIdContract.account_id)
  return account_id_.GetNoArena();
}
inline void SetAccountIdContract::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SetAccountIdContract.account_id)
}
inline void SetAccountIdContract::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SetAccountIdContract.account_id)
}
inline void SetAccountIdContract::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SetAccountIdContract.account_id)
}
inline void SetAccountIdContract::set_account_id(const void* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SetAccountIdContract.account_id)
}
inline std::string* SetAccountIdContract::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SetAccountIdContract.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAccountIdContract::release_account_id() {
  // @@protoc_insertion_point(field_release:protocol.SetAccountIdContract.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountIdContract::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.SetAccountIdContract.account_id)
}

// bytes owner_address = 2;
inline void SetAccountIdContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SetAccountIdContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.SetAccountIdContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void SetAccountIdContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.SetAccountIdContract.owner_address)
}
inline void SetAccountIdContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.SetAccountIdContract.owner_address)
}
inline void SetAccountIdContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.SetAccountIdContract.owner_address)
}
inline void SetAccountIdContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.SetAccountIdContract.owner_address)
}
inline std::string* SetAccountIdContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.SetAccountIdContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SetAccountIdContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.SetAccountIdContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SetAccountIdContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.SetAccountIdContract.owner_address)
}

// -------------------------------------------------------------------

// AccountPermissionUpdateContract

// bytes owner_address = 1;
inline void AccountPermissionUpdateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountPermissionUpdateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountPermissionUpdateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void AccountPermissionUpdateContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountPermissionUpdateContract.owner_address)
}
inline void AccountPermissionUpdateContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountPermissionUpdateContract.owner_address)
}
inline void AccountPermissionUpdateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountPermissionUpdateContract.owner_address)
}
inline void AccountPermissionUpdateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountPermissionUpdateContract.owner_address)
}
inline std::string* AccountPermissionUpdateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountPermissionUpdateContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountPermissionUpdateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountPermissionUpdateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountPermissionUpdateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountPermissionUpdateContract.owner_address)
}

// .protocol.Permission owner = 2;
inline bool AccountPermissionUpdateContract::has_owner() const {
  return this != internal_default_instance() && owner_ != nullptr;
}
inline const ::protocol::Permission& AccountPermissionUpdateContract::owner() const {
  const ::protocol::Permission* p = owner_;
  // @@protoc_insertion_point(field_get:protocol.AccountPermissionUpdateContract.owner)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Permission*>(
      &::protocol::_Permission_default_instance_);
}
inline ::protocol::Permission* AccountPermissionUpdateContract::release_owner() {
  // @@protoc_insertion_point(field_release:protocol.AccountPermissionUpdateContract.owner)
  
  ::protocol::Permission* temp = owner_;
  owner_ = nullptr;
  return temp;
}
inline ::protocol::Permission* AccountPermissionUpdateContract::mutable_owner() {
  
  if (owner_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Permission>(GetArenaNoVirtual());
    owner_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.AccountPermissionUpdateContract.owner)
  return owner_;
}
inline void AccountPermissionUpdateContract::set_allocated_owner(::protocol::Permission* owner) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(owner_);
  }
  if (owner) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner, submessage_arena);
    }
    
  } else {
    
  }
  owner_ = owner;
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountPermissionUpdateContract.owner)
}

// .protocol.Permission witness = 3;
inline bool AccountPermissionUpdateContract::has_witness() const {
  return this != internal_default_instance() && witness_ != nullptr;
}
inline const ::protocol::Permission& AccountPermissionUpdateContract::witness() const {
  const ::protocol::Permission* p = witness_;
  // @@protoc_insertion_point(field_get:protocol.AccountPermissionUpdateContract.witness)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Permission*>(
      &::protocol::_Permission_default_instance_);
}
inline ::protocol::Permission* AccountPermissionUpdateContract::release_witness() {
  // @@protoc_insertion_point(field_release:protocol.AccountPermissionUpdateContract.witness)
  
  ::protocol::Permission* temp = witness_;
  witness_ = nullptr;
  return temp;
}
inline ::protocol::Permission* AccountPermissionUpdateContract::mutable_witness() {
  
  if (witness_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Permission>(GetArenaNoVirtual());
    witness_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.AccountPermissionUpdateContract.witness)
  return witness_;
}
inline void AccountPermissionUpdateContract::set_allocated_witness(::protocol::Permission* witness) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(witness_);
  }
  if (witness) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      witness = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, witness, submessage_arena);
    }
    
  } else {
    
  }
  witness_ = witness;
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountPermissionUpdateContract.witness)
}

// repeated .protocol.Permission actives = 4;
inline int AccountPermissionUpdateContract::actives_size() const {
  return actives_.size();
}
inline ::protocol::Permission* AccountPermissionUpdateContract::mutable_actives(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.AccountPermissionUpdateContract.actives)
  return actives_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >*
AccountPermissionUpdateContract::mutable_actives() {
  // @@protoc_insertion_point(field_mutable_list:protocol.AccountPermissionUpdateContract.actives)
  return &actives_;
}
inline const ::protocol::Permission& AccountPermissionUpdateContract::actives(int index) const {
  // @@protoc_insertion_point(field_get:protocol.AccountPermissionUpdateContract.actives)
  return actives_.Get(index);
}
inline ::protocol::Permission* AccountPermissionUpdateContract::add_actives() {
  // @@protoc_insertion_point(field_add:protocol.AccountPermissionUpdateContract.actives)
  return actives_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >&
AccountPermissionUpdateContract::actives() const {
  // @@protoc_insertion_point(field_list:protocol.AccountPermissionUpdateContract.actives)
  return actives_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2faccount_5fcontract_2eproto
