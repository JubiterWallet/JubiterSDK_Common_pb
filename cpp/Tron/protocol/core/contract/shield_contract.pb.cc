// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/shield_contract.proto

#include "core/contract/shield_contract.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fshield_5fcontract_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto;
namespace protocol {
class AuthenticationPathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AuthenticationPath> _instance;
} _AuthenticationPath_default_instance_;
class MerklePathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MerklePath> _instance;
} _MerklePath_default_instance_;
class OutputPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputPoint> _instance;
} _OutputPoint_default_instance_;
class OutputPointInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutputPointInfo> _instance;
} _OutputPointInfo_default_instance_;
class PedersenHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PedersenHash> _instance;
} _PedersenHash_default_instance_;
class IncrementalMerkleTreeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalMerkleTree> _instance;
} _IncrementalMerkleTree_default_instance_;
class IncrementalMerkleVoucherDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalMerkleVoucher> _instance;
} _IncrementalMerkleVoucher_default_instance_;
class IncrementalMerkleVoucherInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IncrementalMerkleVoucherInfo> _instance;
} _IncrementalMerkleVoucherInfo_default_instance_;
class SpendDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpendDescription> _instance;
} _SpendDescription_default_instance_;
class ReceiveDescriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceiveDescription> _instance;
} _ReceiveDescription_default_instance_;
class ShieldedTransferContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShieldedTransferContract> _instance;
} _ShieldedTransferContract_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_AuthenticationPath_default_instance_;
    new (ptr) ::protocol::AuthenticationPath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::AuthenticationPath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_IncrementalMerkleTree_default_instance_;
    new (ptr) ::protocol::IncrementalMerkleTree();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::IncrementalMerkleTree::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_IncrementalMerkleVoucher_default_instance_;
    new (ptr) ::protocol::IncrementalMerkleVoucher();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::IncrementalMerkleVoucher::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto.base,
      &scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto.base,
      &scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_IncrementalMerkleVoucherInfo_default_instance_;
    new (ptr) ::protocol::IncrementalMerkleVoucherInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::IncrementalMerkleVoucherInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_MerklePath_default_instance_;
    new (ptr) ::protocol::MerklePath();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::MerklePath::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_OutputPoint_default_instance_;
    new (ptr) ::protocol::OutputPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::OutputPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_OutputPointInfo_default_instance_;
    new (ptr) ::protocol::OutputPointInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::OutputPointInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_PedersenHash_default_instance_;
    new (ptr) ::protocol::PedersenHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::PedersenHash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ReceiveDescription_default_instance_;
    new (ptr) ::protocol::ReceiveDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ReceiveDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto}, {}};

static void InitDefaultsscc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ShieldedTransferContract_default_instance_;
    new (ptr) ::protocol::ShieldedTransferContract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ShieldedTransferContract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto}, {
      &scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto.base,
      &scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto.base,}};

static void InitDefaultsscc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_SpendDescription_default_instance_;
    new (ptr) ::protocol::SpendDescription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::SpendDescription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2fcontract_2fshield_5fcontract_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fcontract_2fshield_5fcontract_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fcontract_2fshield_5fcontract_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AuthenticationPath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AuthenticationPath, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, authentication_paths_),
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, index_),
  PROTOBUF_FIELD_OFFSET(::protocol::MerklePath, rt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPoint, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, out_points_),
  PROTOBUF_FIELD_OFFSET(::protocol::OutputPointInfo, block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::PedersenHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::PedersenHash, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, left_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, right_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleTree, parents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, tree_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, filled_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, cursor_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, cursor_depth_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, rt_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucher, output_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, vouchers_),
  PROTOBUF_FIELD_OFFSET(::protocol::IncrementalMerkleVoucherInfo, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, value_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, anchor_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, nullifier_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, rk_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, zkproof_),
  PROTOBUF_FIELD_OFFSET(::protocol::SpendDescription, spend_authority_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, value_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, note_commitment_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, epk_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, c_enc_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, c_out_),
  PROTOBUF_FIELD_OFFSET(::protocol::ReceiveDescription, zkproof_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, transparent_from_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, from_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, spend_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, receive_description_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, binding_signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, transparent_to_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::ShieldedTransferContract, to_amount_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::AuthenticationPath)},
  { 6, -1, sizeof(::protocol::MerklePath)},
  { 14, -1, sizeof(::protocol::OutputPoint)},
  { 21, -1, sizeof(::protocol::OutputPointInfo)},
  { 28, -1, sizeof(::protocol::PedersenHash)},
  { 34, -1, sizeof(::protocol::IncrementalMerkleTree)},
  { 42, -1, sizeof(::protocol::IncrementalMerkleVoucher)},
  { 53, -1, sizeof(::protocol::IncrementalMerkleVoucherInfo)},
  { 60, -1, sizeof(::protocol::SpendDescription)},
  { 71, -1, sizeof(::protocol::ReceiveDescription)},
  { 82, -1, sizeof(::protocol::ShieldedTransferContract)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AuthenticationPath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_MerklePath_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OutputPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_OutputPointInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_PedersenHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleTree_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleVoucher_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_IncrementalMerkleVoucherInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_SpendDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ReceiveDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ShieldedTransferContract_default_instance_),
};

const char descriptor_table_protodef_core_2fcontract_2fshield_5fcontract_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n#core/contract/shield_contract.proto\022\010p"
  "rotocol\"#\n\022AuthenticationPath\022\r\n\005value\030\001"
  " \003(\010\"c\n\nMerklePath\022:\n\024authentication_pat"
  "hs\030\001 \003(\0132\034.protocol.AuthenticationPath\022\r"
  "\n\005index\030\002 \003(\010\022\n\n\002rt\030\003 \001(\014\"*\n\013OutputPoint"
  "\022\014\n\004hash\030\001 \001(\014\022\r\n\005index\030\002 \001(\005\"O\n\017OutputP"
  "ointInfo\022)\n\nout_points\030\001 \003(\0132\025.protocol."
  "OutputPoint\022\021\n\tblock_num\030\002 \001(\005\"\037\n\014Peders"
  "enHash\022\017\n\007content\030\001 \001(\014\"\215\001\n\025IncrementalM"
  "erkleTree\022$\n\004left\030\001 \001(\0132\026.protocol.Peder"
  "senHash\022%\n\005right\030\002 \001(\0132\026.protocol.Peders"
  "enHash\022\'\n\007parents\030\003 \003(\0132\026.protocol.Peder"
  "senHash\"\361\001\n\030IncrementalMerkleVoucher\022-\n\004"
  "tree\030\001 \001(\0132\037.protocol.IncrementalMerkleT"
  "ree\022&\n\006filled\030\002 \003(\0132\026.protocol.PedersenH"
  "ash\022/\n\006cursor\030\003 \001(\0132\037.protocol.Increment"
  "alMerkleTree\022\024\n\014cursor_depth\030\004 \001(\003\022\n\n\002rt"
  "\030\005 \001(\014\022+\n\014output_point\030\n \001(\0132\025.protocol."
  "OutputPoint\"c\n\034IncrementalMerkleVoucherI"
  "nfo\0224\n\010vouchers\030\001 \003(\0132\".protocol.Increme"
  "ntalMerkleVoucher\022\r\n\005paths\030\002 \003(\014\"\217\001\n\020Spe"
  "ndDescription\022\030\n\020value_commitment\030\001 \001(\014\022"
  "\016\n\006anchor\030\002 \001(\014\022\021\n\tnullifier\030\003 \001(\014\022\n\n\002rk"
  "\030\004 \001(\014\022\017\n\007zkproof\030\005 \001(\014\022!\n\031spend_authori"
  "ty_signature\030\006 \001(\014\"\203\001\n\022ReceiveDescriptio"
  "n\022\030\n\020value_commitment\030\001 \001(\014\022\027\n\017note_comm"
  "itment\030\002 \001(\014\022\013\n\003epk\030\003 \001(\014\022\r\n\005c_enc\030\004 \001(\014"
  "\022\r\n\005c_out\030\005 \001(\014\022\017\n\007zkproof\030\006 \001(\014\"\221\002\n\030Shi"
  "eldedTransferContract\022 \n\030transparent_fro"
  "m_address\030\001 \001(\014\022\023\n\013from_amount\030\002 \001(\003\0225\n\021"
  "spend_description\030\003 \003(\0132\032.protocol.Spend"
  "Description\0229\n\023receive_description\030\004 \003(\013"
  "2\034.protocol.ReceiveDescription\022\031\n\021bindin"
  "g_signature\030\005 \001(\014\022\036\n\026transparent_to_addr"
  "ess\030\006 \001(\014\022\021\n\tto_amount\030\007 \001(\003BE\n\030org.tron"
  ".protos.contractZ)github.com/tronprotoco"
  "l/grpc-gateway/coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_sccs[11] = {
  &scc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto.base,
  &scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once;
static bool descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto = {
  &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_initialized, descriptor_table_protodef_core_2fcontract_2fshield_5fcontract_2eproto, "core/contract/shield_contract.proto", 1467,
  &descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_once, descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_sccs, descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_core_2fcontract_2fshield_5fcontract_2eproto::offsets,
  file_level_metadata_core_2fcontract_2fshield_5fcontract_2eproto, 11, file_level_enum_descriptors_core_2fcontract_2fshield_5fcontract_2eproto, file_level_service_descriptors_core_2fcontract_2fshield_5fcontract_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fcontract_2fshield_5fcontract_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_core_2fcontract_2fshield_5fcontract_2eproto), true);
namespace protocol {

// ===================================================================

void AuthenticationPath::InitAsDefaultInstance() {
}
class AuthenticationPath::_Internal {
 public:
};

AuthenticationPath::AuthenticationPath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AuthenticationPath)
}
AuthenticationPath::AuthenticationPath(const AuthenticationPath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.AuthenticationPath)
}

void AuthenticationPath::SharedCtor() {
}

AuthenticationPath::~AuthenticationPath() {
  // @@protoc_insertion_point(destructor:protocol.AuthenticationPath)
  SharedDtor();
}

void AuthenticationPath::SharedDtor() {
}

void AuthenticationPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthenticationPath& AuthenticationPath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AuthenticationPath_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void AuthenticationPath::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AuthenticationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AuthenticationPath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AuthenticationPath::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AuthenticationPath)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_value())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 10u, input, this->mutable_value())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AuthenticationPath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AuthenticationPath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AuthenticationPath::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AuthenticationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool value = 1;
  if (this->value_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_value_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->value().data(), this->value_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AuthenticationPath)
}

::PROTOBUF_NAMESPACE_ID::uint8* AuthenticationPath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AuthenticationPath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bool value = 1;
  if (this->value_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _value_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->value_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AuthenticationPath)
  return target;
}

size_t AuthenticationPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AuthenticationPath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthenticationPath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AuthenticationPath)
  GOOGLE_DCHECK_NE(&from, this);
  const AuthenticationPath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AuthenticationPath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AuthenticationPath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AuthenticationPath)
    MergeFrom(*source);
  }
}

void AuthenticationPath::MergeFrom(const AuthenticationPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AuthenticationPath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
}

void AuthenticationPath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AuthenticationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthenticationPath::CopyFrom(const AuthenticationPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AuthenticationPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationPath::IsInitialized() const {
  return true;
}

void AuthenticationPath::InternalSwap(AuthenticationPath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationPath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MerklePath::InitAsDefaultInstance() {
}
class MerklePath::_Internal {
 public:
};

MerklePath::MerklePath()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.MerklePath)
}
MerklePath::MerklePath(const MerklePath& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      authentication_paths_(from.authentication_paths_),
      index_(from.index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.rt().empty()) {
    rt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.MerklePath)
}

void MerklePath::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto.base);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MerklePath::~MerklePath() {
  // @@protoc_insertion_point(destructor:protocol.MerklePath)
  SharedDtor();
}

void MerklePath::SharedDtor() {
  rt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MerklePath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MerklePath& MerklePath::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MerklePath_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void MerklePath::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  authentication_paths_.Clear();
  index_.Clear();
  rt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MerklePath::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.AuthenticationPath authentication_paths = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_authentication_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated bool index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MerklePath::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.MerklePath)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.AuthenticationPath authentication_paths = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_authentication_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bool index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_index())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 1, 18u, input, this->mutable_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.MerklePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.MerklePath)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MerklePath::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authentication_paths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->authentication_paths(static_cast<int>(i)),
      output);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_index_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolArray(
      this->index().data(), this->index_size(), output);
  }

  // bytes rt = 3;
  if (this->rt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->rt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.MerklePath)
}

::PROTOBUF_NAMESPACE_ID::uint8* MerklePath::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.MerklePath)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->authentication_paths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->authentication_paths(static_cast<int>(i)), target);
  }

  // repeated bool index = 2;
  if (this->index_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _index_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBoolNoTagToArray(this->index_, target);
  }

  // bytes rt = 3;
  if (this->rt().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->rt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.MerklePath)
  return target;
}

size_t MerklePath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.MerklePath)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.AuthenticationPath authentication_paths = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->authentication_paths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->authentication_paths(static_cast<int>(i)));
    }
  }

  // repeated bool index = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->index_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes rt = 3;
  if (this->rt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->rt());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MerklePath::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  const MerklePath* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MerklePath>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.MerklePath)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.MerklePath)
    MergeFrom(*source);
  }
}

void MerklePath::MergeFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.MerklePath)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  authentication_paths_.MergeFrom(from.authentication_paths_);
  index_.MergeFrom(from.index_);
  if (from.rt().size() > 0) {

    rt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
}

void MerklePath::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MerklePath::CopyFrom(const MerklePath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.MerklePath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MerklePath::IsInitialized() const {
  return true;
}

void MerklePath::InternalSwap(MerklePath* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&authentication_paths_)->InternalSwap(CastToBase(&other->authentication_paths_));
  index_.InternalSwap(&other->index_);
  rt_.Swap(&other->rt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MerklePath::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputPoint::InitAsDefaultInstance() {
}
class OutputPoint::_Internal {
 public:
};

OutputPoint::OutputPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OutputPoint)
}
OutputPoint::OutputPoint(const OutputPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:protocol.OutputPoint)
}

void OutputPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
}

OutputPoint::~OutputPoint() {
  // @@protoc_insertion_point(destructor:protocol.OutputPoint)
  SharedDtor();
}

void OutputPoint::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutputPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputPoint& OutputPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputPoint_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void OutputPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OutputPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutputPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutputPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OutputPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OutputPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OutputPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutputPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OutputPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OutputPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OutputPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // int32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OutputPoint)
  return target;
}

size_t OutputPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OutputPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->index());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OutputPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OutputPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OutputPoint)
    MergeFrom(*source);
  }
}

void OutputPoint::MergeFrom(const OutputPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OutputPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void OutputPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OutputPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputPoint::CopyFrom(const OutputPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OutputPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPoint::IsInitialized() const {
  return true;
}

void OutputPoint::InternalSwap(OutputPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutputPointInfo::InitAsDefaultInstance() {
}
class OutputPointInfo::_Internal {
 public:
};

OutputPointInfo::OutputPointInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.OutputPointInfo)
}
OutputPointInfo::OutputPointInfo(const OutputPointInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      out_points_(from.out_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_num_ = from.block_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.OutputPointInfo)
}

void OutputPointInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto.base);
  block_num_ = 0;
}

OutputPointInfo::~OutputPointInfo() {
  // @@protoc_insertion_point(destructor:protocol.OutputPointInfo)
  SharedDtor();
}

void OutputPointInfo::SharedDtor() {
}

void OutputPointInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutputPointInfo& OutputPointInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutputPointInfo_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void OutputPointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.OutputPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  out_points_.Clear();
  block_num_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* OutputPointInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.OutputPoint out_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_out_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int32 block_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool OutputPointInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.OutputPointInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.OutputPoint out_points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_out_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 block_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.OutputPointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.OutputPointInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void OutputPointInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.OutputPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.OutputPoint out_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->out_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->out_points(static_cast<int>(i)),
      output);
  }

  // int32 block_num = 2;
  if (this->block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->block_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.OutputPointInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* OutputPointInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.OutputPointInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.OutputPoint out_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->out_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->out_points(static_cast<int>(i)), target);
  }

  // int32 block_num = 2;
  if (this->block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->block_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.OutputPointInfo)
  return target;
}

size_t OutputPointInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.OutputPointInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.OutputPoint out_points = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->out_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->out_points(static_cast<int>(i)));
    }
  }

  // int32 block_num = 2;
  if (this->block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutputPointInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.OutputPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const OutputPointInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutputPointInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.OutputPointInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.OutputPointInfo)
    MergeFrom(*source);
  }
}

void OutputPointInfo::MergeFrom(const OutputPointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.OutputPointInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  out_points_.MergeFrom(from.out_points_);
  if (from.block_num() != 0) {
    set_block_num(from.block_num());
  }
}

void OutputPointInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.OutputPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputPointInfo::CopyFrom(const OutputPointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.OutputPointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputPointInfo::IsInitialized() const {
  return true;
}

void OutputPointInfo::InternalSwap(OutputPointInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&out_points_)->InternalSwap(CastToBase(&other->out_points_));
  swap(block_num_, other->block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutputPointInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PedersenHash::InitAsDefaultInstance() {
}
class PedersenHash::_Internal {
 public:
};

PedersenHash::PedersenHash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.PedersenHash)
}
PedersenHash::PedersenHash(const PedersenHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.content().empty()) {
    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.PedersenHash)
}

void PedersenHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto.base);
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PedersenHash::~PedersenHash() {
  // @@protoc_insertion_point(destructor:protocol.PedersenHash)
  SharedDtor();
}

void PedersenHash::SharedDtor() {
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PedersenHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PedersenHash& PedersenHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PedersenHash_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void PedersenHash::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.PedersenHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PedersenHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes content = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_content(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PedersenHash::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.PedersenHash)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes content = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.PedersenHash)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.PedersenHash)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PedersenHash::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.PedersenHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->content(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.PedersenHash)
}

::PROTOBUF_NAMESPACE_ID::uint8* PedersenHash::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.PedersenHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.PedersenHash)
  return target;
}

size_t PedersenHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.PedersenHash)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes content = 1;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->content());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PedersenHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.PedersenHash)
  GOOGLE_DCHECK_NE(&from, this);
  const PedersenHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PedersenHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.PedersenHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.PedersenHash)
    MergeFrom(*source);
  }
}

void PedersenHash::MergeFrom(const PedersenHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.PedersenHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void PedersenHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.PedersenHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PedersenHash::CopyFrom(const PedersenHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.PedersenHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PedersenHash::IsInitialized() const {
  return true;
}

void PedersenHash::InternalSwap(PedersenHash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  content_.Swap(&other->content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PedersenHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncrementalMerkleTree::InitAsDefaultInstance() {
  ::protocol::_IncrementalMerkleTree_default_instance_._instance.get_mutable()->left_ = const_cast< ::protocol::PedersenHash*>(
      ::protocol::PedersenHash::internal_default_instance());
  ::protocol::_IncrementalMerkleTree_default_instance_._instance.get_mutable()->right_ = const_cast< ::protocol::PedersenHash*>(
      ::protocol::PedersenHash::internal_default_instance());
}
class IncrementalMerkleTree::_Internal {
 public:
  static const ::protocol::PedersenHash& left(const IncrementalMerkleTree* msg);
  static const ::protocol::PedersenHash& right(const IncrementalMerkleTree* msg);
};

const ::protocol::PedersenHash&
IncrementalMerkleTree::_Internal::left(const IncrementalMerkleTree* msg) {
  return *msg->left_;
}
const ::protocol::PedersenHash&
IncrementalMerkleTree::_Internal::right(const IncrementalMerkleTree* msg) {
  return *msg->right_;
}
IncrementalMerkleTree::IncrementalMerkleTree()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.IncrementalMerkleTree)
}
IncrementalMerkleTree::IncrementalMerkleTree(const IncrementalMerkleTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      parents_(from.parents_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_left()) {
    left_ = new ::protocol::PedersenHash(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from.has_right()) {
    right_ = new ::protocol::PedersenHash(*from.right_);
  } else {
    right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleTree)
}

void IncrementalMerkleTree::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto.base);
  ::memset(&left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&right_) -
      reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

IncrementalMerkleTree::~IncrementalMerkleTree() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleTree)
  SharedDtor();
}

void IncrementalMerkleTree::SharedDtor() {
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
}

void IncrementalMerkleTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalMerkleTree& IncrementalMerkleTree::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalMerkleTree_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void IncrementalMerkleTree::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parents_.Clear();
  if (GetArenaNoVirtual() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalMerkleTree::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.PedersenHash left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.PedersenHash right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.PedersenHash parents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_parents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalMerkleTree::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.IncrementalMerkleTree)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.PedersenHash left = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.PedersenHash right = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PedersenHash parents = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_parents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.IncrementalMerkleTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.IncrementalMerkleTree)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalMerkleTree::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.IncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.PedersenHash left = 1;
  if (this->has_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::left(this), output);
  }

  // .protocol.PedersenHash right = 2;
  if (this->has_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::right(this), output);
  }

  // repeated .protocol.PedersenHash parents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parents_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->parents(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.IncrementalMerkleTree)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleTree::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleTree)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.PedersenHash left = 1;
  if (this->has_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::left(this), target);
  }

  // .protocol.PedersenHash right = 2;
  if (this->has_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::right(this), target);
  }

  // repeated .protocol.PedersenHash parents = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->parents_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->parents(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleTree)
  return target;
}

size_t IncrementalMerkleTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleTree)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.PedersenHash parents = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->parents_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->parents(static_cast<int>(i)));
    }
  }

  // .protocol.PedersenHash left = 1;
  if (this->has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .protocol.PedersenHash right = 2;
  if (this->has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalMerkleTree::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.IncrementalMerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalMerkleTree* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalMerkleTree>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.IncrementalMerkleTree)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.IncrementalMerkleTree)
    MergeFrom(*source);
  }
}

void IncrementalMerkleTree::MergeFrom(const IncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleTree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parents_.MergeFrom(from.parents_);
  if (from.has_left()) {
    mutable_left()->::protocol::PedersenHash::MergeFrom(from.left());
  }
  if (from.has_right()) {
    mutable_right()->::protocol::PedersenHash::MergeFrom(from.right());
  }
}

void IncrementalMerkleTree::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.IncrementalMerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalMerkleTree::CopyFrom(const IncrementalMerkleTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleTree::IsInitialized() const {
  return true;
}

void IncrementalMerkleTree::InternalSwap(IncrementalMerkleTree* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&parents_)->InternalSwap(CastToBase(&other->parents_));
  swap(left_, other->left_);
  swap(right_, other->right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleTree::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncrementalMerkleVoucher::InitAsDefaultInstance() {
  ::protocol::_IncrementalMerkleVoucher_default_instance_._instance.get_mutable()->tree_ = const_cast< ::protocol::IncrementalMerkleTree*>(
      ::protocol::IncrementalMerkleTree::internal_default_instance());
  ::protocol::_IncrementalMerkleVoucher_default_instance_._instance.get_mutable()->cursor_ = const_cast< ::protocol::IncrementalMerkleTree*>(
      ::protocol::IncrementalMerkleTree::internal_default_instance());
  ::protocol::_IncrementalMerkleVoucher_default_instance_._instance.get_mutable()->output_point_ = const_cast< ::protocol::OutputPoint*>(
      ::protocol::OutputPoint::internal_default_instance());
}
class IncrementalMerkleVoucher::_Internal {
 public:
  static const ::protocol::IncrementalMerkleTree& tree(const IncrementalMerkleVoucher* msg);
  static const ::protocol::IncrementalMerkleTree& cursor(const IncrementalMerkleVoucher* msg);
  static const ::protocol::OutputPoint& output_point(const IncrementalMerkleVoucher* msg);
};

const ::protocol::IncrementalMerkleTree&
IncrementalMerkleVoucher::_Internal::tree(const IncrementalMerkleVoucher* msg) {
  return *msg->tree_;
}
const ::protocol::IncrementalMerkleTree&
IncrementalMerkleVoucher::_Internal::cursor(const IncrementalMerkleVoucher* msg) {
  return *msg->cursor_;
}
const ::protocol::OutputPoint&
IncrementalMerkleVoucher::_Internal::output_point(const IncrementalMerkleVoucher* msg) {
  return *msg->output_point_;
}
IncrementalMerkleVoucher::IncrementalMerkleVoucher()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.IncrementalMerkleVoucher)
}
IncrementalMerkleVoucher::IncrementalMerkleVoucher(const IncrementalMerkleVoucher& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      filled_(from.filled_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.rt().empty()) {
    rt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
  if (from.has_tree()) {
    tree_ = new ::protocol::IncrementalMerkleTree(*from.tree_);
  } else {
    tree_ = nullptr;
  }
  if (from.has_cursor()) {
    cursor_ = new ::protocol::IncrementalMerkleTree(*from.cursor_);
  } else {
    cursor_ = nullptr;
  }
  if (from.has_output_point()) {
    output_point_ = new ::protocol::OutputPoint(*from.output_point_);
  } else {
    output_point_ = nullptr;
  }
  cursor_depth_ = from.cursor_depth_;
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleVoucher)
}

void IncrementalMerkleVoucher::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto.base);
  rt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cursor_depth_) -
      reinterpret_cast<char*>(&tree_)) + sizeof(cursor_depth_));
}

IncrementalMerkleVoucher::~IncrementalMerkleVoucher() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleVoucher)
  SharedDtor();
}

void IncrementalMerkleVoucher::SharedDtor() {
  rt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tree_;
  if (this != internal_default_instance()) delete cursor_;
  if (this != internal_default_instance()) delete output_point_;
}

void IncrementalMerkleVoucher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalMerkleVoucher& IncrementalMerkleVoucher::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalMerkleVoucher_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void IncrementalMerkleVoucher::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleVoucher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filled_.Clear();
  rt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tree_ != nullptr) {
    delete tree_;
  }
  tree_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && cursor_ != nullptr) {
    delete cursor_;
  }
  cursor_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && output_point_ != nullptr) {
    delete output_point_;
  }
  output_point_ = nullptr;
  cursor_depth_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalMerkleVoucher::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.IncrementalMerkleTree tree = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.PedersenHash filled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_filled(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .protocol.IncrementalMerkleTree cursor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cursor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cursor_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cursor_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rt(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.OutputPoint output_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_output_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalMerkleVoucher::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.IncrementalMerkleVoucher)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.IncrementalMerkleTree tree = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.PedersenHash filled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_filled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.IncrementalMerkleTree cursor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cursor_depth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &cursor_depth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rt = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.OutputPoint output_point = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_output_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.IncrementalMerkleVoucher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.IncrementalMerkleVoucher)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalMerkleVoucher::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.IncrementalMerkleVoucher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.IncrementalMerkleTree tree = 1;
  if (this->has_tree()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::tree(this), output);
  }

  // repeated .protocol.PedersenHash filled = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filled_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->filled(static_cast<int>(i)),
      output);
  }

  // .protocol.IncrementalMerkleTree cursor = 3;
  if (this->has_cursor()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::cursor(this), output);
  }

  // int64 cursor_depth = 4;
  if (this->cursor_depth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->cursor_depth(), output);
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->rt(), output);
  }

  // .protocol.OutputPoint output_point = 10;
  if (this->has_output_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::output_point(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.IncrementalMerkleVoucher)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleVoucher::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleVoucher)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.IncrementalMerkleTree tree = 1;
  if (this->has_tree()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tree(this), target);
  }

  // repeated .protocol.PedersenHash filled = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->filled_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->filled(static_cast<int>(i)), target);
  }

  // .protocol.IncrementalMerkleTree cursor = 3;
  if (this->has_cursor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::cursor(this), target);
  }

  // int64 cursor_depth = 4;
  if (this->cursor_depth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->cursor_depth(), target);
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->rt(), target);
  }

  // .protocol.OutputPoint output_point = 10;
  if (this->has_output_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::output_point(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleVoucher)
  return target;
}

size_t IncrementalMerkleVoucher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleVoucher)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.PedersenHash filled = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->filled_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->filled(static_cast<int>(i)));
    }
  }

  // bytes rt = 5;
  if (this->rt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->rt());
  }

  // .protocol.IncrementalMerkleTree tree = 1;
  if (this->has_tree()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tree_);
  }

  // .protocol.IncrementalMerkleTree cursor = 3;
  if (this->has_cursor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cursor_);
  }

  // .protocol.OutputPoint output_point = 10;
  if (this->has_output_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *output_point_);
  }

  // int64 cursor_depth = 4;
  if (this->cursor_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->cursor_depth());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalMerkleVoucher::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.IncrementalMerkleVoucher)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalMerkleVoucher* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalMerkleVoucher>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.IncrementalMerkleVoucher)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.IncrementalMerkleVoucher)
    MergeFrom(*source);
  }
}

void IncrementalMerkleVoucher::MergeFrom(const IncrementalMerkleVoucher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleVoucher)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filled_.MergeFrom(from.filled_);
  if (from.rt().size() > 0) {

    rt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rt_);
  }
  if (from.has_tree()) {
    mutable_tree()->::protocol::IncrementalMerkleTree::MergeFrom(from.tree());
  }
  if (from.has_cursor()) {
    mutable_cursor()->::protocol::IncrementalMerkleTree::MergeFrom(from.cursor());
  }
  if (from.has_output_point()) {
    mutable_output_point()->::protocol::OutputPoint::MergeFrom(from.output_point());
  }
  if (from.cursor_depth() != 0) {
    set_cursor_depth(from.cursor_depth());
  }
}

void IncrementalMerkleVoucher::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.IncrementalMerkleVoucher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalMerkleVoucher::CopyFrom(const IncrementalMerkleVoucher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleVoucher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleVoucher::IsInitialized() const {
  return true;
}

void IncrementalMerkleVoucher::InternalSwap(IncrementalMerkleVoucher* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&filled_)->InternalSwap(CastToBase(&other->filled_));
  rt_.Swap(&other->rt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tree_, other->tree_);
  swap(cursor_, other->cursor_);
  swap(output_point_, other->output_point_);
  swap(cursor_depth_, other->cursor_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleVoucher::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IncrementalMerkleVoucherInfo::InitAsDefaultInstance() {
}
class IncrementalMerkleVoucherInfo::_Internal {
 public:
};

IncrementalMerkleVoucherInfo::IncrementalMerkleVoucherInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.IncrementalMerkleVoucherInfo)
}
IncrementalMerkleVoucherInfo::IncrementalMerkleVoucherInfo(const IncrementalMerkleVoucherInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vouchers_(from.vouchers_),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.IncrementalMerkleVoucherInfo)
}

void IncrementalMerkleVoucherInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto.base);
}

IncrementalMerkleVoucherInfo::~IncrementalMerkleVoucherInfo() {
  // @@protoc_insertion_point(destructor:protocol.IncrementalMerkleVoucherInfo)
  SharedDtor();
}

void IncrementalMerkleVoucherInfo::SharedDtor() {
}

void IncrementalMerkleVoucherInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IncrementalMerkleVoucherInfo& IncrementalMerkleVoucherInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IncrementalMerkleVoucherInfo_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void IncrementalMerkleVoucherInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.IncrementalMerkleVoucherInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vouchers_.Clear();
  paths_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* IncrementalMerkleVoucherInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vouchers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated bytes paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_paths(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool IncrementalMerkleVoucherInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.IncrementalMerkleVoucherInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vouchers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes paths = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_paths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.IncrementalMerkleVoucherInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.IncrementalMerkleVoucherInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void IncrementalMerkleVoucherInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.IncrementalMerkleVoucherInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vouchers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vouchers(static_cast<int>(i)),
      output);
  }

  // repeated bytes paths = 2;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->paths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.IncrementalMerkleVoucherInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* IncrementalMerkleVoucherInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.IncrementalMerkleVoucherInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vouchers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vouchers(static_cast<int>(i)), target);
  }

  // repeated bytes paths = 2;
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->paths(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.IncrementalMerkleVoucherInfo)
  return target;
}

size_t IncrementalMerkleVoucherInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.IncrementalMerkleVoucherInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.IncrementalMerkleVoucher vouchers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vouchers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vouchers(static_cast<int>(i)));
    }
  }

  // repeated bytes paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->paths_size());
  for (int i = 0, n = this->paths_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->paths(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncrementalMerkleVoucherInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.IncrementalMerkleVoucherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IncrementalMerkleVoucherInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IncrementalMerkleVoucherInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.IncrementalMerkleVoucherInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.IncrementalMerkleVoucherInfo)
    MergeFrom(*source);
  }
}

void IncrementalMerkleVoucherInfo::MergeFrom(const IncrementalMerkleVoucherInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.IncrementalMerkleVoucherInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vouchers_.MergeFrom(from.vouchers_);
  paths_.MergeFrom(from.paths_);
}

void IncrementalMerkleVoucherInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.IncrementalMerkleVoucherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IncrementalMerkleVoucherInfo::CopyFrom(const IncrementalMerkleVoucherInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.IncrementalMerkleVoucherInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncrementalMerkleVoucherInfo::IsInitialized() const {
  return true;
}

void IncrementalMerkleVoucherInfo::InternalSwap(IncrementalMerkleVoucherInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vouchers_)->InternalSwap(CastToBase(&other->vouchers_));
  paths_.InternalSwap(CastToBase(&other->paths_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IncrementalMerkleVoucherInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpendDescription::InitAsDefaultInstance() {
}
class SpendDescription::_Internal {
 public:
};

SpendDescription::SpendDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.SpendDescription)
}
SpendDescription::SpendDescription(const SpendDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value_commitment().empty()) {
    value_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_commitment_);
  }
  anchor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.anchor().empty()) {
    anchor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchor_);
  }
  nullifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.nullifier().empty()) {
    nullifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nullifier_);
  }
  rk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.rk().empty()) {
    rk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rk_);
  }
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.zkproof().empty()) {
    zkproof_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zkproof_);
  }
  spend_authority_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.spend_authority_signature().empty()) {
    spend_authority_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_authority_signature_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.SpendDescription)
}

void SpendDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto.base);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nullifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_authority_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SpendDescription::~SpendDescription() {
  // @@protoc_insertion_point(destructor:protocol.SpendDescription)
  SharedDtor();
}

void SpendDescription::SharedDtor() {
  value_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nullifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_authority_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SpendDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpendDescription& SpendDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpendDescription_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void SpendDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.SpendDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  anchor_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nullifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  spend_authority_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpendDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value_commitment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value_commitment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes anchor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_anchor(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nullifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_nullifier(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes rk = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_rk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zkproof = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_zkproof(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes spend_authority_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_spend_authority_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpendDescription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.SpendDescription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value_commitment = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes anchor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_anchor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes nullifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nullifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes rk = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes zkproof = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zkproof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes spend_authority_signature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_spend_authority_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.SpendDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.SpendDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpendDescription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.SpendDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value_commitment(), output);
  }

  // bytes anchor = 2;
  if (this->anchor().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->anchor(), output);
  }

  // bytes nullifier = 3;
  if (this->nullifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->nullifier(), output);
  }

  // bytes rk = 4;
  if (this->rk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->rk(), output);
  }

  // bytes zkproof = 5;
  if (this->zkproof().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->zkproof(), output);
  }

  // bytes spend_authority_signature = 6;
  if (this->spend_authority_signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->spend_authority_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.SpendDescription)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpendDescription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.SpendDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value_commitment(), target);
  }

  // bytes anchor = 2;
  if (this->anchor().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->anchor(), target);
  }

  // bytes nullifier = 3;
  if (this->nullifier().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->nullifier(), target);
  }

  // bytes rk = 4;
  if (this->rk().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->rk(), target);
  }

  // bytes zkproof = 5;
  if (this->zkproof().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->zkproof(), target);
  }

  // bytes spend_authority_signature = 6;
  if (this->spend_authority_signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->spend_authority_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.SpendDescription)
  return target;
}

size_t SpendDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.SpendDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value_commitment());
  }

  // bytes anchor = 2;
  if (this->anchor().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->anchor());
  }

  // bytes nullifier = 3;
  if (this->nullifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->nullifier());
  }

  // bytes rk = 4;
  if (this->rk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->rk());
  }

  // bytes zkproof = 5;
  if (this->zkproof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->zkproof());
  }

  // bytes spend_authority_signature = 6;
  if (this->spend_authority_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->spend_authority_signature());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpendDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.SpendDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const SpendDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpendDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.SpendDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.SpendDescription)
    MergeFrom(*source);
  }
}

void SpendDescription::MergeFrom(const SpendDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.SpendDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value_commitment().size() > 0) {

    value_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_commitment_);
  }
  if (from.anchor().size() > 0) {

    anchor_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.anchor_);
  }
  if (from.nullifier().size() > 0) {

    nullifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nullifier_);
  }
  if (from.rk().size() > 0) {

    rk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rk_);
  }
  if (from.zkproof().size() > 0) {

    zkproof_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zkproof_);
  }
  if (from.spend_authority_signature().size() > 0) {

    spend_authority_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.spend_authority_signature_);
  }
}

void SpendDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.SpendDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpendDescription::CopyFrom(const SpendDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.SpendDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpendDescription::IsInitialized() const {
  return true;
}

void SpendDescription::InternalSwap(SpendDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_commitment_.Swap(&other->value_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  anchor_.Swap(&other->anchor_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nullifier_.Swap(&other->nullifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rk_.Swap(&other->rk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  zkproof_.Swap(&other->zkproof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  spend_authority_signature_.Swap(&other->spend_authority_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SpendDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceiveDescription::InitAsDefaultInstance() {
}
class ReceiveDescription::_Internal {
 public:
};

ReceiveDescription::ReceiveDescription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ReceiveDescription)
}
ReceiveDescription::ReceiveDescription(const ReceiveDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value_commitment().empty()) {
    value_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_commitment_);
  }
  note_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.note_commitment().empty()) {
    note_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_commitment_);
  }
  epk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.epk().empty()) {
    epk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.epk_);
  }
  c_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.c_enc().empty()) {
    c_enc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_enc_);
  }
  c_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.c_out().empty()) {
    c_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_out_);
  }
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.zkproof().empty()) {
    zkproof_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zkproof_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.ReceiveDescription)
}

void ReceiveDescription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto.base);
  value_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_commitment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epk_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_enc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_out_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReceiveDescription::~ReceiveDescription() {
  // @@protoc_insertion_point(destructor:protocol.ReceiveDescription)
  SharedDtor();
}

void ReceiveDescription::SharedDtor() {
  value_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_commitment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epk_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_enc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_out_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReceiveDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceiveDescription& ReceiveDescription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceiveDescription_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void ReceiveDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ReceiveDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_commitment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  epk_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_enc_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  c_out_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  zkproof_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReceiveDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value_commitment = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_value_commitment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes note_commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_note_commitment(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes epk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_epk(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c_enc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_c_enc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes c_out = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_c_out(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes zkproof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_zkproof(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReceiveDescription::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ReceiveDescription)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes value_commitment = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes note_commitment = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_note_commitment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes epk = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_epk()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes c_enc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_enc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes c_out = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_c_out()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes zkproof = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_zkproof()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ReceiveDescription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ReceiveDescription)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReceiveDescription::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ReceiveDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->value_commitment(), output);
  }

  // bytes note_commitment = 2;
  if (this->note_commitment().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->note_commitment(), output);
  }

  // bytes epk = 3;
  if (this->epk().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->epk(), output);
  }

  // bytes c_enc = 4;
  if (this->c_enc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->c_enc(), output);
  }

  // bytes c_out = 5;
  if (this->c_out().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->c_out(), output);
  }

  // bytes zkproof = 6;
  if (this->zkproof().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->zkproof(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ReceiveDescription)
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceiveDescription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ReceiveDescription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->value_commitment(), target);
  }

  // bytes note_commitment = 2;
  if (this->note_commitment().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->note_commitment(), target);
  }

  // bytes epk = 3;
  if (this->epk().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->epk(), target);
  }

  // bytes c_enc = 4;
  if (this->c_enc().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->c_enc(), target);
  }

  // bytes c_out = 5;
  if (this->c_out().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->c_out(), target);
  }

  // bytes zkproof = 6;
  if (this->zkproof().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->zkproof(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ReceiveDescription)
  return target;
}

size_t ReceiveDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ReceiveDescription)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value_commitment = 1;
  if (this->value_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->value_commitment());
  }

  // bytes note_commitment = 2;
  if (this->note_commitment().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->note_commitment());
  }

  // bytes epk = 3;
  if (this->epk().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->epk());
  }

  // bytes c_enc = 4;
  if (this->c_enc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->c_enc());
  }

  // bytes c_out = 5;
  if (this->c_out().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->c_out());
  }

  // bytes zkproof = 6;
  if (this->zkproof().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->zkproof());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceiveDescription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ReceiveDescription)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceiveDescription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceiveDescription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ReceiveDescription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ReceiveDescription)
    MergeFrom(*source);
  }
}

void ReceiveDescription::MergeFrom(const ReceiveDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ReceiveDescription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value_commitment().size() > 0) {

    value_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_commitment_);
  }
  if (from.note_commitment().size() > 0) {

    note_commitment_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_commitment_);
  }
  if (from.epk().size() > 0) {

    epk_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.epk_);
  }
  if (from.c_enc().size() > 0) {

    c_enc_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_enc_);
  }
  if (from.c_out().size() > 0) {

    c_out_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.c_out_);
  }
  if (from.zkproof().size() > 0) {

    zkproof_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.zkproof_);
  }
}

void ReceiveDescription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ReceiveDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveDescription::CopyFrom(const ReceiveDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ReceiveDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveDescription::IsInitialized() const {
  return true;
}

void ReceiveDescription::InternalSwap(ReceiveDescription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_commitment_.Swap(&other->value_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_commitment_.Swap(&other->note_commitment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  epk_.Swap(&other->epk_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c_enc_.Swap(&other->c_enc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  c_out_.Swap(&other->c_out_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  zkproof_.Swap(&other->zkproof_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceiveDescription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShieldedTransferContract::InitAsDefaultInstance() {
}
class ShieldedTransferContract::_Internal {
 public:
};

ShieldedTransferContract::ShieldedTransferContract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ShieldedTransferContract)
}
ShieldedTransferContract::ShieldedTransferContract(const ShieldedTransferContract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      spend_description_(from.spend_description_),
      receive_description_(from.receive_description_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.transparent_from_address().empty()) {
    transparent_from_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transparent_from_address_);
  }
  binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.binding_signature().empty()) {
    binding_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binding_signature_);
  }
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.transparent_to_address().empty()) {
    transparent_to_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transparent_to_address_);
  }
  ::memcpy(&from_amount_, &from.from_amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&to_amount_) -
    reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
  // @@protoc_insertion_point(copy_constructor:protocol.ShieldedTransferContract)
}

void ShieldedTransferContract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto.base);
  transparent_from_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binding_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_amount_) -
      reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
}

ShieldedTransferContract::~ShieldedTransferContract() {
  // @@protoc_insertion_point(destructor:protocol.ShieldedTransferContract)
  SharedDtor();
}

void ShieldedTransferContract::SharedDtor() {
  transparent_from_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binding_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShieldedTransferContract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShieldedTransferContract& ShieldedTransferContract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShieldedTransferContract_core_2fcontract_2fshield_5fcontract_2eproto.base);
  return *internal_default_instance();
}


void ShieldedTransferContract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ShieldedTransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spend_description_.Clear();
  receive_description_.Clear();
  transparent_from_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  binding_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transparent_to_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_amount_) -
      reinterpret_cast<char*>(&from_amount_)) + sizeof(to_amount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShieldedTransferContract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes transparent_from_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transparent_from_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          from_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.SpendDescription spend_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_spend_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.ReceiveDescription receive_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_receive_description(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // bytes binding_signature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_binding_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transparent_to_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transparent_to_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_amount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          to_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShieldedTransferContract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ShieldedTransferContract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes transparent_from_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transparent_from_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 from_amount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &from_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.SpendDescription spend_description = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_spend_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.ReceiveDescription receive_description = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_receive_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes binding_signature = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_binding_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transparent_to_address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transparent_to_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to_amount = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ShieldedTransferContract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ShieldedTransferContract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShieldedTransferContract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ShieldedTransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transparent_from_address = 1;
  if (this->transparent_from_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->transparent_from_address(), output);
  }

  // int64 from_amount = 2;
  if (this->from_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->from_amount(), output);
  }

  // repeated .protocol.SpendDescription spend_description = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spend_description_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->spend_description(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.ReceiveDescription receive_description = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receive_description_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->receive_description(static_cast<int>(i)),
      output);
  }

  // bytes binding_signature = 5;
  if (this->binding_signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->binding_signature(), output);
  }

  // bytes transparent_to_address = 6;
  if (this->transparent_to_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->transparent_to_address(), output);
  }

  // int64 to_amount = 7;
  if (this->to_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->to_amount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ShieldedTransferContract)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShieldedTransferContract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ShieldedTransferContract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes transparent_from_address = 1;
  if (this->transparent_from_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->transparent_from_address(), target);
  }

  // int64 from_amount = 2;
  if (this->from_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->from_amount(), target);
  }

  // repeated .protocol.SpendDescription spend_description = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->spend_description_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->spend_description(static_cast<int>(i)), target);
  }

  // repeated .protocol.ReceiveDescription receive_description = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->receive_description_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->receive_description(static_cast<int>(i)), target);
  }

  // bytes binding_signature = 5;
  if (this->binding_signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->binding_signature(), target);
  }

  // bytes transparent_to_address = 6;
  if (this->transparent_to_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->transparent_to_address(), target);
  }

  // int64 to_amount = 7;
  if (this->to_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->to_amount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ShieldedTransferContract)
  return target;
}

size_t ShieldedTransferContract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ShieldedTransferContract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.SpendDescription spend_description = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->spend_description_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->spend_description(static_cast<int>(i)));
    }
  }

  // repeated .protocol.ReceiveDescription receive_description = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->receive_description_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->receive_description(static_cast<int>(i)));
    }
  }

  // bytes transparent_from_address = 1;
  if (this->transparent_from_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->transparent_from_address());
  }

  // bytes binding_signature = 5;
  if (this->binding_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->binding_signature());
  }

  // bytes transparent_to_address = 6;
  if (this->transparent_to_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->transparent_to_address());
  }

  // int64 from_amount = 2;
  if (this->from_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->from_amount());
  }

  // int64 to_amount = 7;
  if (this->to_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->to_amount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShieldedTransferContract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ShieldedTransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  const ShieldedTransferContract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShieldedTransferContract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ShieldedTransferContract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ShieldedTransferContract)
    MergeFrom(*source);
  }
}

void ShieldedTransferContract::MergeFrom(const ShieldedTransferContract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ShieldedTransferContract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  spend_description_.MergeFrom(from.spend_description_);
  receive_description_.MergeFrom(from.receive_description_);
  if (from.transparent_from_address().size() > 0) {

    transparent_from_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transparent_from_address_);
  }
  if (from.binding_signature().size() > 0) {

    binding_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.binding_signature_);
  }
  if (from.transparent_to_address().size() > 0) {

    transparent_to_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transparent_to_address_);
  }
  if (from.from_amount() != 0) {
    set_from_amount(from.from_amount());
  }
  if (from.to_amount() != 0) {
    set_to_amount(from.to_amount());
  }
}

void ShieldedTransferContract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ShieldedTransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShieldedTransferContract::CopyFrom(const ShieldedTransferContract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ShieldedTransferContract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShieldedTransferContract::IsInitialized() const {
  return true;
}

void ShieldedTransferContract::InternalSwap(ShieldedTransferContract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&spend_description_)->InternalSwap(CastToBase(&other->spend_description_));
  CastToBase(&receive_description_)->InternalSwap(CastToBase(&other->receive_description_));
  transparent_from_address_.Swap(&other->transparent_from_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  binding_signature_.Swap(&other->binding_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transparent_to_address_.Swap(&other->transparent_to_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_amount_, other->from_amount_);
  swap(to_amount_, other->to_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShieldedTransferContract::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AuthenticationPath* Arena::CreateMaybeMessage< ::protocol::AuthenticationPath >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::AuthenticationPath >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::MerklePath* Arena::CreateMaybeMessage< ::protocol::MerklePath >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::MerklePath >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OutputPoint* Arena::CreateMaybeMessage< ::protocol::OutputPoint >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::OutputPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::OutputPointInfo* Arena::CreateMaybeMessage< ::protocol::OutputPointInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::OutputPointInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::PedersenHash* Arena::CreateMaybeMessage< ::protocol::PedersenHash >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::PedersenHash >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleTree* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleTree >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::IncrementalMerkleTree >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleVoucher* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleVoucher >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::IncrementalMerkleVoucher >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::IncrementalMerkleVoucherInfo* Arena::CreateMaybeMessage< ::protocol::IncrementalMerkleVoucherInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::IncrementalMerkleVoucherInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::SpendDescription* Arena::CreateMaybeMessage< ::protocol::SpendDescription >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::SpendDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ReceiveDescription* Arena::CreateMaybeMessage< ::protocol::ReceiveDescription >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ReceiveDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ShieldedTransferContract* Arena::CreateMaybeMessage< ::protocol::ShieldedTransferContract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ShieldedTransferContract >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
