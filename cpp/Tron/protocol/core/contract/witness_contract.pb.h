// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/contract/witness_contract.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fwitness_5fcontract_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fwitness_5fcontract_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fcontract_2fwitness_5fcontract_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto;
namespace protocol {
class VoteWitnessContract;
class VoteWitnessContractDefaultTypeInternal;
extern VoteWitnessContractDefaultTypeInternal _VoteWitnessContract_default_instance_;
class VoteWitnessContract_Vote;
class VoteWitnessContract_VoteDefaultTypeInternal;
extern VoteWitnessContract_VoteDefaultTypeInternal _VoteWitnessContract_Vote_default_instance_;
class WitnessCreateContract;
class WitnessCreateContractDefaultTypeInternal;
extern WitnessCreateContractDefaultTypeInternal _WitnessCreateContract_default_instance_;
class WitnessUpdateContract;
class WitnessUpdateContractDefaultTypeInternal;
extern WitnessUpdateContractDefaultTypeInternal _WitnessUpdateContract_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::VoteWitnessContract* Arena::CreateMaybeMessage<::protocol::VoteWitnessContract>(Arena*);
template<> ::protocol::VoteWitnessContract_Vote* Arena::CreateMaybeMessage<::protocol::VoteWitnessContract_Vote>(Arena*);
template<> ::protocol::WitnessCreateContract* Arena::CreateMaybeMessage<::protocol::WitnessCreateContract>(Arena*);
template<> ::protocol::WitnessUpdateContract* Arena::CreateMaybeMessage<::protocol::WitnessUpdateContract>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class WitnessCreateContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.WitnessCreateContract) */ {
 public:
  WitnessCreateContract();
  virtual ~WitnessCreateContract();

  WitnessCreateContract(const WitnessCreateContract& from);
  WitnessCreateContract(WitnessCreateContract&& from) noexcept
    : WitnessCreateContract() {
    *this = ::std::move(from);
  }

  inline WitnessCreateContract& operator=(const WitnessCreateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessCreateContract& operator=(WitnessCreateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WitnessCreateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WitnessCreateContract* internal_default_instance() {
    return reinterpret_cast<const WitnessCreateContract*>(
               &_WitnessCreateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WitnessCreateContract& a, WitnessCreateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(WitnessCreateContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WitnessCreateContract* New() const final {
    return CreateMaybeMessage<WitnessCreateContract>(nullptr);
  }

  WitnessCreateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WitnessCreateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WitnessCreateContract& from);
  void MergeFrom(const WitnessCreateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WitnessCreateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.WitnessCreateContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const void* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // @@protoc_insertion_point(class_scope:protocol.WitnessCreateContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class WitnessUpdateContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.WitnessUpdateContract) */ {
 public:
  WitnessUpdateContract();
  virtual ~WitnessUpdateContract();

  WitnessUpdateContract(const WitnessUpdateContract& from);
  WitnessUpdateContract(WitnessUpdateContract&& from) noexcept
    : WitnessUpdateContract() {
    *this = ::std::move(from);
  }

  inline WitnessUpdateContract& operator=(const WitnessUpdateContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitnessUpdateContract& operator=(WitnessUpdateContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WitnessUpdateContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WitnessUpdateContract* internal_default_instance() {
    return reinterpret_cast<const WitnessUpdateContract*>(
               &_WitnessUpdateContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WitnessUpdateContract& a, WitnessUpdateContract& b) {
    a.Swap(&b);
  }
  inline void Swap(WitnessUpdateContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WitnessUpdateContract* New() const final {
    return CreateMaybeMessage<WitnessUpdateContract>(nullptr);
  }

  WitnessUpdateContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WitnessUpdateContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WitnessUpdateContract& from);
  void MergeFrom(const WitnessUpdateContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WitnessUpdateContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.WitnessUpdateContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOwnerAddressFieldNumber = 1,
    kUpdateUrlFieldNumber = 12,
  };
  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bytes update_url = 12;
  void clear_update_url();
  const std::string& update_url() const;
  void set_update_url(const std::string& value);
  void set_update_url(std::string&& value);
  void set_update_url(const char* value);
  void set_update_url(const void* value, size_t size);
  std::string* mutable_update_url();
  std::string* release_update_url();
  void set_allocated_update_url(std::string* update_url);

  // @@protoc_insertion_point(class_scope:protocol.WitnessUpdateContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr update_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class VoteWitnessContract_Vote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.VoteWitnessContract.Vote) */ {
 public:
  VoteWitnessContract_Vote();
  virtual ~VoteWitnessContract_Vote();

  VoteWitnessContract_Vote(const VoteWitnessContract_Vote& from);
  VoteWitnessContract_Vote(VoteWitnessContract_Vote&& from) noexcept
    : VoteWitnessContract_Vote() {
    *this = ::std::move(from);
  }

  inline VoteWitnessContract_Vote& operator=(const VoteWitnessContract_Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteWitnessContract_Vote& operator=(VoteWitnessContract_Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteWitnessContract_Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteWitnessContract_Vote* internal_default_instance() {
    return reinterpret_cast<const VoteWitnessContract_Vote*>(
               &_VoteWitnessContract_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VoteWitnessContract_Vote& a, VoteWitnessContract_Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteWitnessContract_Vote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteWitnessContract_Vote* New() const final {
    return CreateMaybeMessage<VoteWitnessContract_Vote>(nullptr);
  }

  VoteWitnessContract_Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteWitnessContract_Vote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteWitnessContract_Vote& from);
  void MergeFrom(const VoteWitnessContract_Vote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteWitnessContract_Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.VoteWitnessContract.Vote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteAddressFieldNumber = 1,
    kVoteCountFieldNumber = 2,
  };
  // bytes vote_address = 1;
  void clear_vote_address();
  const std::string& vote_address() const;
  void set_vote_address(const std::string& value);
  void set_vote_address(std::string&& value);
  void set_vote_address(const char* value);
  void set_vote_address(const void* value, size_t size);
  std::string* mutable_vote_address();
  std::string* release_vote_address();
  void set_allocated_vote_address(std::string* vote_address);

  // int64 vote_count = 2;
  void clear_vote_count();
  ::PROTOBUF_NAMESPACE_ID::int64 vote_count() const;
  void set_vote_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.VoteWitnessContract.Vote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 vote_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto;
};
// -------------------------------------------------------------------

class VoteWitnessContract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.VoteWitnessContract) */ {
 public:
  VoteWitnessContract();
  virtual ~VoteWitnessContract();

  VoteWitnessContract(const VoteWitnessContract& from);
  VoteWitnessContract(VoteWitnessContract&& from) noexcept
    : VoteWitnessContract() {
    *this = ::std::move(from);
  }

  inline VoteWitnessContract& operator=(const VoteWitnessContract& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteWitnessContract& operator=(VoteWitnessContract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteWitnessContract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VoteWitnessContract* internal_default_instance() {
    return reinterpret_cast<const VoteWitnessContract*>(
               &_VoteWitnessContract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VoteWitnessContract& a, VoteWitnessContract& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteWitnessContract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteWitnessContract* New() const final {
    return CreateMaybeMessage<VoteWitnessContract>(nullptr);
  }

  VoteWitnessContract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteWitnessContract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteWitnessContract& from);
  void MergeFrom(const VoteWitnessContract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteWitnessContract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.VoteWitnessContract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto);
    return ::descriptor_table_core_2fcontract_2fwitness_5fcontract_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VoteWitnessContract_Vote Vote;

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 2,
    kOwnerAddressFieldNumber = 1,
    kSupportFieldNumber = 3,
  };
  // repeated .protocol.VoteWitnessContract.Vote votes = 2;
  int votes_size() const;
  void clear_votes();
  ::protocol::VoteWitnessContract_Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >*
      mutable_votes();
  const ::protocol::VoteWitnessContract_Vote& votes(int index) const;
  ::protocol::VoteWitnessContract_Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >&
      votes() const;

  // bytes owner_address = 1;
  void clear_owner_address();
  const std::string& owner_address() const;
  void set_owner_address(const std::string& value);
  void set_owner_address(std::string&& value);
  void set_owner_address(const char* value);
  void set_owner_address(const void* value, size_t size);
  std::string* mutable_owner_address();
  std::string* release_owner_address();
  void set_allocated_owner_address(std::string* owner_address);

  // bool support = 3;
  void clear_support();
  bool support() const;
  void set_support(bool value);

  // @@protoc_insertion_point(class_scope:protocol.VoteWitnessContract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote > votes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_address_;
  bool support_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fcontract_2fwitness_5fcontract_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WitnessCreateContract

// bytes owner_address = 1;
inline void WitnessCreateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WitnessCreateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessCreateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void WitnessCreateContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessCreateContract.owner_address)
}
inline void WitnessCreateContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessCreateContract.owner_address)
}
inline void WitnessCreateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessCreateContract.owner_address)
}
inline void WitnessCreateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessCreateContract.owner_address)
}
inline std::string* WitnessCreateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessCreateContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WitnessCreateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WitnessCreateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessCreateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessCreateContract.owner_address)
}

// bytes url = 2;
inline void WitnessCreateContract::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WitnessCreateContract::url() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessCreateContract.url)
  return url_.GetNoArena();
}
inline void WitnessCreateContract::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessCreateContract.url)
}
inline void WitnessCreateContract::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessCreateContract.url)
}
inline void WitnessCreateContract::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessCreateContract.url)
}
inline void WitnessCreateContract::set_url(const void* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessCreateContract.url)
}
inline std::string* WitnessCreateContract::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessCreateContract.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WitnessCreateContract::release_url() {
  // @@protoc_insertion_point(field_release:protocol.WitnessCreateContract.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessCreateContract::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessCreateContract.url)
}

// -------------------------------------------------------------------

// WitnessUpdateContract

// bytes owner_address = 1;
inline void WitnessUpdateContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WitnessUpdateContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessUpdateContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void WitnessUpdateContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessUpdateContract.owner_address)
}
inline void WitnessUpdateContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessUpdateContract.owner_address)
}
inline void WitnessUpdateContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessUpdateContract.owner_address)
}
inline void WitnessUpdateContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessUpdateContract.owner_address)
}
inline std::string* WitnessUpdateContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessUpdateContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WitnessUpdateContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.WitnessUpdateContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUpdateContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessUpdateContract.owner_address)
}

// bytes update_url = 12;
inline void WitnessUpdateContract::clear_update_url() {
  update_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WitnessUpdateContract::update_url() const {
  // @@protoc_insertion_point(field_get:protocol.WitnessUpdateContract.update_url)
  return update_url_.GetNoArena();
}
inline void WitnessUpdateContract::set_update_url(const std::string& value) {
  
  update_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.WitnessUpdateContract.update_url)
}
inline void WitnessUpdateContract::set_update_url(std::string&& value) {
  
  update_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.WitnessUpdateContract.update_url)
}
inline void WitnessUpdateContract::set_update_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  update_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.WitnessUpdateContract.update_url)
}
inline void WitnessUpdateContract::set_update_url(const void* value, size_t size) {
  
  update_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.WitnessUpdateContract.update_url)
}
inline std::string* WitnessUpdateContract::mutable_update_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.WitnessUpdateContract.update_url)
  return update_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WitnessUpdateContract::release_update_url() {
  // @@protoc_insertion_point(field_release:protocol.WitnessUpdateContract.update_url)
  
  return update_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WitnessUpdateContract::set_allocated_update_url(std::string* update_url) {
  if (update_url != nullptr) {
    
  } else {
    
  }
  update_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), update_url);
  // @@protoc_insertion_point(field_set_allocated:protocol.WitnessUpdateContract.update_url)
}

// -------------------------------------------------------------------

// VoteWitnessContract_Vote

// bytes vote_address = 1;
inline void VoteWitnessContract_Vote::clear_vote_address() {
  vote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VoteWitnessContract_Vote::vote_address() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.Vote.vote_address)
  return vote_address_.GetNoArena();
}
inline void VoteWitnessContract_Vote::set_vote_address(const std::string& value) {
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.Vote.vote_address)
}
inline void VoteWitnessContract_Vote::set_vote_address(std::string&& value) {
  
  vote_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.VoteWitnessContract.Vote.vote_address)
}
inline void VoteWitnessContract_Vote::set_vote_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.VoteWitnessContract.Vote.vote_address)
}
inline void VoteWitnessContract_Vote::set_vote_address(const void* value, size_t size) {
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteWitnessContract.Vote.vote_address)
}
inline std::string* VoteWitnessContract_Vote::mutable_vote_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.Vote.vote_address)
  return vote_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VoteWitnessContract_Vote::release_vote_address() {
  // @@protoc_insertion_point(field_release:protocol.VoteWitnessContract.Vote.vote_address)
  
  return vote_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VoteWitnessContract_Vote::set_allocated_vote_address(std::string* vote_address) {
  if (vote_address != nullptr) {
    
  } else {
    
  }
  vote_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.VoteWitnessContract.Vote.vote_address)
}

// int64 vote_count = 2;
inline void VoteWitnessContract_Vote::clear_vote_count() {
  vote_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VoteWitnessContract_Vote::vote_count() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.Vote.vote_count)
  return vote_count_;
}
inline void VoteWitnessContract_Vote::set_vote_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vote_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.Vote.vote_count)
}

// -------------------------------------------------------------------

// VoteWitnessContract

// bytes owner_address = 1;
inline void VoteWitnessContract::clear_owner_address() {
  owner_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VoteWitnessContract::owner_address() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.owner_address)
  return owner_address_.GetNoArena();
}
inline void VoteWitnessContract::set_owner_address(const std::string& value) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.owner_address)
}
inline void VoteWitnessContract::set_owner_address(std::string&& value) {
  
  owner_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.VoteWitnessContract.owner_address)
}
inline void VoteWitnessContract::set_owner_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.VoteWitnessContract.owner_address)
}
inline void VoteWitnessContract::set_owner_address(const void* value, size_t size) {
  
  owner_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.VoteWitnessContract.owner_address)
}
inline std::string* VoteWitnessContract::mutable_owner_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.owner_address)
  return owner_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VoteWitnessContract::release_owner_address() {
  // @@protoc_insertion_point(field_release:protocol.VoteWitnessContract.owner_address)
  
  return owner_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VoteWitnessContract::set_allocated_owner_address(std::string* owner_address) {
  if (owner_address != nullptr) {
    
  } else {
    
  }
  owner_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.VoteWitnessContract.owner_address)
}

// repeated .protocol.VoteWitnessContract.Vote votes = 2;
inline int VoteWitnessContract::votes_size() const {
  return votes_.size();
}
inline void VoteWitnessContract::clear_votes() {
  votes_.Clear();
}
inline ::protocol::VoteWitnessContract_Vote* VoteWitnessContract::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.VoteWitnessContract.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >*
VoteWitnessContract::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.VoteWitnessContract.votes)
  return &votes_;
}
inline const ::protocol::VoteWitnessContract_Vote& VoteWitnessContract::votes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.votes)
  return votes_.Get(index);
}
inline ::protocol::VoteWitnessContract_Vote* VoteWitnessContract::add_votes() {
  // @@protoc_insertion_point(field_add:protocol.VoteWitnessContract.votes)
  return votes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::VoteWitnessContract_Vote >&
VoteWitnessContract::votes() const {
  // @@protoc_insertion_point(field_list:protocol.VoteWitnessContract.votes)
  return votes_;
}

// bool support = 3;
inline void VoteWitnessContract::clear_support() {
  support_ = false;
}
inline bool VoteWitnessContract::support() const {
  // @@protoc_insertion_point(field_get:protocol.VoteWitnessContract.support)
  return support_;
}
inline void VoteWitnessContract::set_support(bool value) {
  
  support_ = value;
  // @@protoc_insertion_point(field_set:protocol.VoteWitnessContract.support)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fcontract_2fwitness_5fcontract_2eproto
