// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Discover.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fDiscover_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fDiscover_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fDiscover_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fDiscover_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fDiscover_2eproto;
namespace protocol {
class BackupMessage;
class BackupMessageDefaultTypeInternal;
extern BackupMessageDefaultTypeInternal _BackupMessage_default_instance_;
class Endpoint;
class EndpointDefaultTypeInternal;
extern EndpointDefaultTypeInternal _Endpoint_default_instance_;
class FindNeighbours;
class FindNeighboursDefaultTypeInternal;
extern FindNeighboursDefaultTypeInternal _FindNeighbours_default_instance_;
class Neighbours;
class NeighboursDefaultTypeInternal;
extern NeighboursDefaultTypeInternal _Neighbours_default_instance_;
class PingMessage;
class PingMessageDefaultTypeInternal;
extern PingMessageDefaultTypeInternal _PingMessage_default_instance_;
class PongMessage;
class PongMessageDefaultTypeInternal;
extern PongMessageDefaultTypeInternal _PongMessage_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::BackupMessage* Arena::CreateMaybeMessage<::protocol::BackupMessage>(Arena*);
template<> ::protocol::Endpoint* Arena::CreateMaybeMessage<::protocol::Endpoint>(Arena*);
template<> ::protocol::FindNeighbours* Arena::CreateMaybeMessage<::protocol::FindNeighbours>(Arena*);
template<> ::protocol::Neighbours* Arena::CreateMaybeMessage<::protocol::Neighbours>(Arena*);
template<> ::protocol::PingMessage* Arena::CreateMaybeMessage<::protocol::PingMessage>(Arena*);
template<> ::protocol::PongMessage* Arena::CreateMaybeMessage<::protocol::PongMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class Endpoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Endpoint) */ {
 public:
  Endpoint();
  virtual ~Endpoint();

  Endpoint(const Endpoint& from);
  Endpoint(Endpoint&& from) noexcept
    : Endpoint() {
    *this = ::std::move(from);
  }

  inline Endpoint& operator=(const Endpoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Endpoint& operator=(Endpoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Endpoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Endpoint* internal_default_instance() {
    return reinterpret_cast<const Endpoint*>(
               &_Endpoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Endpoint& a, Endpoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Endpoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Endpoint* New() const final {
    return CreateMaybeMessage<Endpoint>(nullptr);
  }

  Endpoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Endpoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Endpoint& from);
  void MergeFrom(const Endpoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Endpoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Endpoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kNodeIdFieldNumber = 3,
    kPortFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes nodeId = 3;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const void* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.Endpoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// -------------------------------------------------------------------

class PingMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.PingMessage) */ {
 public:
  PingMessage();
  virtual ~PingMessage();

  PingMessage(const PingMessage& from);
  PingMessage(PingMessage&& from) noexcept
    : PingMessage() {
    *this = ::std::move(from);
  }

  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingMessage& operator=(PingMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingMessage* internal_default_instance() {
    return reinterpret_cast<const PingMessage*>(
               &_PingMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingMessage& a, PingMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PingMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingMessage* New() const final {
    return CreateMaybeMessage<PingMessage>(nullptr);
  }

  PingMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.PingMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kVersionFieldNumber = 3,
  };
  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* release_from();
  ::protocol::Endpoint* mutable_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // .protocol.Endpoint to = 2;
  bool has_to() const;
  void clear_to();
  const ::protocol::Endpoint& to() const;
  ::protocol::Endpoint* release_to();
  ::protocol::Endpoint* mutable_to();
  void set_allocated_to(::protocol::Endpoint* to);

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 version = 3;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.PingMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Endpoint* from_;
  ::protocol::Endpoint* to_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// -------------------------------------------------------------------

class PongMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.PongMessage) */ {
 public:
  PongMessage();
  virtual ~PongMessage();

  PongMessage(const PongMessage& from);
  PongMessage(PongMessage&& from) noexcept
    : PongMessage() {
    *this = ::std::move(from);
  }

  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PongMessage& operator=(PongMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PongMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PongMessage* internal_default_instance() {
    return reinterpret_cast<const PongMessage*>(
               &_PongMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PongMessage& a, PongMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PongMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PongMessage* New() const final {
    return CreateMaybeMessage<PongMessage>(nullptr);
  }

  PongMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PongMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PongMessage& from);
  void MergeFrom(const PongMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PongMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.PongMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kEchoFieldNumber = 2,
  };
  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* release_from();
  ::protocol::Endpoint* mutable_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 echo = 2;
  void clear_echo();
  ::PROTOBUF_NAMESPACE_ID::int32 echo() const;
  void set_echo(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.PongMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Endpoint* from_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 echo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// -------------------------------------------------------------------

class FindNeighbours :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.FindNeighbours) */ {
 public:
  FindNeighbours();
  virtual ~FindNeighbours();

  FindNeighbours(const FindNeighbours& from);
  FindNeighbours(FindNeighbours&& from) noexcept
    : FindNeighbours() {
    *this = ::std::move(from);
  }

  inline FindNeighbours& operator=(const FindNeighbours& from) {
    CopyFrom(from);
    return *this;
  }
  inline FindNeighbours& operator=(FindNeighbours&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FindNeighbours& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindNeighbours* internal_default_instance() {
    return reinterpret_cast<const FindNeighbours*>(
               &_FindNeighbours_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FindNeighbours& a, FindNeighbours& b) {
    a.Swap(&b);
  }
  inline void Swap(FindNeighbours* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FindNeighbours* New() const final {
    return CreateMaybeMessage<FindNeighbours>(nullptr);
  }

  FindNeighbours* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FindNeighbours>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FindNeighbours& from);
  void MergeFrom(const FindNeighbours& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindNeighbours* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.FindNeighbours";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kFromFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // bytes targetId = 2;
  void clear_targetid();
  const std::string& targetid() const;
  void set_targetid(const std::string& value);
  void set_targetid(std::string&& value);
  void set_targetid(const char* value);
  void set_targetid(const void* value, size_t size);
  std::string* mutable_targetid();
  std::string* release_targetid();
  void set_allocated_targetid(std::string* targetid);

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* release_from();
  ::protocol::Endpoint* mutable_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.FindNeighbours)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetid_;
  ::protocol::Endpoint* from_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// -------------------------------------------------------------------

class Neighbours :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Neighbours) */ {
 public:
  Neighbours();
  virtual ~Neighbours();

  Neighbours(const Neighbours& from);
  Neighbours(Neighbours&& from) noexcept
    : Neighbours() {
    *this = ::std::move(from);
  }

  inline Neighbours& operator=(const Neighbours& from) {
    CopyFrom(from);
    return *this;
  }
  inline Neighbours& operator=(Neighbours&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Neighbours& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Neighbours* internal_default_instance() {
    return reinterpret_cast<const Neighbours*>(
               &_Neighbours_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Neighbours& a, Neighbours& b) {
    a.Swap(&b);
  }
  inline void Swap(Neighbours* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Neighbours* New() const final {
    return CreateMaybeMessage<Neighbours>(nullptr);
  }

  Neighbours* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Neighbours>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Neighbours& from);
  void MergeFrom(const Neighbours& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Neighbours* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Neighbours";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNeighboursFieldNumber = 2,
    kFromFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // repeated .protocol.Endpoint neighbours = 2;
  int neighbours_size() const;
  void clear_neighbours();
  ::protocol::Endpoint* mutable_neighbours(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Endpoint >*
      mutable_neighbours();
  const ::protocol::Endpoint& neighbours(int index) const;
  ::protocol::Endpoint* add_neighbours();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Endpoint >&
      neighbours() const;

  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* release_from();
  ::protocol::Endpoint* mutable_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Neighbours)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Endpoint > neighbours_;
  ::protocol::Endpoint* from_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// -------------------------------------------------------------------

class BackupMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BackupMessage) */ {
 public:
  BackupMessage();
  virtual ~BackupMessage();

  BackupMessage(const BackupMessage& from);
  BackupMessage(BackupMessage&& from) noexcept
    : BackupMessage() {
    *this = ::std::move(from);
  }

  inline BackupMessage& operator=(const BackupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupMessage& operator=(BackupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BackupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BackupMessage* internal_default_instance() {
    return reinterpret_cast<const BackupMessage*>(
               &_BackupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BackupMessage& a, BackupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BackupMessage* New() const final {
    return CreateMaybeMessage<BackupMessage>(nullptr);
  }

  BackupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BackupMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BackupMessage& from);
  void MergeFrom(const BackupMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BackupMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fDiscover_2eproto);
    return ::descriptor_table_core_2fDiscover_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // bool flag = 1;
  void clear_flag();
  bool flag() const;
  void set_flag(bool value);

  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.BackupMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fDiscover_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Endpoint

// bytes address = 1;
inline void Endpoint::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Endpoint::address() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.address)
  return address_.GetNoArena();
}
inline void Endpoint::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.address)
}
inline void Endpoint::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.address)
}
inline void Endpoint::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.address)
}
inline void Endpoint::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.address)
}
inline std::string* Endpoint::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Endpoint::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.address)
}

// int32 port = 2;
inline void Endpoint::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Endpoint::port() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.port)
  return port_;
}
inline void Endpoint::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.Endpoint.port)
}

// bytes nodeId = 3;
inline void Endpoint::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Endpoint::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.Endpoint.nodeId)
  return nodeid_.GetNoArena();
}
inline void Endpoint::set_nodeid(const std::string& value) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Endpoint.nodeId)
}
inline void Endpoint::set_nodeid(std::string&& value) {
  
  nodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Endpoint.nodeId)
}
inline void Endpoint::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Endpoint.nodeId)
}
inline void Endpoint::set_nodeid(const void* value, size_t size) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Endpoint.nodeId)
}
inline std::string* Endpoint::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Endpoint.nodeId)
  return nodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Endpoint::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.Endpoint.nodeId)
  
  return nodeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Endpoint::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Endpoint.nodeId)
}

// -------------------------------------------------------------------

// PingMessage

// .protocol.Endpoint from = 1;
inline bool PingMessage::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline void PingMessage::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::protocol::Endpoint& PingMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PingMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* PingMessage::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.from)
  return from_;
}
inline void PingMessage::set_allocated_from(::protocol::Endpoint* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.from)
}

// .protocol.Endpoint to = 2;
inline bool PingMessage::has_to() const {
  return this != internal_default_instance() && to_ != nullptr;
}
inline void PingMessage::clear_to() {
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
}
inline const ::protocol::Endpoint& PingMessage::to() const {
  const ::protocol::Endpoint* p = to_;
  // @@protoc_insertion_point(field_get:protocol.PingMessage.to)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PingMessage::release_to() {
  // @@protoc_insertion_point(field_release:protocol.PingMessage.to)
  
  ::protocol::Endpoint* temp = to_;
  to_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* PingMessage::mutable_to() {
  
  if (to_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    to_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PingMessage.to)
  return to_;
}
inline void PingMessage::set_allocated_to(::protocol::Endpoint* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete to_;
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  to_ = to;
  // @@protoc_insertion_point(field_set_allocated:protocol.PingMessage.to)
}

// int32 version = 3;
inline void PingMessage::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PingMessage::version() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.version)
  return version_;
}
inline void PingMessage::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.version)
}

// int64 timestamp = 4;
inline void PingMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PingMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PingMessage.timestamp)
  return timestamp_;
}
inline void PingMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PingMessage.timestamp)
}

// -------------------------------------------------------------------

// PongMessage

// .protocol.Endpoint from = 1;
inline bool PongMessage::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline void PongMessage::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::protocol::Endpoint& PongMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.PongMessage.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* PongMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.PongMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* PongMessage::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.PongMessage.from)
  return from_;
}
inline void PongMessage::set_allocated_from(::protocol::Endpoint* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocol.PongMessage.from)
}

// int32 echo = 2;
inline void PongMessage::clear_echo() {
  echo_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PongMessage::echo() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.echo)
  return echo_;
}
inline void PongMessage::set_echo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  echo_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.echo)
}

// int64 timestamp = 3;
inline void PongMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PongMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.PongMessage.timestamp)
  return timestamp_;
}
inline void PongMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.PongMessage.timestamp)
}

// -------------------------------------------------------------------

// FindNeighbours

// .protocol.Endpoint from = 1;
inline bool FindNeighbours::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline void FindNeighbours::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::protocol::Endpoint& FindNeighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* FindNeighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* FindNeighbours::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.from)
  return from_;
}
inline void FindNeighbours::set_allocated_from(::protocol::Endpoint* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.from)
}

// bytes targetId = 2;
inline void FindNeighbours::clear_targetid() {
  targetid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FindNeighbours::targetid() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.targetId)
  return targetid_.GetNoArena();
}
inline void FindNeighbours::set_targetid(const std::string& value) {
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.targetId)
}
inline void FindNeighbours::set_targetid(std::string&& value) {
  
  targetid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.FindNeighbours.targetId)
}
inline void FindNeighbours::set_targetid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.FindNeighbours.targetId)
}
inline void FindNeighbours::set_targetid(const void* value, size_t size) {
  
  targetid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.FindNeighbours.targetId)
}
inline std::string* FindNeighbours::mutable_targetid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.FindNeighbours.targetId)
  return targetid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FindNeighbours::release_targetid() {
  // @@protoc_insertion_point(field_release:protocol.FindNeighbours.targetId)
  
  return targetid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FindNeighbours::set_allocated_targetid(std::string* targetid) {
  if (targetid != nullptr) {
    
  } else {
    
  }
  targetid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), targetid);
  // @@protoc_insertion_point(field_set_allocated:protocol.FindNeighbours.targetId)
}

// int64 timestamp = 3;
inline void FindNeighbours::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FindNeighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.FindNeighbours.timestamp)
  return timestamp_;
}
inline void FindNeighbours::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.FindNeighbours.timestamp)
}

// -------------------------------------------------------------------

// Neighbours

// .protocol.Endpoint from = 1;
inline bool Neighbours::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline void Neighbours::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
inline const ::protocol::Endpoint& Neighbours::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.Neighbours.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* Neighbours::release_from() {
  // @@protoc_insertion_point(field_release:protocol.Neighbours.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* Neighbours::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.from)
  return from_;
}
inline void Neighbours::set_allocated_from(::protocol::Endpoint* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete from_;
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocol.Neighbours.from)
}

// repeated .protocol.Endpoint neighbours = 2;
inline int Neighbours::neighbours_size() const {
  return neighbours_.size();
}
inline void Neighbours::clear_neighbours() {
  neighbours_.Clear();
}
inline ::protocol::Endpoint* Neighbours::mutable_neighbours(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Neighbours.neighbours)
  return neighbours_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Endpoint >*
Neighbours::mutable_neighbours() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Neighbours.neighbours)
  return &neighbours_;
}
inline const ::protocol::Endpoint& Neighbours::neighbours(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.neighbours)
  return neighbours_.Get(index);
}
inline ::protocol::Endpoint* Neighbours::add_neighbours() {
  // @@protoc_insertion_point(field_add:protocol.Neighbours.neighbours)
  return neighbours_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Endpoint >&
Neighbours::neighbours() const {
  // @@protoc_insertion_point(field_list:protocol.Neighbours.neighbours)
  return neighbours_;
}

// int64 timestamp = 3;
inline void Neighbours::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Neighbours::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.Neighbours.timestamp)
  return timestamp_;
}
inline void Neighbours::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.Neighbours.timestamp)
}

// -------------------------------------------------------------------

// BackupMessage

// bool flag = 1;
inline void BackupMessage::clear_flag() {
  flag_ = false;
}
inline bool BackupMessage::flag() const {
  // @@protoc_insertion_point(field_get:protocol.BackupMessage.flag)
  return flag_;
}
inline void BackupMessage::set_flag(bool value) {
  
  flag_ = value;
  // @@protoc_insertion_point(field_set:protocol.BackupMessage.flag)
}

// int32 priority = 2;
inline void BackupMessage::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BackupMessage::priority() const {
  // @@protoc_insertion_point(field_get:protocol.BackupMessage.priority)
  return priority_;
}
inline void BackupMessage::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
  // @@protoc_insertion_point(field_set:protocol.BackupMessage.priority)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fDiscover_2eproto
