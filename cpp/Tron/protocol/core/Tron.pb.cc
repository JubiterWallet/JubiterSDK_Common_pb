// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Tron.proto

#include "core/Tron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_AccountResource_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_Frozen_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockHeader_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_raw_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockInventory_BlockId_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChainInventory_BlockId_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fDiscover_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Endpoint_core_2fDiscover_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloMessage_BlockId_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InternalTransaction_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Key_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Permission_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceReceipt_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXInput_raw_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXOutput_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Contract_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Result_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_raw_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransactionInfo_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionInfo_Log_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_core_2fTron_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_authority_core_2fTron_2eproto;
namespace protocol {
class AccountIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccountId> _instance;
} _AccountId_default_instance_;
class VoteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vote> _instance;
} _Vote_default_instance_;
class Proposal_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposal_ParametersEntry_DoNotUse> _instance;
} _Proposal_ParametersEntry_DoNotUse_default_instance_;
class ProposalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Proposal> _instance;
} _Proposal_default_instance_;
class ExchangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Exchange> _instance;
} _Exchange_default_instance_;
class ChainParameters_ChainParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainParameters_ChainParameter> _instance;
} _ChainParameters_ChainParameter_default_instance_;
class ChainParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainParameters> _instance;
} _ChainParameters_default_instance_;
class Account_FrozenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_Frozen> _instance;
} _Account_Frozen_default_instance_;
class Account_AssetEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_AssetEntry_DoNotUse> _instance;
} _Account_AssetEntry_DoNotUse_default_instance_;
class Account_AssetV2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_AssetV2Entry_DoNotUse> _instance;
} _Account_AssetV2Entry_DoNotUse_default_instance_;
class Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_LatestAssetOperationTimeEntry_DoNotUse> _instance;
} _Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_;
class Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_LatestAssetOperationTimeV2Entry_DoNotUse> _instance;
} _Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_;
class Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_FreeAssetNetUsageEntry_DoNotUse> _instance;
} _Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_;
class Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_FreeAssetNetUsageV2Entry_DoNotUse> _instance;
} _Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_;
class Account_AccountResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account_AccountResource> _instance;
} _Account_AccountResource_default_instance_;
class AccountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Account> _instance;
} _Account_default_instance_;
class KeyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Key> _instance;
} _Key_default_instance_;
class DelegatedResourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegatedResource> _instance;
} _DelegatedResource_default_instance_;
class authorityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<authority> _instance;
} _authority_default_instance_;
class PermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Permission> _instance;
} _Permission_default_instance_;
class WitnessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Witness> _instance;
} _Witness_default_instance_;
class VotesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Votes> _instance;
} _Votes_default_instance_;
class TXOutputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXOutput> _instance;
} _TXOutput_default_instance_;
class TXInput_rawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXInput_raw> _instance;
} _TXInput_raw_default_instance_;
class TXInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXInput> _instance;
} _TXInput_default_instance_;
class TXOutputsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TXOutputs> _instance;
} _TXOutputs_default_instance_;
class ResourceReceiptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResourceReceipt> _instance;
} _ResourceReceipt_default_instance_;
class Transaction_ContractDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Contract> _instance;
} _Transaction_Contract_default_instance_;
class Transaction_ResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_Result> _instance;
} _Transaction_Result_default_instance_;
class Transaction_rawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction_raw> _instance;
} _Transaction_raw_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class TransactionInfo_LogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionInfo_Log> _instance;
} _TransactionInfo_Log_default_instance_;
class TransactionInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionInfo> _instance;
} _TransactionInfo_default_instance_;
class TransactionRetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionRet> _instance;
} _TransactionRet_default_instance_;
class TransactionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transactions> _instance;
} _Transactions_default_instance_;
class TransactionSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionSign> _instance;
} _TransactionSign_default_instance_;
class BlockHeader_rawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader_raw> _instance;
} _BlockHeader_raw_default_instance_;
class BlockHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockHeader> _instance;
} _BlockHeader_default_instance_;
class BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Block> _instance;
} _Block_default_instance_;
class ChainInventory_BlockIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainInventory_BlockId> _instance;
} _ChainInventory_BlockId_default_instance_;
class ChainInventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChainInventory> _instance;
} _ChainInventory_default_instance_;
class BlockInventory_BlockIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockInventory_BlockId> _instance;
} _BlockInventory_BlockId_default_instance_;
class BlockInventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockInventory> _instance;
} _BlockInventory_default_instance_;
class InventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Inventory> _instance;
} _Inventory_default_instance_;
class ItemsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Items> _instance;
} _Items_default_instance_;
class DynamicPropertiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicProperties> _instance;
} _DynamicProperties_default_instance_;
class DisconnectMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectMessage> _instance;
} _DisconnectMessage_default_instance_;
class HelloMessage_BlockIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloMessage_BlockId> _instance;
} _HelloMessage_BlockId_default_instance_;
class HelloMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HelloMessage> _instance;
} _HelloMessage_default_instance_;
class InternalTransaction_CallValueInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InternalTransaction_CallValueInfo> _instance;
} _InternalTransaction_CallValueInfo_default_instance_;
class InternalTransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InternalTransaction> _instance;
} _InternalTransaction_default_instance_;
class DelegatedResourceAccountIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DelegatedResourceAccountIndex> _instance;
} _DelegatedResourceAccountIndex_default_instance_;
class NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_CheatWitnessInfoMapEntry_DoNotUse> _instance;
} _NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_;
class NodeInfo_PeerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_PeerInfo> _instance;
} _NodeInfo_PeerInfo_default_instance_;
class NodeInfo_ConfigNodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_ConfigNodeInfo> _instance;
} _NodeInfo_ConfigNodeInfo_default_instance_;
class NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_MachineInfo_MemoryDescInfo> _instance;
} _NodeInfo_MachineInfo_MemoryDescInfo_default_instance_;
class NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_MachineInfo_DeadLockThreadInfo> _instance;
} _NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_;
class NodeInfo_MachineInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo_MachineInfo> _instance;
} _NodeInfo_MachineInfo_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_Account_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_default_instance_;
    new (ptr) ::protocol::Account();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Account::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Account_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_Account_core_2fTron_2eproto}, {
      &scc_info_Vote_core_2fTron_2eproto.base,
      &scc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_Frozen_core_2fTron_2eproto.base,
      &scc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto.base,
      &scc_info_Account_AccountResource_core_2fTron_2eproto.base,
      &scc_info_Permission_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Account_AccountResource_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_AccountResource_default_instance_;
    new (ptr) ::protocol::Account_AccountResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Account_AccountResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Account_AccountResource_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Account_AccountResource_core_2fTron_2eproto}, {
      &scc_info_Account_Frozen_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_AssetEntry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_AssetEntry_DoNotUse();
  }
  ::protocol::Account_AssetEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_AssetV2Entry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_AssetV2Entry_DoNotUse();
  }
  ::protocol::Account_AssetV2Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse();
  }
  ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse();
  }
  ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_Frozen_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_Frozen_default_instance_;
    new (ptr) ::protocol::Account_Frozen();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Account_Frozen::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_Frozen_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_Frozen_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse();
  }
  ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse();
  }
  ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_AccountId_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_AccountId_default_instance_;
    new (ptr) ::protocol::AccountId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::AccountId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccountId_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccountId_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Block_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Block_default_instance_;
    new (ptr) ::protocol::Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Block_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Block_core_2fTron_2eproto}, {
      &scc_info_Transaction_core_2fTron_2eproto.base,
      &scc_info_BlockHeader_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockHeader_default_instance_;
    new (ptr) ::protocol::BlockHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::BlockHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockHeader_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlockHeader_core_2fTron_2eproto}, {
      &scc_info_BlockHeader_raw_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_BlockHeader_raw_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockHeader_raw_default_instance_;
    new (ptr) ::protocol::BlockHeader_raw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::BlockHeader_raw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockHeader_raw_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlockHeader_raw_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_BlockInventory_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockInventory_default_instance_;
    new (ptr) ::protocol::BlockInventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::BlockInventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BlockInventory_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BlockInventory_core_2fTron_2eproto}, {
      &scc_info_BlockInventory_BlockId_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_BlockInventory_BlockId_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_BlockInventory_BlockId_default_instance_;
    new (ptr) ::protocol::BlockInventory_BlockId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::BlockInventory_BlockId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockInventory_BlockId_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_BlockInventory_BlockId_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_ChainInventory_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ChainInventory_default_instance_;
    new (ptr) ::protocol::ChainInventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ChainInventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChainInventory_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChainInventory_core_2fTron_2eproto}, {
      &scc_info_ChainInventory_BlockId_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_ChainInventory_BlockId_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ChainInventory_BlockId_default_instance_;
    new (ptr) ::protocol::ChainInventory_BlockId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ChainInventory_BlockId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChainInventory_BlockId_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChainInventory_BlockId_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_ChainParameters_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ChainParameters_default_instance_;
    new (ptr) ::protocol::ChainParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ChainParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChainParameters_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ChainParameters_core_2fTron_2eproto}, {
      &scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_ChainParameters_ChainParameter_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ChainParameters_ChainParameter_default_instance_;
    new (ptr) ::protocol::ChainParameters_ChainParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ChainParameters_ChainParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ChainParameters_ChainParameter_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_DelegatedResource_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_DelegatedResource_default_instance_;
    new (ptr) ::protocol::DelegatedResource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::DelegatedResource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegatedResource_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelegatedResource_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_DelegatedResourceAccountIndex_default_instance_;
    new (ptr) ::protocol::DelegatedResourceAccountIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::DelegatedResourceAccountIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_DisconnectMessage_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_DisconnectMessage_default_instance_;
    new (ptr) ::protocol::DisconnectMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::DisconnectMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectMessage_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DisconnectMessage_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_DynamicProperties_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_DynamicProperties_default_instance_;
    new (ptr) ::protocol::DynamicProperties();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::DynamicProperties::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicProperties_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DynamicProperties_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Exchange_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Exchange_default_instance_;
    new (ptr) ::protocol::Exchange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Exchange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Exchange_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Exchange_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_HelloMessage_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_HelloMessage_default_instance_;
    new (ptr) ::protocol::HelloMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::HelloMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HelloMessage_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HelloMessage_core_2fTron_2eproto}, {
      &scc_info_Endpoint_core_2fDiscover_2eproto.base,
      &scc_info_HelloMessage_BlockId_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_HelloMessage_BlockId_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_HelloMessage_BlockId_default_instance_;
    new (ptr) ::protocol::HelloMessage_BlockId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::HelloMessage_BlockId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HelloMessage_BlockId_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HelloMessage_BlockId_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_InternalTransaction_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_InternalTransaction_default_instance_;
    new (ptr) ::protocol::InternalTransaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::InternalTransaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InternalTransaction_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InternalTransaction_core_2fTron_2eproto}, {
      &scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_InternalTransaction_CallValueInfo_default_instance_;
    new (ptr) ::protocol::InternalTransaction_CallValueInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::InternalTransaction_CallValueInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Inventory_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Inventory_default_instance_;
    new (ptr) ::protocol::Inventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Inventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Inventory_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Inventory_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Items_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Items_default_instance_;
    new (ptr) ::protocol::Items();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Items::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Items_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Items_core_2fTron_2eproto}, {
      &scc_info_Block_core_2fTron_2eproto.base,
      &scc_info_BlockHeader_core_2fTron_2eproto.base,
      &scc_info_Transaction_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Key_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Key_default_instance_;
    new (ptr) ::protocol::Key();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Key::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Key_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Key_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NodeInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_NodeInfo_core_2fTron_2eproto}, {
      &scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto.base,
      &scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto.base,
      &scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto.base,
      &scc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_;
    new (ptr) ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse();
  }
  ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_ConfigNodeInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo_ConfigNodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo_ConfigNodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_MachineInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_MachineInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo_MachineInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo_MachineInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_NodeInfo_MachineInfo_core_2fTron_2eproto}, {
      &scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto.base,
      &scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_MachineInfo_MemoryDescInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo_MachineInfo_MemoryDescInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo_MachineInfo_MemoryDescInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_PeerInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_NodeInfo_PeerInfo_default_instance_;
    new (ptr) ::protocol::NodeInfo_PeerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::NodeInfo_PeerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NodeInfo_PeerInfo_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Permission_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Permission_default_instance_;
    new (ptr) ::protocol::Permission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Permission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Permission_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Permission_core_2fTron_2eproto}, {
      &scc_info_Key_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Proposal_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Proposal_default_instance_;
    new (ptr) ::protocol::Proposal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Proposal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Proposal_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Proposal_core_2fTron_2eproto}, {
      &scc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Proposal_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::protocol::Proposal_ParametersEntry_DoNotUse();
  }
  ::protocol::Proposal_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_ResourceReceipt_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_ResourceReceipt_default_instance_;
    new (ptr) ::protocol::ResourceReceipt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::ResourceReceipt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResourceReceipt_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ResourceReceipt_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_TXInput_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TXInput_default_instance_;
    new (ptr) ::protocol::TXInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TXInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TXInput_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TXInput_core_2fTron_2eproto}, {
      &scc_info_TXInput_raw_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_TXInput_raw_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TXInput_raw_default_instance_;
    new (ptr) ::protocol::TXInput_raw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TXInput_raw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXInput_raw_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TXInput_raw_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_TXOutput_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TXOutput_default_instance_;
    new (ptr) ::protocol::TXOutput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TXOutput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TXOutput_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TXOutput_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_TXOutputs_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TXOutputs_default_instance_;
    new (ptr) ::protocol::TXOutputs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TXOutputs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TXOutputs_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TXOutputs_core_2fTron_2eproto}, {
      &scc_info_TXOutput_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_default_instance_;
    new (ptr) ::protocol::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Transaction_core_2fTron_2eproto}, {
      &scc_info_Transaction_raw_core_2fTron_2eproto.base,
      &scc_info_Transaction_Result_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Contract_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_Contract_default_instance_;
    new (ptr) ::protocol::Transaction_Contract();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Transaction_Contract::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transaction_Contract_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Transaction_Contract_core_2fTron_2eproto}, {
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,}};

static void InitDefaultsscc_info_Transaction_Result_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_Result_default_instance_;
    new (ptr) ::protocol::Transaction_Result();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Transaction_Result::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_Result_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Transaction_Result_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_raw_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transaction_raw_default_instance_;
    new (ptr) ::protocol::Transaction_raw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Transaction_raw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Transaction_raw_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Transaction_raw_core_2fTron_2eproto}, {
      &scc_info_authority_core_2fTron_2eproto.base,
      &scc_info_Transaction_Contract_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_TransactionInfo_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransactionInfo_default_instance_;
    new (ptr) ::protocol::TransactionInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TransactionInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TransactionInfo_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TransactionInfo_core_2fTron_2eproto}, {
      &scc_info_ResourceReceipt_core_2fTron_2eproto.base,
      &scc_info_TransactionInfo_Log_core_2fTron_2eproto.base,
      &scc_info_InternalTransaction_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_TransactionInfo_Log_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransactionInfo_Log_default_instance_;
    new (ptr) ::protocol::TransactionInfo_Log();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TransactionInfo_Log::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TransactionInfo_Log_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TransactionInfo_Log_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_TransactionRet_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransactionRet_default_instance_;
    new (ptr) ::protocol::TransactionRet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TransactionRet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionRet_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransactionRet_core_2fTron_2eproto}, {
      &scc_info_TransactionInfo_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_TransactionSign_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_TransactionSign_default_instance_;
    new (ptr) ::protocol::TransactionSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::TransactionSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionSign_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TransactionSign_core_2fTron_2eproto}, {
      &scc_info_Transaction_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Transactions_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Transactions_default_instance_;
    new (ptr) ::protocol::Transactions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Transactions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Transactions_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Transactions_core_2fTron_2eproto}, {
      &scc_info_Transaction_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Vote_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Vote_default_instance_;
    new (ptr) ::protocol::Vote();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Vote::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vote_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Vote_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_Votes_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Votes_default_instance_;
    new (ptr) ::protocol::Votes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Votes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Votes_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Votes_core_2fTron_2eproto}, {
      &scc_info_Vote_core_2fTron_2eproto.base,}};

static void InitDefaultsscc_info_Witness_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_Witness_default_instance_;
    new (ptr) ::protocol::Witness();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::Witness::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Witness_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Witness_core_2fTron_2eproto}, {}};

static void InitDefaultsscc_info_authority_core_2fTron_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_authority_default_instance_;
    new (ptr) ::protocol::authority();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::authority::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_authority_core_2fTron_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_authority_core_2fTron_2eproto}, {
      &scc_info_AccountId_core_2fTron_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2fTron_2eproto[59];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_core_2fTron_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2fTron_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2fTron_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::AccountId, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, vote_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Vote, vote_count_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, proposal_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, proposer_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, parameters_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, expiration_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, approvals_),
  PROTOBUF_FIELD_OFFSET(::protocol::Proposal, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, creator_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, first_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, first_token_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, second_token_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Exchange, second_token_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters_ChainParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainParameters, chainparameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, frozen_balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_Frozen, expire_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AssetV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, latest_consume_time_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, acquired_delegated_frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, delegated_frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, storage_limit_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, storage_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account_AccountResource, latest_exchange_storage_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Account, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, balance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, assetv2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, frozen_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, acquired_delegated_frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, delegated_frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, create_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_opration_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, allowance_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_withdraw_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, code_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, is_witness_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, is_committee_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, frozen_supply_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_issued_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, asset_issued_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_asset_operation_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_asset_operation_timev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_asset_net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, free_asset_net_usagev2_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_consume_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, latest_consume_free_time_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, account_resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, codehash_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, owner_permission_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, witness_permission_),
  PROTOBUF_FIELD_OFFSET(::protocol::Account, active_permission_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Key, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Key, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Key, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, from_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, to_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, frozen_balance_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, frozen_balance_for_energy_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, expire_time_for_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResource, expire_time_for_energy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::authority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::authority, account_),
  PROTOBUF_FIELD_OFFSET(::protocol::authority, permission_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, permission_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, threshold_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, parent_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, operations_),
  PROTOBUF_FIELD_OFFSET(::protocol::Permission, keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, votecount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, pubkey_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, url_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, totalproduced_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, totalmissed_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, latestblocknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, latestslotnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::Witness, isjobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, old_votes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Votes, new_votes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, value_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutput, pubkeyhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, txid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, vout_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput_raw, pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::TXInput, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutputs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TXOutputs, outputs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, origin_energy_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, energy_usage_total_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, net_usage_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, net_fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::ResourceReceipt, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, parameter_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, provider_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, contractname_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Contract, permission_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, ret_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, contractret_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, assetissueid_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, withdraw_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, unfreeze_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_received_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_inject_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_withdraw_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_Result, shielded_transaction_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_bytes_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_num_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, ref_block_hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, expiration_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, auths_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, data_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, contract_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, scripts_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction_raw, fee_limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, signature_),
  PROTOBUF_FIELD_OFFSET(::protocol::Transaction, ret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, topics_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo_Log, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, fee_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, contractresult_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, contract_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, receipt_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, log_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, result_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, resmessage_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, assetissueid_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, withdraw_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, unfreeze_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, internal_transactions_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_received_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_inject_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_withdraw_another_amount_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, exchange_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionInfo, shielded_transaction_fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, blocknumber_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, blocktimestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionRet, transactioninfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Transactions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Transactions, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, transaction_),
  PROTOBUF_FIELD_OFFSET(::protocol::TransactionSign, privatekey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, txtrieroot_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, parenthash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, number_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, witness_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, version_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader_raw, accountstateroot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, raw_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockHeader, witness_signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Block, transactions_),
  PROTOBUF_FIELD_OFFSET(::protocol::Block, block_header_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, ids_),
  PROTOBUF_FIELD_OFFSET(::protocol::ChainInventory, remain_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, ids_),
  PROTOBUF_FIELD_OFFSET(::protocol::BlockInventory, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Inventory, ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::Items, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::Items, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, blocks_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, block_headers_),
  PROTOBUF_FIELD_OFFSET(::protocol::Items, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DynamicProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DynamicProperties, last_solidity_block_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DisconnectMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DisconnectMessage, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage_BlockId, number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, from_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, version_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, genesisblockid_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, solidblockid_),
  PROTOBUF_FIELD_OFFSET(::protocol::HelloMessage, headblockid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, callvalue_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction_CallValueInfo, tokenid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, hash_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, caller_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, transferto_address_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, callvalueinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, note_),
  PROTOBUF_FIELD_OFFSET(::protocol::InternalTransaction, rejected_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, account_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, fromaccounts_),
  PROTOBUF_FIELD_OFFSET(::protocol::DelegatedResourceAccountIndex, toaccounts_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, lastsyncblock_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, remainnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, lastblockupdatetime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, syncflag_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, headblocktimewebothhave_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, needsyncfrompeer_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, needsyncfromus_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, host_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, port_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, nodeid_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, connecttime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, avglatency_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, synctofetchsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, synctofetchsizepeeknum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, syncblockrequestedsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, unfetchsynnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, blockinporcsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, headblockwebothhave_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, isactive_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, score_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, nodecount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, inflow_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, disconnecttimes_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, localdisconnectreason_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_PeerInfo, remotedisconnectreason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, codeversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, p2pversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, listenport_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, discoverenable_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, activenodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, passivenodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, sendnodesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, maxconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, sameipmaxconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backuplistenport_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backupmembersize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, backuppriority_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, dbversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, minparticipationrate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, supportconstant_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, mintimeratio_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, maxtimeratio_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, allowcreationofcontracts_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_ConfigNodeInfo, allowadaptiveenergy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, initsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, usesize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, maxsize_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_MemoryDescInfo, userate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, lockname_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, lockowner_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, blocktime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, waittime_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo, stacktrace_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, threadcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, deadlockthreadcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, cpucount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, totalmemory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, freememory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, cpurate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, javaversion_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, osname_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, jvmtotalmemoery_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, jvmfreememory_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, processcpurate_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, memorydescinfolist_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo_MachineInfo, deadlockthreadinfolist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, beginsyncnum_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, block_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, solidityblock_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, currentconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, activeconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, passiveconnectcount_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, totalflow_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, peerinfolist_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, confignodeinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, machineinfo_),
  PROTOBUF_FIELD_OFFSET(::protocol::NodeInfo, cheatwitnessinfomap_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::protocol::AccountId)},
  { 7, -1, sizeof(::protocol::Vote)},
  { 14, 21, sizeof(::protocol::Proposal_ParametersEntry_DoNotUse)},
  { 23, -1, sizeof(::protocol::Proposal)},
  { 35, -1, sizeof(::protocol::Exchange)},
  { 47, -1, sizeof(::protocol::ChainParameters_ChainParameter)},
  { 54, -1, sizeof(::protocol::ChainParameters)},
  { 60, -1, sizeof(::protocol::Account_Frozen)},
  { 67, 74, sizeof(::protocol::Account_AssetEntry_DoNotUse)},
  { 76, 83, sizeof(::protocol::Account_AssetV2Entry_DoNotUse)},
  { 85, 92, sizeof(::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse)},
  { 94, 101, sizeof(::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse)},
  { 103, 110, sizeof(::protocol::Account_FreeAssetNetUsageEntry_DoNotUse)},
  { 112, 119, sizeof(::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse)},
  { 121, -1, sizeof(::protocol::Account_AccountResource)},
  { 134, -1, sizeof(::protocol::Account)},
  { 173, -1, sizeof(::protocol::Key)},
  { 180, -1, sizeof(::protocol::DelegatedResource)},
  { 191, -1, sizeof(::protocol::authority)},
  { 198, -1, sizeof(::protocol::Permission)},
  { 210, -1, sizeof(::protocol::Witness)},
  { 224, -1, sizeof(::protocol::Votes)},
  { 232, -1, sizeof(::protocol::TXOutput)},
  { 239, -1, sizeof(::protocol::TXInput_raw)},
  { 247, -1, sizeof(::protocol::TXInput)},
  { 254, -1, sizeof(::protocol::TXOutputs)},
  { 260, -1, sizeof(::protocol::ResourceReceipt)},
  { 272, -1, sizeof(::protocol::Transaction_Contract)},
  { 282, -1, sizeof(::protocol::Transaction_Result)},
  { 298, -1, sizeof(::protocol::Transaction_raw)},
  { 313, -1, sizeof(::protocol::Transaction)},
  { 321, -1, sizeof(::protocol::TransactionInfo_Log)},
  { 329, -1, sizeof(::protocol::TransactionInfo)},
  { 353, -1, sizeof(::protocol::TransactionRet)},
  { 361, -1, sizeof(::protocol::Transactions)},
  { 367, -1, sizeof(::protocol::TransactionSign)},
  { 374, -1, sizeof(::protocol::BlockHeader_raw)},
  { 387, -1, sizeof(::protocol::BlockHeader)},
  { 394, -1, sizeof(::protocol::Block)},
  { 401, -1, sizeof(::protocol::ChainInventory_BlockId)},
  { 408, -1, sizeof(::protocol::ChainInventory)},
  { 415, -1, sizeof(::protocol::BlockInventory_BlockId)},
  { 422, -1, sizeof(::protocol::BlockInventory)},
  { 429, -1, sizeof(::protocol::Inventory)},
  { 436, -1, sizeof(::protocol::Items)},
  { 445, -1, sizeof(::protocol::DynamicProperties)},
  { 451, -1, sizeof(::protocol::DisconnectMessage)},
  { 457, -1, sizeof(::protocol::HelloMessage_BlockId)},
  { 464, -1, sizeof(::protocol::HelloMessage)},
  { 475, -1, sizeof(::protocol::InternalTransaction_CallValueInfo)},
  { 482, -1, sizeof(::protocol::InternalTransaction)},
  { 493, -1, sizeof(::protocol::DelegatedResourceAccountIndex)},
  { 501, 508, sizeof(::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse)},
  { 510, -1, sizeof(::protocol::NodeInfo_PeerInfo)},
  { 540, -1, sizeof(::protocol::NodeInfo_ConfigNodeInfo)},
  { 564, -1, sizeof(::protocol::NodeInfo_MachineInfo_MemoryDescInfo)},
  { 574, -1, sizeof(::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo)},
  { 586, -1, sizeof(::protocol::NodeInfo_MachineInfo)},
  { 604, -1, sizeof(::protocol::NodeInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_AccountId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Vote_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Proposal_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Proposal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Exchange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainParameters_ChainParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_Frozen_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AssetEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AssetV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_AccountResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Account_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Key_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_authority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Permission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Witness_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Votes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXOutput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXInput_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TXOutputs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ResourceReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_Contract_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_Result_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionInfo_Log_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Transactions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_TransactionSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_raw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainInventory_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_ChainInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockInventory_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_BlockInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Inventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_Items_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DynamicProperties_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DisconnectMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_HelloMessage_BlockId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_HelloMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_InternalTransaction_CallValueInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_InternalTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_DelegatedResourceAccountIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_PeerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_ConfigNodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_MemoryDescInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_MachineInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_NodeInfo_default_instance_),
};

const char descriptor_table_protodef_core_2fTron_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017core/Tron.proto\022\010protocol\032\031google/prot"
  "obuf/any.proto\032\023core/Discover.proto\"*\n\tA"
  "ccountId\022\014\n\004name\030\001 \001(\014\022\017\n\007address\030\002 \001(\014\""
  "0\n\004Vote\022\024\n\014vote_address\030\001 \001(\014\022\022\n\nvote_co"
  "unt\030\002 \001(\003\"\321\002\n\010Proposal\022\023\n\013proposal_id\030\001 "
  "\001(\003\022\030\n\020proposer_address\030\002 \001(\014\0226\n\nparamet"
  "ers\030\003 \003(\0132\".protocol.Proposal.Parameters"
  "Entry\022\027\n\017expiration_time\030\004 \001(\003\022\023\n\013create"
  "_time\030\005 \001(\003\022\021\n\tapprovals\030\006 \003(\014\022\'\n\005state\030"
  "\007 \001(\0162\030.protocol.Proposal.State\0321\n\017Param"
  "etersEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005value\030\002 \001(\003:\002"
  "8\001\"A\n\005State\022\013\n\007PENDING\020\000\022\017\n\013DISAPPROVED\020"
  "\001\022\014\n\010APPROVED\020\002\022\014\n\010CANCELED\020\003\"\271\001\n\010Exchan"
  "ge\022\023\n\013exchange_id\030\001 \001(\003\022\027\n\017creator_addre"
  "ss\030\002 \001(\014\022\023\n\013create_time\030\003 \001(\003\022\026\n\016first_t"
  "oken_id\030\006 \001(\014\022\033\n\023first_token_balance\030\007 \001"
  "(\003\022\027\n\017second_token_id\030\010 \001(\014\022\034\n\024second_to"
  "ken_balance\030\t \001(\003\"\201\001\n\017ChainParameters\022@\n"
  "\016chainParameter\030\001 \003(\0132(.protocol.ChainPa"
  "rameters.ChainParameter\032,\n\016ChainParamete"
  "r\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003\"\360\017\n\007Accoun"
  "t\022\024\n\014account_name\030\001 \001(\014\022#\n\004type\030\002 \001(\0162\025."
  "protocol.AccountType\022\017\n\007address\030\003 \001(\014\022\017\n"
  "\007balance\030\004 \001(\003\022\035\n\005votes\030\005 \003(\0132\016.protocol"
  ".Vote\022+\n\005asset\030\006 \003(\0132\034.protocol.Account."
  "AssetEntry\022/\n\007assetV2\0308 \003(\0132\036.protocol.A"
  "ccount.AssetV2Entry\022(\n\006frozen\030\007 \003(\0132\030.pr"
  "otocol.Account.Frozen\022\021\n\tnet_usage\030\010 \001(\003"
  "\0227\n/acquired_delegated_frozen_balance_fo"
  "r_bandwidth\030) \001(\003\022.\n&delegated_frozen_ba"
  "lance_for_bandwidth\030* \001(\003\022\023\n\013create_time"
  "\030\t \001(\003\022\034\n\024latest_opration_time\030\n \001(\003\022\021\n\t"
  "allowance\030\013 \001(\003\022\034\n\024latest_withdraw_time\030"
  "\014 \001(\003\022\014\n\004code\030\r \001(\014\022\022\n\nis_witness\030\016 \001(\010\022"
  "\024\n\014is_committee\030\017 \001(\010\022/\n\rfrozen_supply\030\020"
  " \003(\0132\030.protocol.Account.Frozen\022\031\n\021asset_"
  "issued_name\030\021 \001(\014\022\027\n\017asset_issued_ID\0309 \001"
  "(\014\022T\n\033latest_asset_operation_time\030\022 \003(\0132"
  "/.protocol.Account.LatestAssetOperationT"
  "imeEntry\022X\n\035latest_asset_operation_timeV"
  "2\030: \003(\01321.protocol.Account.LatestAssetOp"
  "erationTimeV2Entry\022\026\n\016free_net_usage\030\023 \001"
  "(\003\022F\n\024free_asset_net_usage\030\024 \003(\0132(.proto"
  "col.Account.FreeAssetNetUsageEntry\022J\n\026fr"
  "ee_asset_net_usageV2\030; \003(\0132*.protocol.Ac"
  "count.FreeAssetNetUsageV2Entry\022\033\n\023latest"
  "_consume_time\030\025 \001(\003\022 \n\030latest_consume_fr"
  "ee_time\030\026 \001(\003\022\022\n\naccount_id\030\027 \001(\014\022;\n\020acc"
  "ount_resource\030\032 \001(\0132!.protocol.Account.A"
  "ccountResource\022\020\n\010codeHash\030\036 \001(\014\022.\n\020owne"
  "r_permission\030\037 \001(\0132\024.protocol.Permission"
  "\0220\n\022witness_permission\030  \001(\0132\024.protocol."
  "Permission\022/\n\021active_permission\030! \003(\0132\024."
  "protocol.Permission\0325\n\006Frozen\022\026\n\016frozen_"
  "balance\030\001 \001(\003\022\023\n\013expire_time\030\002 \001(\003\032,\n\nAs"
  "setEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001"
  "\032.\n\014AssetV2Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\003:\0028\001\032\?\n\035LatestAssetOperationTimeEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032A\n\037Lat"
  "estAssetOperationTimeV2Entry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\003:\0028\001\0328\n\026FreeAssetNetUsag"
  "eEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\032:"
  "\n\030FreeAssetNetUsageV2Entry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\003:\0028\001\032\303\002\n\017AccountResource\022\024"
  "\n\014energy_usage\030\001 \001(\003\022;\n\031frozen_balance_f"
  "or_energy\030\002 \001(\0132\030.protocol.Account.Froze"
  "n\022&\n\036latest_consume_time_for_energy\030\003 \001("
  "\003\0224\n,acquired_delegated_frozen_balance_f"
  "or_energy\030\004 \001(\003\022+\n#delegated_frozen_bala"
  "nce_for_energy\030\005 \001(\003\022\025\n\rstorage_limit\030\006 "
  "\001(\003\022\025\n\rstorage_usage\030\007 \001(\003\022$\n\034latest_exc"
  "hange_storage_time\030\010 \001(\003\"&\n\003Key\022\017\n\007addre"
  "ss\030\001 \001(\014\022\016\n\006weight\030\002 \001(\003\"\271\001\n\021DelegatedRe"
  "source\022\014\n\004from\030\001 \001(\014\022\n\n\002to\030\002 \001(\014\022$\n\034froz"
  "en_balance_for_bandwidth\030\003 \001(\003\022!\n\031frozen"
  "_balance_for_energy\030\004 \001(\003\022!\n\031expire_time"
  "_for_bandwidth\030\005 \001(\003\022\036\n\026expire_time_for_"
  "energy\030\006 \001(\003\"J\n\tauthority\022$\n\007account\030\001 \001"
  "(\0132\023.protocol.AccountId\022\027\n\017permission_na"
  "me\030\002 \001(\014\"\361\001\n\nPermission\0221\n\004type\030\001 \001(\0162#."
  "protocol.Permission.PermissionType\022\n\n\002id"
  "\030\002 \001(\005\022\027\n\017permission_name\030\003 \001(\t\022\021\n\tthres"
  "hold\030\004 \001(\003\022\021\n\tparent_id\030\005 \001(\005\022\022\n\noperati"
  "ons\030\006 \001(\014\022\033\n\004keys\030\007 \003(\0132\r.protocol.Key\"4"
  "\n\016PermissionType\022\t\n\005Owner\020\000\022\013\n\007Witness\020\001"
  "\022\n\n\006Active\020\002\"\265\001\n\007Witness\022\017\n\007address\030\001 \001("
  "\014\022\021\n\tvoteCount\030\002 \001(\003\022\016\n\006pubKey\030\003 \001(\014\022\013\n\003"
  "url\030\004 \001(\t\022\025\n\rtotalProduced\030\005 \001(\003\022\023\n\013tota"
  "lMissed\030\006 \001(\003\022\026\n\016latestBlockNum\030\007 \001(\003\022\025\n"
  "\rlatestSlotNum\030\010 \001(\003\022\016\n\006isJobs\030\t \001(\010\"^\n\005"
  "Votes\022\017\n\007address\030\001 \001(\014\022!\n\told_votes\030\002 \003("
  "\0132\016.protocol.Vote\022!\n\tnew_votes\030\003 \003(\0132\016.p"
  "rotocol.Vote\"-\n\010TXOutput\022\r\n\005value\030\001 \001(\003\022"
  "\022\n\npubKeyHash\030\002 \001(\014\"x\n\007TXInput\022\'\n\010raw_da"
  "ta\030\001 \001(\0132\025.protocol.TXInput.raw\022\021\n\tsigna"
  "ture\030\004 \001(\014\0321\n\003raw\022\014\n\004txID\030\001 \001(\014\022\014\n\004vout\030"
  "\002 \001(\003\022\016\n\006pubKey\030\003 \001(\014\"0\n\tTXOutputs\022#\n\007ou"
  "tputs\030\001 \003(\0132\022.protocol.TXOutput\"\325\001\n\017Reso"
  "urceReceipt\022\024\n\014energy_usage\030\001 \001(\003\022\022\n\nene"
  "rgy_fee\030\002 \001(\003\022\033\n\023origin_energy_usage\030\003 \001"
  "(\003\022\032\n\022energy_usage_total\030\004 \001(\003\022\021\n\tnet_us"
  "age\030\005 \001(\003\022\017\n\007net_fee\030\006 \001(\003\022;\n\006result\030\007 \001"
  "(\0162+.protocol.Transaction.Result.contrac"
  "tResult\"\210\021\n\013Transaction\022+\n\010raw_data\030\001 \001("
  "\0132\031.protocol.Transaction.raw\022\021\n\tsignatur"
  "e\030\002 \003(\014\022)\n\003ret\030\005 \003(\0132\034.protocol.Transact"
  "ion.Result\032\275\010\n\010Contract\0229\n\004type\030\001 \001(\0162+."
  "protocol.Transaction.Contract.ContractTy"
  "pe\022\'\n\tparameter\030\002 \001(\0132\024.google.protobuf."
  "Any\022\020\n\010provider\030\003 \001(\014\022\024\n\014ContractName\030\004 "
  "\001(\014\022\025\n\rPermission_id\030\005 \001(\005\"\215\007\n\014ContractT"
  "ype\022\031\n\025AccountCreateContract\020\000\022\024\n\020Transf"
  "erContract\020\001\022\031\n\025TransferAssetContract\020\002\022"
  "\025\n\021VoteAssetContract\020\003\022\027\n\023VoteWitnessCon"
  "tract\020\004\022\031\n\025WitnessCreateContract\020\005\022\026\n\022As"
  "setIssueContract\020\006\022\031\n\025WitnessUpdateContr"
  "act\020\010\022!\n\035ParticipateAssetIssueContract\020\t"
  "\022\031\n\025AccountUpdateContract\020\n\022\031\n\025FreezeBal"
  "anceContract\020\013\022\033\n\027UnfreezeBalanceContrac"
  "t\020\014\022\033\n\027WithdrawBalanceContract\020\r\022\031\n\025Unfr"
  "eezeAssetContract\020\016\022\027\n\023UpdateAssetContra"
  "ct\020\017\022\032\n\026ProposalCreateContract\020\020\022\033\n\027Prop"
  "osalApproveContract\020\021\022\032\n\026ProposalDeleteC"
  "ontract\020\022\022\030\n\024SetAccountIdContract\020\023\022\022\n\016C"
  "ustomContract\020\024\022\027\n\023CreateSmartContract\020\036"
  "\022\030\n\024TriggerSmartContract\020\037\022\017\n\013GetContrac"
  "t\020 \022\031\n\025UpdateSettingContract\020!\022\032\n\026Exchan"
  "geCreateContract\020)\022\032\n\026ExchangeInjectCont"
  "ract\020*\022\034\n\030ExchangeWithdrawContract\020+\022\037\n\033"
  "ExchangeTransactionContract\020,\022\035\n\031UpdateE"
  "nergyLimitContract\020-\022#\n\037AccountPermissio"
  "nUpdateContract\020.\022\024\n\020ClearABIContract\0200\022"
  "\033\n\027UpdateBrokerageContract\0201\022\034\n\030Shielded"
  "TransferContract\0203\032\316\005\n\006Result\022\013\n\003fee\030\001 \001"
  "(\003\022.\n\003ret\030\002 \001(\0162!.protocol.Transaction.R"
  "esult.code\022@\n\013contractRet\030\003 \001(\0162+.protoc"
  "ol.Transaction.Result.contractResult\022\024\n\014"
  "assetIssueID\030\016 \001(\t\022\027\n\017withdraw_amount\030\017 "
  "\001(\003\022\027\n\017unfreeze_amount\030\020 \001(\003\022 \n\030exchange"
  "_received_amount\030\022 \001(\003\022&\n\036exchange_injec"
  "t_another_amount\030\023 \001(\003\022(\n exchange_withd"
  "raw_another_amount\030\024 \001(\003\022\023\n\013exchange_id\030"
  "\025 \001(\003\022 \n\030shielded_transaction_fee\030\026 \001(\003\""
  "\036\n\004code\022\n\n\006SUCESS\020\000\022\n\n\006FAILED\020\001\"\261\002\n\016cont"
  "ractResult\022\013\n\007DEFAULT\020\000\022\013\n\007SUCCESS\020\001\022\n\n\006"
  "REVERT\020\002\022\030\n\024BAD_JUMP_DESTINATION\020\003\022\021\n\rOU"
  "T_OF_MEMORY\020\004\022\030\n\024PRECOMPILED_CONTRACT\020\005\022"
  "\023\n\017STACK_TOO_SMALL\020\006\022\023\n\017STACK_TOO_LARGE\020"
  "\007\022\025\n\021ILLEGAL_OPERATION\020\010\022\022\n\016STACK_OVERFL"
  "OW\020\t\022\021\n\rOUT_OF_ENERGY\020\n\022\017\n\013OUT_OF_TIME\020\013"
  "\022\027\n\023JVM_STACK_OVER_FLOW\020\014\022\013\n\007UNKNOWN\020\r\022\023"
  "\n\017TRANSFER_FAILED\020\016\032\374\001\n\003raw\022\027\n\017ref_block"
  "_bytes\030\001 \001(\014\022\025\n\rref_block_num\030\003 \001(\003\022\026\n\016r"
  "ef_block_hash\030\004 \001(\014\022\022\n\nexpiration\030\010 \001(\003\022"
  "\"\n\005auths\030\t \003(\0132\023.protocol.authority\022\014\n\004d"
  "ata\030\n \001(\014\0220\n\010contract\030\013 \003(\0132\036.protocol.T"
  "ransaction.Contract\022\017\n\007scripts\030\014 \001(\014\022\021\n\t"
  "timestamp\030\016 \001(\003\022\021\n\tfee_limit\030\022 \001(\003\"\254\005\n\017T"
  "ransactionInfo\022\n\n\002id\030\001 \001(\014\022\013\n\003fee\030\002 \001(\003\022"
  "\023\n\013blockNumber\030\003 \001(\003\022\026\n\016blockTimeStamp\030\004"
  " \001(\003\022\026\n\016contractResult\030\005 \003(\014\022\030\n\020contract"
  "_address\030\006 \001(\014\022*\n\007receipt\030\007 \001(\0132\031.protoc"
  "ol.ResourceReceipt\022*\n\003log\030\010 \003(\0132\035.protoc"
  "ol.TransactionInfo.Log\022.\n\006result\030\t \001(\0162\036"
  ".protocol.TransactionInfo.code\022\022\n\nresMes"
  "sage\030\n \001(\014\022\024\n\014assetIssueID\030\016 \001(\t\022\027\n\017with"
  "draw_amount\030\017 \001(\003\022\027\n\017unfreeze_amount\030\020 \001"
  "(\003\022<\n\025internal_transactions\030\021 \003(\0132\035.prot"
  "ocol.InternalTransaction\022 \n\030exchange_rec"
  "eived_amount\030\022 \001(\003\022&\n\036exchange_inject_an"
  "other_amount\030\023 \001(\003\022(\n exchange_withdraw_"
  "another_amount\030\024 \001(\003\022\023\n\013exchange_id\030\025 \001("
  "\003\022 \n\030shielded_transaction_fee\030\026 \001(\003\0324\n\003L"
  "og\022\017\n\007address\030\001 \001(\014\022\016\n\006topics\030\002 \003(\014\022\014\n\004d"
  "ata\030\003 \001(\014\"\036\n\004code\022\n\n\006SUCESS\020\000\022\n\n\006FAILED\020"
  "\001\"q\n\016TransactionRet\022\023\n\013blockNumber\030\001 \001(\003"
  "\022\026\n\016blockTimeStamp\030\002 \001(\003\0222\n\017transactioni"
  "nfo\030\003 \003(\0132\031.protocol.TransactionInfo\";\n\014"
  "Transactions\022+\n\014transactions\030\001 \003(\0132\025.pro"
  "tocol.Transaction\"Q\n\017TransactionSign\022*\n\013"
  "transaction\030\001 \001(\0132\025.protocol.Transaction"
  "\022\022\n\nprivateKey\030\002 \001(\014\"\200\002\n\013BlockHeader\022+\n\010"
  "raw_data\030\001 \001(\0132\031.protocol.BlockHeader.ra"
  "w\022\031\n\021witness_signature\030\002 \001(\014\032\250\001\n\003raw\022\021\n\t"
  "timestamp\030\001 \001(\003\022\022\n\ntxTrieRoot\030\002 \001(\014\022\022\n\np"
  "arentHash\030\003 \001(\014\022\016\n\006number\030\007 \001(\003\022\022\n\nwitne"
  "ss_id\030\010 \001(\003\022\027\n\017witness_address\030\t \001(\014\022\017\n\007"
  "version\030\n \001(\005\022\030\n\020accountStateRoot\030\013 \001(\014\""
  "a\n\005Block\022+\n\014transactions\030\001 \003(\0132\025.protoco"
  "l.Transaction\022+\n\014block_header\030\002 \001(\0132\025.pr"
  "otocol.BlockHeader\"|\n\016ChainInventory\022-\n\003"
  "ids\030\001 \003(\0132 .protocol.ChainInventory.Bloc"
  "kId\022\022\n\nremain_num\030\002 \001(\003\032\'\n\007BlockId\022\014\n\004ha"
  "sh\030\001 \001(\014\022\016\n\006number\030\002 \001(\003\"\277\001\n\016BlockInvent"
  "ory\022-\n\003ids\030\001 \003(\0132 .protocol.BlockInvento"
  "ry.BlockId\022+\n\004type\030\002 \001(\0162\035.protocol.Bloc"
  "kInventory.Type\032\'\n\007BlockId\022\014\n\004hash\030\001 \001(\014"
  "\022\016\n\006number\030\002 \001(\003\"(\n\004Type\022\010\n\004SYNC\020\000\022\013\n\007AD"
  "VTISE\020\001\022\t\n\005FETCH\020\002\"n\n\tInventory\022/\n\004type\030"
  "\001 \001(\0162!.protocol.Inventory.InventoryType"
  "\022\013\n\003ids\030\002 \003(\014\"#\n\rInventoryType\022\007\n\003TRX\020\000\022"
  "\t\n\005BLOCK\020\001\"\345\001\n\005Items\022&\n\004type\030\001 \001(\0162\030.pro"
  "tocol.Items.ItemType\022\037\n\006blocks\030\002 \003(\0132\017.p"
  "rotocol.Block\022,\n\rblock_headers\030\003 \003(\0132\025.p"
  "rotocol.BlockHeader\022+\n\014transactions\030\004 \003("
  "\0132\025.protocol.Transaction\"8\n\010ItemType\022\007\n\003"
  "ERR\020\000\022\007\n\003TRX\020\001\022\t\n\005BLOCK\020\002\022\017\n\013BLOCKHEADER"
  "\020\003\"4\n\021DynamicProperties\022\037\n\027last_solidity"
  "_block_num\030\001 \001(\003\"9\n\021DisconnectMessage\022$\n"
  "\006reason\030\001 \001(\0162\024.protocol.ReasonCode\"\240\002\n\014"
  "HelloMessage\022 \n\004from\030\001 \001(\0132\022.protocol.En"
  "dpoint\022\017\n\007version\030\002 \001(\005\022\021\n\ttimestamp\030\003 \001"
  "(\003\0226\n\016genesisBlockId\030\004 \001(\0132\036.protocol.He"
  "lloMessage.BlockId\0224\n\014solidBlockId\030\005 \001(\013"
  "2\036.protocol.HelloMessage.BlockId\0223\n\013head"
  "BlockId\030\006 \001(\0132\036.protocol.HelloMessage.Bl"
  "ockId\032\'\n\007BlockId\022\014\n\004hash\030\001 \001(\014\022\016\n\006number"
  "\030\002 \001(\003\"\360\001\n\023InternalTransaction\022\014\n\004hash\030\001"
  " \001(\014\022\026\n\016caller_address\030\002 \001(\014\022\032\n\022transfer"
  "To_address\030\003 \001(\014\022B\n\rcallValueInfo\030\004 \003(\0132"
  "+.protocol.InternalTransaction.CallValue"
  "Info\022\014\n\004note\030\005 \001(\014\022\020\n\010rejected\030\006 \001(\010\0323\n\r"
  "CallValueInfo\022\021\n\tcallValue\030\001 \001(\003\022\017\n\007toke"
  "nId\030\002 \001(\t\"Z\n\035DelegatedResourceAccountInd"
  "ex\022\017\n\007account\030\001 \001(\014\022\024\n\014fromAccounts\030\002 \003("
  "\014\022\022\n\ntoAccounts\030\003 \003(\014\"\240\021\n\010NodeInfo\022\024\n\014be"
  "ginSyncNum\030\001 \001(\003\022\r\n\005block\030\002 \001(\t\022\025\n\rsolid"
  "ityBlock\030\003 \001(\t\022\033\n\023currentConnectCount\030\004 "
  "\001(\005\022\032\n\022activeConnectCount\030\005 \001(\005\022\033\n\023passi"
  "veConnectCount\030\006 \001(\005\022\021\n\ttotalFlow\030\007 \001(\003\022"
  "1\n\014peerInfoList\030\010 \003(\0132\033.protocol.NodeInf"
  "o.PeerInfo\0229\n\016configNodeInfo\030\t \001(\0132!.pro"
  "tocol.NodeInfo.ConfigNodeInfo\0223\n\013machine"
  "Info\030\n \001(\0132\036.protocol.NodeInfo.MachineIn"
  "fo\022H\n\023cheatWitnessInfoMap\030\013 \003(\0132+.protoc"
  "ol.NodeInfo.CheatWitnessInfoMapEntry\032:\n\030"
  "CheatWitnessInfoMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t:\0028\001\032\315\004\n\010PeerInfo\022\025\n\rlastSyn"
  "cBlock\030\001 \001(\t\022\021\n\tremainNum\030\002 \001(\003\022\033\n\023lastB"
  "lockUpdateTime\030\003 \001(\003\022\020\n\010syncFlag\030\004 \001(\010\022\037"
  "\n\027headBlockTimeWeBothHave\030\005 \001(\003\022\030\n\020needS"
  "yncFromPeer\030\006 \001(\010\022\026\n\016needSyncFromUs\030\007 \001("
  "\010\022\014\n\004host\030\010 \001(\t\022\014\n\004port\030\t \001(\005\022\016\n\006nodeId\030"
  "\n \001(\t\022\023\n\013connectTime\030\013 \001(\003\022\022\n\navgLatency"
  "\030\014 \001(\001\022\027\n\017syncToFetchSize\030\r \001(\005\022\036\n\026syncT"
  "oFetchSizePeekNum\030\016 \001(\003\022\036\n\026syncBlockRequ"
  "estedSize\030\017 \001(\005\022\025\n\runFetchSynNum\030\020 \001(\003\022\027"
  "\n\017blockInPorcSize\030\021 \001(\005\022\033\n\023headBlockWeBo"
  "thHave\030\022 \001(\t\022\020\n\010isActive\030\023 \001(\010\022\r\n\005score\030"
  "\024 \001(\005\022\021\n\tnodeCount\030\025 \001(\005\022\016\n\006inFlow\030\026 \001(\003"
  "\022\027\n\017disconnectTimes\030\027 \001(\005\022\035\n\025localDiscon"
  "nectReason\030\030 \001(\t\022\036\n\026remoteDisconnectReas"
  "on\030\031 \001(\t\032\345\003\n\016ConfigNodeInfo\022\023\n\013codeVersi"
  "on\030\001 \001(\t\022\022\n\np2pVersion\030\002 \001(\t\022\022\n\nlistenPo"
  "rt\030\003 \001(\005\022\026\n\016discoverEnable\030\004 \001(\010\022\026\n\016acti"
  "veNodeSize\030\005 \001(\005\022\027\n\017passiveNodeSize\030\006 \001("
  "\005\022\024\n\014sendNodeSize\030\007 \001(\005\022\027\n\017maxConnectCou"
  "nt\030\010 \001(\005\022\035\n\025sameIpMaxConnectCount\030\t \001(\005\022"
  "\030\n\020backupListenPort\030\n \001(\005\022\030\n\020backupMembe"
  "rSize\030\013 \001(\005\022\026\n\016backupPriority\030\014 \001(\005\022\021\n\td"
  "bVersion\030\r \001(\005\022\034\n\024minParticipationRate\030\016"
  " \001(\005\022\027\n\017supportConstant\030\017 \001(\010\022\024\n\014minTime"
  "Ratio\030\020 \001(\001\022\024\n\014maxTimeRatio\030\021 \001(\001\022 \n\030all"
  "owCreationOfContracts\030\022 \001(\003\022\033\n\023allowAdap"
  "tiveEnergy\030\023 \001(\003\032\215\005\n\013MachineInfo\022\023\n\013thre"
  "adCount\030\001 \001(\005\022\033\n\023deadLockThreadCount\030\002 \001"
  "(\005\022\020\n\010cpuCount\030\003 \001(\005\022\023\n\013totalMemory\030\004 \001("
  "\003\022\022\n\nfreeMemory\030\005 \001(\003\022\017\n\007cpuRate\030\006 \001(\001\022\023"
  "\n\013javaVersion\030\007 \001(\t\022\016\n\006osName\030\010 \001(\t\022\027\n\017j"
  "vmTotalMemoery\030\t \001(\003\022\025\n\rjvmFreeMemory\030\n "
  "\001(\003\022\026\n\016processCpuRate\030\013 \001(\001\022I\n\022memoryDes"
  "cInfoList\030\014 \003(\0132-.protocol.NodeInfo.Mach"
  "ineInfo.MemoryDescInfo\022Q\n\026deadLockThread"
  "InfoList\030\r \003(\01321.protocol.NodeInfo.Machi"
  "neInfo.DeadLockThreadInfo\032c\n\016MemoryDescI"
  "nfo\022\014\n\004name\030\001 \001(\t\022\020\n\010initSize\030\002 \001(\003\022\017\n\007u"
  "seSize\030\003 \001(\003\022\017\n\007maxSize\030\004 \001(\003\022\017\n\007useRate"
  "\030\005 \001(\001\032\217\001\n\022DeadLockThreadInfo\022\014\n\004name\030\001 "
  "\001(\t\022\020\n\010lockName\030\002 \001(\t\022\021\n\tlockOwner\030\003 \001(\t"
  "\022\r\n\005state\030\004 \001(\t\022\021\n\tblockTime\030\005 \001(\003\022\020\n\010wa"
  "itTime\030\006 \001(\003\022\022\n\nstackTrace\030\007 \001(\t*7\n\013Acco"
  "untType\022\n\n\006Normal\020\000\022\016\n\nAssetIssue\020\001\022\014\n\010C"
  "ontract\020\002*\307\003\n\nReasonCode\022\r\n\tREQUESTED\020\000\022"
  "\020\n\014BAD_PROTOCOL\020\002\022\022\n\016TOO_MANY_PEERS\020\004\022\022\n"
  "\016DUPLICATE_PEER\020\005\022\031\n\025INCOMPATIBLE_PROTOC"
  "OL\020\006\022\021\n\rNULL_IDENTITY\020\007\022\020\n\014PEER_QUITING\020"
  "\010\022\027\n\023UNEXPECTED_IDENTITY\020\t\022\022\n\016LOCAL_IDEN"
  "TITY\020\n\022\020\n\014PING_TIMEOUT\020\013\022\017\n\013USER_REASON\020"
  "\020\022\t\n\005RESET\020\021\022\r\n\tSYNC_FAIL\020\022\022\016\n\nFETCH_FAI"
  "L\020\023\022\n\n\006BAD_TX\020\024\022\r\n\tBAD_BLOCK\020\025\022\n\n\006FORKED"
  "\020\026\022\016\n\nUNLINKABLE\020\027\022\030\n\024INCOMPATIBLE_VERSI"
  "ON\020\030\022\026\n\022INCOMPATIBLE_CHAIN\020\031\022\014\n\010TIME_OUT"
  "\020 \022\020\n\014CONNECT_FAIL\020!\022\037\n\033TOO_MANY_PEERS_W"
  "ITH_SAME_IP\020\"\022\014\n\007UNKNOWN\020\377\001BF\n\017org.tron."
  "protosB\010ProtocolZ)github.com/tronprotoco"
  "l/grpc-gateway/coreb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_core_2fTron_2eproto_deps[2] = {
  &::descriptor_table_core_2fDiscover_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_core_2fTron_2eproto_sccs[59] = {
  &scc_info_Account_core_2fTron_2eproto.base,
  &scc_info_Account_AccountResource_core_2fTron_2eproto.base,
  &scc_info_Account_AssetEntry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_Account_AssetV2Entry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_Account_FreeAssetNetUsageEntry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_Account_FreeAssetNetUsageV2Entry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_Account_Frozen_core_2fTron_2eproto.base,
  &scc_info_Account_LatestAssetOperationTimeEntry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_Account_LatestAssetOperationTimeV2Entry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_AccountId_core_2fTron_2eproto.base,
  &scc_info_Block_core_2fTron_2eproto.base,
  &scc_info_BlockHeader_core_2fTron_2eproto.base,
  &scc_info_BlockHeader_raw_core_2fTron_2eproto.base,
  &scc_info_BlockInventory_core_2fTron_2eproto.base,
  &scc_info_BlockInventory_BlockId_core_2fTron_2eproto.base,
  &scc_info_ChainInventory_core_2fTron_2eproto.base,
  &scc_info_ChainInventory_BlockId_core_2fTron_2eproto.base,
  &scc_info_ChainParameters_core_2fTron_2eproto.base,
  &scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto.base,
  &scc_info_DelegatedResource_core_2fTron_2eproto.base,
  &scc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto.base,
  &scc_info_DisconnectMessage_core_2fTron_2eproto.base,
  &scc_info_DynamicProperties_core_2fTron_2eproto.base,
  &scc_info_Exchange_core_2fTron_2eproto.base,
  &scc_info_HelloMessage_core_2fTron_2eproto.base,
  &scc_info_HelloMessage_BlockId_core_2fTron_2eproto.base,
  &scc_info_InternalTransaction_core_2fTron_2eproto.base,
  &scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto.base,
  &scc_info_Inventory_core_2fTron_2eproto.base,
  &scc_info_Items_core_2fTron_2eproto.base,
  &scc_info_Key_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto.base,
  &scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto.base,
  &scc_info_Permission_core_2fTron_2eproto.base,
  &scc_info_Proposal_core_2fTron_2eproto.base,
  &scc_info_Proposal_ParametersEntry_DoNotUse_core_2fTron_2eproto.base,
  &scc_info_ResourceReceipt_core_2fTron_2eproto.base,
  &scc_info_TXInput_core_2fTron_2eproto.base,
  &scc_info_TXInput_raw_core_2fTron_2eproto.base,
  &scc_info_TXOutput_core_2fTron_2eproto.base,
  &scc_info_TXOutputs_core_2fTron_2eproto.base,
  &scc_info_Transaction_core_2fTron_2eproto.base,
  &scc_info_Transaction_Contract_core_2fTron_2eproto.base,
  &scc_info_Transaction_Result_core_2fTron_2eproto.base,
  &scc_info_Transaction_raw_core_2fTron_2eproto.base,
  &scc_info_TransactionInfo_core_2fTron_2eproto.base,
  &scc_info_TransactionInfo_Log_core_2fTron_2eproto.base,
  &scc_info_TransactionRet_core_2fTron_2eproto.base,
  &scc_info_TransactionSign_core_2fTron_2eproto.base,
  &scc_info_Transactions_core_2fTron_2eproto.base,
  &scc_info_Vote_core_2fTron_2eproto.base,
  &scc_info_Votes_core_2fTron_2eproto.base,
  &scc_info_Witness_core_2fTron_2eproto.base,
  &scc_info_authority_core_2fTron_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2fTron_2eproto_once;
static bool descriptor_table_core_2fTron_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fTron_2eproto = {
  &descriptor_table_core_2fTron_2eproto_initialized, descriptor_table_protodef_core_2fTron_2eproto, "core/Tron.proto", 11827,
  &descriptor_table_core_2fTron_2eproto_once, descriptor_table_core_2fTron_2eproto_sccs, descriptor_table_core_2fTron_2eproto_deps, 59, 2,
  schemas, file_default_instances, TableStruct_core_2fTron_2eproto::offsets,
  file_level_metadata_core_2fTron_2eproto, 59, file_level_enum_descriptors_core_2fTron_2eproto, file_level_service_descriptors_core_2fTron_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_core_2fTron_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_core_2fTron_2eproto), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proposal_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[0];
}
bool Proposal_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Proposal_State Proposal::PENDING;
constexpr Proposal_State Proposal::DISAPPROVED;
constexpr Proposal_State Proposal::APPROVED;
constexpr Proposal_State Proposal::CANCELED;
constexpr Proposal_State Proposal::State_MIN;
constexpr Proposal_State Proposal::State_MAX;
constexpr int Proposal::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_PermissionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[1];
}
bool Permission_PermissionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Permission_PermissionType Permission::Owner;
constexpr Permission_PermissionType Permission::Witness;
constexpr Permission_PermissionType Permission::Active;
constexpr Permission_PermissionType Permission::PermissionType_MIN;
constexpr Permission_PermissionType Permission::PermissionType_MAX;
constexpr int Permission::PermissionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Contract_ContractType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[2];
}
bool Transaction_Contract_ContractType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 30:
    case 31:
    case 32:
    case 33:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 48:
    case 49:
    case 51:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TransferAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::VoteWitnessContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WitnessCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AssetIssueContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WitnessUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ParticipateAssetIssueContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::FreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::WithdrawBalanceContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UnfreezeAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateAssetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalApproveContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ProposalDeleteContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::SetAccountIdContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::CustomContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::CreateSmartContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::TriggerSmartContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::GetContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateSettingContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeInjectContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeWithdrawContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ExchangeTransactionContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateEnergyLimitContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::AccountPermissionUpdateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ClearABIContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::UpdateBrokerageContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ShieldedTransferContract;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MIN;
constexpr Transaction_Contract_ContractType Transaction_Contract::ContractType_MAX;
constexpr int Transaction_Contract::ContractType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[3];
}
bool Transaction_Result_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Result_code Transaction_Result::SUCESS;
constexpr Transaction_Result_code Transaction_Result::FAILED;
constexpr Transaction_Result_code Transaction_Result::code_MIN;
constexpr Transaction_Result_code Transaction_Result::code_MAX;
constexpr int Transaction_Result::code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_contractResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[4];
}
bool Transaction_Result_contractResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Transaction_Result_contractResult Transaction_Result::DEFAULT;
constexpr Transaction_Result_contractResult Transaction_Result::SUCCESS;
constexpr Transaction_Result_contractResult Transaction_Result::REVERT;
constexpr Transaction_Result_contractResult Transaction_Result::BAD_JUMP_DESTINATION;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_MEMORY;
constexpr Transaction_Result_contractResult Transaction_Result::PRECOMPILED_CONTRACT;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_TOO_SMALL;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_TOO_LARGE;
constexpr Transaction_Result_contractResult Transaction_Result::ILLEGAL_OPERATION;
constexpr Transaction_Result_contractResult Transaction_Result::STACK_OVERFLOW;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_ENERGY;
constexpr Transaction_Result_contractResult Transaction_Result::OUT_OF_TIME;
constexpr Transaction_Result_contractResult Transaction_Result::JVM_STACK_OVER_FLOW;
constexpr Transaction_Result_contractResult Transaction_Result::UNKNOWN;
constexpr Transaction_Result_contractResult Transaction_Result::TRANSFER_FAILED;
constexpr Transaction_Result_contractResult Transaction_Result::contractResult_MIN;
constexpr Transaction_Result_contractResult Transaction_Result::contractResult_MAX;
constexpr int Transaction_Result::contractResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionInfo_code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[5];
}
bool TransactionInfo_code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TransactionInfo_code TransactionInfo::SUCESS;
constexpr TransactionInfo_code TransactionInfo::FAILED;
constexpr TransactionInfo_code TransactionInfo::code_MIN;
constexpr TransactionInfo_code TransactionInfo::code_MAX;
constexpr int TransactionInfo::code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockInventory_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[6];
}
bool BlockInventory_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr BlockInventory_Type BlockInventory::SYNC;
constexpr BlockInventory_Type BlockInventory::ADVTISE;
constexpr BlockInventory_Type BlockInventory::FETCH;
constexpr BlockInventory_Type BlockInventory::Type_MIN;
constexpr BlockInventory_Type BlockInventory::Type_MAX;
constexpr int BlockInventory::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inventory_InventoryType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[7];
}
bool Inventory_InventoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Inventory_InventoryType Inventory::TRX;
constexpr Inventory_InventoryType Inventory::BLOCK;
constexpr Inventory_InventoryType Inventory::InventoryType_MIN;
constexpr Inventory_InventoryType Inventory::InventoryType_MAX;
constexpr int Inventory::InventoryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Items_ItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[8];
}
bool Items_ItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Items_ItemType Items::ERR;
constexpr Items_ItemType Items::TRX;
constexpr Items_ItemType Items::BLOCK;
constexpr Items_ItemType Items::BLOCKHEADER;
constexpr Items_ItemType Items::ItemType_MIN;
constexpr Items_ItemType Items::ItemType_MAX;
constexpr int Items::ItemType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[9];
}
bool AccountType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReasonCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2fTron_2eproto);
  return file_level_enum_descriptors_core_2fTron_2eproto[10];
}
bool ReasonCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 32:
    case 33:
    case 34:
    case 255:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void AccountId::InitAsDefaultInstance() {
}
class AccountId::_Internal {
 public:
};

AccountId::AccountId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.AccountId)
}
AccountId::AccountId(const AccountId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.AccountId)
}

void AccountId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AccountId_core_2fTron_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccountId::~AccountId() {
  // @@protoc_insertion_point(destructor:protocol.AccountId)
  SharedDtor();
}

void AccountId::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccountId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccountId& AccountId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccountId_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void AccountId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccountId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccountId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.AccountId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.AccountId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.AccountId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccountId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  // bytes address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.AccountId)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccountId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.AccountId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // bytes address = 2;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.AccountId)
  return target;
}

size_t AccountId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.AccountId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->name());
  }

  // bytes address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccountId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.AccountId)
  GOOGLE_DCHECK_NE(&from, this);
  const AccountId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccountId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.AccountId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.AccountId)
    MergeFrom(*source);
  }
}

void AccountId::MergeFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.AccountId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void AccountId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.AccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountId::CopyFrom(const AccountId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.AccountId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountId::IsInitialized() const {
  return true;
}

void AccountId::InternalSwap(AccountId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AccountId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vote::InitAsDefaultInstance() {
}
class Vote::_Internal {
 public:
};

Vote::Vote()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Vote)
}
Vote::Vote(const Vote& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.vote_address().empty()) {
    vote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
  }
  vote_count_ = from.vote_count_;
  // @@protoc_insertion_point(copy_constructor:protocol.Vote)
}

void Vote::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vote_core_2fTron_2eproto.base);
  vote_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
}

Vote::~Vote() {
  // @@protoc_insertion_point(destructor:protocol.Vote)
  SharedDtor();
}

void Vote::SharedDtor() {
  vote_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Vote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vote& Vote::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vote_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Vote::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vote_count_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vote::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes vote_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_vote_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vote_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vote_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vote::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Vote)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes vote_address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vote_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vote_count = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &vote_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Vote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Vote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vote::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->vote_address(), output);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->vote_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Vote)
}

::PROTOBUF_NAMESPACE_ID::uint8* Vote::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Vote)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->vote_address(), target);
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->vote_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Vote)
  return target;
}

size_t Vote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Vote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes vote_address = 1;
  if (this->vote_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->vote_address());
  }

  // int64 vote_count = 2;
  if (this->vote_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->vote_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vote::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  const Vote* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Vote)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Vote)
    MergeFrom(*source);
  }
}

void Vote::MergeFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Vote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vote_address().size() > 0) {

    vote_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.vote_address_);
  }
  if (from.vote_count() != 0) {
    set_vote_count(from.vote_count());
  }
}

void Vote::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vote::CopyFrom(const Vote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Vote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vote::IsInitialized() const {
  return true;
}

void Vote::InternalSwap(Vote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  vote_address_.Swap(&other->vote_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vote_count_, other->vote_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vote::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Proposal_ParametersEntry_DoNotUse::Proposal_ParametersEntry_DoNotUse() {}
Proposal_ParametersEntry_DoNotUse::Proposal_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Proposal_ParametersEntry_DoNotUse::MergeFrom(const Proposal_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Proposal_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Proposal_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Proposal::InitAsDefaultInstance() {
}
class Proposal::_Internal {
 public:
};

Proposal::Proposal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Proposal)
}
Proposal::Proposal(const Proposal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      approvals_(from.approvals_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.proposer_address().empty()) {
    proposer_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  ::memcpy(&proposal_id_, &from.proposal_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:protocol.Proposal)
}

void Proposal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Proposal_core_2fTron_2eproto.base);
  proposer_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
}

Proposal::~Proposal() {
  // @@protoc_insertion_point(destructor:protocol.Proposal)
  SharedDtor();
}

void Proposal::SharedDtor() {
  proposer_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Proposal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Proposal& Proposal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Proposal_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Proposal::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  approvals_.Clear();
  proposer_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proposal_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&proposal_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Proposal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 proposal_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proposal_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes proposer_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_proposer_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int64, int64> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // int64 expiration_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes approvals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_approvals(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .protocol.Proposal.State state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::protocol::Proposal_State>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Proposal::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Proposal)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 proposal_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &proposal_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes proposer_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_proposer_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, int64> parameters = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          Proposal_ParametersEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Proposal_ParametersEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&parameters_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expiration_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes approvals = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_approvals()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Proposal.State state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::protocol::Proposal_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Proposal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Proposal)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Proposal::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 proposal_id = 1;
  if (this->proposal_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->proposal_id(), output);
  }

  // bytes proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->proposer_address(), output);
  }

  // map<int64, int64> parameters = 3;
  if (!this->parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->parameters().begin();
          it != this->parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Proposal_ParametersEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->parameters().begin();
          it != this->parameters().end(); ++it) {
        Proposal_ParametersEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
      }
    }
  }

  // int64 expiration_time = 4;
  if (this->expiration_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->expiration_time(), output);
  }

  // int64 create_time = 5;
  if (this->create_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->create_time(), output);
  }

  // repeated bytes approvals = 6;
  for (int i = 0, n = this->approvals_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->approvals(i), output);
  }

  // .protocol.Proposal.State state = 7;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Proposal)
}

::PROTOBUF_NAMESPACE_ID::uint8* Proposal::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Proposal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 proposal_id = 1;
  if (this->proposal_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->proposal_id(), target);
  }

  // bytes proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->proposer_address(), target);
  }

  // map<int64, int64> parameters = 3;
  if (!this->parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->parameters().begin();
          it != this->parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Proposal_ParametersEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->parameters().begin();
          it != this->parameters().end(); ++it) {
        target = Proposal_ParametersEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
      }
    }
  }

  // int64 expiration_time = 4;
  if (this->expiration_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->expiration_time(), target);
  }

  // int64 create_time = 5;
  if (this->create_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->create_time(), target);
  }

  // repeated bytes approvals = 6;
  for (int i = 0, n = this->approvals_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(6, this->approvals(i), target);
  }

  // .protocol.Proposal.State state = 7;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Proposal)
  return target;
}

size_t Proposal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Proposal)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, int64> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->parameters().begin();
      it != this->parameters().end(); ++it) {
    total_size += Proposal_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated bytes approvals = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->approvals_size());
  for (int i = 0, n = this->approvals_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->approvals(i));
  }

  // bytes proposer_address = 2;
  if (this->proposer_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->proposer_address());
  }

  // int64 proposal_id = 1;
  if (this->proposal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->proposal_id());
  }

  // int64 expiration_time = 4;
  if (this->expiration_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expiration_time());
  }

  // int64 create_time = 5;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // .protocol.Proposal.State state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Proposal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  const Proposal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Proposal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Proposal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Proposal)
    MergeFrom(*source);
  }
}

void Proposal::MergeFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Proposal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  approvals_.MergeFrom(from.approvals_);
  if (from.proposer_address().size() > 0) {

    proposer_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proposer_address_);
  }
  if (from.proposal_id() != 0) {
    set_proposal_id(from.proposal_id());
  }
  if (from.expiration_time() != 0) {
    set_expiration_time(from.expiration_time());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Proposal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Proposal::CopyFrom(const Proposal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Proposal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Proposal::IsInitialized() const {
  return true;
}

void Proposal::InternalSwap(Proposal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  approvals_.InternalSwap(CastToBase(&other->approvals_));
  proposer_address_.Swap(&other->proposer_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proposal_id_, other->proposal_id_);
  swap(expiration_time_, other->expiration_time_);
  swap(create_time_, other->create_time_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Proposal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Exchange::InitAsDefaultInstance() {
}
class Exchange::_Internal {
 public:
};

Exchange::Exchange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Exchange)
}
Exchange::Exchange(const Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  creator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.creator_address().empty()) {
    creator_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_address_);
  }
  first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.first_token_id().empty()) {
    first_token_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_token_id_);
  }
  second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.second_token_id().empty()) {
    second_token_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_token_id_);
  }
  ::memcpy(&exchange_id_, &from.exchange_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_token_balance_) -
    reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
  // @@protoc_insertion_point(copy_constructor:protocol.Exchange)
}

void Exchange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Exchange_core_2fTron_2eproto.base);
  creator_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_token_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_token_balance_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
}

Exchange::~Exchange() {
  // @@protoc_insertion_point(destructor:protocol.Exchange)
  SharedDtor();
}

void Exchange::SharedDtor() {
  creator_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_token_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Exchange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Exchange& Exchange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Exchange_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  creator_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_token_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  second_token_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exchange_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_token_balance_) -
      reinterpret_cast<char*>(&exchange_id_)) + sizeof(second_token_balance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Exchange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes creator_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_creator_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes first_token_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_first_token_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 first_token_balance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          first_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes second_token_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_second_token_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 second_token_balance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          second_token_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Exchange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Exchange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 exchange_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes creator_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_creator_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes first_token_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_first_token_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 first_token_balance = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_token_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes second_token_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_second_token_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 second_token_balance = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &second_token_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Exchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Exchange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Exchange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 exchange_id = 1;
  if (this->exchange_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->exchange_id(), output);
  }

  // bytes creator_address = 2;
  if (this->creator_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->creator_address(), output);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->create_time(), output);
  }

  // bytes first_token_id = 6;
  if (this->first_token_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->first_token_id(), output);
  }

  // int64 first_token_balance = 7;
  if (this->first_token_balance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->first_token_balance(), output);
  }

  // bytes second_token_id = 8;
  if (this->second_token_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->second_token_id(), output);
  }

  // int64 second_token_balance = 9;
  if (this->second_token_balance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->second_token_balance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Exchange)
}

::PROTOBUF_NAMESPACE_ID::uint8* Exchange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Exchange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 exchange_id = 1;
  if (this->exchange_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->exchange_id(), target);
  }

  // bytes creator_address = 2;
  if (this->creator_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->creator_address(), target);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->create_time(), target);
  }

  // bytes first_token_id = 6;
  if (this->first_token_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->first_token_id(), target);
  }

  // int64 first_token_balance = 7;
  if (this->first_token_balance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->first_token_balance(), target);
  }

  // bytes second_token_id = 8;
  if (this->second_token_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        8, this->second_token_id(), target);
  }

  // int64 second_token_balance = 9;
  if (this->second_token_balance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->second_token_balance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Exchange)
  return target;
}

size_t Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Exchange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes creator_address = 2;
  if (this->creator_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->creator_address());
  }

  // bytes first_token_id = 6;
  if (this->first_token_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->first_token_id());
  }

  // bytes second_token_id = 8;
  if (this->second_token_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->second_token_id());
  }

  // int64 exchange_id = 1;
  if (this->exchange_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_id());
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 first_token_balance = 7;
  if (this->first_token_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->first_token_balance());
  }

  // int64 second_token_balance = 9;
  if (this->second_token_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->second_token_balance());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Exchange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  const Exchange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Exchange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Exchange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Exchange)
    MergeFrom(*source);
  }
}

void Exchange::MergeFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Exchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.creator_address().size() > 0) {

    creator_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.creator_address_);
  }
  if (from.first_token_id().size() > 0) {

    first_token_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.first_token_id_);
  }
  if (from.second_token_id().size() > 0) {

    second_token_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.second_token_id_);
  }
  if (from.exchange_id() != 0) {
    set_exchange_id(from.exchange_id());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.first_token_balance() != 0) {
    set_first_token_balance(from.first_token_balance());
  }
  if (from.second_token_balance() != 0) {
    set_second_token_balance(from.second_token_balance());
  }
}

void Exchange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Exchange::CopyFrom(const Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Exchange::IsInitialized() const {
  return true;
}

void Exchange::InternalSwap(Exchange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  creator_address_.Swap(&other->creator_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  first_token_id_.Swap(&other->first_token_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_token_id_.Swap(&other->second_token_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exchange_id_, other->exchange_id_);
  swap(create_time_, other->create_time_);
  swap(first_token_balance_, other->first_token_balance_);
  swap(second_token_balance_, other->second_token_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Exchange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChainParameters_ChainParameter::InitAsDefaultInstance() {
}
class ChainParameters_ChainParameter::_Internal {
 public:
};

ChainParameters_ChainParameter::ChainParameters_ChainParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainParameters.ChainParameter)
}
ChainParameters_ChainParameter::ChainParameters_ChainParameter(const ChainParameters_ChainParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainParameters.ChainParameter)
}

void ChainParameters_ChainParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

ChainParameters_ChainParameter::~ChainParameters_ChainParameter() {
  // @@protoc_insertion_point(destructor:protocol.ChainParameters.ChainParameter)
  SharedDtor();
}

void ChainParameters_ChainParameter::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChainParameters_ChainParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainParameters_ChainParameter& ChainParameters_ChainParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainParameters_ChainParameter_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void ChainParameters_ChainParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainParameters.ChainParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChainParameters_ChainParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_key(), ptr, ctx, "protocol.ChainParameters.ChainParameter.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChainParameters_ChainParameter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainParameters.ChainParameter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.ChainParameters.ChainParameter.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainParameters.ChainParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainParameters.ChainParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChainParameters_ChainParameter::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainParameters.ChainParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainParameters.ChainParameter.key");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainParameters.ChainParameter)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainParameters_ChainParameter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainParameters.ChainParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.ChainParameters.ChainParameter.key");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // int64 value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainParameters.ChainParameter)
  return target;
}

size_t ChainParameters_ChainParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainParameters.ChainParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int64 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainParameters_ChainParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainParameters.ChainParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainParameters_ChainParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainParameters_ChainParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainParameters.ChainParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainParameters.ChainParameter)
    MergeFrom(*source);
  }
}

void ChainParameters_ChainParameter::MergeFrom(const ChainParameters_ChainParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainParameters.ChainParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void ChainParameters_ChainParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainParameters.ChainParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainParameters_ChainParameter::CopyFrom(const ChainParameters_ChainParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainParameters.ChainParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainParameters_ChainParameter::IsInitialized() const {
  return true;
}

void ChainParameters_ChainParameter::InternalSwap(ChainParameters_ChainParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainParameters_ChainParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChainParameters::InitAsDefaultInstance() {
}
class ChainParameters::_Internal {
 public:
};

ChainParameters::ChainParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainParameters)
}
ChainParameters::ChainParameters(const ChainParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      chainparameter_(from.chainparameter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.ChainParameters)
}

void ChainParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainParameters_core_2fTron_2eproto.base);
}

ChainParameters::~ChainParameters() {
  // @@protoc_insertion_point(destructor:protocol.ChainParameters)
  SharedDtor();
}

void ChainParameters::SharedDtor() {
}

void ChainParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainParameters& ChainParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainParameters_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void ChainParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chainparameter_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChainParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_chainparameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChainParameters::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainParameters)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_chainparameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainParameters)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChainParameters::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chainparameter_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chainparameter(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainParameters)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainParameters::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chainparameter_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chainparameter(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainParameters)
  return target;
}

size_t ChainParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainParameters)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chainparameter_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->chainparameter(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainParameters)
    MergeFrom(*source);
  }
}

void ChainParameters::MergeFrom(const ChainParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chainparameter_.MergeFrom(from.chainparameter_);
}

void ChainParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainParameters::CopyFrom(const ChainParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainParameters::IsInitialized() const {
  return true;
}

void ChainParameters::InternalSwap(ChainParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chainparameter_)->InternalSwap(CastToBase(&other->chainparameter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Account_Frozen::InitAsDefaultInstance() {
}
class Account_Frozen::_Internal {
 public:
};

Account_Frozen::Account_Frozen()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Account.Frozen)
}
Account_Frozen::Account_Frozen(const Account_Frozen& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&frozen_balance_, &from.frozen_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_) -
    reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account.Frozen)
}

void Account_Frozen::SharedCtor() {
  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
}

Account_Frozen::~Account_Frozen() {
  // @@protoc_insertion_point(destructor:protocol.Account.Frozen)
  SharedDtor();
}

void Account_Frozen::SharedDtor() {
}

void Account_Frozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account_Frozen& Account_Frozen::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_Frozen_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Account_Frozen::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&frozen_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_) -
      reinterpret_cast<char*>(&frozen_balance_)) + sizeof(expire_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Account_Frozen::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 frozen_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          frozen_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expire_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Account_Frozen::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Account.Frozen)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 frozen_balance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expire_time = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Account.Frozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Account.Frozen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Account_Frozen::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Account.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->frozen_balance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->frozen_balance(), output);
  }

  // int64 expire_time = 2;
  if (this->expire_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->expire_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Account.Frozen)
}

::PROTOBUF_NAMESPACE_ID::uint8* Account_Frozen::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account.Frozen)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->frozen_balance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->frozen_balance(), target);
  }

  // int64 expire_time = 2;
  if (this->expire_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->expire_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account.Frozen)
  return target;
}

size_t Account_Frozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account.Frozen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 frozen_balance = 1;
  if (this->frozen_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->frozen_balance());
  }

  // int64 expire_time = 2;
  if (this->expire_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expire_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account_Frozen::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Account.Frozen)
  GOOGLE_DCHECK_NE(&from, this);
  const Account_Frozen* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account_Frozen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Account.Frozen)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Account.Frozen)
    MergeFrom(*source);
  }
}

void Account_Frozen::MergeFrom(const Account_Frozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account.Frozen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frozen_balance() != 0) {
    set_frozen_balance(from.frozen_balance());
  }
  if (from.expire_time() != 0) {
    set_expire_time(from.expire_time());
  }
}

void Account_Frozen::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Account.Frozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_Frozen::CopyFrom(const Account_Frozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account.Frozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_Frozen::IsInitialized() const {
  return true;
}

void Account_Frozen::InternalSwap(Account_Frozen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frozen_balance_, other->frozen_balance_);
  swap(expire_time_, other->expire_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account_Frozen::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Account_AssetEntry_DoNotUse::Account_AssetEntry_DoNotUse() {}
Account_AssetEntry_DoNotUse::Account_AssetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_AssetEntry_DoNotUse::MergeFrom(const Account_AssetEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_AssetEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_AssetEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Account_AssetV2Entry_DoNotUse::Account_AssetV2Entry_DoNotUse() {}
Account_AssetV2Entry_DoNotUse::Account_AssetV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_AssetV2Entry_DoNotUse::MergeFrom(const Account_AssetV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_AssetV2Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_AssetV2Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Account_LatestAssetOperationTimeEntry_DoNotUse::Account_LatestAssetOperationTimeEntry_DoNotUse() {}
Account_LatestAssetOperationTimeEntry_DoNotUse::Account_LatestAssetOperationTimeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_LatestAssetOperationTimeEntry_DoNotUse::MergeFrom(const Account_LatestAssetOperationTimeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_LatestAssetOperationTimeEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_LatestAssetOperationTimeEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Account_LatestAssetOperationTimeV2Entry_DoNotUse::Account_LatestAssetOperationTimeV2Entry_DoNotUse() {}
Account_LatestAssetOperationTimeV2Entry_DoNotUse::Account_LatestAssetOperationTimeV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_LatestAssetOperationTimeV2Entry_DoNotUse::MergeFrom(const Account_LatestAssetOperationTimeV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_LatestAssetOperationTimeV2Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_LatestAssetOperationTimeV2Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Account_FreeAssetNetUsageEntry_DoNotUse::Account_FreeAssetNetUsageEntry_DoNotUse() {}
Account_FreeAssetNetUsageEntry_DoNotUse::Account_FreeAssetNetUsageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_FreeAssetNetUsageEntry_DoNotUse::MergeFrom(const Account_FreeAssetNetUsageEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_FreeAssetNetUsageEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_FreeAssetNetUsageEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Account_FreeAssetNetUsageV2Entry_DoNotUse::Account_FreeAssetNetUsageV2Entry_DoNotUse() {}
Account_FreeAssetNetUsageV2Entry_DoNotUse::Account_FreeAssetNetUsageV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Account_FreeAssetNetUsageV2Entry_DoNotUse::MergeFrom(const Account_FreeAssetNetUsageV2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Account_FreeAssetNetUsageV2Entry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Account_FreeAssetNetUsageV2Entry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Account_AccountResource::InitAsDefaultInstance() {
  ::protocol::_Account_AccountResource_default_instance_._instance.get_mutable()->frozen_balance_for_energy_ = const_cast< ::protocol::Account_Frozen*>(
      ::protocol::Account_Frozen::internal_default_instance());
}
class Account_AccountResource::_Internal {
 public:
  static const ::protocol::Account_Frozen& frozen_balance_for_energy(const Account_AccountResource* msg);
};

const ::protocol::Account_Frozen&
Account_AccountResource::_Internal::frozen_balance_for_energy(const Account_AccountResource* msg) {
  return *msg->frozen_balance_for_energy_;
}
Account_AccountResource::Account_AccountResource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Account.AccountResource)
}
Account_AccountResource::Account_AccountResource(const Account_AccountResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frozen_balance_for_energy()) {
    frozen_balance_for_energy_ = new ::protocol::Account_Frozen(*from.frozen_balance_for_energy_);
  } else {
    frozen_balance_for_energy_ = nullptr;
  }
  ::memcpy(&energy_usage_, &from.energy_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_exchange_storage_time_) -
    reinterpret_cast<char*>(&energy_usage_)) + sizeof(latest_exchange_storage_time_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account.AccountResource)
}

void Account_AccountResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_AccountResource_core_2fTron_2eproto.base);
  ::memset(&frozen_balance_for_energy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_exchange_storage_time_) -
      reinterpret_cast<char*>(&frozen_balance_for_energy_)) + sizeof(latest_exchange_storage_time_));
}

Account_AccountResource::~Account_AccountResource() {
  // @@protoc_insertion_point(destructor:protocol.Account.AccountResource)
  SharedDtor();
}

void Account_AccountResource::SharedDtor() {
  if (this != internal_default_instance()) delete frozen_balance_for_energy_;
}

void Account_AccountResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account_AccountResource& Account_AccountResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_AccountResource_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Account_AccountResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account.AccountResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && frozen_balance_for_energy_ != nullptr) {
    delete frozen_balance_for_energy_;
  }
  frozen_balance_for_energy_ = nullptr;
  ::memset(&energy_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_exchange_storage_time_) -
      reinterpret_cast<char*>(&energy_usage_)) + sizeof(latest_exchange_storage_time_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Account_AccountResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 energy_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Account.Frozen frozen_balance_for_energy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_frozen_balance_for_energy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_time_for_energy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latest_consume_time_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 acquired_delegated_frozen_balance_for_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          acquired_delegated_frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delegated_frozen_balance_for_energy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          delegated_frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storage_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 storage_usage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          storage_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_exchange_storage_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          latest_exchange_storage_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Account_AccountResource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Account.AccountResource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 energy_usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Account.Frozen frozen_balance_for_energy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_frozen_balance_for_energy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_consume_time_for_energy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_consume_time_for_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 acquired_delegated_frozen_balance_for_energy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquired_delegated_frozen_balance_for_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delegated_frozen_balance_for_energy = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delegated_frozen_balance_for_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 storage_limit = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 storage_usage = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_exchange_storage_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_exchange_storage_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Account.AccountResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Account.AccountResource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Account_AccountResource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Account.AccountResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->energy_usage(), output);
  }

  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  if (this->has_frozen_balance_for_energy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::frozen_balance_for_energy(this), output);
  }

  // int64 latest_consume_time_for_energy = 3;
  if (this->latest_consume_time_for_energy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->latest_consume_time_for_energy(), output);
  }

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  if (this->acquired_delegated_frozen_balance_for_energy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->acquired_delegated_frozen_balance_for_energy(), output);
  }

  // int64 delegated_frozen_balance_for_energy = 5;
  if (this->delegated_frozen_balance_for_energy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->delegated_frozen_balance_for_energy(), output);
  }

  // int64 storage_limit = 6;
  if (this->storage_limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->storage_limit(), output);
  }

  // int64 storage_usage = 7;
  if (this->storage_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->storage_usage(), output);
  }

  // int64 latest_exchange_storage_time = 8;
  if (this->latest_exchange_storage_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->latest_exchange_storage_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Account.AccountResource)
}

::PROTOBUF_NAMESPACE_ID::uint8* Account_AccountResource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account.AccountResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->energy_usage(), target);
  }

  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  if (this->has_frozen_balance_for_energy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::frozen_balance_for_energy(this), target);
  }

  // int64 latest_consume_time_for_energy = 3;
  if (this->latest_consume_time_for_energy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->latest_consume_time_for_energy(), target);
  }

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  if (this->acquired_delegated_frozen_balance_for_energy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->acquired_delegated_frozen_balance_for_energy(), target);
  }

  // int64 delegated_frozen_balance_for_energy = 5;
  if (this->delegated_frozen_balance_for_energy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->delegated_frozen_balance_for_energy(), target);
  }

  // int64 storage_limit = 6;
  if (this->storage_limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->storage_limit(), target);
  }

  // int64 storage_usage = 7;
  if (this->storage_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->storage_usage(), target);
  }

  // int64 latest_exchange_storage_time = 8;
  if (this->latest_exchange_storage_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->latest_exchange_storage_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account.AccountResource)
  return target;
}

size_t Account_AccountResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account.AccountResource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  if (this->has_frozen_balance_for_energy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *frozen_balance_for_energy_);
  }

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->energy_usage());
  }

  // int64 latest_consume_time_for_energy = 3;
  if (this->latest_consume_time_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_consume_time_for_energy());
  }

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  if (this->acquired_delegated_frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->acquired_delegated_frozen_balance_for_energy());
  }

  // int64 delegated_frozen_balance_for_energy = 5;
  if (this->delegated_frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delegated_frozen_balance_for_energy());
  }

  // int64 storage_limit = 6;
  if (this->storage_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->storage_limit());
  }

  // int64 storage_usage = 7;
  if (this->storage_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->storage_usage());
  }

  // int64 latest_exchange_storage_time = 8;
  if (this->latest_exchange_storage_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_exchange_storage_time());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account_AccountResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Account.AccountResource)
  GOOGLE_DCHECK_NE(&from, this);
  const Account_AccountResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account_AccountResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Account.AccountResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Account.AccountResource)
    MergeFrom(*source);
  }
}

void Account_AccountResource::MergeFrom(const Account_AccountResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account.AccountResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_frozen_balance_for_energy()) {
    mutable_frozen_balance_for_energy()->::protocol::Account_Frozen::MergeFrom(from.frozen_balance_for_energy());
  }
  if (from.energy_usage() != 0) {
    set_energy_usage(from.energy_usage());
  }
  if (from.latest_consume_time_for_energy() != 0) {
    set_latest_consume_time_for_energy(from.latest_consume_time_for_energy());
  }
  if (from.acquired_delegated_frozen_balance_for_energy() != 0) {
    set_acquired_delegated_frozen_balance_for_energy(from.acquired_delegated_frozen_balance_for_energy());
  }
  if (from.delegated_frozen_balance_for_energy() != 0) {
    set_delegated_frozen_balance_for_energy(from.delegated_frozen_balance_for_energy());
  }
  if (from.storage_limit() != 0) {
    set_storage_limit(from.storage_limit());
  }
  if (from.storage_usage() != 0) {
    set_storage_usage(from.storage_usage());
  }
  if (from.latest_exchange_storage_time() != 0) {
    set_latest_exchange_storage_time(from.latest_exchange_storage_time());
  }
}

void Account_AccountResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Account.AccountResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_AccountResource::CopyFrom(const Account_AccountResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account.AccountResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_AccountResource::IsInitialized() const {
  return true;
}

void Account_AccountResource::InternalSwap(Account_AccountResource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(frozen_balance_for_energy_, other->frozen_balance_for_energy_);
  swap(energy_usage_, other->energy_usage_);
  swap(latest_consume_time_for_energy_, other->latest_consume_time_for_energy_);
  swap(acquired_delegated_frozen_balance_for_energy_, other->acquired_delegated_frozen_balance_for_energy_);
  swap(delegated_frozen_balance_for_energy_, other->delegated_frozen_balance_for_energy_);
  swap(storage_limit_, other->storage_limit_);
  swap(storage_usage_, other->storage_usage_);
  swap(latest_exchange_storage_time_, other->latest_exchange_storage_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account_AccountResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Account::InitAsDefaultInstance() {
  ::protocol::_Account_default_instance_._instance.get_mutable()->account_resource_ = const_cast< ::protocol::Account_AccountResource*>(
      ::protocol::Account_AccountResource::internal_default_instance());
  ::protocol::_Account_default_instance_._instance.get_mutable()->owner_permission_ = const_cast< ::protocol::Permission*>(
      ::protocol::Permission::internal_default_instance());
  ::protocol::_Account_default_instance_._instance.get_mutable()->witness_permission_ = const_cast< ::protocol::Permission*>(
      ::protocol::Permission::internal_default_instance());
}
class Account::_Internal {
 public:
  static const ::protocol::Account_AccountResource& account_resource(const Account* msg);
  static const ::protocol::Permission& owner_permission(const Account* msg);
  static const ::protocol::Permission& witness_permission(const Account* msg);
};

const ::protocol::Account_AccountResource&
Account::_Internal::account_resource(const Account* msg) {
  return *msg->account_resource_;
}
const ::protocol::Permission&
Account::_Internal::owner_permission(const Account* msg) {
  return *msg->owner_permission_;
}
const ::protocol::Permission&
Account::_Internal::witness_permission(const Account* msg) {
  return *msg->witness_permission_;
}
Account::Account()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Account)
}
Account::Account(const Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      votes_(from.votes_),
      frozen_(from.frozen_),
      frozen_supply_(from.frozen_supply_),
      active_permission_(from.active_permission_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  asset_.MergeFrom(from.asset_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_name().empty()) {
    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.asset_issued_name().empty()) {
    asset_issued_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_issued_name_);
  }
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account_id().empty()) {
    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  codehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.codehash().empty()) {
    codehash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codehash_);
  }
  asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.asset_issued_id().empty()) {
    asset_issued_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_issued_id_);
  }
  if (from.has_account_resource()) {
    account_resource_ = new ::protocol::Account_AccountResource(*from.account_resource_);
  } else {
    account_resource_ = nullptr;
  }
  if (from.has_owner_permission()) {
    owner_permission_ = new ::protocol::Permission(*from.owner_permission_);
  } else {
    owner_permission_ = nullptr;
  }
  if (from.has_witness_permission()) {
    witness_permission_ = new ::protocol::Permission(*from.witness_permission_);
  } else {
    witness_permission_ = nullptr;
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&delegated_frozen_balance_for_bandwidth_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(delegated_frozen_balance_for_bandwidth_));
  // @@protoc_insertion_point(copy_constructor:protocol.Account)
}

void Account::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Account_core_2fTron_2eproto.base);
  account_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codehash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegated_frozen_balance_for_bandwidth_) -
      reinterpret_cast<char*>(&account_resource_)) + sizeof(delegated_frozen_balance_for_bandwidth_));
}

Account::~Account() {
  // @@protoc_insertion_point(destructor:protocol.Account)
  SharedDtor();
}

void Account::SharedDtor() {
  account_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codehash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_resource_;
  if (this != internal_default_instance()) delete owner_permission_;
  if (this != internal_default_instance()) delete witness_permission_;
}

void Account::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Account& Account::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Account_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Account::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  votes_.Clear();
  asset_.Clear();
  frozen_.Clear();
  frozen_supply_.Clear();
  latest_asset_operation_time_.Clear();
  free_asset_net_usage_.Clear();
  active_permission_.Clear();
  assetv2_.Clear();
  latest_asset_operation_timev2_.Clear();
  free_asset_net_usagev2_.Clear();
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  codehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_issued_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && account_resource_ != nullptr) {
    delete account_resource_;
  }
  account_resource_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && owner_permission_ != nullptr) {
    delete owner_permission_;
  }
  owner_permission_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && witness_permission_ != nullptr) {
    delete witness_permission_;
  }
  witness_permission_ = nullptr;
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegated_frozen_balance_for_bandwidth_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(delegated_frozen_balance_for_bandwidth_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Account::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.AccountType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::AccountType>(val));
        } else goto handle_unusual;
        continue;
      // bytes address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote votes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // map<string, int64> asset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&asset_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Account.Frozen frozen = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_frozen(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // int64 net_usage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 create_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_opration_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          latest_opration_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allowance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          allowance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_withdraw_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          latest_withdraw_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_code(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_witness = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          is_witness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_committee = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          is_committee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Account.Frozen frozen_supply = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_frozen_supply(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 386);
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_name = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_asset_issued_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_time = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&latest_asset_operation_time_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // int64 free_net_usage = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          free_net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&free_asset_net_usage_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 418);
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_time = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          latest_consume_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latest_consume_free_time = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          latest_consume_free_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account_id = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Account.AccountResource account_resource = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_account_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes codeHash = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_codehash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission owner_permission = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_owner_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Permission witness_permission = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_witness_permission(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Permission active_permission = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_active_permission(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 650);
        } else goto handle_unusual;
        continue;
      // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          acquired_delegated_frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 delegated_frozen_balance_for_bandwidth = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          delegated_frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> assetV2 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&assetv2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 962);
        } else goto handle_unusual;
        continue;
      // bytes asset_issued_ID = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_asset_issued_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, int64> latest_asset_operation_timeV2 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&latest_asset_operation_timev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 978);
        } else goto handle_unusual;
        continue;
      // map<string, int64> free_asset_net_usageV2 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&free_asset_net_usagev2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 986);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Account::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Account)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.AccountType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::AccountType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 balance = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &balance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Vote votes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> asset = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          Account_AssetEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_AssetEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&asset_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.AssetEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Account.Frozen frozen = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frozen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 net_usage = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_opration_time = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_opration_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allowance = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allowance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_withdraw_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_withdraw_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes code = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_witness = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_witness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_committee = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_committee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Account.Frozen frozen_supply = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_frozen_supply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes asset_issued_name = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_asset_issued_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> latest_asset_operation_time = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          Account_LatestAssetOperationTimeEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_LatestAssetOperationTimeEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&latest_asset_operation_time_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.LatestAssetOperationTimeEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 free_net_usage = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_net_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> free_asset_net_usage = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          Account_FreeAssetNetUsageEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_FreeAssetNetUsageEntry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&free_asset_net_usage_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.FreeAssetNetUsageEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_consume_time = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_consume_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latest_consume_free_time = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latest_consume_free_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes account_id = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Account.AccountResource account_resource = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account_resource()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes codeHash = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_codehash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Permission owner_permission = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_owner_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Permission witness_permission = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_witness_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Permission active_permission = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_active_permission()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (328 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &acquired_delegated_frozen_balance_for_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 delegated_frozen_balance_for_bandwidth = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (336 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &delegated_frozen_balance_for_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> assetV2 = 56;
      case 56: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (450 & 0xFF)) {
          Account_AssetV2Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_AssetV2Entry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&assetv2_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.AssetV2Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes asset_issued_ID = 57;
      case 57: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (458 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_asset_issued_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> latest_asset_operation_timeV2 = 58;
      case 58: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (466 & 0xFF)) {
          Account_LatestAssetOperationTimeV2Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_LatestAssetOperationTimeV2Entry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&latest_asset_operation_timev2_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.LatestAssetOperationTimeV2Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, int64> free_asset_net_usageV2 = 59;
      case 59: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (474 & 0xFF)) {
          Account_FreeAssetNetUsageV2Entry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Account_FreeAssetNetUsageV2Entry_DoNotUse,
              std::string, ::PROTOBUF_NAMESPACE_ID::int64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 > > parser(&free_asset_net_usagev2_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Account.FreeAssetNetUsageV2Entry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Account)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Account)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Account::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account_name(), output);
  }

  // .protocol.AccountType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bytes address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->address(), output);
  }

  // int64 balance = 4;
  if (this->balance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->balance(), output);
  }

  // repeated .protocol.Vote votes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->votes(static_cast<int>(i)),
      output);
  }

  // map<string, int64> asset = 6;
  if (!this->asset().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->asset().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->asset().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->asset().begin();
          it != this->asset().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_AssetEntry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->asset().begin();
          it != this->asset().end(); ++it) {
        Account_AssetEntry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .protocol.Account.Frozen frozen = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->frozen(static_cast<int>(i)),
      output);
  }

  // int64 net_usage = 8;
  if (this->net_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->net_usage(), output);
  }

  // int64 create_time = 9;
  if (this->create_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->create_time(), output);
  }

  // int64 latest_opration_time = 10;
  if (this->latest_opration_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->latest_opration_time(), output);
  }

  // int64 allowance = 11;
  if (this->allowance() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->allowance(), output);
  }

  // int64 latest_withdraw_time = 12;
  if (this->latest_withdraw_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(12, this->latest_withdraw_time(), output);
  }

  // bytes code = 13;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->code(), output);
  }

  // bool is_witness = 14;
  if (this->is_witness() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->is_witness(), output);
  }

  // bool is_committee = 15;
  if (this->is_committee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->is_committee(), output);
  }

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_supply_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->frozen_supply(static_cast<int>(i)),
      output);
  }

  // bytes asset_issued_name = 17;
  if (this->asset_issued_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      17, this->asset_issued_name(), output);
  }

  // map<string, int64> latest_asset_operation_time = 18;
  if (!this->latest_asset_operation_time().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->latest_asset_operation_time().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latest_asset_operation_time().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_time().begin();
          it != this->latest_asset_operation_time().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::SerializeToCodedStream(18, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_time().begin();
          it != this->latest_asset_operation_time().end(); ++it) {
        Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::SerializeToCodedStream(18, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 free_net_usage = 19;
  if (this->free_net_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->free_net_usage(), output);
  }

  // map<string, int64> free_asset_net_usage = 20;
  if (!this->free_asset_net_usage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->free_asset_net_usage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->free_asset_net_usage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usage().begin();
          it != this->free_asset_net_usage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::SerializeToCodedStream(20, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usage().begin();
          it != this->free_asset_net_usage().end(); ++it) {
        Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::SerializeToCodedStream(20, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 latest_consume_time = 21;
  if (this->latest_consume_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->latest_consume_time(), output);
  }

  // int64 latest_consume_free_time = 22;
  if (this->latest_consume_free_time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->latest_consume_free_time(), output);
  }

  // bytes account_id = 23;
  if (this->account_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      23, this->account_id(), output);
  }

  // .protocol.Account.AccountResource account_resource = 26;
  if (this->has_account_resource()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::account_resource(this), output);
  }

  // bytes codeHash = 30;
  if (this->codehash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      30, this->codehash(), output);
  }

  // .protocol.Permission owner_permission = 31;
  if (this->has_owner_permission()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, _Internal::owner_permission(this), output);
  }

  // .protocol.Permission witness_permission = 32;
  if (this->has_witness_permission()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, _Internal::witness_permission(this), output);
  }

  // repeated .protocol.Permission active_permission = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_permission_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33,
      this->active_permission(static_cast<int>(i)),
      output);
  }

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  if (this->acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(41, this->acquired_delegated_frozen_balance_for_bandwidth(), output);
  }

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  if (this->delegated_frozen_balance_for_bandwidth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(42, this->delegated_frozen_balance_for_bandwidth(), output);
  }

  // map<string, int64> assetV2 = 56;
  if (!this->assetv2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetV2Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->assetv2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->assetv2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->assetv2().begin();
          it != this->assetv2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_AssetV2Entry_DoNotUse::Funcs::SerializeToCodedStream(56, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->assetv2().begin();
          it != this->assetv2().end(); ++it) {
        Account_AssetV2Entry_DoNotUse::Funcs::SerializeToCodedStream(56, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes asset_issued_ID = 57;
  if (this->asset_issued_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      57, this->asset_issued_id(), output);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  if (!this->latest_asset_operation_timev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeV2Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->latest_asset_operation_timev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latest_asset_operation_timev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_timev2().begin();
          it != this->latest_asset_operation_timev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::SerializeToCodedStream(58, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_timev2().begin();
          it != this->latest_asset_operation_timev2().end(); ++it) {
        Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::SerializeToCodedStream(58, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> free_asset_net_usageV2 = 59;
  if (!this->free_asset_net_usagev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageV2Entry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->free_asset_net_usagev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->free_asset_net_usagev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usagev2().begin();
          it != this->free_asset_net_usagev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::SerializeToCodedStream(59, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usagev2().begin();
          it != this->free_asset_net_usagev2().end(); ++it) {
        Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::SerializeToCodedStream(59, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Account)
}

::PROTOBUF_NAMESPACE_ID::uint8* Account::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Account)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account_name(), target);
  }

  // .protocol.AccountType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // bytes address = 3;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->address(), target);
  }

  // int64 balance = 4;
  if (this->balance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->balance(), target);
  }

  // repeated .protocol.Vote votes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->votes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->votes(static_cast<int>(i)), target);
  }

  // map<string, int64> asset = 6;
  if (!this->asset().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetEntry.key");
      }
    };

    if (false &&
        this->asset().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->asset().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->asset().begin();
          it != this->asset().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_AssetEntry_DoNotUse::Funcs::SerializeToArray(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->asset().begin();
          it != this->asset().end(); ++it) {
        target = Account_AssetEntry_DoNotUse::Funcs::SerializeToArray(6, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .protocol.Account.Frozen frozen = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->frozen(static_cast<int>(i)), target);
  }

  // int64 net_usage = 8;
  if (this->net_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->net_usage(), target);
  }

  // int64 create_time = 9;
  if (this->create_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->create_time(), target);
  }

  // int64 latest_opration_time = 10;
  if (this->latest_opration_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->latest_opration_time(), target);
  }

  // int64 allowance = 11;
  if (this->allowance() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->allowance(), target);
  }

  // int64 latest_withdraw_time = 12;
  if (this->latest_withdraw_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->latest_withdraw_time(), target);
  }

  // bytes code = 13;
  if (this->code().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        13, this->code(), target);
  }

  // bool is_witness = 14;
  if (this->is_witness() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->is_witness(), target);
  }

  // bool is_committee = 15;
  if (this->is_committee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->is_committee(), target);
  }

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->frozen_supply_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->frozen_supply(static_cast<int>(i)), target);
  }

  // bytes asset_issued_name = 17;
  if (this->asset_issued_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        17, this->asset_issued_name(), target);
  }

  // map<string, int64> latest_asset_operation_time = 18;
  if (!this->latest_asset_operation_time().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeEntry.key");
      }
    };

    if (false &&
        this->latest_asset_operation_time().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latest_asset_operation_time().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_time().begin();
          it != this->latest_asset_operation_time().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::SerializeToArray(18, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_time().begin();
          it != this->latest_asset_operation_time().end(); ++it) {
        target = Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::SerializeToArray(18, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 free_net_usage = 19;
  if (this->free_net_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->free_net_usage(), target);
  }

  // map<string, int64> free_asset_net_usage = 20;
  if (!this->free_asset_net_usage().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageEntry.key");
      }
    };

    if (false &&
        this->free_asset_net_usage().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->free_asset_net_usage().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usage().begin();
          it != this->free_asset_net_usage().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::SerializeToArray(20, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usage().begin();
          it != this->free_asset_net_usage().end(); ++it) {
        target = Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::SerializeToArray(20, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int64 latest_consume_time = 21;
  if (this->latest_consume_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->latest_consume_time(), target);
  }

  // int64 latest_consume_free_time = 22;
  if (this->latest_consume_free_time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->latest_consume_free_time(), target);
  }

  // bytes account_id = 23;
  if (this->account_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        23, this->account_id(), target);
  }

  // .protocol.Account.AccountResource account_resource = 26;
  if (this->has_account_resource()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::account_resource(this), target);
  }

  // bytes codeHash = 30;
  if (this->codehash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        30, this->codehash(), target);
  }

  // .protocol.Permission owner_permission = 31;
  if (this->has_owner_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, _Internal::owner_permission(this), target);
  }

  // .protocol.Permission witness_permission = 32;
  if (this->has_witness_permission()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, _Internal::witness_permission(this), target);
  }

  // repeated .protocol.Permission active_permission = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->active_permission_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, this->active_permission(static_cast<int>(i)), target);
  }

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  if (this->acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(41, this->acquired_delegated_frozen_balance_for_bandwidth(), target);
  }

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  if (this->delegated_frozen_balance_for_bandwidth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(42, this->delegated_frozen_balance_for_bandwidth(), target);
  }

  // map<string, int64> assetV2 = 56;
  if (!this->assetv2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.AssetV2Entry.key");
      }
    };

    if (false &&
        this->assetv2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->assetv2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->assetv2().begin();
          it != this->assetv2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_AssetV2Entry_DoNotUse::Funcs::SerializeToArray(56, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->assetv2().begin();
          it != this->assetv2().end(); ++it) {
        target = Account_AssetV2Entry_DoNotUse::Funcs::SerializeToArray(56, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bytes asset_issued_ID = 57;
  if (this->asset_issued_id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        57, this->asset_issued_id(), target);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  if (!this->latest_asset_operation_timev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.LatestAssetOperationTimeV2Entry.key");
      }
    };

    if (false &&
        this->latest_asset_operation_timev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->latest_asset_operation_timev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_timev2().begin();
          it != this->latest_asset_operation_timev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::SerializeToArray(58, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->latest_asset_operation_timev2().begin();
          it != this->latest_asset_operation_timev2().end(); ++it) {
        target = Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::SerializeToArray(58, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, int64> free_asset_net_usageV2 = 59;
  if (!this->free_asset_net_usagev2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.Account.FreeAssetNetUsageV2Entry.key");
      }
    };

    if (false &&
        this->free_asset_net_usagev2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->free_asset_net_usagev2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usagev2().begin();
          it != this->free_asset_net_usagev2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::SerializeToArray(59, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->free_asset_net_usagev2().begin();
          it != this->free_asset_net_usagev2().end(); ++it) {
        target = Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::SerializeToArray(59, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Account)
  return target;
}

size_t Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Account)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Vote votes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->votes(static_cast<int>(i)));
    }
  }

  // map<string, int64> asset = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->asset_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->asset().begin();
      it != this->asset().end(); ++it) {
    total_size += Account_AssetEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protocol.Account.Frozen frozen = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->frozen_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frozen(static_cast<int>(i)));
    }
  }

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->frozen_supply_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->frozen_supply(static_cast<int>(i)));
    }
  }

  // map<string, int64> latest_asset_operation_time = 18;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->latest_asset_operation_time_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->latest_asset_operation_time().begin();
      it != this->latest_asset_operation_time().end(); ++it) {
    total_size += Account_LatestAssetOperationTimeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usage = 20;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->free_asset_net_usage_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->free_asset_net_usage().begin();
      it != this->free_asset_net_usage().end(); ++it) {
    total_size += Account_FreeAssetNetUsageEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .protocol.Permission active_permission = 33;
  {
    unsigned int count = static_cast<unsigned int>(this->active_permission_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->active_permission(static_cast<int>(i)));
    }
  }

  // map<string, int64> assetV2 = 56;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->assetv2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->assetv2().begin();
      it != this->assetv2().end(); ++it) {
    total_size += Account_AssetV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->latest_asset_operation_timev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->latest_asset_operation_timev2().begin();
      it != this->latest_asset_operation_timev2().end(); ++it) {
    total_size += Account_LatestAssetOperationTimeV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, int64> free_asset_net_usageV2 = 59;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->free_asset_net_usagev2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->free_asset_net_usagev2().begin();
      it != this->free_asset_net_usagev2().end(); ++it) {
    total_size += Account_FreeAssetNetUsageV2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes account_name = 1;
  if (this->account_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account_name());
  }

  // bytes address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // bytes code = 13;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->code());
  }

  // bytes asset_issued_name = 17;
  if (this->asset_issued_name().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->asset_issued_name());
  }

  // bytes account_id = 23;
  if (this->account_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account_id());
  }

  // bytes codeHash = 30;
  if (this->codehash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->codehash());
  }

  // bytes asset_issued_ID = 57;
  if (this->asset_issued_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->asset_issued_id());
  }

  // .protocol.Account.AccountResource account_resource = 26;
  if (this->has_account_resource()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_resource_);
  }

  // .protocol.Permission owner_permission = 31;
  if (this->has_owner_permission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *owner_permission_);
  }

  // .protocol.Permission witness_permission = 32;
  if (this->has_witness_permission()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *witness_permission_);
  }

  // int64 balance = 4;
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->balance());
  }

  // int64 net_usage = 8;
  if (this->net_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->net_usage());
  }

  // int64 create_time = 9;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 latest_opration_time = 10;
  if (this->latest_opration_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_opration_time());
  }

  // .protocol.AccountType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_witness = 14;
  if (this->is_witness() != 0) {
    total_size += 1 + 1;
  }

  // bool is_committee = 15;
  if (this->is_committee() != 0) {
    total_size += 1 + 1;
  }

  // int64 allowance = 11;
  if (this->allowance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allowance());
  }

  // int64 latest_withdraw_time = 12;
  if (this->latest_withdraw_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_withdraw_time());
  }

  // int64 free_net_usage = 19;
  if (this->free_net_usage() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->free_net_usage());
  }

  // int64 latest_consume_time = 21;
  if (this->latest_consume_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_consume_time());
  }

  // int64 latest_consume_free_time = 22;
  if (this->latest_consume_free_time() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latest_consume_free_time());
  }

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  if (this->acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->acquired_delegated_frozen_balance_for_bandwidth());
  }

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  if (this->delegated_frozen_balance_for_bandwidth() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->delegated_frozen_balance_for_bandwidth());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Account::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  const Account* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Account>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Account)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Account)
    MergeFrom(*source);
  }
}

void Account::MergeFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Account)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  votes_.MergeFrom(from.votes_);
  asset_.MergeFrom(from.asset_);
  frozen_.MergeFrom(from.frozen_);
  frozen_supply_.MergeFrom(from.frozen_supply_);
  latest_asset_operation_time_.MergeFrom(from.latest_asset_operation_time_);
  free_asset_net_usage_.MergeFrom(from.free_asset_net_usage_);
  active_permission_.MergeFrom(from.active_permission_);
  assetv2_.MergeFrom(from.assetv2_);
  latest_asset_operation_timev2_.MergeFrom(from.latest_asset_operation_timev2_);
  free_asset_net_usagev2_.MergeFrom(from.free_asset_net_usagev2_);
  if (from.account_name().size() > 0) {

    account_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_name_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.asset_issued_name().size() > 0) {

    asset_issued_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_issued_name_);
  }
  if (from.account_id().size() > 0) {

    account_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_id_);
  }
  if (from.codehash().size() > 0) {

    codehash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codehash_);
  }
  if (from.asset_issued_id().size() > 0) {

    asset_issued_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.asset_issued_id_);
  }
  if (from.has_account_resource()) {
    mutable_account_resource()->::protocol::Account_AccountResource::MergeFrom(from.account_resource());
  }
  if (from.has_owner_permission()) {
    mutable_owner_permission()->::protocol::Permission::MergeFrom(from.owner_permission());
  }
  if (from.has_witness_permission()) {
    mutable_witness_permission()->::protocol::Permission::MergeFrom(from.witness_permission());
  }
  if (from.balance() != 0) {
    set_balance(from.balance());
  }
  if (from.net_usage() != 0) {
    set_net_usage(from.net_usage());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.latest_opration_time() != 0) {
    set_latest_opration_time(from.latest_opration_time());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_witness() != 0) {
    set_is_witness(from.is_witness());
  }
  if (from.is_committee() != 0) {
    set_is_committee(from.is_committee());
  }
  if (from.allowance() != 0) {
    set_allowance(from.allowance());
  }
  if (from.latest_withdraw_time() != 0) {
    set_latest_withdraw_time(from.latest_withdraw_time());
  }
  if (from.free_net_usage() != 0) {
    set_free_net_usage(from.free_net_usage());
  }
  if (from.latest_consume_time() != 0) {
    set_latest_consume_time(from.latest_consume_time());
  }
  if (from.latest_consume_free_time() != 0) {
    set_latest_consume_free_time(from.latest_consume_free_time());
  }
  if (from.acquired_delegated_frozen_balance_for_bandwidth() != 0) {
    set_acquired_delegated_frozen_balance_for_bandwidth(from.acquired_delegated_frozen_balance_for_bandwidth());
  }
  if (from.delegated_frozen_balance_for_bandwidth() != 0) {
    set_delegated_frozen_balance_for_bandwidth(from.delegated_frozen_balance_for_bandwidth());
  }
}

void Account::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account::CopyFrom(const Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account::IsInitialized() const {
  return true;
}

void Account::InternalSwap(Account* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&votes_)->InternalSwap(CastToBase(&other->votes_));
  asset_.Swap(&other->asset_);
  CastToBase(&frozen_)->InternalSwap(CastToBase(&other->frozen_));
  CastToBase(&frozen_supply_)->InternalSwap(CastToBase(&other->frozen_supply_));
  latest_asset_operation_time_.Swap(&other->latest_asset_operation_time_);
  free_asset_net_usage_.Swap(&other->free_asset_net_usage_);
  CastToBase(&active_permission_)->InternalSwap(CastToBase(&other->active_permission_));
  assetv2_.Swap(&other->assetv2_);
  latest_asset_operation_timev2_.Swap(&other->latest_asset_operation_timev2_);
  free_asset_net_usagev2_.Swap(&other->free_asset_net_usagev2_);
  account_name_.Swap(&other->account_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_issued_name_.Swap(&other->asset_issued_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_id_.Swap(&other->account_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  codehash_.Swap(&other->codehash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  asset_issued_id_.Swap(&other->asset_issued_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_resource_, other->account_resource_);
  swap(owner_permission_, other->owner_permission_);
  swap(witness_permission_, other->witness_permission_);
  swap(balance_, other->balance_);
  swap(net_usage_, other->net_usage_);
  swap(create_time_, other->create_time_);
  swap(latest_opration_time_, other->latest_opration_time_);
  swap(type_, other->type_);
  swap(is_witness_, other->is_witness_);
  swap(is_committee_, other->is_committee_);
  swap(allowance_, other->allowance_);
  swap(latest_withdraw_time_, other->latest_withdraw_time_);
  swap(free_net_usage_, other->free_net_usage_);
  swap(latest_consume_time_, other->latest_consume_time_);
  swap(latest_consume_free_time_, other->latest_consume_free_time_);
  swap(acquired_delegated_frozen_balance_for_bandwidth_, other->acquired_delegated_frozen_balance_for_bandwidth_);
  swap(delegated_frozen_balance_for_bandwidth_, other->delegated_frozen_balance_for_bandwidth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Account::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Key::InitAsDefaultInstance() {
}
class Key::_Internal {
 public:
};

Key::Key()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Key)
}
Key::Key(const Key& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  weight_ = from.weight_;
  // @@protoc_insertion_point(copy_constructor:protocol.Key)
}

void Key::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Key_core_2fTron_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_ = PROTOBUF_LONGLONG(0);
}

Key::~Key() {
  // @@protoc_insertion_point(destructor:protocol.Key)
  SharedDtor();
}

void Key::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Key::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Key& Key::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Key_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Key::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Key::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Key::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Key)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 weight = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Key)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Key)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Key::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Key)
}

::PROTOBUF_NAMESPACE_ID::uint8* Key::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Key)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Key)
  return target;
}

size_t Key::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Key)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // int64 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->weight());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Key::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Key)
  GOOGLE_DCHECK_NE(&from, this);
  const Key* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Key>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Key)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Key)
    MergeFrom(*source);
  }
}

void Key::MergeFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Key)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.weight() != 0) {
    set_weight(from.weight());
  }
}

void Key::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Key::CopyFrom(const Key& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Key)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Key::IsInitialized() const {
  return true;
}

void Key::InternalSwap(Key* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(weight_, other->weight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Key::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegatedResource::InitAsDefaultInstance() {
}
class DelegatedResource::_Internal {
 public:
};

DelegatedResource::DelegatedResource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DelegatedResource)
}
DelegatedResource::DelegatedResource(const DelegatedResource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  ::memcpy(&frozen_balance_for_bandwidth_, &from.frozen_balance_for_bandwidth_,
    static_cast<size_t>(reinterpret_cast<char*>(&expire_time_for_energy_) -
    reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResource)
}

void DelegatedResource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegatedResource_core_2fTron_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frozen_balance_for_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_for_energy_) -
      reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
}

DelegatedResource::~DelegatedResource() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResource)
  SharedDtor();
}

void DelegatedResource::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegatedResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegatedResource& DelegatedResource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegatedResource_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void DelegatedResource::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&frozen_balance_for_bandwidth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expire_time_for_energy_) -
      reinterpret_cast<char*>(&frozen_balance_for_bandwidth_)) + sizeof(expire_time_for_energy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelegatedResource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_from(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_to(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance_for_bandwidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frozen_balance_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 frozen_balance_for_energy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          frozen_balance_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time_for_bandwidth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expire_time_for_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expire_time_for_energy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          expire_time_for_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelegatedResource::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DelegatedResource)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes from = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes to = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_to()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frozen_balance_for_bandwidth = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_balance_for_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 frozen_balance_for_energy = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &frozen_balance_for_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expire_time_for_bandwidth = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_for_bandwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expire_time_for_energy = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expire_time_for_energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DelegatedResource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DelegatedResource)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelegatedResource::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DelegatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->from(), output);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->to(), output);
  }

  // int64 frozen_balance_for_bandwidth = 3;
  if (this->frozen_balance_for_bandwidth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->frozen_balance_for_bandwidth(), output);
  }

  // int64 frozen_balance_for_energy = 4;
  if (this->frozen_balance_for_energy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->frozen_balance_for_energy(), output);
  }

  // int64 expire_time_for_bandwidth = 5;
  if (this->expire_time_for_bandwidth() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->expire_time_for_bandwidth(), output);
  }

  // int64 expire_time_for_energy = 6;
  if (this->expire_time_for_energy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->expire_time_for_energy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.DelegatedResource)
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResource::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->to(), target);
  }

  // int64 frozen_balance_for_bandwidth = 3;
  if (this->frozen_balance_for_bandwidth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->frozen_balance_for_bandwidth(), target);
  }

  // int64 frozen_balance_for_energy = 4;
  if (this->frozen_balance_for_energy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->frozen_balance_for_energy(), target);
  }

  // int64 expire_time_for_bandwidth = 5;
  if (this->expire_time_for_bandwidth() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->expire_time_for_bandwidth(), target);
  }

  // int64 expire_time_for_energy = 6;
  if (this->expire_time_for_energy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->expire_time_for_energy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResource)
  return target;
}

size_t DelegatedResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->to());
  }

  // int64 frozen_balance_for_bandwidth = 3;
  if (this->frozen_balance_for_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->frozen_balance_for_bandwidth());
  }

  // int64 frozen_balance_for_energy = 4;
  if (this->frozen_balance_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->frozen_balance_for_energy());
  }

  // int64 expire_time_for_bandwidth = 5;
  if (this->expire_time_for_bandwidth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expire_time_for_bandwidth());
  }

  // int64 expire_time_for_energy = 6;
  if (this->expire_time_for_energy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expire_time_for_energy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegatedResource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DelegatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegatedResource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegatedResource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DelegatedResource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DelegatedResource)
    MergeFrom(*source);
  }
}

void DelegatedResource::MergeFrom(const DelegatedResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  if (from.frozen_balance_for_bandwidth() != 0) {
    set_frozen_balance_for_bandwidth(from.frozen_balance_for_bandwidth());
  }
  if (from.frozen_balance_for_energy() != 0) {
    set_frozen_balance_for_energy(from.frozen_balance_for_energy());
  }
  if (from.expire_time_for_bandwidth() != 0) {
    set_expire_time_for_bandwidth(from.expire_time_for_bandwidth());
  }
  if (from.expire_time_for_energy() != 0) {
    set_expire_time_for_energy(from.expire_time_for_energy());
  }
}

void DelegatedResource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DelegatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegatedResource::CopyFrom(const DelegatedResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResource::IsInitialized() const {
  return true;
}

void DelegatedResource::InternalSwap(DelegatedResource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(frozen_balance_for_bandwidth_, other->frozen_balance_for_bandwidth_);
  swap(frozen_balance_for_energy_, other->frozen_balance_for_energy_);
  swap(expire_time_for_bandwidth_, other->expire_time_for_bandwidth_);
  swap(expire_time_for_energy_, other->expire_time_for_energy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void authority::InitAsDefaultInstance() {
  ::protocol::_authority_default_instance_._instance.get_mutable()->account_ = const_cast< ::protocol::AccountId*>(
      ::protocol::AccountId::internal_default_instance());
}
class authority::_Internal {
 public:
  static const ::protocol::AccountId& account(const authority* msg);
};

const ::protocol::AccountId&
authority::_Internal::account(const authority* msg) {
  return *msg->account_;
}
authority::authority()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.authority)
}
authority::authority(const authority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.permission_name().empty()) {
    permission_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
  }
  if (from.has_account()) {
    account_ = new ::protocol::AccountId(*from.account_);
  } else {
    account_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.authority)
}

void authority::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_authority_core_2fTron_2eproto.base);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_ = nullptr;
}

authority::~authority() {
  // @@protoc_insertion_point(destructor:protocol.authority)
  SharedDtor();
}

void authority::SharedDtor() {
  permission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete account_;
}

void authority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const authority& authority::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_authority_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void authority::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.authority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permission_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* authority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.AccountId account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_account(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes permission_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_permission_name(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool authority::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.authority)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.AccountId account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes permission_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_permission_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.authority)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.authority)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void authority::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.authority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.AccountId account = 1;
  if (this->has_account()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::account(this), output);
  }

  // bytes permission_name = 2;
  if (this->permission_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->permission_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.authority)
}

::PROTOBUF_NAMESPACE_ID::uint8* authority::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.authority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.AccountId account = 1;
  if (this->has_account()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::account(this), target);
  }

  // bytes permission_name = 2;
  if (this->permission_name().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->permission_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.authority)
  return target;
}

size_t authority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.authority)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes permission_name = 2;
  if (this->permission_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->permission_name());
  }

  // .protocol.AccountId account = 1;
  if (this->has_account()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *account_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void authority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.authority)
  GOOGLE_DCHECK_NE(&from, this);
  const authority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<authority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.authority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.authority)
    MergeFrom(*source);
  }
}

void authority::MergeFrom(const authority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.authority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.permission_name().size() > 0) {

    permission_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
  }
  if (from.has_account()) {
    mutable_account()->::protocol::AccountId::MergeFrom(from.account());
  }
}

void authority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void authority::CopyFrom(const authority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.authority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool authority::IsInitialized() const {
  return true;
}

void authority::InternalSwap(authority* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  permission_name_.Swap(&other->permission_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_, other->account_);
}

::PROTOBUF_NAMESPACE_ID::Metadata authority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Permission::InitAsDefaultInstance() {
}
class Permission::_Internal {
 public:
};

Permission::Permission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Permission)
}
Permission::Permission(const Permission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.permission_name().empty()) {
    permission_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
  }
  operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.operations().empty()) {
    operations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operations_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&parent_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.Permission)
}

void Permission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Permission_core_2fTron_2eproto.base);
  permission_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operations_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:protocol.Permission)
  SharedDtor();
}

void Permission::SharedDtor() {
  permission_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operations_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Permission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Permission& Permission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Permission_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  permission_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&parent_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(parent_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Permission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Permission.PermissionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::Permission_PermissionType>(val));
        } else goto handle_unusual;
        continue;
      // int32 id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string permission_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_permission_name(), ptr, ctx, "protocol.Permission.permission_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 parent_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          parent_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes operations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_operations(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Key keys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Permission::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Permission)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Permission.PermissionType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::Permission_PermissionType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string permission_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_permission_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->permission_name().data(), static_cast<int>(this->permission_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Permission.permission_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 threshold = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parent_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes operations = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_operations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Key keys = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Permission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Permission)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Permission::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Permission.PermissionType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // string permission_name = 3;
  if (this->permission_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->permission_name().data(), static_cast<int>(this->permission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Permission.permission_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->permission_name(), output);
  }

  // int64 threshold = 4;
  if (this->threshold() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->threshold(), output);
  }

  // int32 parent_id = 5;
  if (this->parent_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->parent_id(), output);
  }

  // bytes operations = 6;
  if (this->operations().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->operations(), output);
  }

  // repeated .protocol.Key keys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Permission)
}

::PROTOBUF_NAMESPACE_ID::uint8* Permission::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Permission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Permission.PermissionType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // string permission_name = 3;
  if (this->permission_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->permission_name().data(), static_cast<int>(this->permission_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Permission.permission_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->permission_name(), target);
  }

  // int64 threshold = 4;
  if (this->threshold() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->threshold(), target);
  }

  // int32 parent_id = 5;
  if (this->parent_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->parent_id(), target);
  }

  // bytes operations = 6;
  if (this->operations().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->operations(), target);
  }

  // repeated .protocol.Key keys = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->keys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Permission)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Key keys = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  // string permission_name = 3;
  if (this->permission_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->permission_name());
  }

  // bytes operations = 6;
  if (this->operations().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->operations());
  }

  // .protocol.Permission.PermissionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int64 threshold = 4;
  if (this->threshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->threshold());
  }

  // int32 parent_id = 5;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Permission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  const Permission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Permission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Permission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Permission)
    MergeFrom(*source);
  }
}

void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.permission_name().size() > 0) {

    permission_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.permission_name_);
  }
  if (from.operations().size() > 0) {

    operations_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.operations_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
}

void Permission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::InternalSwap(Permission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  permission_name_.Swap(&other->permission_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  operations_.Swap(&other->operations_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(id_, other->id_);
  swap(threshold_, other->threshold_);
  swap(parent_id_, other->parent_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Permission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Witness::InitAsDefaultInstance() {
}
class Witness::_Internal {
 public:
};

Witness::Witness()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Witness)
}
Witness::Witness(const Witness& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&votecount_, &from.votecount_,
    static_cast<size_t>(reinterpret_cast<char*>(&isjobs_) -
    reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
  // @@protoc_insertion_point(copy_constructor:protocol.Witness)
}

void Witness::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Witness_core_2fTron_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&votecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isjobs_) -
      reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
}

Witness::~Witness() {
  // @@protoc_insertion_point(destructor:protocol.Witness)
  SharedDtor();
}

void Witness::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Witness::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Witness& Witness::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Witness_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Witness::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&votecount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isjobs_) -
      reinterpret_cast<char*>(&votecount_)) + sizeof(isjobs_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Witness::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 voteCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          votecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pubkey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_url(), ptr, ctx, "protocol.Witness.url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalProduced = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          totalproduced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalMissed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          totalmissed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latestBlockNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          latestblocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 latestSlotNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          latestslotnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isJobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          isjobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Witness::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Witness)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 voteCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &votecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubKey = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string url = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->url().data(), static_cast<int>(this->url().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Witness.url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalProduced = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalproduced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalMissed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalmissed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latestBlockNum = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latestblocknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 latestSlotNum = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &latestslotnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isJobs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjobs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Witness)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Witness)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Witness::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // int64 voteCount = 2;
  if (this->votecount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->votecount(), output);
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pubkey(), output);
  }

  // string url = 4;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Witness.url");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->url(), output);
  }

  // int64 totalProduced = 5;
  if (this->totalproduced() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->totalproduced(), output);
  }

  // int64 totalMissed = 6;
  if (this->totalmissed() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->totalmissed(), output);
  }

  // int64 latestBlockNum = 7;
  if (this->latestblocknum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->latestblocknum(), output);
  }

  // int64 latestSlotNum = 8;
  if (this->latestslotnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->latestslotnum(), output);
  }

  // bool isJobs = 9;
  if (this->isjobs() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->isjobs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Witness)
}

::PROTOBUF_NAMESPACE_ID::uint8* Witness::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Witness)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // int64 voteCount = 2;
  if (this->votecount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->votecount(), target);
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubkey(), target);
  }

  // string url = 4;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->url().data(), static_cast<int>(this->url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Witness.url");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->url(), target);
  }

  // int64 totalProduced = 5;
  if (this->totalproduced() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->totalproduced(), target);
  }

  // int64 totalMissed = 6;
  if (this->totalmissed() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->totalmissed(), target);
  }

  // int64 latestBlockNum = 7;
  if (this->latestblocknum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->latestblocknum(), target);
  }

  // int64 latestSlotNum = 8;
  if (this->latestslotnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->latestslotnum(), target);
  }

  // bool isJobs = 9;
  if (this->isjobs() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->isjobs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Witness)
  return target;
}

size_t Witness::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Witness)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // string url = 4;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->url());
  }

  // int64 voteCount = 2;
  if (this->votecount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->votecount());
  }

  // int64 totalProduced = 5;
  if (this->totalproduced() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalproduced());
  }

  // int64 totalMissed = 6;
  if (this->totalmissed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalmissed());
  }

  // int64 latestBlockNum = 7;
  if (this->latestblocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latestblocknum());
  }

  // int64 latestSlotNum = 8;
  if (this->latestslotnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->latestslotnum());
  }

  // bool isJobs = 9;
  if (this->isjobs() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Witness::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Witness)
  GOOGLE_DCHECK_NE(&from, this);
  const Witness* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Witness>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Witness)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Witness)
    MergeFrom(*source);
  }
}

void Witness::MergeFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Witness)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.votecount() != 0) {
    set_votecount(from.votecount());
  }
  if (from.totalproduced() != 0) {
    set_totalproduced(from.totalproduced());
  }
  if (from.totalmissed() != 0) {
    set_totalmissed(from.totalmissed());
  }
  if (from.latestblocknum() != 0) {
    set_latestblocknum(from.latestblocknum());
  }
  if (from.latestslotnum() != 0) {
    set_latestslotnum(from.latestslotnum());
  }
  if (from.isjobs() != 0) {
    set_isjobs(from.isjobs());
  }
}

void Witness::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Witness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Witness::CopyFrom(const Witness& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Witness)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Witness::IsInitialized() const {
  return true;
}

void Witness::InternalSwap(Witness* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(votecount_, other->votecount_);
  swap(totalproduced_, other->totalproduced_);
  swap(totalmissed_, other->totalmissed_);
  swap(latestblocknum_, other->latestblocknum_);
  swap(latestslotnum_, other->latestslotnum_);
  swap(isjobs_, other->isjobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Witness::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Votes::InitAsDefaultInstance() {
}
class Votes::_Internal {
 public:
};

Votes::Votes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Votes)
}
Votes::Votes(const Votes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      old_votes_(from.old_votes_),
      new_votes_(from.new_votes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Votes)
}

void Votes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Votes_core_2fTron_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Votes::~Votes() {
  // @@protoc_insertion_point(destructor:protocol.Votes)
  SharedDtor();
}

void Votes::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Votes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Votes& Votes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Votes_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Votes::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  old_votes_.Clear();
  new_votes_.Clear();
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Votes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote old_votes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_old_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Vote new_votes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_new_votes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Votes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Votes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Vote old_votes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_old_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Vote new_votes = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_new_votes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Votes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Votes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Votes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // repeated .protocol.Vote old_votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->old_votes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->old_votes(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.Vote new_votes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_votes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->new_votes(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Votes)
}

::PROTOBUF_NAMESPACE_ID::uint8* Votes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Votes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // repeated .protocol.Vote old_votes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->old_votes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->old_votes(static_cast<int>(i)), target);
  }

  // repeated .protocol.Vote new_votes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->new_votes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->new_votes(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Votes)
  return target;
}

size_t Votes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Votes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Vote old_votes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->old_votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->old_votes(static_cast<int>(i)));
    }
  }

  // repeated .protocol.Vote new_votes = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->new_votes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->new_votes(static_cast<int>(i)));
    }
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Votes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Votes)
  GOOGLE_DCHECK_NE(&from, this);
  const Votes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Votes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Votes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Votes)
    MergeFrom(*source);
  }
}

void Votes::MergeFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Votes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  old_votes_.MergeFrom(from.old_votes_);
  new_votes_.MergeFrom(from.new_votes_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void Votes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Votes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Votes::CopyFrom(const Votes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Votes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Votes::IsInitialized() const {
  return true;
}

void Votes::InternalSwap(Votes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&old_votes_)->InternalSwap(CastToBase(&other->old_votes_));
  CastToBase(&new_votes_)->InternalSwap(CastToBase(&other->new_votes_));
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Votes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXOutput::InitAsDefaultInstance() {
}
class TXOutput::_Internal {
 public:
};

TXOutput::TXOutput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TXOutput)
}
TXOutput::TXOutput(const TXOutput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkeyhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pubkeyhash().empty()) {
    pubkeyhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkeyhash_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protocol.TXOutput)
}

void TXOutput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXOutput_core_2fTron_2eproto.base);
  pubkeyhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

TXOutput::~TXOutput() {
  // @@protoc_insertion_point(destructor:protocol.TXOutput)
  SharedDtor();
}

void TXOutput::SharedDtor() {
  pubkeyhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TXOutput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXOutput& TXOutput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXOutput_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TXOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkeyhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TXOutput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKeyHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pubkeyhash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TXOutput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TXOutput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubKeyHash = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkeyhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TXOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TXOutput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TXOutput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TXOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->value(), output);
  }

  // bytes pubKeyHash = 2;
  if (this->pubkeyhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pubkeyhash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TXOutput)
}

::PROTOBUF_NAMESPACE_ID::uint8* TXOutput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXOutput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->value(), target);
  }

  // bytes pubKeyHash = 2;
  if (this->pubkeyhash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->pubkeyhash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXOutput)
  return target;
}

size_t TXOutput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXOutput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubKeyHash = 2;
  if (this->pubkeyhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->pubkeyhash());
  }

  // int64 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXOutput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TXOutput)
  GOOGLE_DCHECK_NE(&from, this);
  const TXOutput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXOutput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TXOutput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TXOutput)
    MergeFrom(*source);
  }
}

void TXOutput::MergeFrom(const TXOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXOutput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkeyhash().size() > 0) {

    pubkeyhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkeyhash_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void TXOutput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TXOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXOutput::CopyFrom(const TXOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXOutput::IsInitialized() const {
  return true;
}

void TXOutput::InternalSwap(TXOutput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkeyhash_.Swap(&other->pubkeyhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXOutput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXInput_raw::InitAsDefaultInstance() {
}
class TXInput_raw::_Internal {
 public:
};

TXInput_raw::TXInput_raw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TXInput.raw)
}
TXInput_raw::TXInput_raw(const TXInput_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  vout_ = from.vout_;
  // @@protoc_insertion_point(copy_constructor:protocol.TXInput.raw)
}

void TXInput_raw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXInput_raw_core_2fTron_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vout_ = PROTOBUF_LONGLONG(0);
}

TXInput_raw::~TXInput_raw() {
  // @@protoc_insertion_point(destructor:protocol.TXInput.raw)
  SharedDtor();
}

void TXInput_raw::SharedDtor() {
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TXInput_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXInput_raw& TXInput_raw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXInput_raw_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TXInput_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXInput.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vout_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TXInput_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes txID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_txid(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 vout = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubKey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_pubkey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TXInput_raw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TXInput.raw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes txID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 vout = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &vout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubKey = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TXInput.raw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TXInput.raw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TXInput_raw::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TXInput.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txID = 1;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->txid(), output);
  }

  // int64 vout = 2;
  if (this->vout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->vout(), output);
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pubkey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TXInput.raw)
}

::PROTOBUF_NAMESPACE_ID::uint8* TXInput_raw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXInput.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txID = 1;
  if (this->txid().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->txid(), target);
  }

  // int64 vout = 2;
  if (this->vout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->vout(), target);
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubkey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXInput.raw)
  return target;
}

size_t TXInput_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXInput.raw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txID = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->txid());
  }

  // bytes pubKey = 3;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // int64 vout = 2;
  if (this->vout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->vout());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXInput_raw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TXInput.raw)
  GOOGLE_DCHECK_NE(&from, this);
  const TXInput_raw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXInput_raw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TXInput.raw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TXInput.raw)
    MergeFrom(*source);
  }
}

void TXInput_raw::MergeFrom(const TXInput_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXInput.raw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.vout() != 0) {
    set_vout(from.vout());
  }
}

void TXInput_raw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TXInput.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXInput_raw::CopyFrom(const TXInput_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXInput.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXInput_raw::IsInitialized() const {
  return true;
}

void TXInput_raw::InternalSwap(TXInput_raw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vout_, other->vout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXInput_raw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXInput::InitAsDefaultInstance() {
  ::protocol::_TXInput_default_instance_._instance.get_mutable()->raw_data_ = const_cast< ::protocol::TXInput_raw*>(
      ::protocol::TXInput_raw::internal_default_instance());
}
class TXInput::_Internal {
 public:
  static const ::protocol::TXInput_raw& raw_data(const TXInput* msg);
};

const ::protocol::TXInput_raw&
TXInput::_Internal::raw_data(const TXInput* msg) {
  return *msg->raw_data_;
}
TXInput::TXInput()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TXInput)
}
TXInput::TXInput(const TXInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_raw_data()) {
    raw_data_ = new ::protocol::TXInput_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TXInput)
}

void TXInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXInput_core_2fTron_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_data_ = nullptr;
}

TXInput::~TXInput() {
  // @@protoc_insertion_point(destructor:protocol.TXInput)
  SharedDtor();
}

void TXInput::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void TXInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXInput& TXInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXInput_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TXInput::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TXInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.TXInput.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TXInput::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TXInput)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.TXInput.raw raw_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TXInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TXInput)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TXInput::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TXInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TXInput.raw raw_data = 1;
  if (this->has_raw_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::raw_data(this), output);
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TXInput)
}

::PROTOBUF_NAMESPACE_ID::uint8* TXInput::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.TXInput.raw raw_data = 1;
  if (this->has_raw_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::raw_data(this), target);
  }

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXInput)
  return target;
}

size_t TXInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXInput)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 4;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // .protocol.TXInput.raw raw_data = 1;
  if (this->has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TXInput)
  GOOGLE_DCHECK_NE(&from, this);
  const TXInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TXInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TXInput)
    MergeFrom(*source);
  }
}

void TXInput::MergeFrom(const TXInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_raw_data()) {
    mutable_raw_data()->::protocol::TXInput_raw::MergeFrom(from.raw_data());
  }
}

void TXInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TXInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXInput::CopyFrom(const TXInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXInput::IsInitialized() const {
  return true;
}

void TXInput::InternalSwap(TXInput* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TXInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TXOutputs::InitAsDefaultInstance() {
}
class TXOutputs::_Internal {
 public:
};

TXOutputs::TXOutputs()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TXOutputs)
}
TXOutputs::TXOutputs(const TXOutputs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      outputs_(from.outputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.TXOutputs)
}

void TXOutputs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TXOutputs_core_2fTron_2eproto.base);
}

TXOutputs::~TXOutputs() {
  // @@protoc_insertion_point(destructor:protocol.TXOutputs)
  SharedDtor();
}

void TXOutputs::SharedDtor() {
}

void TXOutputs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TXOutputs& TXOutputs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TXOutputs_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TXOutputs::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TXOutputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outputs_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TXOutputs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.TXOutput outputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TXOutputs::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TXOutputs)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.TXOutput outputs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_outputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TXOutputs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TXOutputs)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TXOutputs::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TXOutputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TXOutput outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->outputs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TXOutputs)
}

::PROTOBUF_NAMESPACE_ID::uint8* TXOutputs::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TXOutputs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.TXOutput outputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->outputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->outputs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TXOutputs)
  return target;
}

size_t TXOutputs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TXOutputs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TXOutput outputs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->outputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->outputs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TXOutputs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TXOutputs)
  GOOGLE_DCHECK_NE(&from, this);
  const TXOutputs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TXOutputs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TXOutputs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TXOutputs)
    MergeFrom(*source);
  }
}

void TXOutputs::MergeFrom(const TXOutputs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TXOutputs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  outputs_.MergeFrom(from.outputs_);
}

void TXOutputs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TXOutputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TXOutputs::CopyFrom(const TXOutputs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TXOutputs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TXOutputs::IsInitialized() const {
  return true;
}

void TXOutputs::InternalSwap(TXOutputs* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&outputs_)->InternalSwap(CastToBase(&other->outputs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TXOutputs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResourceReceipt::InitAsDefaultInstance() {
}
class ResourceReceipt::_Internal {
 public:
};

ResourceReceipt::ResourceReceipt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ResourceReceipt)
}
ResourceReceipt::ResourceReceipt(const ResourceReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&energy_usage_, &from.energy_usage_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:protocol.ResourceReceipt)
}

void ResourceReceipt::SharedCtor() {
  ::memset(&energy_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
}

ResourceReceipt::~ResourceReceipt() {
  // @@protoc_insertion_point(destructor:protocol.ResourceReceipt)
  SharedDtor();
}

void ResourceReceipt::SharedDtor() {
}

void ResourceReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResourceReceipt& ResourceReceipt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResourceReceipt_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void ResourceReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ResourceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&energy_usage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&energy_usage_)) + sizeof(result_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResourceReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 energy_usage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 energy_fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          energy_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 origin_energy_usage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          origin_energy_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 energy_usage_total = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          energy_usage_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 net_usage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          net_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 net_fee = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          net_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.contractResult result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::protocol::Transaction_Result_contractResult>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResourceReceipt::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ResourceReceipt)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 energy_usage = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 energy_fee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 origin_energy_usage = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &origin_energy_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 energy_usage_total = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &energy_usage_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 net_usage = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_usage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 net_fee = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &net_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Transaction.Result.contractResult result = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::protocol::Transaction_Result_contractResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ResourceReceipt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ResourceReceipt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResourceReceipt::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ResourceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->energy_usage(), output);
  }

  // int64 energy_fee = 2;
  if (this->energy_fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->energy_fee(), output);
  }

  // int64 origin_energy_usage = 3;
  if (this->origin_energy_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->origin_energy_usage(), output);
  }

  // int64 energy_usage_total = 4;
  if (this->energy_usage_total() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->energy_usage_total(), output);
  }

  // int64 net_usage = 5;
  if (this->net_usage() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->net_usage(), output);
  }

  // int64 net_fee = 6;
  if (this->net_fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->net_fee(), output);
  }

  // .protocol.Transaction.Result.contractResult result = 7;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ResourceReceipt)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceReceipt::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ResourceReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->energy_usage(), target);
  }

  // int64 energy_fee = 2;
  if (this->energy_fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->energy_fee(), target);
  }

  // int64 origin_energy_usage = 3;
  if (this->origin_energy_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->origin_energy_usage(), target);
  }

  // int64 energy_usage_total = 4;
  if (this->energy_usage_total() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->energy_usage_total(), target);
  }

  // int64 net_usage = 5;
  if (this->net_usage() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->net_usage(), target);
  }

  // int64 net_fee = 6;
  if (this->net_fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->net_fee(), target);
  }

  // .protocol.Transaction.Result.contractResult result = 7;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ResourceReceipt)
  return target;
}

size_t ResourceReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ResourceReceipt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 energy_usage = 1;
  if (this->energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->energy_usage());
  }

  // int64 energy_fee = 2;
  if (this->energy_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->energy_fee());
  }

  // int64 origin_energy_usage = 3;
  if (this->origin_energy_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->origin_energy_usage());
  }

  // int64 energy_usage_total = 4;
  if (this->energy_usage_total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->energy_usage_total());
  }

  // int64 net_usage = 5;
  if (this->net_usage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->net_usage());
  }

  // int64 net_fee = 6;
  if (this->net_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->net_fee());
  }

  // .protocol.Transaction.Result.contractResult result = 7;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ResourceReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ResourceReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ResourceReceipt)
    MergeFrom(*source);
  }
}

void ResourceReceipt::MergeFrom(const ResourceReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ResourceReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.energy_usage() != 0) {
    set_energy_usage(from.energy_usage());
  }
  if (from.energy_fee() != 0) {
    set_energy_fee(from.energy_fee());
  }
  if (from.origin_energy_usage() != 0) {
    set_origin_energy_usage(from.origin_energy_usage());
  }
  if (from.energy_usage_total() != 0) {
    set_energy_usage_total(from.energy_usage_total());
  }
  if (from.net_usage() != 0) {
    set_net_usage(from.net_usage());
  }
  if (from.net_fee() != 0) {
    set_net_fee(from.net_fee());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ResourceReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ResourceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceReceipt::CopyFrom(const ResourceReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ResourceReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceReceipt::IsInitialized() const {
  return true;
}

void ResourceReceipt::InternalSwap(ResourceReceipt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(energy_usage_, other->energy_usage_);
  swap(energy_fee_, other->energy_fee_);
  swap(origin_energy_usage_, other->origin_energy_usage_);
  swap(energy_usage_total_, other->energy_usage_total_);
  swap(net_usage_, other->net_usage_);
  swap(net_fee_, other->net_fee_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceReceipt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Contract::InitAsDefaultInstance() {
  ::protocol::_Transaction_Contract_default_instance_._instance.get_mutable()->parameter_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
}
class Transaction_Contract::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Any& parameter(const Transaction_Contract* msg);
};

const PROTOBUF_NAMESPACE_ID::Any&
Transaction_Contract::_Internal::parameter(const Transaction_Contract* msg) {
  return *msg->parameter_;
}
void Transaction_Contract::clear_parameter() {
  if (GetArenaNoVirtual() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
}
Transaction_Contract::Transaction_Contract()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transaction.Contract)
}
Transaction_Contract::Transaction_Contract(const Transaction_Contract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.provider().empty()) {
    provider_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provider_);
  }
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.contractname().empty()) {
    contractname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractname_);
  }
  if (from.has_parameter()) {
    parameter_ = new PROTOBUF_NAMESPACE_ID::Any(*from.parameter_);
  } else {
    parameter_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&permission_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(permission_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.Contract)
}

void Transaction_Contract::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Contract_core_2fTron_2eproto.base);
  provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&parameter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_id_) -
      reinterpret_cast<char*>(&parameter_)) + sizeof(permission_id_));
}

Transaction_Contract::~Transaction_Contract() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.Contract)
  SharedDtor();
}

void Transaction_Contract::SharedDtor() {
  provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete parameter_;
}

void Transaction_Contract::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Contract& Transaction_Contract::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Contract_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Contract::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contractname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && parameter_ != nullptr) {
    delete parameter_;
  }
  parameter_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&permission_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(permission_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction_Contract::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Transaction.Contract.ContractType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::Transaction_Contract_ContractType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Any parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes provider = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_provider(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ContractName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_contractname(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Permission_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          permission_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction_Contract::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transaction.Contract)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Transaction.Contract.ContractType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::Transaction_Contract_ContractType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any parameter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes provider = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_provider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ContractName = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contractname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 Permission_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &permission_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transaction.Contract)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transaction.Contract)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction_Contract::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .google.protobuf.Any parameter = 2;
  if (this->has_parameter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::parameter(this), output);
  }

  // bytes provider = 3;
  if (this->provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->provider(), output);
  }

  // bytes ContractName = 4;
  if (this->contractname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->contractname(), output);
  }

  // int32 Permission_id = 5;
  if (this->permission_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->permission_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transaction.Contract)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Contract::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.Contract)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .google.protobuf.Any parameter = 2;
  if (this->has_parameter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::parameter(this), target);
  }

  // bytes provider = 3;
  if (this->provider().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->provider(), target);
  }

  // bytes ContractName = 4;
  if (this->contractname().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->contractname(), target);
  }

  // int32 Permission_id = 5;
  if (this->permission_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->permission_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.Contract)
  return target;
}

size_t Transaction_Contract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.Contract)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes provider = 3;
  if (this->provider().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->provider());
  }

  // bytes ContractName = 4;
  if (this->contractname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->contractname());
  }

  // .google.protobuf.Any parameter = 2;
  if (this->has_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parameter_);
  }

  // .protocol.Transaction.Contract.ContractType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 Permission_id = 5;
  if (this->permission_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->permission_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Contract::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Contract* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Contract>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction.Contract)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction.Contract)
    MergeFrom(*source);
  }
}

void Transaction_Contract::MergeFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.Contract)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider().size() > 0) {

    provider_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.provider_);
  }
  if (from.contractname().size() > 0) {

    contractname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contractname_);
  }
  if (from.has_parameter()) {
    mutable_parameter()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from.parameter());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.permission_id() != 0) {
    set_permission_id(from.permission_id());
  }
}

void Transaction_Contract::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Contract::CopyFrom(const Transaction_Contract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.Contract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Contract::IsInitialized() const {
  return true;
}

void Transaction_Contract::InternalSwap(Transaction_Contract* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  provider_.Swap(&other->provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contractname_.Swap(&other->contractname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parameter_, other->parameter_);
  swap(type_, other->type_);
  swap(permission_id_, other->permission_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Contract::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_Result::InitAsDefaultInstance() {
}
class Transaction_Result::_Internal {
 public:
};

Transaction_Result::Transaction_Result()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transaction.Result)
}
Transaction_Result::Transaction_Result(const Transaction_Result& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.assetissueid().empty()) {
    assetissueid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetissueid_);
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&shielded_transaction_fee_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.Result)
}

void Transaction_Result::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_Result_core_2fTron_2eproto.base);
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shielded_transaction_fee_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
}

Transaction_Result::~Transaction_Result() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.Result)
  SharedDtor();
}

void Transaction_Result::SharedDtor() {
  assetissueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_Result& Transaction_Result::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_Result_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Transaction_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assetissueid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shielded_transaction_fee_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction_Result::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.code ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ret(static_cast<::protocol::Transaction_Result_code>(val));
        } else goto handle_unusual;
        continue;
      // .protocol.Transaction.Result.contractResult contractRet = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_contractret(static_cast<::protocol::Transaction_Result_contractResult>(val));
        } else goto handle_unusual;
        continue;
      // string assetIssueID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_assetissueid(), ptr, ctx, "protocol.Transaction.Result.assetIssueID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdraw_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          withdraw_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_amount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfreeze_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_received_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          exchange_received_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_inject_another_amount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exchange_inject_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_withdraw_another_amount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          exchange_withdraw_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shielded_transaction_fee = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          shielded_transaction_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction_Result::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transaction.Result)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 fee = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Transaction.Result.code ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ret(static_cast< ::protocol::Transaction_Result_code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.Transaction.Result.contractResult contractRet = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_contractret(static_cast< ::protocol::Transaction_Result_contractResult >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assetIssueID = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_assetissueid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.Transaction.Result.assetIssueID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 withdraw_amount = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &withdraw_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unfreeze_amount = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unfreeze_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_received_amount = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_received_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_inject_another_amount = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_inject_another_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_withdraw_another_amount = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_withdraw_another_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_id = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shielded_transaction_fee = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &shielded_transaction_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transaction.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transaction.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction_Result::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transaction.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->fee(), output);
  }

  // .protocol.Transaction.Result.code ret = 2;
  if (this->ret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  if (this->contractret() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->contractret(), output);
  }

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Transaction.Result.assetIssueID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->assetissueid(), output);
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->withdraw_amount(), output);
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->unfreeze_amount(), output);
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->exchange_received_amount(), output);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->exchange_inject_another_amount(), output);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->exchange_withdraw_another_amount(), output);
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->exchange_id(), output);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->shielded_transaction_fee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transaction.Result)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_Result::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.Result)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->fee(), target);
  }

  // .protocol.Transaction.Result.code ret = 2;
  if (this->ret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  if (this->contractret() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->contractret(), target);
  }

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.Transaction.Result.assetIssueID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->assetissueid(), target);
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->withdraw_amount(), target);
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->unfreeze_amount(), target);
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->exchange_received_amount(), target);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->exchange_inject_another_amount(), target);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->exchange_withdraw_another_amount(), target);
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->exchange_id(), target);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->shielded_transaction_fee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.Result)
  return target;
}

size_t Transaction_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->assetissueid());
  }

  // int64 fee = 1;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->fee());
  }

  // .protocol.Transaction.Result.code ret = 2;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  if (this->contractret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->contractret());
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->withdraw_amount());
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unfreeze_amount());
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_received_amount());
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_inject_another_amount());
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_withdraw_another_amount());
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_id());
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->shielded_transaction_fee());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_Result::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_Result* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction.Result)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction.Result)
    MergeFrom(*source);
  }
}

void Transaction_Result::MergeFrom(const Transaction_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.assetissueid().size() > 0) {

    assetissueid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetissueid_);
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
  if (from.ret() != 0) {
    set_ret(from.ret());
  }
  if (from.contractret() != 0) {
    set_contractret(from.contractret());
  }
  if (from.withdraw_amount() != 0) {
    set_withdraw_amount(from.withdraw_amount());
  }
  if (from.unfreeze_amount() != 0) {
    set_unfreeze_amount(from.unfreeze_amount());
  }
  if (from.exchange_received_amount() != 0) {
    set_exchange_received_amount(from.exchange_received_amount());
  }
  if (from.exchange_inject_another_amount() != 0) {
    set_exchange_inject_another_amount(from.exchange_inject_another_amount());
  }
  if (from.exchange_withdraw_another_amount() != 0) {
    set_exchange_withdraw_another_amount(from.exchange_withdraw_another_amount());
  }
  if (from.exchange_id() != 0) {
    set_exchange_id(from.exchange_id());
  }
  if (from.shielded_transaction_fee() != 0) {
    set_shielded_transaction_fee(from.shielded_transaction_fee());
  }
}

void Transaction_Result::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_Result::CopyFrom(const Transaction_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_Result::IsInitialized() const {
  return true;
}

void Transaction_Result::InternalSwap(Transaction_Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  assetissueid_.Swap(&other->assetissueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fee_, other->fee_);
  swap(ret_, other->ret_);
  swap(contractret_, other->contractret_);
  swap(withdraw_amount_, other->withdraw_amount_);
  swap(unfreeze_amount_, other->unfreeze_amount_);
  swap(exchange_received_amount_, other->exchange_received_amount_);
  swap(exchange_inject_another_amount_, other->exchange_inject_another_amount_);
  swap(exchange_withdraw_another_amount_, other->exchange_withdraw_another_amount_);
  swap(exchange_id_, other->exchange_id_);
  swap(shielded_transaction_fee_, other->shielded_transaction_fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_Result::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction_raw::InitAsDefaultInstance() {
}
class Transaction_raw::_Internal {
 public:
};

Transaction_raw::Transaction_raw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transaction.raw)
}
Transaction_raw::Transaction_raw(const Transaction_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      auths_(from.auths_),
      contract_(from.contract_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ref_block_bytes().empty()) {
    ref_block_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_block_bytes_);
  }
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.ref_block_hash().empty()) {
    ref_block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_block_hash_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  scripts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.scripts().empty()) {
    scripts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scripts_);
  }
  ::memcpy(&ref_block_num_, &from.ref_block_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&fee_limit_) -
    reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction.raw)
}

void Transaction_raw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_raw_core_2fTron_2eproto.base);
  ref_block_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripts_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
}

Transaction_raw::~Transaction_raw() {
  // @@protoc_insertion_point(destructor:protocol.Transaction.raw)
  SharedDtor();
}

void Transaction_raw::SharedDtor() {
  ref_block_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripts_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction_raw& Transaction_raw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_raw_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Transaction_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  auths_.Clear();
  contract_.Clear();
  ref_block_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ref_block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scripts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ref_block_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fee_limit_) -
      reinterpret_cast<char*>(&ref_block_num_)) + sizeof(fee_limit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes ref_block_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ref_block_bytes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ref_block_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ref_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ref_block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ref_block_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          expiration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.authority auths = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_auths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // bytes data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction.Contract contract = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_contract(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // bytes scripts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_scripts(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          fee_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction_raw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transaction.raw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes ref_block_bytes = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_block_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 ref_block_num = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &ref_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes ref_block_hash = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ref_block_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 expiration = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.authority auths = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_auths()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Transaction.Contract contract = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_contract()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes scripts = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_scripts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fee_limit = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transaction.raw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transaction.raw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction_raw::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_block_bytes = 1;
  if (this->ref_block_bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->ref_block_bytes(), output);
  }

  // int64 ref_block_num = 3;
  if (this->ref_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->ref_block_num(), output);
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ref_block_hash(), output);
  }

  // int64 expiration = 8;
  if (this->expiration() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->expiration(), output);
  }

  // repeated .protocol.authority auths = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auths_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->auths(static_cast<int>(i)),
      output);
  }

  // bytes data = 10;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->data(), output);
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contract_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->contract(static_cast<int>(i)),
      output);
  }

  // bytes scripts = 12;
  if (this->scripts().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->scripts(), output);
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->timestamp(), output);
  }

  // int64 fee_limit = 18;
  if (this->fee_limit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->fee_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transaction.raw)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction_raw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ref_block_bytes = 1;
  if (this->ref_block_bytes().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->ref_block_bytes(), target);
  }

  // int64 ref_block_num = 3;
  if (this->ref_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->ref_block_num(), target);
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->ref_block_hash(), target);
  }

  // int64 expiration = 8;
  if (this->expiration() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->expiration(), target);
  }

  // repeated .protocol.authority auths = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->auths_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->auths(static_cast<int>(i)), target);
  }

  // bytes data = 10;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        10, this->data(), target);
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->contract_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->contract(static_cast<int>(i)), target);
  }

  // bytes scripts = 12;
  if (this->scripts().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        12, this->scripts(), target);
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->timestamp(), target);
  }

  // int64 fee_limit = 18;
  if (this->fee_limit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->fee_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction.raw)
  return target;
}

size_t Transaction_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction.raw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.authority auths = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->auths_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->auths(static_cast<int>(i)));
    }
  }

  // repeated .protocol.Transaction.Contract contract = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->contract_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->contract(static_cast<int>(i)));
    }
  }

  // bytes ref_block_bytes = 1;
  if (this->ref_block_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ref_block_bytes());
  }

  // bytes ref_block_hash = 4;
  if (this->ref_block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->ref_block_hash());
  }

  // bytes data = 10;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // bytes scripts = 12;
  if (this->scripts().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->scripts());
  }

  // int64 ref_block_num = 3;
  if (this->ref_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->ref_block_num());
  }

  // int64 expiration = 8;
  if (this->expiration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->expiration());
  }

  // int64 timestamp = 14;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 fee_limit = 18;
  if (this->fee_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->fee_limit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction_raw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction.raw)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction_raw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction_raw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction.raw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction.raw)
    MergeFrom(*source);
  }
}

void Transaction_raw::MergeFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction.raw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  auths_.MergeFrom(from.auths_);
  contract_.MergeFrom(from.contract_);
  if (from.ref_block_bytes().size() > 0) {

    ref_block_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_block_bytes_);
  }
  if (from.ref_block_hash().size() > 0) {

    ref_block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ref_block_hash_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.scripts().size() > 0) {

    scripts_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scripts_);
  }
  if (from.ref_block_num() != 0) {
    set_ref_block_num(from.ref_block_num());
  }
  if (from.expiration() != 0) {
    set_expiration(from.expiration());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.fee_limit() != 0) {
    set_fee_limit(from.fee_limit());
  }
}

void Transaction_raw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction_raw::CopyFrom(const Transaction_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction_raw::IsInitialized() const {
  return true;
}

void Transaction_raw::InternalSwap(Transaction_raw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&auths_)->InternalSwap(CastToBase(&other->auths_));
  CastToBase(&contract_)->InternalSwap(CastToBase(&other->contract_));
  ref_block_bytes_.Swap(&other->ref_block_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ref_block_hash_.Swap(&other->ref_block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scripts_.Swap(&other->scripts_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ref_block_num_, other->ref_block_num_);
  swap(expiration_, other->expiration_);
  swap(timestamp_, other->timestamp_);
  swap(fee_limit_, other->fee_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction_raw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
  ::protocol::_Transaction_default_instance_._instance.get_mutable()->raw_data_ = const_cast< ::protocol::Transaction_raw*>(
      ::protocol::Transaction_raw::internal_default_instance());
}
class Transaction::_Internal {
 public:
  static const ::protocol::Transaction_raw& raw_data(const Transaction* msg);
};

const ::protocol::Transaction_raw&
Transaction::_Internal::raw_data(const Transaction* msg) {
  return *msg->raw_data_;
}
Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signature_(from.signature_),
      ret_(from.ret_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_raw_data()) {
    raw_data_ = new ::protocol::Transaction_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_core_2fTron_2eproto.base);
  raw_data_ = nullptr;
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:protocol.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != internal_default_instance()) delete raw_data_;
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.Clear();
  ret_.Clear();
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Transaction.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_signature(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction.Result ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ret(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Transaction.raw raw_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes signature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Transaction.Result ret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.raw raw_data = 1;
  if (this->has_raw_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::raw_data(this), output);
  }

  // repeated bytes signature = 2;
  for (int i = 0, n = this->signature_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->signature(i), output);
  }

  // repeated .protocol.Transaction.Result ret = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ret_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ret(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction.raw raw_data = 1;
  if (this->has_raw_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::raw_data(this), target);
  }

  // repeated bytes signature = 2;
  for (int i = 0, n = this->signature_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->signature(i), target);
  }

  // repeated .protocol.Transaction.Result ret = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ret_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ret(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes signature = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->signature_size());
  for (int i = 0, n = this->signature_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->signature(i));
  }

  // repeated .protocol.Transaction.Result ret = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ret_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ret(static_cast<int>(i)));
    }
  }

  // .protocol.Transaction.raw raw_data = 1;
  if (this->has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signature_.MergeFrom(from.signature_);
  ret_.MergeFrom(from.ret_);
  if (from.has_raw_data()) {
    mutable_raw_data()->::protocol::Transaction_raw::MergeFrom(from.raw_data());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.InternalSwap(CastToBase(&other->signature_));
  CastToBase(&ret_)->InternalSwap(CastToBase(&other->ret_));
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionInfo_Log::InitAsDefaultInstance() {
}
class TransactionInfo_Log::_Internal {
 public:
};

TransactionInfo_Log::TransactionInfo_Log()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionInfo.Log)
}
TransactionInfo_Log::TransactionInfo_Log(const TransactionInfo_Log& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionInfo.Log)
}

void TransactionInfo_Log::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionInfo_Log_core_2fTron_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TransactionInfo_Log::~TransactionInfo_Log() {
  // @@protoc_insertion_point(destructor:protocol.TransactionInfo.Log)
  SharedDtor();
}

void TransactionInfo_Log::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionInfo_Log::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionInfo_Log& TransactionInfo_Log::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionInfo_Log_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TransactionInfo_Log::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionInfo.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionInfo_Log::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_topics(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionInfo_Log::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionInfo.Log)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes topics = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_topics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionInfo.Log)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionInfo.Log)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionInfo_Log::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionInfo.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->address(), output);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->topics(i), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionInfo.Log)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInfo_Log::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionInfo.Log)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes address = 1;
  if (this->address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->address(), target);
  }

  // repeated bytes topics = 2;
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->topics(i), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionInfo.Log)
  return target;
}

size_t TransactionInfo_Log::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionInfo.Log)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->topics_size());
  for (int i = 0, n = this->topics_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->topics(i));
  }

  // bytes address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->address());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionInfo_Log::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionInfo.Log)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInfo_Log* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionInfo_Log>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionInfo.Log)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionInfo.Log)
    MergeFrom(*source);
  }
}

void TransactionInfo_Log::MergeFrom(const TransactionInfo_Log& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionInfo.Log)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void TransactionInfo_Log::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionInfo.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInfo_Log::CopyFrom(const TransactionInfo_Log& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionInfo.Log)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo_Log::IsInitialized() const {
  return true;
}

void TransactionInfo_Log::InternalSwap(TransactionInfo_Log* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topics_.InternalSwap(CastToBase(&other->topics_));
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfo_Log::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionInfo::InitAsDefaultInstance() {
  ::protocol::_TransactionInfo_default_instance_._instance.get_mutable()->receipt_ = const_cast< ::protocol::ResourceReceipt*>(
      ::protocol::ResourceReceipt::internal_default_instance());
}
class TransactionInfo::_Internal {
 public:
  static const ::protocol::ResourceReceipt& receipt(const TransactionInfo* msg);
};

const ::protocol::ResourceReceipt&
TransactionInfo::_Internal::receipt(const TransactionInfo* msg) {
  return *msg->receipt_;
}
TransactionInfo::TransactionInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionInfo)
}
TransactionInfo::TransactionInfo(const TransactionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      contractresult_(from.contractresult_),
      log_(from.log_),
      internal_transactions_(from.internal_transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.contract_address().empty()) {
    contract_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_address_);
  }
  resmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.resmessage().empty()) {
    resmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resmessage_);
  }
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.assetissueid().empty()) {
    assetissueid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetissueid_);
  }
  if (from.has_receipt()) {
    receipt_ = new ::protocol::ResourceReceipt(*from.receipt_);
  } else {
    receipt_ = nullptr;
  }
  ::memcpy(&fee_, &from.fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&shielded_transaction_fee_) -
    reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionInfo)
}

void TransactionInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionInfo_core_2fTron_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetissueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&receipt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shielded_transaction_fee_) -
      reinterpret_cast<char*>(&receipt_)) + sizeof(shielded_transaction_fee_));
}

TransactionInfo::~TransactionInfo() {
  // @@protoc_insertion_point(destructor:protocol.TransactionInfo)
  SharedDtor();
}

void TransactionInfo::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetissueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete receipt_;
}

void TransactionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionInfo& TransactionInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TransactionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  contractresult_.Clear();
  log_.Clear();
  internal_transactions_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  assetissueid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shielded_transaction_fee_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(shielded_transaction_fee_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_id(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTimeStamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes contractResult = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_contractresult(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // bytes contract_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_contract_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.ResourceReceipt receipt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_receipt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionInfo.Log log = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .protocol.TransactionInfo.code result = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::protocol::TransactionInfo_code>(val));
        } else goto handle_unusual;
        continue;
      // bytes resMessage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_resmessage(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string assetIssueID = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_assetissueid(), ptr, ctx, "protocol.TransactionInfo.assetIssueID");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 withdraw_amount = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          withdraw_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unfreeze_amount = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfreeze_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.InternalTransaction internal_transactions = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_internal_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // int64 exchange_received_amount = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          exchange_received_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_inject_another_amount = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          exchange_inject_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_withdraw_another_amount = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          exchange_withdraw_another_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exchange_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          exchange_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 shielded_transaction_fee = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          shielded_transaction_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 fee = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 blockNumber = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocknumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 blockTimeStamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocktimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes contractResult = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_contractresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes contract_address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_contract_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.ResourceReceipt receipt = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receipt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.TransactionInfo.Log log = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_log()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.TransactionInfo.code result = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::protocol::TransactionInfo_code >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes resMessage = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string assetIssueID = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_assetissueid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.TransactionInfo.assetIssueID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 withdraw_amount = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &withdraw_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unfreeze_amount = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unfreeze_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.InternalTransaction internal_transactions = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_internal_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_received_amount = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_received_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_inject_another_amount = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_inject_another_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_withdraw_another_amount = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_withdraw_another_amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 exchange_id = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &exchange_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 shielded_transaction_fee = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &shielded_transaction_fee_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->id(), output);
  }

  // int64 fee = 2;
  if (this->fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->fee(), output);
  }

  // int64 blockNumber = 3;
  if (this->blocknumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->blocknumber(), output);
  }

  // int64 blockTimeStamp = 4;
  if (this->blocktimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->blocktimestamp(), output);
  }

  // repeated bytes contractResult = 5;
  for (int i = 0, n = this->contractresult_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      5, this->contractresult(i), output);
  }

  // bytes contract_address = 6;
  if (this->contract_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->contract_address(), output);
  }

  // .protocol.ResourceReceipt receipt = 7;
  if (this->has_receipt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::receipt(this), output);
  }

  // repeated .protocol.TransactionInfo.Log log = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->log(static_cast<int>(i)),
      output);
  }

  // .protocol.TransactionInfo.code result = 9;
  if (this->result() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->result(), output);
  }

  // bytes resMessage = 10;
  if (this->resmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->resmessage(), output);
  }

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionInfo.assetIssueID");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->assetissueid(), output);
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(15, this->withdraw_amount(), output);
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->unfreeze_amount(), output);
  }

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->internal_transactions(static_cast<int>(i)),
      output);
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->exchange_received_amount(), output);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->exchange_inject_another_amount(), output);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(20, this->exchange_withdraw_another_amount(), output);
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(21, this->exchange_id(), output);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->shielded_transaction_fee(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes id = 1;
  if (this->id().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->id(), target);
  }

  // int64 fee = 2;
  if (this->fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->fee(), target);
  }

  // int64 blockNumber = 3;
  if (this->blocknumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->blocknumber(), target);
  }

  // int64 blockTimeStamp = 4;
  if (this->blocktimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->blocktimestamp(), target);
  }

  // repeated bytes contractResult = 5;
  for (int i = 0, n = this->contractresult_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(5, this->contractresult(i), target);
  }

  // bytes contract_address = 6;
  if (this->contract_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->contract_address(), target);
  }

  // .protocol.ResourceReceipt receipt = 7;
  if (this->has_receipt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::receipt(this), target);
  }

  // repeated .protocol.TransactionInfo.Log log = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->log_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->log(static_cast<int>(i)), target);
  }

  // .protocol.TransactionInfo.code result = 9;
  if (this->result() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->result(), target);
  }

  // bytes resMessage = 10;
  if (this->resmessage().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        10, this->resmessage(), target);
  }

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->assetissueid().data(), static_cast<int>(this->assetissueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.TransactionInfo.assetIssueID");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->assetissueid(), target);
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->withdraw_amount(), target);
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->unfreeze_amount(), target);
  }

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->internal_transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->internal_transactions(static_cast<int>(i)), target);
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->exchange_received_amount(), target);
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->exchange_inject_another_amount(), target);
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->exchange_withdraw_another_amount(), target);
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->exchange_id(), target);
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->shielded_transaction_fee(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionInfo)
  return target;
}

size_t TransactionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes contractResult = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->contractresult_size());
  for (int i = 0, n = this->contractresult_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->contractresult(i));
  }

  // repeated .protocol.TransactionInfo.Log log = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->log_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->log(static_cast<int>(i)));
    }
  }

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->internal_transactions_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->internal_transactions(static_cast<int>(i)));
    }
  }

  // bytes id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->id());
  }

  // bytes contract_address = 6;
  if (this->contract_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->contract_address());
  }

  // bytes resMessage = 10;
  if (this->resmessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->resmessage());
  }

  // string assetIssueID = 14;
  if (this->assetissueid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->assetissueid());
  }

  // .protocol.ResourceReceipt receipt = 7;
  if (this->has_receipt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receipt_);
  }

  // int64 fee = 2;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->fee());
  }

  // int64 blockNumber = 3;
  if (this->blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->blocknumber());
  }

  // int64 blockTimeStamp = 4;
  if (this->blocktimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->blocktimestamp());
  }

  // int64 withdraw_amount = 15;
  if (this->withdraw_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->withdraw_amount());
  }

  // int64 unfreeze_amount = 16;
  if (this->unfreeze_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unfreeze_amount());
  }

  // int64 exchange_received_amount = 18;
  if (this->exchange_received_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_received_amount());
  }

  // int64 exchange_inject_another_amount = 19;
  if (this->exchange_inject_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_inject_another_amount());
  }

  // int64 exchange_withdraw_another_amount = 20;
  if (this->exchange_withdraw_another_amount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_withdraw_another_amount());
  }

  // .protocol.TransactionInfo.code result = 9;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  // int64 exchange_id = 21;
  if (this->exchange_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->exchange_id());
  }

  // int64 shielded_transaction_fee = 22;
  if (this->shielded_transaction_fee() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->shielded_transaction_fee());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionInfo)
    MergeFrom(*source);
  }
}

void TransactionInfo::MergeFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  contractresult_.MergeFrom(from.contractresult_);
  log_.MergeFrom(from.log_);
  internal_transactions_.MergeFrom(from.internal_transactions_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.contract_address().size() > 0) {

    contract_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.contract_address_);
  }
  if (from.resmessage().size() > 0) {

    resmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resmessage_);
  }
  if (from.assetissueid().size() > 0) {

    assetissueid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.assetissueid_);
  }
  if (from.has_receipt()) {
    mutable_receipt()->::protocol::ResourceReceipt::MergeFrom(from.receipt());
  }
  if (from.fee() != 0) {
    set_fee(from.fee());
  }
  if (from.blocknumber() != 0) {
    set_blocknumber(from.blocknumber());
  }
  if (from.blocktimestamp() != 0) {
    set_blocktimestamp(from.blocktimestamp());
  }
  if (from.withdraw_amount() != 0) {
    set_withdraw_amount(from.withdraw_amount());
  }
  if (from.unfreeze_amount() != 0) {
    set_unfreeze_amount(from.unfreeze_amount());
  }
  if (from.exchange_received_amount() != 0) {
    set_exchange_received_amount(from.exchange_received_amount());
  }
  if (from.exchange_inject_another_amount() != 0) {
    set_exchange_inject_another_amount(from.exchange_inject_another_amount());
  }
  if (from.exchange_withdraw_another_amount() != 0) {
    set_exchange_withdraw_another_amount(from.exchange_withdraw_another_amount());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.exchange_id() != 0) {
    set_exchange_id(from.exchange_id());
  }
  if (from.shielded_transaction_fee() != 0) {
    set_shielded_transaction_fee(from.shielded_transaction_fee());
  }
}

void TransactionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionInfo::CopyFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo::IsInitialized() const {
  return true;
}

void TransactionInfo::InternalSwap(TransactionInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  contractresult_.InternalSwap(CastToBase(&other->contractresult_));
  CastToBase(&log_)->InternalSwap(CastToBase(&other->log_));
  CastToBase(&internal_transactions_)->InternalSwap(CastToBase(&other->internal_transactions_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  contract_address_.Swap(&other->contract_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resmessage_.Swap(&other->resmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  assetissueid_.Swap(&other->assetissueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(receipt_, other->receipt_);
  swap(fee_, other->fee_);
  swap(blocknumber_, other->blocknumber_);
  swap(blocktimestamp_, other->blocktimestamp_);
  swap(withdraw_amount_, other->withdraw_amount_);
  swap(unfreeze_amount_, other->unfreeze_amount_);
  swap(exchange_received_amount_, other->exchange_received_amount_);
  swap(exchange_inject_another_amount_, other->exchange_inject_another_amount_);
  swap(exchange_withdraw_another_amount_, other->exchange_withdraw_another_amount_);
  swap(result_, other->result_);
  swap(exchange_id_, other->exchange_id_);
  swap(shielded_transaction_fee_, other->shielded_transaction_fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionRet::InitAsDefaultInstance() {
}
class TransactionRet::_Internal {
 public:
};

TransactionRet::TransactionRet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionRet)
}
TransactionRet::TransactionRet(const TransactionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactioninfo_(from.transactioninfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blocknumber_, &from.blocknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocktimestamp_) -
    reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionRet)
}

void TransactionRet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionRet_core_2fTron_2eproto.base);
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktimestamp_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
}

TransactionRet::~TransactionRet() {
  // @@protoc_insertion_point(destructor:protocol.TransactionRet)
  SharedDtor();
}

void TransactionRet::SharedDtor() {
}

void TransactionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionRet& TransactionRet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionRet_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TransactionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactioninfo_.Clear();
  ::memset(&blocknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocktimestamp_) -
      reinterpret_cast<char*>(&blocknumber_)) + sizeof(blocktimestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 blockNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTimeStamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          blocktimestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.TransactionInfo transactioninfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactioninfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionRet::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionRet)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 blockNumber = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocknumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 blockTimeStamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocktimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.TransactionInfo transactioninfo = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactioninfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionRet)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionRet::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 blockNumber = 1;
  if (this->blocknumber() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->blocknumber(), output);
  }

  // int64 blockTimeStamp = 2;
  if (this->blocktimestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->blocktimestamp(), output);
  }

  // repeated .protocol.TransactionInfo transactioninfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactioninfo_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->transactioninfo(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionRet)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionRet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionRet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 blockNumber = 1;
  if (this->blocknumber() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->blocknumber(), target);
  }

  // int64 blockTimeStamp = 2;
  if (this->blocktimestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->blocktimestamp(), target);
  }

  // repeated .protocol.TransactionInfo transactioninfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactioninfo_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->transactioninfo(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionRet)
  return target;
}

size_t TransactionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionRet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.TransactionInfo transactioninfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->transactioninfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactioninfo(static_cast<int>(i)));
    }
  }

  // int64 blockNumber = 1;
  if (this->blocknumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->blocknumber());
  }

  // int64 blockTimeStamp = 2;
  if (this->blocktimestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->blocktimestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionRet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionRet)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionRet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionRet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionRet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionRet)
    MergeFrom(*source);
  }
}

void TransactionRet::MergeFrom(const TransactionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionRet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactioninfo_.MergeFrom(from.transactioninfo_);
  if (from.blocknumber() != 0) {
    set_blocknumber(from.blocknumber());
  }
  if (from.blocktimestamp() != 0) {
    set_blocktimestamp(from.blocktimestamp());
  }
}

void TransactionRet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRet::CopyFrom(const TransactionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRet::IsInitialized() const {
  return true;
}

void TransactionRet::InternalSwap(TransactionRet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactioninfo_)->InternalSwap(CastToBase(&other->transactioninfo_));
  swap(blocknumber_, other->blocknumber_);
  swap(blocktimestamp_, other->blocktimestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionRet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transactions::InitAsDefaultInstance() {
}
class Transactions::_Internal {
 public:
};

Transactions::Transactions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Transactions)
}
Transactions::Transactions(const Transactions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.Transactions)
}

void Transactions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transactions_core_2fTron_2eproto.base);
}

Transactions::~Transactions() {
  // @@protoc_insertion_point(destructor:protocol.Transactions)
  SharedDtor();
}

void Transactions::SharedDtor() {
}

void Transactions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transactions& Transactions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transactions_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Transactions::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Transactions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Transactions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Transactions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Transaction transactions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Transactions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Transactions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Transactions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transactions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Transactions)
}

::PROTOBUF_NAMESPACE_ID::uint8* Transactions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Transactions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transactions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Transactions)
  return target;
}

size_t Transactions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Transactions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transactions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  const Transactions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transactions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Transactions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Transactions)
    MergeFrom(*source);
  }
}

void Transactions::MergeFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Transactions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void Transactions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transactions::CopyFrom(const Transactions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Transactions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transactions::IsInitialized() const {
  return true;
}

void Transactions::InternalSwap(Transactions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transactions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionSign::InitAsDefaultInstance() {
  ::protocol::_TransactionSign_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::protocol::Transaction*>(
      ::protocol::Transaction::internal_default_instance());
}
class TransactionSign::_Internal {
 public:
  static const ::protocol::Transaction& transaction(const TransactionSign* msg);
};

const ::protocol::Transaction&
TransactionSign::_Internal::transaction(const TransactionSign* msg) {
  return *msg->transaction_;
}
TransactionSign::TransactionSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.TransactionSign)
}
TransactionSign::TransactionSign(const TransactionSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.privatekey().empty()) {
    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::protocol::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.TransactionSign)
}

void TransactionSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionSign_core_2fTron_2eproto.base);
  privatekey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_ = nullptr;
}

TransactionSign::~TransactionSign() {
  // @@protoc_insertion_point(destructor:protocol.TransactionSign)
  SharedDtor();
}

void TransactionSign::SharedDtor() {
  privatekey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionSign& TransactionSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionSign_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void TransactionSign::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.TransactionSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TransactionSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Transaction transaction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_transaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes privateKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_privatekey(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TransactionSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.TransactionSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Transaction transaction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes privateKey = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_privatekey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.TransactionSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.TransactionSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TransactionSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.TransactionSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction transaction = 1;
  if (this->has_transaction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::transaction(this), output);
  }

  // bytes privateKey = 2;
  if (this->privatekey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->privatekey(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.TransactionSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.TransactionSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Transaction transaction = 1;
  if (this->has_transaction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::transaction(this), target);
  }

  // bytes privateKey = 2;
  if (this->privatekey().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->privatekey(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.TransactionSign)
  return target;
}

size_t TransactionSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.TransactionSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes privateKey = 2;
  if (this->privatekey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->privatekey());
  }

  // .protocol.Transaction transaction = 1;
  if (this->has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.TransactionSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.TransactionSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.TransactionSign)
    MergeFrom(*source);
  }
}

void TransactionSign::MergeFrom(const TransactionSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.TransactionSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.privatekey().size() > 0) {

    privatekey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.privatekey_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::protocol::Transaction::MergeFrom(from.transaction());
  }
}

void TransactionSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.TransactionSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionSign::CopyFrom(const TransactionSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.TransactionSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionSign::IsInitialized() const {
  return true;
}

void TransactionSign::InternalSwap(TransactionSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  privatekey_.Swap(&other->privatekey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(transaction_, other->transaction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockHeader_raw::InitAsDefaultInstance() {
}
class BlockHeader_raw::_Internal {
 public:
};

BlockHeader_raw::BlockHeader_raw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.BlockHeader.raw)
}
BlockHeader_raw::BlockHeader_raw(const BlockHeader_raw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txtrieroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.txtrieroot().empty()) {
    txtrieroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txtrieroot_);
  }
  parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.parenthash().empty()) {
    parenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parenthash_);
  }
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.witness_address().empty()) {
    witness_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.witness_address_);
  }
  accountstateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.accountstateroot().empty()) {
    accountstateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accountstateroot_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader.raw)
}

void BlockHeader_raw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_raw_core_2fTron_2eproto.base);
  txtrieroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountstateroot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
}

BlockHeader_raw::~BlockHeader_raw() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader.raw)
  SharedDtor();
}

void BlockHeader_raw::SharedDtor() {
  txtrieroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountstateroot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockHeader_raw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader_raw& BlockHeader_raw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_raw_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader_raw::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txtrieroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  witness_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  accountstateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockHeader_raw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes txTrieRoot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_txtrieroot(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes parentHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_parenthash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 witness_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          witness_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_witness_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes accountStateRoot = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_accountstateroot(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockHeader_raw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.BlockHeader.raw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes txTrieRoot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_txtrieroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes parentHash = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parenthash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 number = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 witness_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &witness_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes witness_address = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_witness_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes accountStateRoot = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accountstateroot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.BlockHeader.raw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.BlockHeader.raw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockHeader_raw::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // bytes txTrieRoot = 2;
  if (this->txtrieroot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->txtrieroot(), output);
  }

  // bytes parentHash = 3;
  if (this->parenthash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->parenthash(), output);
  }

  // int64 number = 7;
  if (this->number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->number(), output);
  }

  // int64 witness_id = 8;
  if (this->witness_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->witness_id(), output);
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->witness_address(), output);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->version(), output);
  }

  // bytes accountStateRoot = 11;
  if (this->accountstateroot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->accountstateroot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.BlockHeader.raw)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader_raw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader.raw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }

  // bytes txTrieRoot = 2;
  if (this->txtrieroot().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->txtrieroot(), target);
  }

  // bytes parentHash = 3;
  if (this->parenthash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->parenthash(), target);
  }

  // int64 number = 7;
  if (this->number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->number(), target);
  }

  // int64 witness_id = 8;
  if (this->witness_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->witness_id(), target);
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        9, this->witness_address(), target);
  }

  // int32 version = 10;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->version(), target);
  }

  // bytes accountStateRoot = 11;
  if (this->accountstateroot().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        11, this->accountstateroot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader.raw)
  return target;
}

size_t BlockHeader_raw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader.raw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txTrieRoot = 2;
  if (this->txtrieroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->txtrieroot());
  }

  // bytes parentHash = 3;
  if (this->parenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->parenthash());
  }

  // bytes witness_address = 9;
  if (this->witness_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->witness_address());
  }

  // bytes accountStateRoot = 11;
  if (this->accountstateroot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->accountstateroot());
  }

  // int64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int64 number = 7;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->number());
  }

  // int64 witness_id = 8;
  if (this->witness_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->witness_id());
  }

  // int32 version = 10;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader_raw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockHeader.raw)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader_raw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader_raw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockHeader.raw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockHeader.raw)
    MergeFrom(*source);
  }
}

void BlockHeader_raw::MergeFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader.raw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txtrieroot().size() > 0) {

    txtrieroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txtrieroot_);
  }
  if (from.parenthash().size() > 0) {

    parenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parenthash_);
  }
  if (from.witness_address().size() > 0) {

    witness_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.witness_address_);
  }
  if (from.accountstateroot().size() > 0) {

    accountstateroot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.accountstateroot_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.witness_id() != 0) {
    set_witness_id(from.witness_id());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void BlockHeader_raw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockHeader.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader_raw::CopyFrom(const BlockHeader_raw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader.raw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader_raw::IsInitialized() const {
  return true;
}

void BlockHeader_raw::InternalSwap(BlockHeader_raw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txtrieroot_.Swap(&other->txtrieroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  parenthash_.Swap(&other->parenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  witness_address_.Swap(&other->witness_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  accountstateroot_.Swap(&other->accountstateroot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(number_, other->number_);
  swap(witness_id_, other->witness_id_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader_raw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockHeader::InitAsDefaultInstance() {
  ::protocol::_BlockHeader_default_instance_._instance.get_mutable()->raw_data_ = const_cast< ::protocol::BlockHeader_raw*>(
      ::protocol::BlockHeader_raw::internal_default_instance());
}
class BlockHeader::_Internal {
 public:
  static const ::protocol::BlockHeader_raw& raw_data(const BlockHeader* msg);
};

const ::protocol::BlockHeader_raw&
BlockHeader::_Internal::raw_data(const BlockHeader* msg) {
  return *msg->raw_data_;
}
BlockHeader::BlockHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.BlockHeader)
}
BlockHeader::BlockHeader(const BlockHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.witness_signature().empty()) {
    witness_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.witness_signature_);
  }
  if (from.has_raw_data()) {
    raw_data_ = new ::protocol::BlockHeader_raw(*from.raw_data_);
  } else {
    raw_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.BlockHeader)
}

void BlockHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockHeader_core_2fTron_2eproto.base);
  witness_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_data_ = nullptr;
}

BlockHeader::~BlockHeader() {
  // @@protoc_insertion_point(destructor:protocol.BlockHeader)
  SharedDtor();
}

void BlockHeader::SharedDtor() {
  witness_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete raw_data_;
}

void BlockHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockHeader& BlockHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockHeader_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void BlockHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witness_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.BlockHeader.raw raw_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_raw_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witness_signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_witness_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.BlockHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.BlockHeader.raw raw_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes witness_signature = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_witness_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.BlockHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.BlockHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->has_raw_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::raw_data(this), output);
  }

  // bytes witness_signature = 2;
  if (this->witness_signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->witness_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.BlockHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->has_raw_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::raw_data(this), target);
  }

  // bytes witness_signature = 2;
  if (this->witness_signature().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->witness_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockHeader)
  return target;
}

size_t BlockHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witness_signature = 2;
  if (this->witness_signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->witness_signature());
  }

  // .protocol.BlockHeader.raw raw_data = 1;
  if (this->has_raw_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockHeader)
    MergeFrom(*source);
  }
}

void BlockHeader::MergeFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.witness_signature().size() > 0) {

    witness_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.witness_signature_);
  }
  if (from.has_raw_data()) {
    mutable_raw_data()->::protocol::BlockHeader_raw::MergeFrom(from.raw_data());
  }
}

void BlockHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockHeader::CopyFrom(const BlockHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockHeader::IsInitialized() const {
  return true;
}

void BlockHeader::InternalSwap(BlockHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  witness_signature_.Swap(&other->witness_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(raw_data_, other->raw_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Block::InitAsDefaultInstance() {
  ::protocol::_Block_default_instance_._instance.get_mutable()->block_header_ = const_cast< ::protocol::BlockHeader*>(
      ::protocol::BlockHeader::internal_default_instance());
}
class Block::_Internal {
 public:
  static const ::protocol::BlockHeader& block_header(const Block* msg);
};

const ::protocol::BlockHeader&
Block::_Internal::block_header(const Block* msg) {
  return *msg->block_header_;
}
Block::Block()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Block)
}
Block::Block(const Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_block_header()) {
    block_header_ = new ::protocol::BlockHeader(*from.block_header_);
  } else {
    block_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.Block)
}

void Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Block_core_2fTron_2eproto.base);
  block_header_ = nullptr;
}

Block::~Block() {
  // @@protoc_insertion_point(destructor:protocol.Block)
  SharedDtor();
}

void Block::SharedDtor() {
  if (this != internal_default_instance()) delete block_header_;
}

void Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Block& Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Block_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Block::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  if (GetArenaNoVirtual() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .protocol.BlockHeader block_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_block_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Block::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Block)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.Transaction transactions = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.BlockHeader block_header = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_block_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Block)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Block)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Block::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->transactions(static_cast<int>(i)),
      output);
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->has_block_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::block_header(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Block)
}

::PROTOBUF_NAMESPACE_ID::uint8* Block::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->transactions(static_cast<int>(i)), target);
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->has_block_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::block_header(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Block)
  return target;
}

size_t Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Block)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Transaction transactions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // .protocol.BlockHeader block_header = 2;
  if (this->has_block_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *block_header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Block)
    MergeFrom(*source);
  }
}

void Block::MergeFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
  if (from.has_block_header()) {
    mutable_block_header()->::protocol::BlockHeader::MergeFrom(from.block_header());
  }
}

void Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Block::CopyFrom(const Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Block::IsInitialized() const {
  return true;
}

void Block::InternalSwap(Block* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  swap(block_header_, other->block_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChainInventory_BlockId::InitAsDefaultInstance() {
}
class ChainInventory_BlockId::_Internal {
 public:
};

ChainInventory_BlockId::ChainInventory_BlockId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainInventory.BlockId)
}
ChainInventory_BlockId::ChainInventory_BlockId(const ChainInventory_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainInventory.BlockId)
}

void ChainInventory_BlockId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainInventory_BlockId_core_2fTron_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
}

ChainInventory_BlockId::~ChainInventory_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.ChainInventory.BlockId)
  SharedDtor();
}

void ChainInventory_BlockId::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChainInventory_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainInventory_BlockId& ChainInventory_BlockId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainInventory_BlockId_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void ChainInventory_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChainInventory_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChainInventory_BlockId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainInventory.BlockId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainInventory.BlockId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainInventory.BlockId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChainInventory_BlockId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainInventory.BlockId)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainInventory_BlockId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainInventory.BlockId)
  return target;
}

size_t ChainInventory_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainInventory.BlockId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int64 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainInventory_BlockId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainInventory_BlockId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainInventory_BlockId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainInventory.BlockId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainInventory.BlockId)
    MergeFrom(*source);
  }
}

void ChainInventory_BlockId::MergeFrom(const ChainInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void ChainInventory_BlockId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainInventory_BlockId::CopyFrom(const ChainInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainInventory_BlockId::IsInitialized() const {
  return true;
}

void ChainInventory_BlockId::InternalSwap(ChainInventory_BlockId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainInventory_BlockId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChainInventory::InitAsDefaultInstance() {
}
class ChainInventory::_Internal {
 public:
};

ChainInventory::ChainInventory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.ChainInventory)
}
ChainInventory::ChainInventory(const ChainInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remain_num_ = from.remain_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.ChainInventory)
}

void ChainInventory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChainInventory_core_2fTron_2eproto.base);
  remain_num_ = PROTOBUF_LONGLONG(0);
}

ChainInventory::~ChainInventory() {
  // @@protoc_insertion_point(destructor:protocol.ChainInventory)
  SharedDtor();
}

void ChainInventory::SharedDtor() {
}

void ChainInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChainInventory& ChainInventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChainInventory_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void ChainInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.ChainInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  remain_num_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ChainInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.ChainInventory.BlockId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // int64 remain_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remain_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ChainInventory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.ChainInventory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.ChainInventory.BlockId ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 remain_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remain_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.ChainInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.ChainInventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ChainInventory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.ChainInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ids(static_cast<int>(i)),
      output);
  }

  // int64 remain_num = 2;
  if (this->remain_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->remain_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.ChainInventory)
}

::PROTOBUF_NAMESPACE_ID::uint8* ChainInventory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.ChainInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.ChainInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ids(static_cast<int>(i)), target);
  }

  // int64 remain_num = 2;
  if (this->remain_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->remain_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.ChainInventory)
  return target;
}

size_t ChainInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.ChainInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.ChainInventory.BlockId ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // int64 remain_num = 2;
  if (this->remain_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->remain_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChainInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.ChainInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const ChainInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChainInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.ChainInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.ChainInventory)
    MergeFrom(*source);
  }
}

void ChainInventory::MergeFrom(const ChainInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.ChainInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.remain_num() != 0) {
    set_remain_num(from.remain_num());
  }
}

void ChainInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.ChainInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChainInventory::CopyFrom(const ChainInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.ChainInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChainInventory::IsInitialized() const {
  return true;
}

void ChainInventory::InternalSwap(ChainInventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  swap(remain_num_, other->remain_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChainInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockInventory_BlockId::InitAsDefaultInstance() {
}
class BlockInventory_BlockId::_Internal {
 public:
};

BlockInventory_BlockId::BlockInventory_BlockId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.BlockInventory.BlockId)
}
BlockInventory_BlockId::BlockInventory_BlockId(const BlockInventory_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockInventory.BlockId)
}

void BlockInventory_BlockId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockInventory_BlockId_core_2fTron_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
}

BlockInventory_BlockId::~BlockInventory_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.BlockInventory.BlockId)
  SharedDtor();
}

void BlockInventory_BlockId::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockInventory_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockInventory_BlockId& BlockInventory_BlockId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockInventory_BlockId_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void BlockInventory_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockInventory_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockInventory_BlockId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.BlockInventory.BlockId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.BlockInventory.BlockId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.BlockInventory.BlockId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockInventory_BlockId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.BlockInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.BlockInventory.BlockId)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInventory_BlockId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockInventory.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockInventory.BlockId)
  return target;
}

size_t BlockInventory_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockInventory.BlockId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int64 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockInventory_BlockId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockInventory_BlockId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockInventory_BlockId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockInventory.BlockId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockInventory.BlockId)
    MergeFrom(*source);
  }
}

void BlockInventory_BlockId::MergeFrom(const BlockInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockInventory.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void BlockInventory_BlockId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInventory_BlockId::CopyFrom(const BlockInventory_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockInventory.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInventory_BlockId::IsInitialized() const {
  return true;
}

void BlockInventory_BlockId::InternalSwap(BlockInventory_BlockId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInventory_BlockId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockInventory::InitAsDefaultInstance() {
}
class BlockInventory::_Internal {
 public:
};

BlockInventory::BlockInventory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.BlockInventory)
}
BlockInventory::BlockInventory(const BlockInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.BlockInventory)
}

void BlockInventory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockInventory_core_2fTron_2eproto.base);
  type_ = 0;
}

BlockInventory::~BlockInventory() {
  // @@protoc_insertion_point(destructor:protocol.BlockInventory)
  SharedDtor();
}

void BlockInventory::SharedDtor() {
}

void BlockInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockInventory& BlockInventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockInventory_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void BlockInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.BlockInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BlockInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.BlockInventory.BlockId ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .protocol.BlockInventory.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::BlockInventory_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BlockInventory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.BlockInventory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protocol.BlockInventory.BlockId ids = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.BlockInventory.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::BlockInventory_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.BlockInventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.BlockInventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BlockInventory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.BlockInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.BlockInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ids(static_cast<int>(i)),
      output);
  }

  // .protocol.BlockInventory.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.BlockInventory)
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockInventory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.BlockInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.BlockInventory.BlockId ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ids_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ids(static_cast<int>(i)), target);
  }

  // .protocol.BlockInventory.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.BlockInventory)
  return target;
}

size_t BlockInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.BlockInventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.BlockInventory.BlockId ids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ids(static_cast<int>(i)));
    }
  }

  // .protocol.BlockInventory.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.BlockInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.BlockInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.BlockInventory)
    MergeFrom(*source);
  }
}

void BlockInventory::MergeFrom(const BlockInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.BlockInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void BlockInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.BlockInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockInventory::CopyFrom(const BlockInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.BlockInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockInventory::IsInitialized() const {
  return true;
}

void BlockInventory::InternalSwap(BlockInventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ids_)->InternalSwap(CastToBase(&other->ids_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Inventory::InitAsDefaultInstance() {
}
class Inventory::_Internal {
 public:
};

Inventory::Inventory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Inventory)
}
Inventory::Inventory(const Inventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ids_(from.ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Inventory)
}

void Inventory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Inventory_core_2fTron_2eproto.base);
  type_ = 0;
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:protocol.Inventory)
  SharedDtor();
}

void Inventory::SharedDtor() {
}

void Inventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Inventory& Inventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Inventory_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Inventory::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Inventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Inventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Inventory.InventoryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::Inventory_InventoryType>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_ids(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Inventory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Inventory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Inventory.InventoryType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::Inventory_InventoryType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes ids = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_ids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Inventory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Inventory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Inventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Inventory.InventoryType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated bytes ids = 2;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Inventory)
}

::PROTOBUF_NAMESPACE_ID::uint8* Inventory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Inventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Inventory.InventoryType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated bytes ids = 2;
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->ids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Inventory)
  return target;
}

size_t Inventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Inventory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->ids_size());
  for (int i = 0, n = this->ids_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->ids(i));
  }

  // .protocol.Inventory.InventoryType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Inventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  const Inventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Inventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Inventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Inventory)
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Inventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Inventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Inventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {
  return true;
}

void Inventory::InternalSwap(Inventory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ids_.InternalSwap(CastToBase(&other->ids_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Inventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Items::InitAsDefaultInstance() {
}
class Items::_Internal {
 public:
};

Items::Items()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.Items)
}
Items::Items(const Items& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blocks_(from.blocks_),
      block_headers_(from.block_headers_),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.Items)
}

void Items::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Items_core_2fTron_2eproto.base);
  type_ = 0;
}

Items::~Items() {
  // @@protoc_insertion_point(destructor:protocol.Items)
  SharedDtor();
}

void Items::SharedDtor() {
}

void Items::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Items& Items::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Items_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void Items::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.Items)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  block_headers_.Clear();
  transactions_.Clear();
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Items::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Items.ItemType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::protocol::Items_ItemType>(val));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Block blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.BlockHeader block_headers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_block_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.Transaction transactions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Items::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.Items)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Items.ItemType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::protocol::Items_ItemType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Block blocks = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.BlockHeader block_headers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_block_headers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.Transaction transactions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.Items)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.Items)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Items::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.Items)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Items.ItemType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .protocol.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->blocks(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.BlockHeader block_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_headers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->block_headers(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.Transaction transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->transactions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.Items)
}

::PROTOBUF_NAMESPACE_ID::uint8* Items::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.Items)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Items.ItemType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .protocol.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocks_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->blocks(static_cast<int>(i)), target);
  }

  // repeated .protocol.BlockHeader block_headers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->block_headers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->block_headers(static_cast<int>(i)), target);
  }

  // repeated .protocol.Transaction transactions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->transactions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->transactions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.Items)
  return target;
}

size_t Items::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.Items)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.Block blocks = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->blocks(static_cast<int>(i)));
    }
  }

  // repeated .protocol.BlockHeader block_headers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->block_headers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->block_headers(static_cast<int>(i)));
    }
  }

  // repeated .protocol.Transaction transactions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->transactions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->transactions(static_cast<int>(i)));
    }
  }

  // .protocol.Items.ItemType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Items::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.Items)
  GOOGLE_DCHECK_NE(&from, this);
  const Items* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Items>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.Items)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.Items)
    MergeFrom(*source);
  }
}

void Items::MergeFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.Items)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  block_headers_.MergeFrom(from.block_headers_);
  transactions_.MergeFrom(from.transactions_);
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Items::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Items::CopyFrom(const Items& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.Items)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Items::IsInitialized() const {
  return true;
}

void Items::InternalSwap(Items* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&blocks_)->InternalSwap(CastToBase(&other->blocks_));
  CastToBase(&block_headers_)->InternalSwap(CastToBase(&other->block_headers_));
  CastToBase(&transactions_)->InternalSwap(CastToBase(&other->transactions_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Items::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicProperties::InitAsDefaultInstance() {
}
class DynamicProperties::_Internal {
 public:
};

DynamicProperties::DynamicProperties()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DynamicProperties)
}
DynamicProperties::DynamicProperties(const DynamicProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_solidity_block_num_ = from.last_solidity_block_num_;
  // @@protoc_insertion_point(copy_constructor:protocol.DynamicProperties)
}

void DynamicProperties::SharedCtor() {
  last_solidity_block_num_ = PROTOBUF_LONGLONG(0);
}

DynamicProperties::~DynamicProperties() {
  // @@protoc_insertion_point(destructor:protocol.DynamicProperties)
  SharedDtor();
}

void DynamicProperties::SharedDtor() {
}

void DynamicProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicProperties& DynamicProperties::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicProperties_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void DynamicProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DynamicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_solidity_block_num_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicProperties::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 last_solidity_block_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_solidity_block_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicProperties::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DynamicProperties)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 last_solidity_block_num = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_solidity_block_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DynamicProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DynamicProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicProperties::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DynamicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_solidity_block_num = 1;
  if (this->last_solidity_block_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->last_solidity_block_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.DynamicProperties)
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicProperties::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DynamicProperties)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 last_solidity_block_num = 1;
  if (this->last_solidity_block_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->last_solidity_block_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DynamicProperties)
  return target;
}

size_t DynamicProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DynamicProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 last_solidity_block_num = 1;
  if (this->last_solidity_block_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->last_solidity_block_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicProperties::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DynamicProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicProperties* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DynamicProperties)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DynamicProperties)
    MergeFrom(*source);
  }
}

void DynamicProperties::MergeFrom(const DynamicProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DynamicProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.last_solidity_block_num() != 0) {
    set_last_solidity_block_num(from.last_solidity_block_num());
  }
}

void DynamicProperties::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DynamicProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicProperties::CopyFrom(const DynamicProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DynamicProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicProperties::IsInitialized() const {
  return true;
}

void DynamicProperties::InternalSwap(DynamicProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(last_solidity_block_num_, other->last_solidity_block_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicProperties::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectMessage::InitAsDefaultInstance() {
}
class DisconnectMessage::_Internal {
 public:
};

DisconnectMessage::DisconnectMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DisconnectMessage)
}
DisconnectMessage::DisconnectMessage(const DisconnectMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:protocol.DisconnectMessage)
}

void DisconnectMessage::SharedCtor() {
  reason_ = 0;
}

DisconnectMessage::~DisconnectMessage() {
  // @@protoc_insertion_point(destructor:protocol.DisconnectMessage)
  SharedDtor();
}

void DisconnectMessage::SharedDtor() {
}

void DisconnectMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectMessage& DisconnectMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectMessage_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void DisconnectMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DisconnectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DisconnectMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.ReasonCode reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_reason(static_cast<::protocol::ReasonCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DisconnectMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DisconnectMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.ReasonCode reason = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reason(static_cast< ::protocol::ReasonCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DisconnectMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DisconnectMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DisconnectMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DisconnectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.ReasonCode reason = 1;
  if (this->reason() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.DisconnectMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DisconnectMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.ReasonCode reason = 1;
  if (this->reason() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DisconnectMessage)
  return target;
}

size_t DisconnectMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DisconnectMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.ReasonCode reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reason());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DisconnectMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DisconnectMessage)
    MergeFrom(*source);
  }
}

void DisconnectMessage::MergeFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DisconnectMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    set_reason(from.reason());
  }
}

void DisconnectMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectMessage::CopyFrom(const DisconnectMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DisconnectMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectMessage::IsInitialized() const {
  return true;
}

void DisconnectMessage::InternalSwap(DisconnectMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloMessage_BlockId::InitAsDefaultInstance() {
}
class HelloMessage_BlockId::_Internal {
 public:
};

HelloMessage_BlockId::HelloMessage_BlockId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.HelloMessage.BlockId)
}
HelloMessage_BlockId::HelloMessage_BlockId(const HelloMessage_BlockId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  number_ = from.number_;
  // @@protoc_insertion_point(copy_constructor:protocol.HelloMessage.BlockId)
}

void HelloMessage_BlockId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloMessage_BlockId_core_2fTron_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
}

HelloMessage_BlockId::~HelloMessage_BlockId() {
  // @@protoc_insertion_point(destructor:protocol.HelloMessage.BlockId)
  SharedDtor();
}

void HelloMessage_BlockId::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HelloMessage_BlockId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloMessage_BlockId& HelloMessage_BlockId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloMessage_BlockId_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void HelloMessage_BlockId::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.HelloMessage.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloMessage_BlockId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloMessage_BlockId::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.HelloMessage.BlockId)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 number = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.HelloMessage.BlockId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.HelloMessage.BlockId)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloMessage_BlockId::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.HelloMessage.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->number(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.HelloMessage.BlockId)
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloMessage_BlockId::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.HelloMessage.BlockId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // int64 number = 2;
  if (this->number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->number(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.HelloMessage.BlockId)
  return target;
}

size_t HelloMessage_BlockId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.HelloMessage.BlockId)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // int64 number = 2;
  if (this->number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->number());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloMessage_BlockId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.HelloMessage.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloMessage_BlockId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloMessage_BlockId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.HelloMessage.BlockId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.HelloMessage.BlockId)
    MergeFrom(*source);
  }
}

void HelloMessage_BlockId::MergeFrom(const HelloMessage_BlockId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.HelloMessage.BlockId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
}

void HelloMessage_BlockId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.HelloMessage.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloMessage_BlockId::CopyFrom(const HelloMessage_BlockId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.HelloMessage.BlockId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage_BlockId::IsInitialized() const {
  return true;
}

void HelloMessage_BlockId::InternalSwap(HelloMessage_BlockId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(number_, other->number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage_BlockId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HelloMessage::InitAsDefaultInstance() {
  ::protocol::_HelloMessage_default_instance_._instance.get_mutable()->from_ = const_cast< ::protocol::Endpoint*>(
      ::protocol::Endpoint::internal_default_instance());
  ::protocol::_HelloMessage_default_instance_._instance.get_mutable()->genesisblockid_ = const_cast< ::protocol::HelloMessage_BlockId*>(
      ::protocol::HelloMessage_BlockId::internal_default_instance());
  ::protocol::_HelloMessage_default_instance_._instance.get_mutable()->solidblockid_ = const_cast< ::protocol::HelloMessage_BlockId*>(
      ::protocol::HelloMessage_BlockId::internal_default_instance());
  ::protocol::_HelloMessage_default_instance_._instance.get_mutable()->headblockid_ = const_cast< ::protocol::HelloMessage_BlockId*>(
      ::protocol::HelloMessage_BlockId::internal_default_instance());
}
class HelloMessage::_Internal {
 public:
  static const ::protocol::Endpoint& from(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& genesisblockid(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& solidblockid(const HelloMessage* msg);
  static const ::protocol::HelloMessage_BlockId& headblockid(const HelloMessage* msg);
};

const ::protocol::Endpoint&
HelloMessage::_Internal::from(const HelloMessage* msg) {
  return *msg->from_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::genesisblockid(const HelloMessage* msg) {
  return *msg->genesisblockid_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::solidblockid(const HelloMessage* msg) {
  return *msg->solidblockid_;
}
const ::protocol::HelloMessage_BlockId&
HelloMessage::_Internal::headblockid(const HelloMessage* msg) {
  return *msg->headblockid_;
}
void HelloMessage::clear_from() {
  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
}
HelloMessage::HelloMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.HelloMessage)
}
HelloMessage::HelloMessage(const HelloMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_from()) {
    from_ = new ::protocol::Endpoint(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from.has_genesisblockid()) {
    genesisblockid_ = new ::protocol::HelloMessage_BlockId(*from.genesisblockid_);
  } else {
    genesisblockid_ = nullptr;
  }
  if (from.has_solidblockid()) {
    solidblockid_ = new ::protocol::HelloMessage_BlockId(*from.solidblockid_);
  } else {
    solidblockid_ = nullptr;
  }
  if (from.has_headblockid()) {
    headblockid_ = new ::protocol::HelloMessage_BlockId(*from.headblockid_);
  } else {
    headblockid_ = nullptr;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:protocol.HelloMessage)
}

void HelloMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HelloMessage_core_2fTron_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&from_)) + sizeof(version_));
}

HelloMessage::~HelloMessage() {
  // @@protoc_insertion_point(destructor:protocol.HelloMessage)
  SharedDtor();
}

void HelloMessage::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete genesisblockid_;
  if (this != internal_default_instance()) delete solidblockid_;
  if (this != internal_default_instance()) delete headblockid_;
}

void HelloMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HelloMessage& HelloMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HelloMessage_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void HelloMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.HelloMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && genesisblockid_ != nullptr) {
    delete genesisblockid_;
  }
  genesisblockid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && solidblockid_ != nullptr) {
    delete solidblockid_;
  }
  solidblockid_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && headblockid_ != nullptr) {
    delete headblockid_;
  }
  headblockid_ = nullptr;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(version_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HelloMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.Endpoint from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId genesisBlockId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_genesisblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId solidBlockId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_solidblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.HelloMessage.BlockId headBlockId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_headblockid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HelloMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.HelloMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .protocol.Endpoint from = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_from()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 version = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.HelloMessage.BlockId genesisBlockId = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_genesisblockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.HelloMessage.BlockId solidBlockId = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_solidblockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.HelloMessage.BlockId headBlockId = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_headblockid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.HelloMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.HelloMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HelloMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.HelloMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::from(this), output);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->timestamp(), output);
  }

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  if (this->has_genesisblockid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::genesisblockid(this), output);
  }

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  if (this->has_solidblockid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::solidblockid(this), output);
  }

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  if (this->has_headblockid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::headblockid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.HelloMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* HelloMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.HelloMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::from(this), target);
  }

  // int32 version = 2;
  if (this->version() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->timestamp(), target);
  }

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  if (this->has_genesisblockid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::genesisblockid(this), target);
  }

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  if (this->has_solidblockid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::solidblockid(this), target);
  }

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  if (this->has_headblockid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::headblockid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.HelloMessage)
  return target;
}

size_t HelloMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.HelloMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .protocol.Endpoint from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  if (this->has_genesisblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *genesisblockid_);
  }

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  if (this->has_solidblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *solidblockid_);
  }

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  if (this->has_headblockid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headblockid_);
  }

  // int64 timestamp = 3;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // int32 version = 2;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->version());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HelloMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const HelloMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HelloMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.HelloMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.HelloMessage)
    MergeFrom(*source);
  }
}

void HelloMessage::MergeFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.HelloMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    mutable_from()->::protocol::Endpoint::MergeFrom(from.from());
  }
  if (from.has_genesisblockid()) {
    mutable_genesisblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from.genesisblockid());
  }
  if (from.has_solidblockid()) {
    mutable_solidblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from.solidblockid());
  }
  if (from.has_headblockid()) {
    mutable_headblockid()->::protocol::HelloMessage_BlockId::MergeFrom(from.headblockid());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.version() != 0) {
    set_version(from.version());
  }
}

void HelloMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HelloMessage::CopyFrom(const HelloMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.HelloMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HelloMessage::IsInitialized() const {
  return true;
}

void HelloMessage::InternalSwap(HelloMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(genesisblockid_, other->genesisblockid_);
  swap(solidblockid_, other->solidblockid_);
  swap(headblockid_, other->headblockid_);
  swap(timestamp_, other->timestamp_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HelloMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InternalTransaction_CallValueInfo::InitAsDefaultInstance() {
}
class InternalTransaction_CallValueInfo::_Internal {
 public:
};

InternalTransaction_CallValueInfo::InternalTransaction_CallValueInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.InternalTransaction.CallValueInfo)
}
InternalTransaction_CallValueInfo::InternalTransaction_CallValueInfo(const InternalTransaction_CallValueInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tokenid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.tokenid().empty()) {
    tokenid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenid_);
  }
  callvalue_ = from.callvalue_;
  // @@protoc_insertion_point(copy_constructor:protocol.InternalTransaction.CallValueInfo)
}

void InternalTransaction_CallValueInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto.base);
  tokenid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callvalue_ = PROTOBUF_LONGLONG(0);
}

InternalTransaction_CallValueInfo::~InternalTransaction_CallValueInfo() {
  // @@protoc_insertion_point(destructor:protocol.InternalTransaction.CallValueInfo)
  SharedDtor();
}

void InternalTransaction_CallValueInfo::SharedDtor() {
  tokenid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InternalTransaction_CallValueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalTransaction_CallValueInfo& InternalTransaction_CallValueInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InternalTransaction_CallValueInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void InternalTransaction_CallValueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.InternalTransaction.CallValueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokenid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callvalue_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InternalTransaction_CallValueInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 callValue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          callvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tokenId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_tokenid(), ptr, ctx, "protocol.InternalTransaction.CallValueInfo.tokenId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalTransaction_CallValueInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.InternalTransaction.CallValueInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 callValue = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &callvalue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string tokenId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_tokenid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->tokenid().data(), static_cast<int>(this->tokenid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.InternalTransaction.CallValueInfo.tokenId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.InternalTransaction.CallValueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.InternalTransaction.CallValueInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InternalTransaction_CallValueInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.InternalTransaction.CallValueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 callValue = 1;
  if (this->callvalue() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->callvalue(), output);
  }

  // string tokenId = 2;
  if (this->tokenid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tokenid().data(), static_cast<int>(this->tokenid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.InternalTransaction.CallValueInfo.tokenId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tokenid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.InternalTransaction.CallValueInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalTransaction_CallValueInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.InternalTransaction.CallValueInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 callValue = 1;
  if (this->callvalue() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->callvalue(), target);
  }

  // string tokenId = 2;
  if (this->tokenid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->tokenid().data(), static_cast<int>(this->tokenid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.InternalTransaction.CallValueInfo.tokenId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->tokenid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.InternalTransaction.CallValueInfo)
  return target;
}

size_t InternalTransaction_CallValueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.InternalTransaction.CallValueInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tokenId = 2;
  if (this->tokenid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->tokenid());
  }

  // int64 callValue = 1;
  if (this->callvalue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->callvalue());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalTransaction_CallValueInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.InternalTransaction.CallValueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalTransaction_CallValueInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalTransaction_CallValueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.InternalTransaction.CallValueInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.InternalTransaction.CallValueInfo)
    MergeFrom(*source);
  }
}

void InternalTransaction_CallValueInfo::MergeFrom(const InternalTransaction_CallValueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.InternalTransaction.CallValueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tokenid().size() > 0) {

    tokenid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tokenid_);
  }
  if (from.callvalue() != 0) {
    set_callvalue(from.callvalue());
  }
}

void InternalTransaction_CallValueInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.InternalTransaction.CallValueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTransaction_CallValueInfo::CopyFrom(const InternalTransaction_CallValueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.InternalTransaction.CallValueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTransaction_CallValueInfo::IsInitialized() const {
  return true;
}

void InternalTransaction_CallValueInfo::InternalSwap(InternalTransaction_CallValueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tokenid_.Swap(&other->tokenid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(callvalue_, other->callvalue_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalTransaction_CallValueInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InternalTransaction::InitAsDefaultInstance() {
}
class InternalTransaction::_Internal {
 public:
};

InternalTransaction::InternalTransaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.InternalTransaction)
}
InternalTransaction::InternalTransaction(const InternalTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      callvalueinfo_(from.callvalueinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  caller_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.caller_address().empty()) {
    caller_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caller_address_);
  }
  transferto_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.transferto_address().empty()) {
    transferto_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transferto_address_);
  }
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.note().empty()) {
    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  rejected_ = from.rejected_;
  // @@protoc_insertion_point(copy_constructor:protocol.InternalTransaction)
}

void InternalTransaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InternalTransaction_core_2fTron_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transferto_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rejected_ = false;
}

InternalTransaction::~InternalTransaction() {
  // @@protoc_insertion_point(destructor:protocol.InternalTransaction)
  SharedDtor();
}

void InternalTransaction::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transferto_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InternalTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalTransaction& InternalTransaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InternalTransaction_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void InternalTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.InternalTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  callvalueinfo_.Clear();
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  caller_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transferto_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rejected_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InternalTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_hash(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes caller_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_caller_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes transferTo_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_transferto_address(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_callvalueinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // bytes note = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_note(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rejected = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          rejected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InternalTransaction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.InternalTransaction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes hash = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes caller_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_caller_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transferTo_address = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transferto_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_callvalueinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes note = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_note()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rejected = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rejected_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.InternalTransaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.InternalTransaction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InternalTransaction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.InternalTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->hash(), output);
  }

  // bytes caller_address = 2;
  if (this->caller_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->caller_address(), output);
  }

  // bytes transferTo_address = 3;
  if (this->transferto_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->transferto_address(), output);
  }

  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->callvalueinfo_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->callvalueinfo(static_cast<int>(i)),
      output);
  }

  // bytes note = 5;
  if (this->note().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->note(), output);
  }

  // bool rejected = 6;
  if (this->rejected() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->rejected(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.InternalTransaction)
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalTransaction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.InternalTransaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->hash(), target);
  }

  // bytes caller_address = 2;
  if (this->caller_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->caller_address(), target);
  }

  // bytes transferTo_address = 3;
  if (this->transferto_address().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->transferto_address(), target);
  }

  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->callvalueinfo_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->callvalueinfo(static_cast<int>(i)), target);
  }

  // bytes note = 5;
  if (this->note().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        5, this->note(), target);
  }

  // bool rejected = 6;
  if (this->rejected() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->rejected(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.InternalTransaction)
  return target;
}

size_t InternalTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.InternalTransaction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->callvalueinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->callvalueinfo(static_cast<int>(i)));
    }
  }

  // bytes hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes caller_address = 2;
  if (this->caller_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->caller_address());
  }

  // bytes transferTo_address = 3;
  if (this->transferto_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->transferto_address());
  }

  // bytes note = 5;
  if (this->note().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->note());
  }

  // bool rejected = 6;
  if (this->rejected() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalTransaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.InternalTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalTransaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalTransaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.InternalTransaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.InternalTransaction)
    MergeFrom(*source);
  }
}

void InternalTransaction::MergeFrom(const InternalTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.InternalTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  callvalueinfo_.MergeFrom(from.callvalueinfo_);
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.caller_address().size() > 0) {

    caller_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.caller_address_);
  }
  if (from.transferto_address().size() > 0) {

    transferto_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transferto_address_);
  }
  if (from.note().size() > 0) {

    note_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.note_);
  }
  if (from.rejected() != 0) {
    set_rejected(from.rejected());
  }
}

void InternalTransaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.InternalTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalTransaction::CopyFrom(const InternalTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.InternalTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalTransaction::IsInitialized() const {
  return true;
}

void InternalTransaction::InternalSwap(InternalTransaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&callvalueinfo_)->InternalSwap(CastToBase(&other->callvalueinfo_));
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  caller_address_.Swap(&other->caller_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  transferto_address_.Swap(&other->transferto_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  note_.Swap(&other->note_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rejected_, other->rejected_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalTransaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DelegatedResourceAccountIndex::InitAsDefaultInstance() {
}
class DelegatedResourceAccountIndex::_Internal {
 public:
};

DelegatedResourceAccountIndex::DelegatedResourceAccountIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.DelegatedResourceAccountIndex)
}
DelegatedResourceAccountIndex::DelegatedResourceAccountIndex(const DelegatedResourceAccountIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      fromaccounts_(from.fromaccounts_),
      toaccounts_(from.toaccounts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  // @@protoc_insertion_point(copy_constructor:protocol.DelegatedResourceAccountIndex)
}

void DelegatedResourceAccountIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DelegatedResourceAccountIndex::~DelegatedResourceAccountIndex() {
  // @@protoc_insertion_point(destructor:protocol.DelegatedResourceAccountIndex)
  SharedDtor();
}

void DelegatedResourceAccountIndex::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DelegatedResourceAccountIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DelegatedResourceAccountIndex& DelegatedResourceAccountIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DelegatedResourceAccountIndex_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void DelegatedResourceAccountIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.DelegatedResourceAccountIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fromaccounts_.Clear();
  toaccounts_.Clear();
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DelegatedResourceAccountIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_account(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes fromAccounts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_fromaccounts(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated bytes toAccounts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_toaccounts(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DelegatedResourceAccountIndex::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.DelegatedResourceAccountIndex)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes account = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes fromAccounts = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_fromaccounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes toAccounts = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_toaccounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.DelegatedResourceAccountIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.DelegatedResourceAccountIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DelegatedResourceAccountIndex::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.DelegatedResourceAccountIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->account(), output);
  }

  // repeated bytes fromAccounts = 2;
  for (int i = 0, n = this->fromaccounts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->fromaccounts(i), output);
  }

  // repeated bytes toAccounts = 3;
  for (int i = 0, n = this->toaccounts_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->toaccounts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.DelegatedResourceAccountIndex)
}

::PROTOBUF_NAMESPACE_ID::uint8* DelegatedResourceAccountIndex::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.DelegatedResourceAccountIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (this->account().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->account(), target);
  }

  // repeated bytes fromAccounts = 2;
  for (int i = 0, n = this->fromaccounts_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->fromaccounts(i), target);
  }

  // repeated bytes toAccounts = 3;
  for (int i = 0, n = this->toaccounts_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->toaccounts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.DelegatedResourceAccountIndex)
  return target;
}

size_t DelegatedResourceAccountIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.DelegatedResourceAccountIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes fromAccounts = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fromaccounts_size());
  for (int i = 0, n = this->fromaccounts_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->fromaccounts(i));
  }

  // repeated bytes toAccounts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->toaccounts_size());
  for (int i = 0, n = this->toaccounts_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->toaccounts(i));
  }

  // bytes account = 1;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->account());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DelegatedResourceAccountIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.DelegatedResourceAccountIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const DelegatedResourceAccountIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DelegatedResourceAccountIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.DelegatedResourceAccountIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.DelegatedResourceAccountIndex)
    MergeFrom(*source);
  }
}

void DelegatedResourceAccountIndex::MergeFrom(const DelegatedResourceAccountIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.DelegatedResourceAccountIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fromaccounts_.MergeFrom(from.fromaccounts_);
  toaccounts_.MergeFrom(from.toaccounts_);
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
}

void DelegatedResourceAccountIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.DelegatedResourceAccountIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelegatedResourceAccountIndex::CopyFrom(const DelegatedResourceAccountIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.DelegatedResourceAccountIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelegatedResourceAccountIndex::IsInitialized() const {
  return true;
}

void DelegatedResourceAccountIndex::InternalSwap(DelegatedResourceAccountIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fromaccounts_.InternalSwap(CastToBase(&other->fromaccounts_));
  toaccounts_.InternalSwap(CastToBase(&other->toaccounts_));
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DelegatedResourceAccountIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse() {}
NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::MergeFrom(const NodeInfo_CheatWitnessInfoMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NodeInfo_PeerInfo::InitAsDefaultInstance() {
}
class NodeInfo_PeerInfo::_Internal {
 public:
};

NodeInfo_PeerInfo::NodeInfo_PeerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo.PeerInfo)
}
NodeInfo_PeerInfo::NodeInfo_PeerInfo(const NodeInfo_PeerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lastsyncblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.lastsyncblock().empty()) {
    lastsyncblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastsyncblock_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.nodeid().empty()) {
    nodeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  headblockwebothhave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.headblockwebothhave().empty()) {
    headblockwebothhave_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headblockwebothhave_);
  }
  localdisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.localdisconnectreason().empty()) {
    localdisconnectreason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localdisconnectreason_);
  }
  remotedisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.remotedisconnectreason().empty()) {
    remotedisconnectreason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remotedisconnectreason_);
  }
  ::memcpy(&remainnum_, &from.remainnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&disconnecttimes_) -
    reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.PeerInfo)
}

void NodeInfo_PeerInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto.base);
  lastsyncblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headblockwebothhave_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localdisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotedisconnectreason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&remainnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnecttimes_) -
      reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
}

NodeInfo_PeerInfo::~NodeInfo_PeerInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.PeerInfo)
  SharedDtor();
}

void NodeInfo_PeerInfo::SharedDtor() {
  lastsyncblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headblockwebothhave_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localdisconnectreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotedisconnectreason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_PeerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo_PeerInfo& NodeInfo_PeerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_PeerInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo_PeerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastsyncblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headblockwebothhave_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  localdisconnectreason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remotedisconnectreason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&remainnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disconnecttimes_) -
      reinterpret_cast<char*>(&remainnum_)) + sizeof(disconnecttimes_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo_PeerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string lastSyncBlock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lastsyncblock(), ptr, ctx, "protocol.NodeInfo.PeerInfo.lastSyncBlock");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remainNum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          remainnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lastBlockUpdateTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lastblockupdatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool syncFlag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          syncflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 headBlockTimeWeBothHave = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          headblocktimewebothhave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needSyncFromPeer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          needsyncfrompeer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool needSyncFromUs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          needsyncfromus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_host(), ptr, ctx, "protocol.NodeInfo.PeerInfo.host");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string nodeId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_nodeid(), ptr, ctx, "protocol.NodeInfo.PeerInfo.nodeId");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 connectTime = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          connecttime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avgLatency = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          avglatency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 syncToFetchSize = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          synctofetchsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 syncToFetchSizePeekNum = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          synctofetchsizepeeknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 syncBlockRequestedSize = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          syncblockrequestedsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unFetchSynNum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          unfetchsynnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blockInPorcSize = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          blockinporcsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headBlockWeBothHave = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_headblockwebothhave(), ptr, ctx, "protocol.NodeInfo.PeerInfo.headBlockWeBothHave");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isActive = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          isactive_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 score = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nodeCount = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          nodecount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 inFlow = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          inflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disconnectTimes = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          disconnecttimes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string localDisconnectReason = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_localdisconnectreason(), ptr, ctx, "protocol.NodeInfo.PeerInfo.localDisconnectReason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remoteDisconnectReason = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_remotedisconnectreason(), ptr, ctx, "protocol.NodeInfo.PeerInfo.remoteDisconnectReason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo_PeerInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo.PeerInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string lastSyncBlock = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lastsyncblock()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lastsyncblock().data(), static_cast<int>(this->lastsyncblock().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.lastSyncBlock"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 remainNum = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &remainnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lastBlockUpdateTime = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastblockupdatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool syncFlag = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &syncflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 headBlockTimeWeBothHave = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &headblocktimewebothhave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool needSyncFromPeer = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needsyncfrompeer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool needSyncFromUs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needsyncfromus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string host = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), static_cast<int>(this->host().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string nodeId = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_nodeid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->nodeid().data(), static_cast<int>(this->nodeid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.nodeId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 connectTime = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &connecttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double avgLatency = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avglatency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 syncToFetchSize = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &synctofetchsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 syncToFetchSizePeekNum = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &synctofetchsizepeeknum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 syncBlockRequestedSize = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &syncblockrequestedsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unFetchSynNum = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unfetchsynnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 blockInPorcSize = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockinporcsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string headBlockWeBothHave = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_headblockwebothhave()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->headblockwebothhave().data(), static_cast<int>(this->headblockwebothhave().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.headBlockWeBothHave"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isActive = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nodeCount = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 inFlow = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &inflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 disconnectTimes = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &disconnecttimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string localDisconnectReason = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_localdisconnectreason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->localdisconnectreason().data(), static_cast<int>(this->localdisconnectreason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.localDisconnectReason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remoteDisconnectReason = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_remotedisconnectreason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->remotedisconnectreason().data(), static_cast<int>(this->remotedisconnectreason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.PeerInfo.remoteDisconnectReason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo.PeerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo.PeerInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo_PeerInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lastSyncBlock = 1;
  if (this->lastsyncblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastsyncblock().data(), static_cast<int>(this->lastsyncblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.lastSyncBlock");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->lastsyncblock(), output);
  }

  // int64 remainNum = 2;
  if (this->remainnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->remainnum(), output);
  }

  // int64 lastBlockUpdateTime = 3;
  if (this->lastblockupdatetime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->lastblockupdatetime(), output);
  }

  // bool syncFlag = 4;
  if (this->syncflag() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->syncflag(), output);
  }

  // int64 headBlockTimeWeBothHave = 5;
  if (this->headblocktimewebothhave() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->headblocktimewebothhave(), output);
  }

  // bool needSyncFromPeer = 6;
  if (this->needsyncfrompeer() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->needsyncfrompeer(), output);
  }

  // bool needSyncFromUs = 7;
  if (this->needsyncfromus() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->needsyncfromus(), output);
  }

  // string host = 8;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.host");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->host(), output);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->port(), output);
  }

  // string nodeId = 10;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.nodeId");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->nodeid(), output);
  }

  // int64 connectTime = 11;
  if (this->connecttime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(11, this->connecttime(), output);
  }

  // double avgLatency = 12;
  if (!(this->avglatency() <= 0 && this->avglatency() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->avglatency(), output);
  }

  // int32 syncToFetchSize = 13;
  if (this->synctofetchsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->synctofetchsize(), output);
  }

  // int64 syncToFetchSizePeekNum = 14;
  if (this->synctofetchsizepeeknum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(14, this->synctofetchsizepeeknum(), output);
  }

  // int32 syncBlockRequestedSize = 15;
  if (this->syncblockrequestedsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->syncblockrequestedsize(), output);
  }

  // int64 unFetchSynNum = 16;
  if (this->unfetchsynnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(16, this->unfetchsynnum(), output);
  }

  // int32 blockInPorcSize = 17;
  if (this->blockinporcsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->blockinporcsize(), output);
  }

  // string headBlockWeBothHave = 18;
  if (this->headblockwebothhave().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->headblockwebothhave().data(), static_cast<int>(this->headblockwebothhave().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.headBlockWeBothHave");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->headblockwebothhave(), output);
  }

  // bool isActive = 19;
  if (this->isactive() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->isactive(), output);
  }

  // int32 score = 20;
  if (this->score() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->score(), output);
  }

  // int32 nodeCount = 21;
  if (this->nodecount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->nodecount(), output);
  }

  // int64 inFlow = 22;
  if (this->inflow() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(22, this->inflow(), output);
  }

  // int32 disconnectTimes = 23;
  if (this->disconnecttimes() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(23, this->disconnecttimes(), output);
  }

  // string localDisconnectReason = 24;
  if (this->localdisconnectreason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->localdisconnectreason().data(), static_cast<int>(this->localdisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.localDisconnectReason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->localdisconnectreason(), output);
  }

  // string remoteDisconnectReason = 25;
  if (this->remotedisconnectreason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remotedisconnectreason().data(), static_cast<int>(this->remotedisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.remoteDisconnectReason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->remotedisconnectreason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo.PeerInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_PeerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.PeerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string lastSyncBlock = 1;
  if (this->lastsyncblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lastsyncblock().data(), static_cast<int>(this->lastsyncblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.lastSyncBlock");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->lastsyncblock(), target);
  }

  // int64 remainNum = 2;
  if (this->remainnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->remainnum(), target);
  }

  // int64 lastBlockUpdateTime = 3;
  if (this->lastblockupdatetime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->lastblockupdatetime(), target);
  }

  // bool syncFlag = 4;
  if (this->syncflag() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->syncflag(), target);
  }

  // int64 headBlockTimeWeBothHave = 5;
  if (this->headblocktimewebothhave() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->headblocktimewebothhave(), target);
  }

  // bool needSyncFromPeer = 6;
  if (this->needsyncfrompeer() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->needsyncfrompeer(), target);
  }

  // bool needSyncFromUs = 7;
  if (this->needsyncfromus() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->needsyncfromus(), target);
  }

  // string host = 8;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), static_cast<int>(this->host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.host");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->host(), target);
  }

  // int32 port = 9;
  if (this->port() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->port(), target);
  }

  // string nodeId = 10;
  if (this->nodeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->nodeid().data(), static_cast<int>(this->nodeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.nodeId");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->nodeid(), target);
  }

  // int64 connectTime = 11;
  if (this->connecttime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->connecttime(), target);
  }

  // double avgLatency = 12;
  if (!(this->avglatency() <= 0 && this->avglatency() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->avglatency(), target);
  }

  // int32 syncToFetchSize = 13;
  if (this->synctofetchsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->synctofetchsize(), target);
  }

  // int64 syncToFetchSizePeekNum = 14;
  if (this->synctofetchsizepeeknum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->synctofetchsizepeeknum(), target);
  }

  // int32 syncBlockRequestedSize = 15;
  if (this->syncblockrequestedsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->syncblockrequestedsize(), target);
  }

  // int64 unFetchSynNum = 16;
  if (this->unfetchsynnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(16, this->unfetchsynnum(), target);
  }

  // int32 blockInPorcSize = 17;
  if (this->blockinporcsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->blockinporcsize(), target);
  }

  // string headBlockWeBothHave = 18;
  if (this->headblockwebothhave().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->headblockwebothhave().data(), static_cast<int>(this->headblockwebothhave().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.headBlockWeBothHave");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->headblockwebothhave(), target);
  }

  // bool isActive = 19;
  if (this->isactive() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->isactive(), target);
  }

  // int32 score = 20;
  if (this->score() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->score(), target);
  }

  // int32 nodeCount = 21;
  if (this->nodecount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->nodecount(), target);
  }

  // int64 inFlow = 22;
  if (this->inflow() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(22, this->inflow(), target);
  }

  // int32 disconnectTimes = 23;
  if (this->disconnecttimes() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->disconnecttimes(), target);
  }

  // string localDisconnectReason = 24;
  if (this->localdisconnectreason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->localdisconnectreason().data(), static_cast<int>(this->localdisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.localDisconnectReason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        24, this->localdisconnectreason(), target);
  }

  // string remoteDisconnectReason = 25;
  if (this->remotedisconnectreason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->remotedisconnectreason().data(), static_cast<int>(this->remotedisconnectreason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.PeerInfo.remoteDisconnectReason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        25, this->remotedisconnectreason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.PeerInfo)
  return target;
}

size_t NodeInfo_PeerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.PeerInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lastSyncBlock = 1;
  if (this->lastsyncblock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lastsyncblock());
  }

  // string host = 8;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->host());
  }

  // string nodeId = 10;
  if (this->nodeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->nodeid());
  }

  // string headBlockWeBothHave = 18;
  if (this->headblockwebothhave().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->headblockwebothhave());
  }

  // string localDisconnectReason = 24;
  if (this->localdisconnectreason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->localdisconnectreason());
  }

  // string remoteDisconnectReason = 25;
  if (this->remotedisconnectreason().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->remotedisconnectreason());
  }

  // int64 remainNum = 2;
  if (this->remainnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->remainnum());
  }

  // int64 lastBlockUpdateTime = 3;
  if (this->lastblockupdatetime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lastblockupdatetime());
  }

  // int64 headBlockTimeWeBothHave = 5;
  if (this->headblocktimewebothhave() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->headblocktimewebothhave());
  }

  // int32 port = 9;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->port());
  }

  // bool syncFlag = 4;
  if (this->syncflag() != 0) {
    total_size += 1 + 1;
  }

  // bool needSyncFromPeer = 6;
  if (this->needsyncfrompeer() != 0) {
    total_size += 1 + 1;
  }

  // bool needSyncFromUs = 7;
  if (this->needsyncfromus() != 0) {
    total_size += 1 + 1;
  }

  // bool isActive = 19;
  if (this->isactive() != 0) {
    total_size += 2 + 1;
  }

  // int64 connectTime = 11;
  if (this->connecttime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->connecttime());
  }

  // double avgLatency = 12;
  if (!(this->avglatency() <= 0 && this->avglatency() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 syncToFetchSizePeekNum = 14;
  if (this->synctofetchsizepeeknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->synctofetchsizepeeknum());
  }

  // int32 syncToFetchSize = 13;
  if (this->synctofetchsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->synctofetchsize());
  }

  // int32 syncBlockRequestedSize = 15;
  if (this->syncblockrequestedsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->syncblockrequestedsize());
  }

  // int64 unFetchSynNum = 16;
  if (this->unfetchsynnum() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unfetchsynnum());
  }

  // int32 blockInPorcSize = 17;
  if (this->blockinporcsize() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->blockinporcsize());
  }

  // int32 score = 20;
  if (this->score() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->score());
  }

  // int64 inFlow = 22;
  if (this->inflow() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->inflow());
  }

  // int32 nodeCount = 21;
  if (this->nodecount() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->nodecount());
  }

  // int32 disconnectTimes = 23;
  if (this->disconnecttimes() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->disconnecttimes());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo_PeerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo_PeerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo_PeerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo.PeerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo.PeerInfo)
    MergeFrom(*source);
  }
}

void NodeInfo_PeerInfo::MergeFrom(const NodeInfo_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.PeerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lastsyncblock().size() > 0) {

    lastsyncblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastsyncblock_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.nodeid().size() > 0) {

    nodeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodeid_);
  }
  if (from.headblockwebothhave().size() > 0) {

    headblockwebothhave_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headblockwebothhave_);
  }
  if (from.localdisconnectreason().size() > 0) {

    localdisconnectreason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.localdisconnectreason_);
  }
  if (from.remotedisconnectreason().size() > 0) {

    remotedisconnectreason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remotedisconnectreason_);
  }
  if (from.remainnum() != 0) {
    set_remainnum(from.remainnum());
  }
  if (from.lastblockupdatetime() != 0) {
    set_lastblockupdatetime(from.lastblockupdatetime());
  }
  if (from.headblocktimewebothhave() != 0) {
    set_headblocktimewebothhave(from.headblocktimewebothhave());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
  if (from.syncflag() != 0) {
    set_syncflag(from.syncflag());
  }
  if (from.needsyncfrompeer() != 0) {
    set_needsyncfrompeer(from.needsyncfrompeer());
  }
  if (from.needsyncfromus() != 0) {
    set_needsyncfromus(from.needsyncfromus());
  }
  if (from.isactive() != 0) {
    set_isactive(from.isactive());
  }
  if (from.connecttime() != 0) {
    set_connecttime(from.connecttime());
  }
  if (!(from.avglatency() <= 0 && from.avglatency() >= 0)) {
    set_avglatency(from.avglatency());
  }
  if (from.synctofetchsizepeeknum() != 0) {
    set_synctofetchsizepeeknum(from.synctofetchsizepeeknum());
  }
  if (from.synctofetchsize() != 0) {
    set_synctofetchsize(from.synctofetchsize());
  }
  if (from.syncblockrequestedsize() != 0) {
    set_syncblockrequestedsize(from.syncblockrequestedsize());
  }
  if (from.unfetchsynnum() != 0) {
    set_unfetchsynnum(from.unfetchsynnum());
  }
  if (from.blockinporcsize() != 0) {
    set_blockinporcsize(from.blockinporcsize());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
  if (from.inflow() != 0) {
    set_inflow(from.inflow());
  }
  if (from.nodecount() != 0) {
    set_nodecount(from.nodecount());
  }
  if (from.disconnecttimes() != 0) {
    set_disconnecttimes(from.disconnecttimes());
  }
}

void NodeInfo_PeerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_PeerInfo::CopyFrom(const NodeInfo_PeerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.PeerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_PeerInfo::IsInitialized() const {
  return true;
}

void NodeInfo_PeerInfo::InternalSwap(NodeInfo_PeerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lastsyncblock_.Swap(&other->lastsyncblock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodeid_.Swap(&other->nodeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headblockwebothhave_.Swap(&other->headblockwebothhave_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  localdisconnectreason_.Swap(&other->localdisconnectreason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remotedisconnectreason_.Swap(&other->remotedisconnectreason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(remainnum_, other->remainnum_);
  swap(lastblockupdatetime_, other->lastblockupdatetime_);
  swap(headblocktimewebothhave_, other->headblocktimewebothhave_);
  swap(port_, other->port_);
  swap(syncflag_, other->syncflag_);
  swap(needsyncfrompeer_, other->needsyncfrompeer_);
  swap(needsyncfromus_, other->needsyncfromus_);
  swap(isactive_, other->isactive_);
  swap(connecttime_, other->connecttime_);
  swap(avglatency_, other->avglatency_);
  swap(synctofetchsizepeeknum_, other->synctofetchsizepeeknum_);
  swap(synctofetchsize_, other->synctofetchsize_);
  swap(syncblockrequestedsize_, other->syncblockrequestedsize_);
  swap(unfetchsynnum_, other->unfetchsynnum_);
  swap(blockinporcsize_, other->blockinporcsize_);
  swap(score_, other->score_);
  swap(inflow_, other->inflow_);
  swap(nodecount_, other->nodecount_);
  swap(disconnecttimes_, other->disconnecttimes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_PeerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo_ConfigNodeInfo::InitAsDefaultInstance() {
}
class NodeInfo_ConfigNodeInfo::_Internal {
 public:
};

NodeInfo_ConfigNodeInfo::NodeInfo_ConfigNodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo.ConfigNodeInfo)
}
NodeInfo_ConfigNodeInfo::NodeInfo_ConfigNodeInfo(const NodeInfo_ConfigNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  codeversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.codeversion().empty()) {
    codeversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codeversion_);
  }
  p2pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.p2pversion().empty()) {
    p2pversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p2pversion_);
  }
  ::memcpy(&listenport_, &from.listenport_,
    static_cast<size_t>(reinterpret_cast<char*>(&allowadaptiveenergy_) -
    reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.ConfigNodeInfo)
}

void NodeInfo_ConfigNodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto.base);
  codeversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p2pversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&listenport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowadaptiveenergy_) -
      reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
}

NodeInfo_ConfigNodeInfo::~NodeInfo_ConfigNodeInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.ConfigNodeInfo)
  SharedDtor();
}

void NodeInfo_ConfigNodeInfo::SharedDtor() {
  codeversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p2pversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_ConfigNodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo_ConfigNodeInfo& NodeInfo_ConfigNodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_ConfigNodeInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo_ConfigNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.ConfigNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  codeversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  p2pversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&listenport_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allowadaptiveenergy_) -
      reinterpret_cast<char*>(&listenport_)) + sizeof(allowadaptiveenergy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo_ConfigNodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string codeVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_codeversion(), ptr, ctx, "protocol.NodeInfo.ConfigNodeInfo.codeVersion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string p2pVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_p2pversion(), ptr, ctx, "protocol.NodeInfo.ConfigNodeInfo.p2pVersion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 listenPort = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          listenport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool discoverEnable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          discoverenable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeNodeSize = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activenodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passiveNodeSize = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          passivenodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sendNodeSize = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sendnodesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxConnectCount = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          maxconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sameIpMaxConnectCount = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          sameipmaxconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupListenPort = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          backuplistenport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupMemberSize = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          backupmembersize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 backupPriority = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          backuppriority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dbVersion = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          dbversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minParticipationRate = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          minparticipationrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool supportConstant = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          supportconstant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double minTimeRatio = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          mintimeratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxTimeRatio = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          maxtimeratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 allowCreationOfContracts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          allowcreationofcontracts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 allowAdaptiveEnergy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          allowadaptiveenergy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo_ConfigNodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo.ConfigNodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string codeVersion = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_codeversion()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->codeversion().data(), static_cast<int>(this->codeversion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.ConfigNodeInfo.codeVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string p2pVersion = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_p2pversion()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->p2pversion().data(), static_cast<int>(this->p2pversion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.ConfigNodeInfo.p2pVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 listenPort = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &listenport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool discoverEnable = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &discoverenable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 activeNodeSize = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &activenodesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passiveNodeSize = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &passivenodesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sendNodeSize = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendnodesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 maxConnectCount = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxconnectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sameIpMaxConnectCount = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &sameipmaxconnectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backupListenPort = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &backuplistenport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backupMemberSize = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &backupmembersize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 backupPriority = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &backuppriority_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dbVersion = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dbversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 minParticipationRate = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &minparticipationrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool supportConstant = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supportconstant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double minTimeRatio = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mintimeratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maxTimeRatio = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxtimeratio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allowCreationOfContracts = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allowcreationofcontracts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 allowAdaptiveEnergy = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &allowadaptiveenergy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo.ConfigNodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo.ConfigNodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo_ConfigNodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo.ConfigNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string codeVersion = 1;
  if (this->codeversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->codeversion().data(), static_cast<int>(this->codeversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.codeVersion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->codeversion(), output);
  }

  // string p2pVersion = 2;
  if (this->p2pversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->p2pversion().data(), static_cast<int>(this->p2pversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.p2pVersion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->p2pversion(), output);
  }

  // int32 listenPort = 3;
  if (this->listenport() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->listenport(), output);
  }

  // bool discoverEnable = 4;
  if (this->discoverenable() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->discoverenable(), output);
  }

  // int32 activeNodeSize = 5;
  if (this->activenodesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->activenodesize(), output);
  }

  // int32 passiveNodeSize = 6;
  if (this->passivenodesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->passivenodesize(), output);
  }

  // int32 sendNodeSize = 7;
  if (this->sendnodesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(7, this->sendnodesize(), output);
  }

  // int32 maxConnectCount = 8;
  if (this->maxconnectcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(8, this->maxconnectcount(), output);
  }

  // int32 sameIpMaxConnectCount = 9;
  if (this->sameipmaxconnectcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->sameipmaxconnectcount(), output);
  }

  // int32 backupListenPort = 10;
  if (this->backuplistenport() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->backuplistenport(), output);
  }

  // int32 backupMemberSize = 11;
  if (this->backupmembersize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->backupmembersize(), output);
  }

  // int32 backupPriority = 12;
  if (this->backuppriority() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->backuppriority(), output);
  }

  // int32 dbVersion = 13;
  if (this->dbversion() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->dbversion(), output);
  }

  // int32 minParticipationRate = 14;
  if (this->minparticipationrate() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->minparticipationrate(), output);
  }

  // bool supportConstant = 15;
  if (this->supportconstant() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->supportconstant(), output);
  }

  // double minTimeRatio = 16;
  if (!(this->mintimeratio() <= 0 && this->mintimeratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->mintimeratio(), output);
  }

  // double maxTimeRatio = 17;
  if (!(this->maxtimeratio() <= 0 && this->maxtimeratio() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->maxtimeratio(), output);
  }

  // int64 allowCreationOfContracts = 18;
  if (this->allowcreationofcontracts() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(18, this->allowcreationofcontracts(), output);
  }

  // int64 allowAdaptiveEnergy = 19;
  if (this->allowadaptiveenergy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->allowadaptiveenergy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo.ConfigNodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_ConfigNodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.ConfigNodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string codeVersion = 1;
  if (this->codeversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->codeversion().data(), static_cast<int>(this->codeversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.codeVersion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->codeversion(), target);
  }

  // string p2pVersion = 2;
  if (this->p2pversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->p2pversion().data(), static_cast<int>(this->p2pversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.ConfigNodeInfo.p2pVersion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->p2pversion(), target);
  }

  // int32 listenPort = 3;
  if (this->listenport() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->listenport(), target);
  }

  // bool discoverEnable = 4;
  if (this->discoverenable() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->discoverenable(), target);
  }

  // int32 activeNodeSize = 5;
  if (this->activenodesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->activenodesize(), target);
  }

  // int32 passiveNodeSize = 6;
  if (this->passivenodesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->passivenodesize(), target);
  }

  // int32 sendNodeSize = 7;
  if (this->sendnodesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->sendnodesize(), target);
  }

  // int32 maxConnectCount = 8;
  if (this->maxconnectcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->maxconnectcount(), target);
  }

  // int32 sameIpMaxConnectCount = 9;
  if (this->sameipmaxconnectcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->sameipmaxconnectcount(), target);
  }

  // int32 backupListenPort = 10;
  if (this->backuplistenport() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->backuplistenport(), target);
  }

  // int32 backupMemberSize = 11;
  if (this->backupmembersize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->backupmembersize(), target);
  }

  // int32 backupPriority = 12;
  if (this->backuppriority() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->backuppriority(), target);
  }

  // int32 dbVersion = 13;
  if (this->dbversion() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->dbversion(), target);
  }

  // int32 minParticipationRate = 14;
  if (this->minparticipationrate() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->minparticipationrate(), target);
  }

  // bool supportConstant = 15;
  if (this->supportconstant() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->supportconstant(), target);
  }

  // double minTimeRatio = 16;
  if (!(this->mintimeratio() <= 0 && this->mintimeratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->mintimeratio(), target);
  }

  // double maxTimeRatio = 17;
  if (!(this->maxtimeratio() <= 0 && this->maxtimeratio() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->maxtimeratio(), target);
  }

  // int64 allowCreationOfContracts = 18;
  if (this->allowcreationofcontracts() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->allowcreationofcontracts(), target);
  }

  // int64 allowAdaptiveEnergy = 19;
  if (this->allowadaptiveenergy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->allowadaptiveenergy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.ConfigNodeInfo)
  return target;
}

size_t NodeInfo_ConfigNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.ConfigNodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string codeVersion = 1;
  if (this->codeversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->codeversion());
  }

  // string p2pVersion = 2;
  if (this->p2pversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->p2pversion());
  }

  // int32 listenPort = 3;
  if (this->listenport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->listenport());
  }

  // int32 activeNodeSize = 5;
  if (this->activenodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->activenodesize());
  }

  // int32 passiveNodeSize = 6;
  if (this->passivenodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->passivenodesize());
  }

  // int32 sendNodeSize = 7;
  if (this->sendnodesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sendnodesize());
  }

  // int32 maxConnectCount = 8;
  if (this->maxconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->maxconnectcount());
  }

  // int32 sameIpMaxConnectCount = 9;
  if (this->sameipmaxconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->sameipmaxconnectcount());
  }

  // bool discoverEnable = 4;
  if (this->discoverenable() != 0) {
    total_size += 1 + 1;
  }

  // bool supportConstant = 15;
  if (this->supportconstant() != 0) {
    total_size += 1 + 1;
  }

  // int32 backupListenPort = 10;
  if (this->backuplistenport() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->backuplistenport());
  }

  // int32 backupMemberSize = 11;
  if (this->backupmembersize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->backupmembersize());
  }

  // int32 backupPriority = 12;
  if (this->backuppriority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->backuppriority());
  }

  // int32 dbVersion = 13;
  if (this->dbversion() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dbversion());
  }

  // int32 minParticipationRate = 14;
  if (this->minparticipationrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->minparticipationrate());
  }

  // double minTimeRatio = 16;
  if (!(this->mintimeratio() <= 0 && this->mintimeratio() >= 0)) {
    total_size += 2 + 8;
  }

  // double maxTimeRatio = 17;
  if (!(this->maxtimeratio() <= 0 && this->maxtimeratio() >= 0)) {
    total_size += 2 + 8;
  }

  // int64 allowCreationOfContracts = 18;
  if (this->allowcreationofcontracts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allowcreationofcontracts());
  }

  // int64 allowAdaptiveEnergy = 19;
  if (this->allowadaptiveenergy() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->allowadaptiveenergy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo_ConfigNodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo.ConfigNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo_ConfigNodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo_ConfigNodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo.ConfigNodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo.ConfigNodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo_ConfigNodeInfo::MergeFrom(const NodeInfo_ConfigNodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.ConfigNodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.codeversion().size() > 0) {

    codeversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.codeversion_);
  }
  if (from.p2pversion().size() > 0) {

    p2pversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.p2pversion_);
  }
  if (from.listenport() != 0) {
    set_listenport(from.listenport());
  }
  if (from.activenodesize() != 0) {
    set_activenodesize(from.activenodesize());
  }
  if (from.passivenodesize() != 0) {
    set_passivenodesize(from.passivenodesize());
  }
  if (from.sendnodesize() != 0) {
    set_sendnodesize(from.sendnodesize());
  }
  if (from.maxconnectcount() != 0) {
    set_maxconnectcount(from.maxconnectcount());
  }
  if (from.sameipmaxconnectcount() != 0) {
    set_sameipmaxconnectcount(from.sameipmaxconnectcount());
  }
  if (from.discoverenable() != 0) {
    set_discoverenable(from.discoverenable());
  }
  if (from.supportconstant() != 0) {
    set_supportconstant(from.supportconstant());
  }
  if (from.backuplistenport() != 0) {
    set_backuplistenport(from.backuplistenport());
  }
  if (from.backupmembersize() != 0) {
    set_backupmembersize(from.backupmembersize());
  }
  if (from.backuppriority() != 0) {
    set_backuppriority(from.backuppriority());
  }
  if (from.dbversion() != 0) {
    set_dbversion(from.dbversion());
  }
  if (from.minparticipationrate() != 0) {
    set_minparticipationrate(from.minparticipationrate());
  }
  if (!(from.mintimeratio() <= 0 && from.mintimeratio() >= 0)) {
    set_mintimeratio(from.mintimeratio());
  }
  if (!(from.maxtimeratio() <= 0 && from.maxtimeratio() >= 0)) {
    set_maxtimeratio(from.maxtimeratio());
  }
  if (from.allowcreationofcontracts() != 0) {
    set_allowcreationofcontracts(from.allowcreationofcontracts());
  }
  if (from.allowadaptiveenergy() != 0) {
    set_allowadaptiveenergy(from.allowadaptiveenergy());
  }
}

void NodeInfo_ConfigNodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo.ConfigNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_ConfigNodeInfo::CopyFrom(const NodeInfo_ConfigNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.ConfigNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_ConfigNodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo_ConfigNodeInfo::InternalSwap(NodeInfo_ConfigNodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  codeversion_.Swap(&other->codeversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  p2pversion_.Swap(&other->p2pversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(listenport_, other->listenport_);
  swap(activenodesize_, other->activenodesize_);
  swap(passivenodesize_, other->passivenodesize_);
  swap(sendnodesize_, other->sendnodesize_);
  swap(maxconnectcount_, other->maxconnectcount_);
  swap(sameipmaxconnectcount_, other->sameipmaxconnectcount_);
  swap(discoverenable_, other->discoverenable_);
  swap(supportconstant_, other->supportconstant_);
  swap(backuplistenport_, other->backuplistenport_);
  swap(backupmembersize_, other->backupmembersize_);
  swap(backuppriority_, other->backuppriority_);
  swap(dbversion_, other->dbversion_);
  swap(minparticipationrate_, other->minparticipationrate_);
  swap(mintimeratio_, other->mintimeratio_);
  swap(maxtimeratio_, other->maxtimeratio_);
  swap(allowcreationofcontracts_, other->allowcreationofcontracts_);
  swap(allowadaptiveenergy_, other->allowadaptiveenergy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_ConfigNodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo_MachineInfo_MemoryDescInfo::InitAsDefaultInstance() {
}
class NodeInfo_MachineInfo_MemoryDescInfo::_Internal {
 public:
};

NodeInfo_MachineInfo_MemoryDescInfo::NodeInfo_MachineInfo_MemoryDescInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
}
NodeInfo_MachineInfo_MemoryDescInfo::NodeInfo_MachineInfo_MemoryDescInfo(const NodeInfo_MachineInfo_MemoryDescInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&initsize_, &from.initsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&userate_) -
    reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
}

void NodeInfo_MachineInfo_MemoryDescInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userate_) -
      reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
}

NodeInfo_MachineInfo_MemoryDescInfo::~NodeInfo_MachineInfo_MemoryDescInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  SharedDtor();
}

void NodeInfo_MachineInfo_MemoryDescInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo_MemoryDescInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo_MachineInfo_MemoryDescInfo& NodeInfo_MachineInfo_MemoryDescInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_MachineInfo_MemoryDescInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo_MachineInfo_MemoryDescInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userate_) -
      reinterpret_cast<char*>(&initsize_)) + sizeof(userate_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo_MachineInfo_MemoryDescInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 initSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          initsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 useSize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          usesize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 maxSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double useRate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          userate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo_MachineInfo_MemoryDescInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 initSize = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &initsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 useSize = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &usesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 maxSize = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double useRate = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &userate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo_MachineInfo_MemoryDescInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int64 initSize = 2;
  if (this->initsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(2, this->initsize(), output);
  }

  // int64 useSize = 3;
  if (this->usesize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->usesize(), output);
  }

  // int64 maxSize = 4;
  if (this->maxsize() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->maxsize(), output);
  }

  // double useRate = 5;
  if (!(this->userate() <= 0 && this->userate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->userate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo_MemoryDescInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.MemoryDescInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int64 initSize = 2;
  if (this->initsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->initsize(), target);
  }

  // int64 useSize = 3;
  if (this->usesize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->usesize(), target);
  }

  // int64 maxSize = 4;
  if (this->maxsize() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->maxsize(), target);
  }

  // double useRate = 5;
  if (!(this->userate() <= 0 && this->userate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->userate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  return target;
}

size_t NodeInfo_MachineInfo_MemoryDescInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 initSize = 2;
  if (this->initsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->initsize());
  }

  // int64 useSize = 3;
  if (this->usesize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->usesize());
  }

  // int64 maxSize = 4;
  if (this->maxsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->maxsize());
  }

  // double useRate = 5;
  if (!(this->userate() <= 0 && this->userate() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo_MachineInfo_MemoryDescInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo_MachineInfo_MemoryDescInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo_MachineInfo_MemoryDescInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
    MergeFrom(*source);
  }
}

void NodeInfo_MachineInfo_MemoryDescInfo::MergeFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.initsize() != 0) {
    set_initsize(from.initsize());
  }
  if (from.usesize() != 0) {
    set_usesize(from.usesize());
  }
  if (from.maxsize() != 0) {
    set_maxsize(from.maxsize());
  }
  if (!(from.userate() <= 0 && from.userate() >= 0)) {
    set_userate(from.userate());
  }
}

void NodeInfo_MachineInfo_MemoryDescInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_MachineInfo_MemoryDescInfo::CopyFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo_MemoryDescInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo_MemoryDescInfo::InternalSwap(NodeInfo_MachineInfo_MemoryDescInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initsize_, other->initsize_);
  swap(usesize_, other->usesize_);
  swap(maxsize_, other->maxsize_);
  swap(userate_, other->userate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo_MemoryDescInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo_MachineInfo_DeadLockThreadInfo::InitAsDefaultInstance() {
}
class NodeInfo_MachineInfo_DeadLockThreadInfo::_Internal {
 public:
};

NodeInfo_MachineInfo_DeadLockThreadInfo::NodeInfo_MachineInfo_DeadLockThreadInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
}
NodeInfo_MachineInfo_DeadLockThreadInfo::NodeInfo_MachineInfo_DeadLockThreadInfo(const NodeInfo_MachineInfo_DeadLockThreadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  lockname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.lockname().empty()) {
    lockname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockname_);
  }
  lockowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.lockowner().empty()) {
    lockowner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockowner_);
  }
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.state().empty()) {
    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  stacktrace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.stacktrace().empty()) {
    stacktrace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stacktrace_);
  }
  ::memcpy(&blocktime_, &from.blocktime_,
    static_cast<size_t>(reinterpret_cast<char*>(&waittime_) -
    reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockowner_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stacktrace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blocktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
}

NodeInfo_MachineInfo_DeadLockThreadInfo::~NodeInfo_MachineInfo_DeadLockThreadInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  SharedDtor();
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockowner_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stacktrace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo_MachineInfo_DeadLockThreadInfo& NodeInfo_MachineInfo_DeadLockThreadInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_MachineInfo_DeadLockThreadInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo_MachineInfo_DeadLockThreadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lockowner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stacktrace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blocktime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&waittime_) -
      reinterpret_cast<char*>(&blocktime_)) + sizeof(waittime_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo_MachineInfo_DeadLockThreadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lockName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lockname(), ptr, ctx, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lockOwner = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_lockowner(), ptr, ctx, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_state(), ptr, ctx, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 blockTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blocktime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 waitTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          waittime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string stackTrace = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_stacktrace(), ptr, ctx, "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo_MachineInfo_DeadLockThreadInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lockName = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lockname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lockname().data(), static_cast<int>(this->lockname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string lockOwner = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_lockowner()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->lockowner().data(), static_cast<int>(this->lockowner().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_state()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->state().data(), static_cast<int>(this->state().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 blockTime = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &blocktime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 waitTime = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &waittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string stackTrace = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_stacktrace()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo_MachineInfo_DeadLockThreadInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string lockName = 2;
  if (this->lockname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lockname().data(), static_cast<int>(this->lockname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->lockname(), output);
  }

  // string lockOwner = 3;
  if (this->lockowner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lockowner().data(), static_cast<int>(this->lockowner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->lockowner(), output);
  }

  // string state = 4;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->state(), output);
  }

  // int64 blockTime = 5;
  if (this->blocktime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->blocktime(), output);
  }

  // int64 waitTime = 6;
  if (this->waittime() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(6, this->waittime(), output);
  }

  // string stackTrace = 7;
  if (this->stacktrace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->stacktrace(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo_DeadLockThreadInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string lockName = 2;
  if (this->lockname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lockname().data(), static_cast<int>(this->lockname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->lockname(), target);
  }

  // string lockOwner = 3;
  if (this->lockowner().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->lockowner().data(), static_cast<int>(this->lockowner().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->lockowner(), target);
  }

  // string state = 4;
  if (this->state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->state().data(), static_cast<int>(this->state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->state(), target);
  }

  // int64 blockTime = 5;
  if (this->blocktime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->blocktime(), target);
  }

  // int64 waitTime = 6;
  if (this->waittime() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->waittime(), target);
  }

  // string stackTrace = 7;
  if (this->stacktrace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->stacktrace().data(), static_cast<int>(this->stacktrace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->stacktrace(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  return target;
}

size_t NodeInfo_MachineInfo_DeadLockThreadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string lockName = 2;
  if (this->lockname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lockname());
  }

  // string lockOwner = 3;
  if (this->lockowner().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->lockowner());
  }

  // string state = 4;
  if (this->state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->state());
  }

  // string stackTrace = 7;
  if (this->stacktrace().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->stacktrace());
  }

  // int64 blockTime = 5;
  if (this->blocktime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->blocktime());
  }

  // int64 waitTime = 6;
  if (this->waittime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->waittime());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo_MachineInfo_DeadLockThreadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo_MachineInfo_DeadLockThreadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
    MergeFrom(*source);
  }
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::MergeFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.lockname().size() > 0) {

    lockname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockname_);
  }
  if (from.lockowner().size() > 0) {

    lockowner_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lockowner_);
  }
  if (from.state().size() > 0) {

    state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.state_);
  }
  if (from.stacktrace().size() > 0) {

    stacktrace_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.stacktrace_);
  }
  if (from.blocktime() != 0) {
    set_blocktime(from.blocktime());
  }
  if (from.waittime() != 0) {
    set_waittime(from.waittime());
  }
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::CopyFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo_DeadLockThreadInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo_DeadLockThreadInfo::InternalSwap(NodeInfo_MachineInfo_DeadLockThreadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lockname_.Swap(&other->lockname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  lockowner_.Swap(&other->lockowner_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  state_.Swap(&other->state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stacktrace_.Swap(&other->stacktrace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blocktime_, other->blocktime_);
  swap(waittime_, other->waittime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo_DeadLockThreadInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo_MachineInfo::InitAsDefaultInstance() {
}
class NodeInfo_MachineInfo::_Internal {
 public:
};

NodeInfo_MachineInfo::NodeInfo_MachineInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo.MachineInfo)
}
NodeInfo_MachineInfo::NodeInfo_MachineInfo(const NodeInfo_MachineInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      memorydescinfolist_(from.memorydescinfolist_),
      deadlockthreadinfolist_(from.deadlockthreadinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  javaversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.javaversion().empty()) {
    javaversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.javaversion_);
  }
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.osname().empty()) {
    osname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  ::memcpy(&threadcount_, &from.threadcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&cpucount_) -
    reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo.MachineInfo)
}

void NodeInfo_MachineInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto.base);
  javaversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&threadcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpucount_) -
      reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
}

NodeInfo_MachineInfo::~NodeInfo_MachineInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo.MachineInfo)
  SharedDtor();
}

void NodeInfo_MachineInfo::SharedDtor() {
  javaversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfo_MachineInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo_MachineInfo& NodeInfo_MachineInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_MachineInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo_MachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo.MachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  memorydescinfolist_.Clear();
  deadlockthreadinfolist_.Clear();
  javaversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  osname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&threadcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cpucount_) -
      reinterpret_cast<char*>(&threadcount_)) + sizeof(cpucount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo_MachineInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 threadCount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 deadLockThreadCount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          deadlockthreadcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cpuCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cpucount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalMemory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          totalmemory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 freeMemory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          freememory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double cpuRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          cpurate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string javaVersion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_javaversion(), ptr, ctx, "protocol.NodeInfo.MachineInfo.javaVersion");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string osName = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_osname(), ptr, ctx, "protocol.NodeInfo.MachineInfo.osName");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jvmTotalMemoery = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          jvmtotalmemoery_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 jvmFreeMemory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          jvmfreememory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double processCpuRate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          processcpurate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_memorydescinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_deadlockthreadinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo_MachineInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo.MachineInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 threadCount = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 deadLockThreadCount = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &deadlockthreadcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cpuCount = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpucount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalMemory = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalmemory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 freeMemory = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &freememory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cpuRate = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpurate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string javaVersion = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_javaversion()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->javaversion().data(), static_cast<int>(this->javaversion().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.javaVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string osName = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_osname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->osname().data(), static_cast<int>(this->osname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.MachineInfo.osName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 jvmTotalMemoery = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &jvmtotalmemoery_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 jvmFreeMemory = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &jvmfreememory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double processCpuRate = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &processcpurate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_memorydescinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_deadlockthreadinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo.MachineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo.MachineInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo_MachineInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo.MachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadCount = 1;
  if (this->threadcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->threadcount(), output);
  }

  // int32 deadLockThreadCount = 2;
  if (this->deadlockthreadcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->deadlockthreadcount(), output);
  }

  // int32 cpuCount = 3;
  if (this->cpucount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->cpucount(), output);
  }

  // int64 totalMemory = 4;
  if (this->totalmemory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->totalmemory(), output);
  }

  // int64 freeMemory = 5;
  if (this->freememory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(5, this->freememory(), output);
  }

  // double cpuRate = 6;
  if (!(this->cpurate() <= 0 && this->cpurate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->cpurate(), output);
  }

  // string javaVersion = 7;
  if (this->javaversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->javaversion().data(), static_cast<int>(this->javaversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.javaVersion");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->javaversion(), output);
  }

  // string osName = 8;
  if (this->osname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->osname().data(), static_cast<int>(this->osname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.osName");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->osname(), output);
  }

  // int64 jvmTotalMemoery = 9;
  if (this->jvmtotalmemoery() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(9, this->jvmtotalmemoery(), output);
  }

  // int64 jvmFreeMemory = 10;
  if (this->jvmfreememory() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->jvmfreememory(), output);
  }

  // double processCpuRate = 11;
  if (!(this->processcpurate() <= 0 && this->processcpurate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->processcpurate(), output);
  }

  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memorydescinfolist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->memorydescinfolist(static_cast<int>(i)),
      output);
  }

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlockthreadinfolist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->deadlockthreadinfolist(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo.MachineInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo_MachineInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo.MachineInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 threadCount = 1;
  if (this->threadcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->threadcount(), target);
  }

  // int32 deadLockThreadCount = 2;
  if (this->deadlockthreadcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->deadlockthreadcount(), target);
  }

  // int32 cpuCount = 3;
  if (this->cpucount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->cpucount(), target);
  }

  // int64 totalMemory = 4;
  if (this->totalmemory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->totalmemory(), target);
  }

  // int64 freeMemory = 5;
  if (this->freememory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->freememory(), target);
  }

  // double cpuRate = 6;
  if (!(this->cpurate() <= 0 && this->cpurate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->cpurate(), target);
  }

  // string javaVersion = 7;
  if (this->javaversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->javaversion().data(), static_cast<int>(this->javaversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.javaVersion");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->javaversion(), target);
  }

  // string osName = 8;
  if (this->osname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->osname().data(), static_cast<int>(this->osname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.MachineInfo.osName");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->osname(), target);
  }

  // int64 jvmTotalMemoery = 9;
  if (this->jvmtotalmemoery() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->jvmtotalmemoery(), target);
  }

  // int64 jvmFreeMemory = 10;
  if (this->jvmfreememory() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->jvmfreememory(), target);
  }

  // double processCpuRate = 11;
  if (!(this->processcpurate() <= 0 && this->processcpurate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->processcpurate(), target);
  }

  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->memorydescinfolist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->memorydescinfolist(static_cast<int>(i)), target);
  }

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->deadlockthreadinfolist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->deadlockthreadinfolist(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo.MachineInfo)
  return target;
}

size_t NodeInfo_MachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo.MachineInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->memorydescinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->memorydescinfolist(static_cast<int>(i)));
    }
  }

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->deadlockthreadinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->deadlockthreadinfolist(static_cast<int>(i)));
    }
  }

  // string javaVersion = 7;
  if (this->javaversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->javaversion());
  }

  // string osName = 8;
  if (this->osname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->osname());
  }

  // int32 threadCount = 1;
  if (this->threadcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->threadcount());
  }

  // int32 deadLockThreadCount = 2;
  if (this->deadlockthreadcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->deadlockthreadcount());
  }

  // int64 totalMemory = 4;
  if (this->totalmemory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalmemory());
  }

  // int64 freeMemory = 5;
  if (this->freememory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->freememory());
  }

  // double cpuRate = 6;
  if (!(this->cpurate() <= 0 && this->cpurate() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 jvmTotalMemoery = 9;
  if (this->jvmtotalmemoery() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->jvmtotalmemoery());
  }

  // int64 jvmFreeMemory = 10;
  if (this->jvmfreememory() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->jvmfreememory());
  }

  // double processCpuRate = 11;
  if (!(this->processcpurate() <= 0 && this->processcpurate() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 cpuCount = 3;
  if (this->cpucount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->cpucount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo_MachineInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo_MachineInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo_MachineInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo.MachineInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo.MachineInfo)
    MergeFrom(*source);
  }
}

void NodeInfo_MachineInfo::MergeFrom(const NodeInfo_MachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  memorydescinfolist_.MergeFrom(from.memorydescinfolist_);
  deadlockthreadinfolist_.MergeFrom(from.deadlockthreadinfolist_);
  if (from.javaversion().size() > 0) {

    javaversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.javaversion_);
  }
  if (from.osname().size() > 0) {

    osname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.osname_);
  }
  if (from.threadcount() != 0) {
    set_threadcount(from.threadcount());
  }
  if (from.deadlockthreadcount() != 0) {
    set_deadlockthreadcount(from.deadlockthreadcount());
  }
  if (from.totalmemory() != 0) {
    set_totalmemory(from.totalmemory());
  }
  if (from.freememory() != 0) {
    set_freememory(from.freememory());
  }
  if (!(from.cpurate() <= 0 && from.cpurate() >= 0)) {
    set_cpurate(from.cpurate());
  }
  if (from.jvmtotalmemoery() != 0) {
    set_jvmtotalmemoery(from.jvmtotalmemoery());
  }
  if (from.jvmfreememory() != 0) {
    set_jvmfreememory(from.jvmfreememory());
  }
  if (!(from.processcpurate() <= 0 && from.processcpurate() >= 0)) {
    set_processcpurate(from.processcpurate());
  }
  if (from.cpucount() != 0) {
    set_cpucount(from.cpucount());
  }
}

void NodeInfo_MachineInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo_MachineInfo::CopyFrom(const NodeInfo_MachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo_MachineInfo::IsInitialized() const {
  return true;
}

void NodeInfo_MachineInfo::InternalSwap(NodeInfo_MachineInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&memorydescinfolist_)->InternalSwap(CastToBase(&other->memorydescinfolist_));
  CastToBase(&deadlockthreadinfolist_)->InternalSwap(CastToBase(&other->deadlockthreadinfolist_));
  javaversion_.Swap(&other->javaversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  osname_.Swap(&other->osname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(threadcount_, other->threadcount_);
  swap(deadlockthreadcount_, other->deadlockthreadcount_);
  swap(totalmemory_, other->totalmemory_);
  swap(freememory_, other->freememory_);
  swap(cpurate_, other->cpurate_);
  swap(jvmtotalmemoery_, other->jvmtotalmemoery_);
  swap(jvmfreememory_, other->jvmfreememory_);
  swap(processcpurate_, other->processcpurate_);
  swap(cpucount_, other->cpucount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo_MachineInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
  ::protocol::_NodeInfo_default_instance_._instance.get_mutable()->confignodeinfo_ = const_cast< ::protocol::NodeInfo_ConfigNodeInfo*>(
      ::protocol::NodeInfo_ConfigNodeInfo::internal_default_instance());
  ::protocol::_NodeInfo_default_instance_._instance.get_mutable()->machineinfo_ = const_cast< ::protocol::NodeInfo_MachineInfo*>(
      ::protocol::NodeInfo_MachineInfo::internal_default_instance());
}
class NodeInfo::_Internal {
 public:
  static const ::protocol::NodeInfo_ConfigNodeInfo& confignodeinfo(const NodeInfo* msg);
  static const ::protocol::NodeInfo_MachineInfo& machineinfo(const NodeInfo* msg);
};

const ::protocol::NodeInfo_ConfigNodeInfo&
NodeInfo::_Internal::confignodeinfo(const NodeInfo* msg) {
  return *msg->confignodeinfo_;
}
const ::protocol::NodeInfo_MachineInfo&
NodeInfo::_Internal::machineinfo(const NodeInfo* msg) {
  return *msg->machineinfo_;
}
NodeInfo::NodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protocol.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peerinfolist_(from.peerinfolist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cheatwitnessinfomap_.MergeFrom(from.cheatwitnessinfomap_);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.block().empty()) {
    block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  solidityblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.solidityblock().empty()) {
    solidityblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.solidityblock_);
  }
  if (from.has_confignodeinfo()) {
    confignodeinfo_ = new ::protocol::NodeInfo_ConfigNodeInfo(*from.confignodeinfo_);
  } else {
    confignodeinfo_ = nullptr;
  }
  if (from.has_machineinfo()) {
    machineinfo_ = new ::protocol::NodeInfo_MachineInfo(*from.machineinfo_);
  } else {
    machineinfo_ = nullptr;
  }
  ::memcpy(&beginsyncnum_, &from.beginsyncnum_,
    static_cast<size_t>(reinterpret_cast<char*>(&passiveconnectcount_) -
    reinterpret_cast<char*>(&beginsyncnum_)) + sizeof(passiveconnectcount_));
  // @@protoc_insertion_point(copy_constructor:protocol.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_core_2fTron_2eproto.base);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solidityblock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&confignodeinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passiveconnectcount_) -
      reinterpret_cast<char*>(&confignodeinfo_)) + sizeof(passiveconnectcount_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:protocol.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solidityblock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete confignodeinfo_;
  if (this != internal_default_instance()) delete machineinfo_;
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_core_2fTron_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peerinfolist_.Clear();
  cheatwitnessinfomap_.Clear();
  block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  solidityblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && confignodeinfo_ != nullptr) {
    delete confignodeinfo_;
  }
  confignodeinfo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && machineinfo_ != nullptr) {
    delete machineinfo_;
  }
  machineinfo_ = nullptr;
  ::memset(&beginsyncnum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passiveconnectcount_) -
      reinterpret_cast<char*>(&beginsyncnum_)) + sizeof(passiveconnectcount_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 beginSyncNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          beginsyncnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_block(), ptr, ctx, "protocol.NodeInfo.block");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string solidityBlock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_solidityblock(), ptr, ctx, "protocol.NodeInfo.solidityBlock");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 currentConnectCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          currentconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 activeConnectCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          activeconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 passiveConnectCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          passiveconnectcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 totalFlow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          totalflow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_peerinfolist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_confignodeinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.NodeInfo.MachineInfo machineInfo = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_machineinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> cheatWitnessInfoMap = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&cheatwitnessinfomap_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NodeInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:protocol.NodeInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 beginSyncNum = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &beginsyncnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string block = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_block()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->block().data(), static_cast<int>(this->block().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.block"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string solidityBlock = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_solidityblock()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->solidityblock().data(), static_cast<int>(this->solidityblock().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.solidityBlock"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 currentConnectCount = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentconnectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 activeConnectCount = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &activeconnectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 passiveConnectCount = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &passiveconnectcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalFlow = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalflow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_peerinfolist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_confignodeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .protocol.NodeInfo.MachineInfo machineInfo = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_machineinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> cheatWitnessInfoMap = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              NodeInfo_CheatWitnessInfoMapEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&cheatwitnessinfomap_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.CheatWitnessInfoMapEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "protocol.NodeInfo.CheatWitnessInfoMapEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protocol.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protocol.NodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NodeInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protocol.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 beginSyncNum = 1;
  if (this->beginsyncnum() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->beginsyncnum(), output);
  }

  // string block = 2;
  if (this->block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), static_cast<int>(this->block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.block");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->block(), output);
  }

  // string solidityBlock = 3;
  if (this->solidityblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->solidityblock().data(), static_cast<int>(this->solidityblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.solidityBlock");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->solidityblock(), output);
  }

  // int32 currentConnectCount = 4;
  if (this->currentconnectcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->currentconnectcount(), output);
  }

  // int32 activeConnectCount = 5;
  if (this->activeconnectcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->activeconnectcount(), output);
  }

  // int32 passiveConnectCount = 6;
  if (this->passiveconnectcount() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->passiveconnectcount(), output);
  }

  // int64 totalFlow = 7;
  if (this->totalflow() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(7, this->totalflow(), output);
  }

  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peerinfolist_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->peerinfolist(static_cast<int>(i)),
      output);
  }

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  if (this->has_confignodeinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::confignodeinfo(this), output);
  }

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  if (this->has_machineinfo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::machineinfo(this), output);
  }

  // map<string, string> cheatWitnessInfoMap = 11;
  if (!this->cheatwitnessinfomap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->cheatwitnessinfomap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cheatwitnessinfomap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->cheatwitnessinfomap().begin();
          it != this->cheatwitnessinfomap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::SerializeToCodedStream(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->cheatwitnessinfomap().begin();
          it != this->cheatwitnessinfomap().end(); ++it) {
        NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::SerializeToCodedStream(11, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protocol.NodeInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 beginSyncNum = 1;
  if (this->beginsyncnum() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->beginsyncnum(), target);
  }

  // string block = 2;
  if (this->block().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->block().data(), static_cast<int>(this->block().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.block");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->block(), target);
  }

  // string solidityBlock = 3;
  if (this->solidityblock().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->solidityblock().data(), static_cast<int>(this->solidityblock().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protocol.NodeInfo.solidityBlock");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->solidityblock(), target);
  }

  // int32 currentConnectCount = 4;
  if (this->currentconnectcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->currentconnectcount(), target);
  }

  // int32 activeConnectCount = 5;
  if (this->activeconnectcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->activeconnectcount(), target);
  }

  // int32 passiveConnectCount = 6;
  if (this->passiveconnectcount() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->passiveconnectcount(), target);
  }

  // int64 totalFlow = 7;
  if (this->totalflow() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->totalflow(), target);
  }

  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->peerinfolist_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->peerinfolist(static_cast<int>(i)), target);
  }

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  if (this->has_confignodeinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::confignodeinfo(this), target);
  }

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  if (this->has_machineinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::machineinfo(this), target);
  }

  // map<string, string> cheatWitnessInfoMap = 11;
  if (!this->cheatwitnessinfomap().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protocol.NodeInfo.CheatWitnessInfoMapEntry.value");
      }
    };

    if (false &&
        this->cheatwitnessinfomap().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->cheatwitnessinfomap().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->cheatwitnessinfomap().begin();
          it != this->cheatwitnessinfomap().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::SerializeToArray(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->cheatwitnessinfomap().begin();
          it != this->cheatwitnessinfomap().end(); ++it) {
        target = NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::SerializeToArray(11, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->peerinfolist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->peerinfolist(static_cast<int>(i)));
    }
  }

  // map<string, string> cheatWitnessInfoMap = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->cheatwitnessinfomap_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->cheatwitnessinfomap().begin();
      it != this->cheatwitnessinfomap().end(); ++it) {
    total_size += NodeInfo_CheatWitnessInfoMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string block = 2;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->block());
  }

  // string solidityBlock = 3;
  if (this->solidityblock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->solidityblock());
  }

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  if (this->has_confignodeinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *confignodeinfo_);
  }

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  if (this->has_machineinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *machineinfo_);
  }

  // int64 beginSyncNum = 1;
  if (this->beginsyncnum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->beginsyncnum());
  }

  // int32 currentConnectCount = 4;
  if (this->currentconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->currentconnectcount());
  }

  // int32 activeConnectCount = 5;
  if (this->activeconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->activeconnectcount());
  }

  // int64 totalFlow = 7;
  if (this->totalflow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->totalflow());
  }

  // int32 passiveConnectCount = 6;
  if (this->passiveconnectcount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->passiveconnectcount());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peerinfolist_.MergeFrom(from.peerinfolist_);
  cheatwitnessinfomap_.MergeFrom(from.cheatwitnessinfomap_);
  if (from.block().size() > 0) {

    block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  if (from.solidityblock().size() > 0) {

    solidityblock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.solidityblock_);
  }
  if (from.has_confignodeinfo()) {
    mutable_confignodeinfo()->::protocol::NodeInfo_ConfigNodeInfo::MergeFrom(from.confignodeinfo());
  }
  if (from.has_machineinfo()) {
    mutable_machineinfo()->::protocol::NodeInfo_MachineInfo::MergeFrom(from.machineinfo());
  }
  if (from.beginsyncnum() != 0) {
    set_beginsyncnum(from.beginsyncnum());
  }
  if (from.currentconnectcount() != 0) {
    set_currentconnectcount(from.currentconnectcount());
  }
  if (from.activeconnectcount() != 0) {
    set_activeconnectcount(from.activeconnectcount());
  }
  if (from.totalflow() != 0) {
    set_totalflow(from.totalflow());
  }
  if (from.passiveconnectcount() != 0) {
    set_passiveconnectcount(from.passiveconnectcount());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&peerinfolist_)->InternalSwap(CastToBase(&other->peerinfolist_));
  cheatwitnessinfomap_.Swap(&other->cheatwitnessinfomap_);
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  solidityblock_.Swap(&other->solidityblock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confignodeinfo_, other->confignodeinfo_);
  swap(machineinfo_, other->machineinfo_);
  swap(beginsyncnum_, other->beginsyncnum_);
  swap(currentconnectcount_, other->currentconnectcount_);
  swap(activeconnectcount_, other->activeconnectcount_);
  swap(totalflow_, other->totalflow_);
  swap(passiveconnectcount_, other->passiveconnectcount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::AccountId* Arena::CreateMaybeMessage< ::protocol::AccountId >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::AccountId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Vote* Arena::CreateMaybeMessage< ::protocol::Vote >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Vote >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Proposal_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Proposal_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Proposal_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Proposal* Arena::CreateMaybeMessage< ::protocol::Proposal >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Proposal >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Exchange* Arena::CreateMaybeMessage< ::protocol::Exchange >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainParameters_ChainParameter* Arena::CreateMaybeMessage< ::protocol::ChainParameters_ChainParameter >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ChainParameters_ChainParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainParameters* Arena::CreateMaybeMessage< ::protocol::ChainParameters >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ChainParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_Frozen* Arena::CreateMaybeMessage< ::protocol::Account_Frozen >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_Frozen >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AssetEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_AssetEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_AssetEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AssetV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_AssetV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_AssetV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account_AccountResource* Arena::CreateMaybeMessage< ::protocol::Account_AccountResource >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account_AccountResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Account* Arena::CreateMaybeMessage< ::protocol::Account >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Account >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Key* Arena::CreateMaybeMessage< ::protocol::Key >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Key >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResource* Arena::CreateMaybeMessage< ::protocol::DelegatedResource >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::DelegatedResource >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::authority* Arena::CreateMaybeMessage< ::protocol::authority >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::authority >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Permission* Arena::CreateMaybeMessage< ::protocol::Permission >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Permission >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Witness* Arena::CreateMaybeMessage< ::protocol::Witness >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Witness >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Votes* Arena::CreateMaybeMessage< ::protocol::Votes >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Votes >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXOutput* Arena::CreateMaybeMessage< ::protocol::TXOutput >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TXOutput >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXInput_raw* Arena::CreateMaybeMessage< ::protocol::TXInput_raw >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TXInput_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXInput* Arena::CreateMaybeMessage< ::protocol::TXInput >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TXInput >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TXOutputs* Arena::CreateMaybeMessage< ::protocol::TXOutputs >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TXOutputs >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ResourceReceipt* Arena::CreateMaybeMessage< ::protocol::ResourceReceipt >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ResourceReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_Contract* Arena::CreateMaybeMessage< ::protocol::Transaction_Contract >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Transaction_Contract >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_Result* Arena::CreateMaybeMessage< ::protocol::Transaction_Result >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Transaction_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction_raw* Arena::CreateMaybeMessage< ::protocol::Transaction_raw >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Transaction_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transaction* Arena::CreateMaybeMessage< ::protocol::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionInfo_Log* Arena::CreateMaybeMessage< ::protocol::TransactionInfo_Log >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TransactionInfo_Log >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionInfo* Arena::CreateMaybeMessage< ::protocol::TransactionInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TransactionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionRet* Arena::CreateMaybeMessage< ::protocol::TransactionRet >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TransactionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Transactions* Arena::CreateMaybeMessage< ::protocol::Transactions >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Transactions >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::TransactionSign* Arena::CreateMaybeMessage< ::protocol::TransactionSign >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::TransactionSign >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader_raw* Arena::CreateMaybeMessage< ::protocol::BlockHeader_raw >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::BlockHeader_raw >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockHeader* Arena::CreateMaybeMessage< ::protocol::BlockHeader >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::BlockHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Block* Arena::CreateMaybeMessage< ::protocol::Block >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Block >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainInventory_BlockId* Arena::CreateMaybeMessage< ::protocol::ChainInventory_BlockId >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ChainInventory_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::ChainInventory* Arena::CreateMaybeMessage< ::protocol::ChainInventory >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::ChainInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockInventory_BlockId* Arena::CreateMaybeMessage< ::protocol::BlockInventory_BlockId >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::BlockInventory_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::BlockInventory* Arena::CreateMaybeMessage< ::protocol::BlockInventory >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::BlockInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Inventory* Arena::CreateMaybeMessage< ::protocol::Inventory >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Inventory >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::Items* Arena::CreateMaybeMessage< ::protocol::Items >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::Items >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DynamicProperties* Arena::CreateMaybeMessage< ::protocol::DynamicProperties >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::DynamicProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DisconnectMessage* Arena::CreateMaybeMessage< ::protocol::DisconnectMessage >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::DisconnectMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::HelloMessage_BlockId* Arena::CreateMaybeMessage< ::protocol::HelloMessage_BlockId >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::HelloMessage_BlockId >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::HelloMessage* Arena::CreateMaybeMessage< ::protocol::HelloMessage >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::HelloMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::InternalTransaction_CallValueInfo* Arena::CreateMaybeMessage< ::protocol::InternalTransaction_CallValueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::InternalTransaction_CallValueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::InternalTransaction* Arena::CreateMaybeMessage< ::protocol::InternalTransaction >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::InternalTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::DelegatedResourceAccountIndex* Arena::CreateMaybeMessage< ::protocol::DelegatedResourceAccountIndex >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::DelegatedResourceAccountIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_PeerInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_PeerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_PeerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_ConfigNodeInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_ConfigNodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_ConfigNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo_MachineInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo_MachineInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo_MachineInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::NodeInfo* Arena::CreateMaybeMessage< ::protocol::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::protocol::NodeInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
