// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core/Tron.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2fTron_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2fTron_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "core/Discover.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2fTron_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2fTron_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[59]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2fTron_2eproto;
namespace protocol {
class Account;
class AccountDefaultTypeInternal;
extern AccountDefaultTypeInternal _Account_default_instance_;
class AccountId;
class AccountIdDefaultTypeInternal;
extern AccountIdDefaultTypeInternal _AccountId_default_instance_;
class Account_AccountResource;
class Account_AccountResourceDefaultTypeInternal;
extern Account_AccountResourceDefaultTypeInternal _Account_AccountResource_default_instance_;
class Account_AssetEntry_DoNotUse;
class Account_AssetEntry_DoNotUseDefaultTypeInternal;
extern Account_AssetEntry_DoNotUseDefaultTypeInternal _Account_AssetEntry_DoNotUse_default_instance_;
class Account_AssetV2Entry_DoNotUse;
class Account_AssetV2Entry_DoNotUseDefaultTypeInternal;
extern Account_AssetV2Entry_DoNotUseDefaultTypeInternal _Account_AssetV2Entry_DoNotUse_default_instance_;
class Account_FreeAssetNetUsageEntry_DoNotUse;
class Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal;
extern Account_FreeAssetNetUsageEntry_DoNotUseDefaultTypeInternal _Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_;
class Account_FreeAssetNetUsageV2Entry_DoNotUse;
class Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal;
extern Account_FreeAssetNetUsageV2Entry_DoNotUseDefaultTypeInternal _Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_;
class Account_Frozen;
class Account_FrozenDefaultTypeInternal;
extern Account_FrozenDefaultTypeInternal _Account_Frozen_default_instance_;
class Account_LatestAssetOperationTimeEntry_DoNotUse;
class Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal;
extern Account_LatestAssetOperationTimeEntry_DoNotUseDefaultTypeInternal _Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_;
class Account_LatestAssetOperationTimeV2Entry_DoNotUse;
class Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal;
extern Account_LatestAssetOperationTimeV2Entry_DoNotUseDefaultTypeInternal _Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_;
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockHeader;
class BlockHeaderDefaultTypeInternal;
extern BlockHeaderDefaultTypeInternal _BlockHeader_default_instance_;
class BlockHeader_raw;
class BlockHeader_rawDefaultTypeInternal;
extern BlockHeader_rawDefaultTypeInternal _BlockHeader_raw_default_instance_;
class BlockInventory;
class BlockInventoryDefaultTypeInternal;
extern BlockInventoryDefaultTypeInternal _BlockInventory_default_instance_;
class BlockInventory_BlockId;
class BlockInventory_BlockIdDefaultTypeInternal;
extern BlockInventory_BlockIdDefaultTypeInternal _BlockInventory_BlockId_default_instance_;
class ChainInventory;
class ChainInventoryDefaultTypeInternal;
extern ChainInventoryDefaultTypeInternal _ChainInventory_default_instance_;
class ChainInventory_BlockId;
class ChainInventory_BlockIdDefaultTypeInternal;
extern ChainInventory_BlockIdDefaultTypeInternal _ChainInventory_BlockId_default_instance_;
class ChainParameters;
class ChainParametersDefaultTypeInternal;
extern ChainParametersDefaultTypeInternal _ChainParameters_default_instance_;
class ChainParameters_ChainParameter;
class ChainParameters_ChainParameterDefaultTypeInternal;
extern ChainParameters_ChainParameterDefaultTypeInternal _ChainParameters_ChainParameter_default_instance_;
class DelegatedResource;
class DelegatedResourceDefaultTypeInternal;
extern DelegatedResourceDefaultTypeInternal _DelegatedResource_default_instance_;
class DelegatedResourceAccountIndex;
class DelegatedResourceAccountIndexDefaultTypeInternal;
extern DelegatedResourceAccountIndexDefaultTypeInternal _DelegatedResourceAccountIndex_default_instance_;
class DisconnectMessage;
class DisconnectMessageDefaultTypeInternal;
extern DisconnectMessageDefaultTypeInternal _DisconnectMessage_default_instance_;
class DynamicProperties;
class DynamicPropertiesDefaultTypeInternal;
extern DynamicPropertiesDefaultTypeInternal _DynamicProperties_default_instance_;
class Exchange;
class ExchangeDefaultTypeInternal;
extern ExchangeDefaultTypeInternal _Exchange_default_instance_;
class HelloMessage;
class HelloMessageDefaultTypeInternal;
extern HelloMessageDefaultTypeInternal _HelloMessage_default_instance_;
class HelloMessage_BlockId;
class HelloMessage_BlockIdDefaultTypeInternal;
extern HelloMessage_BlockIdDefaultTypeInternal _HelloMessage_BlockId_default_instance_;
class InternalTransaction;
class InternalTransactionDefaultTypeInternal;
extern InternalTransactionDefaultTypeInternal _InternalTransaction_default_instance_;
class InternalTransaction_CallValueInfo;
class InternalTransaction_CallValueInfoDefaultTypeInternal;
extern InternalTransaction_CallValueInfoDefaultTypeInternal _InternalTransaction_CallValueInfo_default_instance_;
class Inventory;
class InventoryDefaultTypeInternal;
extern InventoryDefaultTypeInternal _Inventory_default_instance_;
class Items;
class ItemsDefaultTypeInternal;
extern ItemsDefaultTypeInternal _Items_default_instance_;
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfo_CheatWitnessInfoMapEntry_DoNotUse;
class NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal;
extern NodeInfo_CheatWitnessInfoMapEntry_DoNotUseDefaultTypeInternal _NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_;
class NodeInfo_ConfigNodeInfo;
class NodeInfo_ConfigNodeInfoDefaultTypeInternal;
extern NodeInfo_ConfigNodeInfoDefaultTypeInternal _NodeInfo_ConfigNodeInfo_default_instance_;
class NodeInfo_MachineInfo;
class NodeInfo_MachineInfoDefaultTypeInternal;
extern NodeInfo_MachineInfoDefaultTypeInternal _NodeInfo_MachineInfo_default_instance_;
class NodeInfo_MachineInfo_DeadLockThreadInfo;
class NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal;
extern NodeInfo_MachineInfo_DeadLockThreadInfoDefaultTypeInternal _NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_;
class NodeInfo_MachineInfo_MemoryDescInfo;
class NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal;
extern NodeInfo_MachineInfo_MemoryDescInfoDefaultTypeInternal _NodeInfo_MachineInfo_MemoryDescInfo_default_instance_;
class NodeInfo_PeerInfo;
class NodeInfo_PeerInfoDefaultTypeInternal;
extern NodeInfo_PeerInfoDefaultTypeInternal _NodeInfo_PeerInfo_default_instance_;
class Permission;
class PermissionDefaultTypeInternal;
extern PermissionDefaultTypeInternal _Permission_default_instance_;
class Proposal;
class ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class Proposal_ParametersEntry_DoNotUse;
class Proposal_ParametersEntry_DoNotUseDefaultTypeInternal;
extern Proposal_ParametersEntry_DoNotUseDefaultTypeInternal _Proposal_ParametersEntry_DoNotUse_default_instance_;
class ResourceReceipt;
class ResourceReceiptDefaultTypeInternal;
extern ResourceReceiptDefaultTypeInternal _ResourceReceipt_default_instance_;
class TXInput;
class TXInputDefaultTypeInternal;
extern TXInputDefaultTypeInternal _TXInput_default_instance_;
class TXInput_raw;
class TXInput_rawDefaultTypeInternal;
extern TXInput_rawDefaultTypeInternal _TXInput_raw_default_instance_;
class TXOutput;
class TXOutputDefaultTypeInternal;
extern TXOutputDefaultTypeInternal _TXOutput_default_instance_;
class TXOutputs;
class TXOutputsDefaultTypeInternal;
extern TXOutputsDefaultTypeInternal _TXOutputs_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionInfo;
class TransactionInfoDefaultTypeInternal;
extern TransactionInfoDefaultTypeInternal _TransactionInfo_default_instance_;
class TransactionInfo_Log;
class TransactionInfo_LogDefaultTypeInternal;
extern TransactionInfo_LogDefaultTypeInternal _TransactionInfo_Log_default_instance_;
class TransactionRet;
class TransactionRetDefaultTypeInternal;
extern TransactionRetDefaultTypeInternal _TransactionRet_default_instance_;
class TransactionSign;
class TransactionSignDefaultTypeInternal;
extern TransactionSignDefaultTypeInternal _TransactionSign_default_instance_;
class Transaction_Contract;
class Transaction_ContractDefaultTypeInternal;
extern Transaction_ContractDefaultTypeInternal _Transaction_Contract_default_instance_;
class Transaction_Result;
class Transaction_ResultDefaultTypeInternal;
extern Transaction_ResultDefaultTypeInternal _Transaction_Result_default_instance_;
class Transaction_raw;
class Transaction_rawDefaultTypeInternal;
extern Transaction_rawDefaultTypeInternal _Transaction_raw_default_instance_;
class Transactions;
class TransactionsDefaultTypeInternal;
extern TransactionsDefaultTypeInternal _Transactions_default_instance_;
class Vote;
class VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class Votes;
class VotesDefaultTypeInternal;
extern VotesDefaultTypeInternal _Votes_default_instance_;
class Witness;
class WitnessDefaultTypeInternal;
extern WitnessDefaultTypeInternal _Witness_default_instance_;
class authority;
class authorityDefaultTypeInternal;
extern authorityDefaultTypeInternal _authority_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::Account* Arena::CreateMaybeMessage<::protocol::Account>(Arena*);
template<> ::protocol::AccountId* Arena::CreateMaybeMessage<::protocol::AccountId>(Arena*);
template<> ::protocol::Account_AccountResource* Arena::CreateMaybeMessage<::protocol::Account_AccountResource>(Arena*);
template<> ::protocol::Account_AssetEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_AssetEntry_DoNotUse>(Arena*);
template<> ::protocol::Account_AssetV2Entry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_AssetV2Entry_DoNotUse>(Arena*);
template<> ::protocol::Account_FreeAssetNetUsageEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_FreeAssetNetUsageEntry_DoNotUse>(Arena*);
template<> ::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_FreeAssetNetUsageV2Entry_DoNotUse>(Arena*);
template<> ::protocol::Account_Frozen* Arena::CreateMaybeMessage<::protocol::Account_Frozen>(Arena*);
template<> ::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_LatestAssetOperationTimeEntry_DoNotUse>(Arena*);
template<> ::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Account_LatestAssetOperationTimeV2Entry_DoNotUse>(Arena*);
template<> ::protocol::Block* Arena::CreateMaybeMessage<::protocol::Block>(Arena*);
template<> ::protocol::BlockHeader* Arena::CreateMaybeMessage<::protocol::BlockHeader>(Arena*);
template<> ::protocol::BlockHeader_raw* Arena::CreateMaybeMessage<::protocol::BlockHeader_raw>(Arena*);
template<> ::protocol::BlockInventory* Arena::CreateMaybeMessage<::protocol::BlockInventory>(Arena*);
template<> ::protocol::BlockInventory_BlockId* Arena::CreateMaybeMessage<::protocol::BlockInventory_BlockId>(Arena*);
template<> ::protocol::ChainInventory* Arena::CreateMaybeMessage<::protocol::ChainInventory>(Arena*);
template<> ::protocol::ChainInventory_BlockId* Arena::CreateMaybeMessage<::protocol::ChainInventory_BlockId>(Arena*);
template<> ::protocol::ChainParameters* Arena::CreateMaybeMessage<::protocol::ChainParameters>(Arena*);
template<> ::protocol::ChainParameters_ChainParameter* Arena::CreateMaybeMessage<::protocol::ChainParameters_ChainParameter>(Arena*);
template<> ::protocol::DelegatedResource* Arena::CreateMaybeMessage<::protocol::DelegatedResource>(Arena*);
template<> ::protocol::DelegatedResourceAccountIndex* Arena::CreateMaybeMessage<::protocol::DelegatedResourceAccountIndex>(Arena*);
template<> ::protocol::DisconnectMessage* Arena::CreateMaybeMessage<::protocol::DisconnectMessage>(Arena*);
template<> ::protocol::DynamicProperties* Arena::CreateMaybeMessage<::protocol::DynamicProperties>(Arena*);
template<> ::protocol::Exchange* Arena::CreateMaybeMessage<::protocol::Exchange>(Arena*);
template<> ::protocol::HelloMessage* Arena::CreateMaybeMessage<::protocol::HelloMessage>(Arena*);
template<> ::protocol::HelloMessage_BlockId* Arena::CreateMaybeMessage<::protocol::HelloMessage_BlockId>(Arena*);
template<> ::protocol::InternalTransaction* Arena::CreateMaybeMessage<::protocol::InternalTransaction>(Arena*);
template<> ::protocol::InternalTransaction_CallValueInfo* Arena::CreateMaybeMessage<::protocol::InternalTransaction_CallValueInfo>(Arena*);
template<> ::protocol::Inventory* Arena::CreateMaybeMessage<::protocol::Inventory>(Arena*);
template<> ::protocol::Items* Arena::CreateMaybeMessage<::protocol::Items>(Arena*);
template<> ::protocol::Key* Arena::CreateMaybeMessage<::protocol::Key>(Arena*);
template<> ::protocol::NodeInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo>(Arena*);
template<> ::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::NodeInfo_CheatWitnessInfoMapEntry_DoNotUse>(Arena*);
template<> ::protocol::NodeInfo_ConfigNodeInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo_ConfigNodeInfo>(Arena*);
template<> ::protocol::NodeInfo_MachineInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo_MachineInfo>(Arena*);
template<> ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo>(Arena*);
template<> ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo_MachineInfo_MemoryDescInfo>(Arena*);
template<> ::protocol::NodeInfo_PeerInfo* Arena::CreateMaybeMessage<::protocol::NodeInfo_PeerInfo>(Arena*);
template<> ::protocol::Permission* Arena::CreateMaybeMessage<::protocol::Permission>(Arena*);
template<> ::protocol::Proposal* Arena::CreateMaybeMessage<::protocol::Proposal>(Arena*);
template<> ::protocol::Proposal_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::protocol::Proposal_ParametersEntry_DoNotUse>(Arena*);
template<> ::protocol::ResourceReceipt* Arena::CreateMaybeMessage<::protocol::ResourceReceipt>(Arena*);
template<> ::protocol::TXInput* Arena::CreateMaybeMessage<::protocol::TXInput>(Arena*);
template<> ::protocol::TXInput_raw* Arena::CreateMaybeMessage<::protocol::TXInput_raw>(Arena*);
template<> ::protocol::TXOutput* Arena::CreateMaybeMessage<::protocol::TXOutput>(Arena*);
template<> ::protocol::TXOutputs* Arena::CreateMaybeMessage<::protocol::TXOutputs>(Arena*);
template<> ::protocol::Transaction* Arena::CreateMaybeMessage<::protocol::Transaction>(Arena*);
template<> ::protocol::TransactionInfo* Arena::CreateMaybeMessage<::protocol::TransactionInfo>(Arena*);
template<> ::protocol::TransactionInfo_Log* Arena::CreateMaybeMessage<::protocol::TransactionInfo_Log>(Arena*);
template<> ::protocol::TransactionRet* Arena::CreateMaybeMessage<::protocol::TransactionRet>(Arena*);
template<> ::protocol::TransactionSign* Arena::CreateMaybeMessage<::protocol::TransactionSign>(Arena*);
template<> ::protocol::Transaction_Contract* Arena::CreateMaybeMessage<::protocol::Transaction_Contract>(Arena*);
template<> ::protocol::Transaction_Result* Arena::CreateMaybeMessage<::protocol::Transaction_Result>(Arena*);
template<> ::protocol::Transaction_raw* Arena::CreateMaybeMessage<::protocol::Transaction_raw>(Arena*);
template<> ::protocol::Transactions* Arena::CreateMaybeMessage<::protocol::Transactions>(Arena*);
template<> ::protocol::Vote* Arena::CreateMaybeMessage<::protocol::Vote>(Arena*);
template<> ::protocol::Votes* Arena::CreateMaybeMessage<::protocol::Votes>(Arena*);
template<> ::protocol::Witness* Arena::CreateMaybeMessage<::protocol::Witness>(Arena*);
template<> ::protocol::authority* Arena::CreateMaybeMessage<::protocol::authority>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum Proposal_State : int {
  Proposal_State_PENDING = 0,
  Proposal_State_DISAPPROVED = 1,
  Proposal_State_APPROVED = 2,
  Proposal_State_CANCELED = 3,
  Proposal_State_Proposal_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Proposal_State_Proposal_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Proposal_State_IsValid(int value);
constexpr Proposal_State Proposal_State_State_MIN = Proposal_State_PENDING;
constexpr Proposal_State Proposal_State_State_MAX = Proposal_State_CANCELED;
constexpr int Proposal_State_State_ARRAYSIZE = Proposal_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Proposal_State_descriptor();
template<typename T>
inline const std::string& Proposal_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Proposal_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Proposal_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Proposal_State_descriptor(), enum_t_value);
}
inline bool Proposal_State_Parse(
    const std::string& name, Proposal_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Proposal_State>(
    Proposal_State_descriptor(), name, value);
}
enum Permission_PermissionType : int {
  Permission_PermissionType_Owner = 0,
  Permission_PermissionType_Witness = 1,
  Permission_PermissionType_Active = 2,
  Permission_PermissionType_Permission_PermissionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Permission_PermissionType_Permission_PermissionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Permission_PermissionType_IsValid(int value);
constexpr Permission_PermissionType Permission_PermissionType_PermissionType_MIN = Permission_PermissionType_Owner;
constexpr Permission_PermissionType Permission_PermissionType_PermissionType_MAX = Permission_PermissionType_Active;
constexpr int Permission_PermissionType_PermissionType_ARRAYSIZE = Permission_PermissionType_PermissionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Permission_PermissionType_descriptor();
template<typename T>
inline const std::string& Permission_PermissionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Permission_PermissionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Permission_PermissionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Permission_PermissionType_descriptor(), enum_t_value);
}
inline bool Permission_PermissionType_Parse(
    const std::string& name, Permission_PermissionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Permission_PermissionType>(
    Permission_PermissionType_descriptor(), name, value);
}
enum Transaction_Contract_ContractType : int {
  Transaction_Contract_ContractType_AccountCreateContract = 0,
  Transaction_Contract_ContractType_TransferContract = 1,
  Transaction_Contract_ContractType_TransferAssetContract = 2,
  Transaction_Contract_ContractType_VoteAssetContract = 3,
  Transaction_Contract_ContractType_VoteWitnessContract = 4,
  Transaction_Contract_ContractType_WitnessCreateContract = 5,
  Transaction_Contract_ContractType_AssetIssueContract = 6,
  Transaction_Contract_ContractType_WitnessUpdateContract = 8,
  Transaction_Contract_ContractType_ParticipateAssetIssueContract = 9,
  Transaction_Contract_ContractType_AccountUpdateContract = 10,
  Transaction_Contract_ContractType_FreezeBalanceContract = 11,
  Transaction_Contract_ContractType_UnfreezeBalanceContract = 12,
  Transaction_Contract_ContractType_WithdrawBalanceContract = 13,
  Transaction_Contract_ContractType_UnfreezeAssetContract = 14,
  Transaction_Contract_ContractType_UpdateAssetContract = 15,
  Transaction_Contract_ContractType_ProposalCreateContract = 16,
  Transaction_Contract_ContractType_ProposalApproveContract = 17,
  Transaction_Contract_ContractType_ProposalDeleteContract = 18,
  Transaction_Contract_ContractType_SetAccountIdContract = 19,
  Transaction_Contract_ContractType_CustomContract = 20,
  Transaction_Contract_ContractType_CreateSmartContract = 30,
  Transaction_Contract_ContractType_TriggerSmartContract = 31,
  Transaction_Contract_ContractType_GetContract = 32,
  Transaction_Contract_ContractType_UpdateSettingContract = 33,
  Transaction_Contract_ContractType_ExchangeCreateContract = 41,
  Transaction_Contract_ContractType_ExchangeInjectContract = 42,
  Transaction_Contract_ContractType_ExchangeWithdrawContract = 43,
  Transaction_Contract_ContractType_ExchangeTransactionContract = 44,
  Transaction_Contract_ContractType_UpdateEnergyLimitContract = 45,
  Transaction_Contract_ContractType_AccountPermissionUpdateContract = 46,
  Transaction_Contract_ContractType_ClearABIContract = 48,
  Transaction_Contract_ContractType_UpdateBrokerageContract = 49,
  Transaction_Contract_ContractType_ShieldedTransferContract = 51,
  Transaction_Contract_ContractType_Transaction_Contract_ContractType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Transaction_Contract_ContractType_Transaction_Contract_ContractType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Transaction_Contract_ContractType_IsValid(int value);
constexpr Transaction_Contract_ContractType Transaction_Contract_ContractType_ContractType_MIN = Transaction_Contract_ContractType_AccountCreateContract;
constexpr Transaction_Contract_ContractType Transaction_Contract_ContractType_ContractType_MAX = Transaction_Contract_ContractType_ShieldedTransferContract;
constexpr int Transaction_Contract_ContractType_ContractType_ARRAYSIZE = Transaction_Contract_ContractType_ContractType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Contract_ContractType_descriptor();
template<typename T>
inline const std::string& Transaction_Contract_ContractType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_Contract_ContractType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_Contract_ContractType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_Contract_ContractType_descriptor(), enum_t_value);
}
inline bool Transaction_Contract_ContractType_Parse(
    const std::string& name, Transaction_Contract_ContractType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_Contract_ContractType>(
    Transaction_Contract_ContractType_descriptor(), name, value);
}
enum Transaction_Result_code : int {
  Transaction_Result_code_SUCESS = 0,
  Transaction_Result_code_FAILED = 1,
  Transaction_Result_code_Transaction_Result_code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Transaction_Result_code_Transaction_Result_code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Transaction_Result_code_IsValid(int value);
constexpr Transaction_Result_code Transaction_Result_code_code_MIN = Transaction_Result_code_SUCESS;
constexpr Transaction_Result_code Transaction_Result_code_code_MAX = Transaction_Result_code_FAILED;
constexpr int Transaction_Result_code_code_ARRAYSIZE = Transaction_Result_code_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_code_descriptor();
template<typename T>
inline const std::string& Transaction_Result_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_Result_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_Result_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_Result_code_descriptor(), enum_t_value);
}
inline bool Transaction_Result_code_Parse(
    const std::string& name, Transaction_Result_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_Result_code>(
    Transaction_Result_code_descriptor(), name, value);
}
enum Transaction_Result_contractResult : int {
  Transaction_Result_contractResult_DEFAULT = 0,
  Transaction_Result_contractResult_SUCCESS = 1,
  Transaction_Result_contractResult_REVERT = 2,
  Transaction_Result_contractResult_BAD_JUMP_DESTINATION = 3,
  Transaction_Result_contractResult_OUT_OF_MEMORY = 4,
  Transaction_Result_contractResult_PRECOMPILED_CONTRACT = 5,
  Transaction_Result_contractResult_STACK_TOO_SMALL = 6,
  Transaction_Result_contractResult_STACK_TOO_LARGE = 7,
  Transaction_Result_contractResult_ILLEGAL_OPERATION = 8,
  Transaction_Result_contractResult_STACK_OVERFLOW = 9,
  Transaction_Result_contractResult_OUT_OF_ENERGY = 10,
  Transaction_Result_contractResult_OUT_OF_TIME = 11,
  Transaction_Result_contractResult_JVM_STACK_OVER_FLOW = 12,
  Transaction_Result_contractResult_UNKNOWN = 13,
  Transaction_Result_contractResult_TRANSFER_FAILED = 14,
  Transaction_Result_contractResult_Transaction_Result_contractResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Transaction_Result_contractResult_Transaction_Result_contractResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Transaction_Result_contractResult_IsValid(int value);
constexpr Transaction_Result_contractResult Transaction_Result_contractResult_contractResult_MIN = Transaction_Result_contractResult_DEFAULT;
constexpr Transaction_Result_contractResult Transaction_Result_contractResult_contractResult_MAX = Transaction_Result_contractResult_TRANSFER_FAILED;
constexpr int Transaction_Result_contractResult_contractResult_ARRAYSIZE = Transaction_Result_contractResult_contractResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Transaction_Result_contractResult_descriptor();
template<typename T>
inline const std::string& Transaction_Result_contractResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Transaction_Result_contractResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Transaction_Result_contractResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Transaction_Result_contractResult_descriptor(), enum_t_value);
}
inline bool Transaction_Result_contractResult_Parse(
    const std::string& name, Transaction_Result_contractResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Transaction_Result_contractResult>(
    Transaction_Result_contractResult_descriptor(), name, value);
}
enum TransactionInfo_code : int {
  TransactionInfo_code_SUCESS = 0,
  TransactionInfo_code_FAILED = 1,
  TransactionInfo_code_TransactionInfo_code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TransactionInfo_code_TransactionInfo_code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TransactionInfo_code_IsValid(int value);
constexpr TransactionInfo_code TransactionInfo_code_code_MIN = TransactionInfo_code_SUCESS;
constexpr TransactionInfo_code TransactionInfo_code_code_MAX = TransactionInfo_code_FAILED;
constexpr int TransactionInfo_code_code_ARRAYSIZE = TransactionInfo_code_code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionInfo_code_descriptor();
template<typename T>
inline const std::string& TransactionInfo_code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TransactionInfo_code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TransactionInfo_code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TransactionInfo_code_descriptor(), enum_t_value);
}
inline bool TransactionInfo_code_Parse(
    const std::string& name, TransactionInfo_code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TransactionInfo_code>(
    TransactionInfo_code_descriptor(), name, value);
}
enum BlockInventory_Type : int {
  BlockInventory_Type_SYNC = 0,
  BlockInventory_Type_ADVTISE = 1,
  BlockInventory_Type_FETCH = 2,
  BlockInventory_Type_BlockInventory_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BlockInventory_Type_BlockInventory_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BlockInventory_Type_IsValid(int value);
constexpr BlockInventory_Type BlockInventory_Type_Type_MIN = BlockInventory_Type_SYNC;
constexpr BlockInventory_Type BlockInventory_Type_Type_MAX = BlockInventory_Type_FETCH;
constexpr int BlockInventory_Type_Type_ARRAYSIZE = BlockInventory_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BlockInventory_Type_descriptor();
template<typename T>
inline const std::string& BlockInventory_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BlockInventory_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BlockInventory_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BlockInventory_Type_descriptor(), enum_t_value);
}
inline bool BlockInventory_Type_Parse(
    const std::string& name, BlockInventory_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BlockInventory_Type>(
    BlockInventory_Type_descriptor(), name, value);
}
enum Inventory_InventoryType : int {
  Inventory_InventoryType_TRX = 0,
  Inventory_InventoryType_BLOCK = 1,
  Inventory_InventoryType_Inventory_InventoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Inventory_InventoryType_Inventory_InventoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Inventory_InventoryType_IsValid(int value);
constexpr Inventory_InventoryType Inventory_InventoryType_InventoryType_MIN = Inventory_InventoryType_TRX;
constexpr Inventory_InventoryType Inventory_InventoryType_InventoryType_MAX = Inventory_InventoryType_BLOCK;
constexpr int Inventory_InventoryType_InventoryType_ARRAYSIZE = Inventory_InventoryType_InventoryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Inventory_InventoryType_descriptor();
template<typename T>
inline const std::string& Inventory_InventoryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Inventory_InventoryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Inventory_InventoryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Inventory_InventoryType_descriptor(), enum_t_value);
}
inline bool Inventory_InventoryType_Parse(
    const std::string& name, Inventory_InventoryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Inventory_InventoryType>(
    Inventory_InventoryType_descriptor(), name, value);
}
enum Items_ItemType : int {
  Items_ItemType_ERR = 0,
  Items_ItemType_TRX = 1,
  Items_ItemType_BLOCK = 2,
  Items_ItemType_BLOCKHEADER = 3,
  Items_ItemType_Items_ItemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Items_ItemType_Items_ItemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Items_ItemType_IsValid(int value);
constexpr Items_ItemType Items_ItemType_ItemType_MIN = Items_ItemType_ERR;
constexpr Items_ItemType Items_ItemType_ItemType_MAX = Items_ItemType_BLOCKHEADER;
constexpr int Items_ItemType_ItemType_ARRAYSIZE = Items_ItemType_ItemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Items_ItemType_descriptor();
template<typename T>
inline const std::string& Items_ItemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Items_ItemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Items_ItemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Items_ItemType_descriptor(), enum_t_value);
}
inline bool Items_ItemType_Parse(
    const std::string& name, Items_ItemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Items_ItemType>(
    Items_ItemType_descriptor(), name, value);
}
enum AccountType : int {
  Normal = 0,
  AssetIssue = 1,
  Contract = 2,
  AccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AccountType_IsValid(int value);
constexpr AccountType AccountType_MIN = Normal;
constexpr AccountType AccountType_MAX = Contract;
constexpr int AccountType_ARRAYSIZE = AccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AccountType_descriptor();
template<typename T>
inline const std::string& AccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AccountType_descriptor(), enum_t_value);
}
inline bool AccountType_Parse(
    const std::string& name, AccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AccountType>(
    AccountType_descriptor(), name, value);
}
enum ReasonCode : int {
  REQUESTED = 0,
  BAD_PROTOCOL = 2,
  TOO_MANY_PEERS = 4,
  DUPLICATE_PEER = 5,
  INCOMPATIBLE_PROTOCOL = 6,
  NULL_IDENTITY = 7,
  PEER_QUITING = 8,
  UNEXPECTED_IDENTITY = 9,
  LOCAL_IDENTITY = 10,
  PING_TIMEOUT = 11,
  USER_REASON = 16,
  RESET = 17,
  SYNC_FAIL = 18,
  FETCH_FAIL = 19,
  BAD_TX = 20,
  BAD_BLOCK = 21,
  FORKED = 22,
  UNLINKABLE = 23,
  INCOMPATIBLE_VERSION = 24,
  INCOMPATIBLE_CHAIN = 25,
  TIME_OUT = 32,
  CONNECT_FAIL = 33,
  TOO_MANY_PEERS_WITH_SAME_IP = 34,
  UNKNOWN = 255,
  ReasonCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReasonCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReasonCode_IsValid(int value);
constexpr ReasonCode ReasonCode_MIN = REQUESTED;
constexpr ReasonCode ReasonCode_MAX = UNKNOWN;
constexpr int ReasonCode_ARRAYSIZE = ReasonCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReasonCode_descriptor();
template<typename T>
inline const std::string& ReasonCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReasonCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReasonCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReasonCode_descriptor(), enum_t_value);
}
inline bool ReasonCode_Parse(
    const std::string& name, ReasonCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReasonCode>(
    ReasonCode_descriptor(), name, value);
}
// ===================================================================

class AccountId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AccountId) */ {
 public:
  AccountId();
  virtual ~AccountId();

  AccountId(const AccountId& from);
  AccountId(AccountId&& from) noexcept
    : AccountId() {
    *this = ::std::move(from);
  }

  inline AccountId& operator=(const AccountId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountId& operator=(AccountId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountId* internal_default_instance() {
    return reinterpret_cast<const AccountId*>(
               &_AccountId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountId& a, AccountId& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountId* New() const final {
    return CreateMaybeMessage<AccountId>(nullptr);
  }

  AccountId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountId& from);
  void MergeFrom(const AccountId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AccountId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // bytes address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // @@protoc_insertion_point(class_scope:protocol.AccountId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Vote :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Vote) */ {
 public:
  Vote();
  virtual ~Vote();

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vote& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vote* New() const final {
    return CreateMaybeMessage<Vote>(nullptr);
  }

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Vote";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoteAddressFieldNumber = 1,
    kVoteCountFieldNumber = 2,
  };
  // bytes vote_address = 1;
  void clear_vote_address();
  const std::string& vote_address() const;
  void set_vote_address(const std::string& value);
  void set_vote_address(std::string&& value);
  void set_vote_address(const char* value);
  void set_vote_address(const void* value, size_t size);
  std::string* mutable_vote_address();
  std::string* release_vote_address();
  void set_allocated_vote_address(std::string* vote_address);

  // int64 vote_count = 2;
  void clear_vote_count();
  ::PROTOBUF_NAMESPACE_ID::int64 vote_count() const;
  void set_vote_count(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Vote)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vote_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 vote_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Proposal_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Proposal_ParametersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Proposal_ParametersEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Proposal_ParametersEntry_DoNotUse();
  Proposal_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Proposal_ParametersEntry_DoNotUse& other);
  static const Proposal_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Proposal_ParametersEntry_DoNotUse*>(&_Proposal_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Proposal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Proposal) */ {
 public:
  Proposal();
  virtual ~Proposal();

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Proposal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Proposal* New() const final {
    return CreateMaybeMessage<Proposal>(nullptr);
  }

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Proposal& from);
  void MergeFrom(const Proposal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Proposal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Proposal_State State;
  static constexpr State PENDING =
    Proposal_State_PENDING;
  static constexpr State DISAPPROVED =
    Proposal_State_DISAPPROVED;
  static constexpr State APPROVED =
    Proposal_State_APPROVED;
  static constexpr State CANCELED =
    Proposal_State_CANCELED;
  static inline bool State_IsValid(int value) {
    return Proposal_State_IsValid(value);
  }
  static constexpr State State_MIN =
    Proposal_State_State_MIN;
  static constexpr State State_MAX =
    Proposal_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    Proposal_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return Proposal_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return Proposal_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return Proposal_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kApprovalsFieldNumber = 6,
    kProposerAddressFieldNumber = 2,
    kProposalIdFieldNumber = 1,
    kExpirationTimeFieldNumber = 4,
    kCreateTimeFieldNumber = 5,
    kStateFieldNumber = 7,
  };
  // map<int64, int64> parameters = 3;
  int parameters_size() const;
  void clear_parameters();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_parameters();

  // repeated bytes approvals = 6;
  int approvals_size() const;
  void clear_approvals();
  const std::string& approvals(int index) const;
  std::string* mutable_approvals(int index);
  void set_approvals(int index, const std::string& value);
  void set_approvals(int index, std::string&& value);
  void set_approvals(int index, const char* value);
  void set_approvals(int index, const void* value, size_t size);
  std::string* add_approvals();
  void add_approvals(const std::string& value);
  void add_approvals(std::string&& value);
  void add_approvals(const char* value);
  void add_approvals(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& approvals() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_approvals();

  // bytes proposer_address = 2;
  void clear_proposer_address();
  const std::string& proposer_address() const;
  void set_proposer_address(const std::string& value);
  void set_proposer_address(std::string&& value);
  void set_proposer_address(const char* value);
  void set_proposer_address(const void* value, size_t size);
  std::string* mutable_proposer_address();
  std::string* release_proposer_address();
  void set_allocated_proposer_address(std::string* proposer_address);

  // int64 proposal_id = 1;
  void clear_proposal_id();
  ::PROTOBUF_NAMESPACE_ID::int64 proposal_id() const;
  void set_proposal_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 expiration_time = 4;
  void clear_expiration_time();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_time() const;
  void set_expiration_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 create_time = 5;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .protocol.Proposal.State state = 7;
  void clear_state();
  ::protocol::Proposal_State state() const;
  void set_state(::protocol::Proposal_State value);

  // @@protoc_insertion_point(class_scope:protocol.Proposal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Proposal_ParametersEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> approvals_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proposer_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 proposal_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Exchange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Exchange) */ {
 public:
  Exchange();
  virtual ~Exchange();

  Exchange(const Exchange& from);
  Exchange(Exchange&& from) noexcept
    : Exchange() {
    *this = ::std::move(from);
  }

  inline Exchange& operator=(const Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exchange& operator=(Exchange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Exchange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exchange* internal_default_instance() {
    return reinterpret_cast<const Exchange*>(
               &_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Exchange& a, Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(Exchange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exchange* New() const final {
    return CreateMaybeMessage<Exchange>(nullptr);
  }

  Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exchange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Exchange& from);
  void MergeFrom(const Exchange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exchange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Exchange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatorAddressFieldNumber = 2,
    kFirstTokenIdFieldNumber = 6,
    kSecondTokenIdFieldNumber = 8,
    kExchangeIdFieldNumber = 1,
    kCreateTimeFieldNumber = 3,
    kFirstTokenBalanceFieldNumber = 7,
    kSecondTokenBalanceFieldNumber = 9,
  };
  // bytes creator_address = 2;
  void clear_creator_address();
  const std::string& creator_address() const;
  void set_creator_address(const std::string& value);
  void set_creator_address(std::string&& value);
  void set_creator_address(const char* value);
  void set_creator_address(const void* value, size_t size);
  std::string* mutable_creator_address();
  std::string* release_creator_address();
  void set_allocated_creator_address(std::string* creator_address);

  // bytes first_token_id = 6;
  void clear_first_token_id();
  const std::string& first_token_id() const;
  void set_first_token_id(const std::string& value);
  void set_first_token_id(std::string&& value);
  void set_first_token_id(const char* value);
  void set_first_token_id(const void* value, size_t size);
  std::string* mutable_first_token_id();
  std::string* release_first_token_id();
  void set_allocated_first_token_id(std::string* first_token_id);

  // bytes second_token_id = 8;
  void clear_second_token_id();
  const std::string& second_token_id() const;
  void set_second_token_id(const std::string& value);
  void set_second_token_id(std::string&& value);
  void set_second_token_id(const char* value);
  void set_second_token_id(const void* value, size_t size);
  std::string* mutable_second_token_id();
  std::string* release_second_token_id();
  void set_allocated_second_token_id(std::string* second_token_id);

  // int64 exchange_id = 1;
  void clear_exchange_id();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id() const;
  void set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 create_time = 3;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 first_token_balance = 7;
  void clear_first_token_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 first_token_balance() const;
  void set_first_token_balance(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 second_token_balance = 9;
  void clear_second_token_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 second_token_balance() const;
  void set_second_token_balance(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Exchange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_token_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr second_token_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 first_token_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 second_token_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class ChainParameters_ChainParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChainParameters.ChainParameter) */ {
 public:
  ChainParameters_ChainParameter();
  virtual ~ChainParameters_ChainParameter();

  ChainParameters_ChainParameter(const ChainParameters_ChainParameter& from);
  ChainParameters_ChainParameter(ChainParameters_ChainParameter&& from) noexcept
    : ChainParameters_ChainParameter() {
    *this = ::std::move(from);
  }

  inline ChainParameters_ChainParameter& operator=(const ChainParameters_ChainParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainParameters_ChainParameter& operator=(ChainParameters_ChainParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainParameters_ChainParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainParameters_ChainParameter* internal_default_instance() {
    return reinterpret_cast<const ChainParameters_ChainParameter*>(
               &_ChainParameters_ChainParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChainParameters_ChainParameter& a, ChainParameters_ChainParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainParameters_ChainParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainParameters_ChainParameter* New() const final {
    return CreateMaybeMessage<ChainParameters_ChainParameter>(nullptr);
  }

  ChainParameters_ChainParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainParameters_ChainParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainParameters_ChainParameter& from);
  void MergeFrom(const ChainParameters_ChainParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainParameters_ChainParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChainParameters.ChainParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);

  // int64 value = 2;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainParameters.ChainParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class ChainParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChainParameters) */ {
 public:
  ChainParameters();
  virtual ~ChainParameters();

  ChainParameters(const ChainParameters& from);
  ChainParameters(ChainParameters&& from) noexcept
    : ChainParameters() {
    *this = ::std::move(from);
  }

  inline ChainParameters& operator=(const ChainParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainParameters& operator=(ChainParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainParameters* internal_default_instance() {
    return reinterpret_cast<const ChainParameters*>(
               &_ChainParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChainParameters& a, ChainParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainParameters* New() const final {
    return CreateMaybeMessage<ChainParameters>(nullptr);
  }

  ChainParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainParameters& from);
  void MergeFrom(const ChainParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChainParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChainParameters_ChainParameter ChainParameter;

  // accessors -------------------------------------------------------

  enum : int {
    kChainParameterFieldNumber = 1,
  };
  // repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
  int chainparameter_size() const;
  void clear_chainparameter();
  ::protocol::ChainParameters_ChainParameter* mutable_chainparameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainParameters_ChainParameter >*
      mutable_chainparameter();
  const ::protocol::ChainParameters_ChainParameter& chainparameter(int index) const;
  ::protocol::ChainParameters_ChainParameter* add_chainparameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainParameters_ChainParameter >&
      chainparameter() const;

  // @@protoc_insertion_point(class_scope:protocol.ChainParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainParameters_ChainParameter > chainparameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Account_Frozen :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Account.Frozen) */ {
 public:
  Account_Frozen();
  virtual ~Account_Frozen();

  Account_Frozen(const Account_Frozen& from);
  Account_Frozen(Account_Frozen&& from) noexcept
    : Account_Frozen() {
    *this = ::std::move(from);
  }

  inline Account_Frozen& operator=(const Account_Frozen& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account_Frozen& operator=(Account_Frozen&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account_Frozen& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account_Frozen* internal_default_instance() {
    return reinterpret_cast<const Account_Frozen*>(
               &_Account_Frozen_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Account_Frozen& a, Account_Frozen& b) {
    a.Swap(&b);
  }
  inline void Swap(Account_Frozen* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account_Frozen* New() const final {
    return CreateMaybeMessage<Account_Frozen>(nullptr);
  }

  Account_Frozen* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account_Frozen>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account_Frozen& from);
  void MergeFrom(const Account_Frozen& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account_Frozen* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Account.Frozen";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenBalanceFieldNumber = 1,
    kExpireTimeFieldNumber = 2,
  };
  // int64 frozen_balance = 1;
  void clear_frozen_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance() const;
  void set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 expire_time = 2;
  void clear_expire_time();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time() const;
  void set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Account.Frozen)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Account_AssetEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_AssetEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_AssetEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_AssetEntry_DoNotUse();
  Account_AssetEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_AssetEntry_DoNotUse& other);
  static const Account_AssetEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_AssetEntry_DoNotUse*>(&_Account_AssetEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.AssetEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[8];
  }

  public:
};

// -------------------------------------------------------------------

class Account_AssetV2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_AssetV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_AssetV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_AssetV2Entry_DoNotUse();
  Account_AssetV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_AssetV2Entry_DoNotUse& other);
  static const Account_AssetV2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_AssetV2Entry_DoNotUse*>(&_Account_AssetV2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.AssetV2Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[9];
  }

  public:
};

// -------------------------------------------------------------------

class Account_LatestAssetOperationTimeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_LatestAssetOperationTimeEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_LatestAssetOperationTimeEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_LatestAssetOperationTimeEntry_DoNotUse();
  Account_LatestAssetOperationTimeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_LatestAssetOperationTimeEntry_DoNotUse& other);
  static const Account_LatestAssetOperationTimeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_LatestAssetOperationTimeEntry_DoNotUse*>(&_Account_LatestAssetOperationTimeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.LatestAssetOperationTimeEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[10];
  }

  public:
};

// -------------------------------------------------------------------

class Account_LatestAssetOperationTimeV2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_LatestAssetOperationTimeV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_LatestAssetOperationTimeV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_LatestAssetOperationTimeV2Entry_DoNotUse();
  Account_LatestAssetOperationTimeV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_LatestAssetOperationTimeV2Entry_DoNotUse& other);
  static const Account_LatestAssetOperationTimeV2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_LatestAssetOperationTimeV2Entry_DoNotUse*>(&_Account_LatestAssetOperationTimeV2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.LatestAssetOperationTimeV2Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[11];
  }

  public:
};

// -------------------------------------------------------------------

class Account_FreeAssetNetUsageEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_FreeAssetNetUsageEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_FreeAssetNetUsageEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_FreeAssetNetUsageEntry_DoNotUse();
  Account_FreeAssetNetUsageEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_FreeAssetNetUsageEntry_DoNotUse& other);
  static const Account_FreeAssetNetUsageEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_FreeAssetNetUsageEntry_DoNotUse*>(&_Account_FreeAssetNetUsageEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.FreeAssetNetUsageEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[12];
  }

  public:
};

// -------------------------------------------------------------------

class Account_FreeAssetNetUsageV2Entry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_FreeAssetNetUsageV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Account_FreeAssetNetUsageV2Entry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  Account_FreeAssetNetUsageV2Entry_DoNotUse();
  Account_FreeAssetNetUsageV2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Account_FreeAssetNetUsageV2Entry_DoNotUse& other);
  static const Account_FreeAssetNetUsageV2Entry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Account_FreeAssetNetUsageV2Entry_DoNotUse*>(&_Account_FreeAssetNetUsageV2Entry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.Account.FreeAssetNetUsageV2Entry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[13];
  }

  public:
};

// -------------------------------------------------------------------

class Account_AccountResource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Account.AccountResource) */ {
 public:
  Account_AccountResource();
  virtual ~Account_AccountResource();

  Account_AccountResource(const Account_AccountResource& from);
  Account_AccountResource(Account_AccountResource&& from) noexcept
    : Account_AccountResource() {
    *this = ::std::move(from);
  }

  inline Account_AccountResource& operator=(const Account_AccountResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account_AccountResource& operator=(Account_AccountResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account_AccountResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account_AccountResource* internal_default_instance() {
    return reinterpret_cast<const Account_AccountResource*>(
               &_Account_AccountResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Account_AccountResource& a, Account_AccountResource& b) {
    a.Swap(&b);
  }
  inline void Swap(Account_AccountResource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account_AccountResource* New() const final {
    return CreateMaybeMessage<Account_AccountResource>(nullptr);
  }

  Account_AccountResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account_AccountResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account_AccountResource& from);
  void MergeFrom(const Account_AccountResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account_AccountResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Account.AccountResource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrozenBalanceForEnergyFieldNumber = 2,
    kEnergyUsageFieldNumber = 1,
    kLatestConsumeTimeForEnergyFieldNumber = 3,
    kAcquiredDelegatedFrozenBalanceForEnergyFieldNumber = 4,
    kDelegatedFrozenBalanceForEnergyFieldNumber = 5,
    kStorageLimitFieldNumber = 6,
    kStorageUsageFieldNumber = 7,
    kLatestExchangeStorageTimeFieldNumber = 8,
  };
  // .protocol.Account.Frozen frozen_balance_for_energy = 2;
  bool has_frozen_balance_for_energy() const;
  void clear_frozen_balance_for_energy();
  const ::protocol::Account_Frozen& frozen_balance_for_energy() const;
  ::protocol::Account_Frozen* release_frozen_balance_for_energy();
  ::protocol::Account_Frozen* mutable_frozen_balance_for_energy();
  void set_allocated_frozen_balance_for_energy(::protocol::Account_Frozen* frozen_balance_for_energy);

  // int64 energy_usage = 1;
  void clear_energy_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage() const;
  void set_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_consume_time_for_energy = 3;
  void clear_latest_consume_time_for_energy();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_time_for_energy() const;
  void set_latest_consume_time_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 acquired_delegated_frozen_balance_for_energy = 4;
  void clear_acquired_delegated_frozen_balance_for_energy();
  ::PROTOBUF_NAMESPACE_ID::int64 acquired_delegated_frozen_balance_for_energy() const;
  void set_acquired_delegated_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 delegated_frozen_balance_for_energy = 5;
  void clear_delegated_frozen_balance_for_energy();
  ::PROTOBUF_NAMESPACE_ID::int64 delegated_frozen_balance_for_energy() const;
  void set_delegated_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 storage_limit = 6;
  void clear_storage_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 storage_limit() const;
  void set_storage_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 storage_usage = 7;
  void clear_storage_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 storage_usage() const;
  void set_storage_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_exchange_storage_time = 8;
  void clear_latest_exchange_storage_time();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_exchange_storage_time() const;
  void set_latest_exchange_storage_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Account.AccountResource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Account_Frozen* frozen_balance_for_energy_;
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_time_for_energy_;
  ::PROTOBUF_NAMESPACE_ID::int64 acquired_delegated_frozen_balance_for_energy_;
  ::PROTOBUF_NAMESPACE_ID::int64 delegated_frozen_balance_for_energy_;
  ::PROTOBUF_NAMESPACE_ID::int64 storage_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 storage_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_exchange_storage_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Account :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Account) */ {
 public:
  Account();
  virtual ~Account();

  Account(const Account& from);
  Account(Account&& from) noexcept
    : Account() {
    *this = ::std::move(from);
  }

  inline Account& operator=(const Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline Account& operator=(Account&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Account& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Account* internal_default_instance() {
    return reinterpret_cast<const Account*>(
               &_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Account& a, Account& b) {
    a.Swap(&b);
  }
  inline void Swap(Account* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Account* New() const final {
    return CreateMaybeMessage<Account>(nullptr);
  }

  Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Account>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Account& from);
  void MergeFrom(const Account& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Account* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Account";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Account_Frozen Frozen;
  typedef Account_AccountResource AccountResource;

  // accessors -------------------------------------------------------

  enum : int {
    kVotesFieldNumber = 5,
    kAssetFieldNumber = 6,
    kFrozenFieldNumber = 7,
    kFrozenSupplyFieldNumber = 16,
    kLatestAssetOperationTimeFieldNumber = 18,
    kFreeAssetNetUsageFieldNumber = 20,
    kActivePermissionFieldNumber = 33,
    kAssetV2FieldNumber = 56,
    kLatestAssetOperationTimeV2FieldNumber = 58,
    kFreeAssetNetUsageV2FieldNumber = 59,
    kAccountNameFieldNumber = 1,
    kAddressFieldNumber = 3,
    kCodeFieldNumber = 13,
    kAssetIssuedNameFieldNumber = 17,
    kAccountIdFieldNumber = 23,
    kCodeHashFieldNumber = 30,
    kAssetIssuedIDFieldNumber = 57,
    kAccountResourceFieldNumber = 26,
    kOwnerPermissionFieldNumber = 31,
    kWitnessPermissionFieldNumber = 32,
    kBalanceFieldNumber = 4,
    kNetUsageFieldNumber = 8,
    kCreateTimeFieldNumber = 9,
    kLatestOprationTimeFieldNumber = 10,
    kTypeFieldNumber = 2,
    kIsWitnessFieldNumber = 14,
    kIsCommitteeFieldNumber = 15,
    kAllowanceFieldNumber = 11,
    kLatestWithdrawTimeFieldNumber = 12,
    kFreeNetUsageFieldNumber = 19,
    kLatestConsumeTimeFieldNumber = 21,
    kLatestConsumeFreeTimeFieldNumber = 22,
    kAcquiredDelegatedFrozenBalanceForBandwidthFieldNumber = 41,
    kDelegatedFrozenBalanceForBandwidthFieldNumber = 42,
  };
  // repeated .protocol.Vote votes = 5;
  int votes_size() const;
  void clear_votes();
  ::protocol::Vote* mutable_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
      mutable_votes();
  const ::protocol::Vote& votes(int index) const;
  ::protocol::Vote* add_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
      votes() const;

  // map<string, int64> asset = 6;
  int asset_size() const;
  void clear_asset();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      asset() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_asset();

  // repeated .protocol.Account.Frozen frozen = 7;
  int frozen_size() const;
  void clear_frozen();
  ::protocol::Account_Frozen* mutable_frozen(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >*
      mutable_frozen();
  const ::protocol::Account_Frozen& frozen(int index) const;
  ::protocol::Account_Frozen* add_frozen();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >&
      frozen() const;

  // repeated .protocol.Account.Frozen frozen_supply = 16;
  int frozen_supply_size() const;
  void clear_frozen_supply();
  ::protocol::Account_Frozen* mutable_frozen_supply(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >*
      mutable_frozen_supply();
  const ::protocol::Account_Frozen& frozen_supply(int index) const;
  ::protocol::Account_Frozen* add_frozen_supply();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >&
      frozen_supply() const;

  // map<string, int64> latest_asset_operation_time = 18;
  int latest_asset_operation_time_size() const;
  void clear_latest_asset_operation_time();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      latest_asset_operation_time() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_latest_asset_operation_time();

  // map<string, int64> free_asset_net_usage = 20;
  int free_asset_net_usage_size() const;
  void clear_free_asset_net_usage();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      free_asset_net_usage() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_free_asset_net_usage();

  // repeated .protocol.Permission active_permission = 33;
  int active_permission_size() const;
  void clear_active_permission();
  ::protocol::Permission* mutable_active_permission(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >*
      mutable_active_permission();
  const ::protocol::Permission& active_permission(int index) const;
  ::protocol::Permission* add_active_permission();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >&
      active_permission() const;

  // map<string, int64> assetV2 = 56;
  int assetv2_size() const;
  void clear_assetv2();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      assetv2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_assetv2();

  // map<string, int64> latest_asset_operation_timeV2 = 58;
  int latest_asset_operation_timev2_size() const;
  void clear_latest_asset_operation_timev2();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      latest_asset_operation_timev2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_latest_asset_operation_timev2();

  // map<string, int64> free_asset_net_usageV2 = 59;
  int free_asset_net_usagev2_size() const;
  void clear_free_asset_net_usagev2();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      free_asset_net_usagev2() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_free_asset_net_usagev2();

  // bytes account_name = 1;
  void clear_account_name();
  const std::string& account_name() const;
  void set_account_name(const std::string& value);
  void set_account_name(std::string&& value);
  void set_account_name(const char* value);
  void set_account_name(const void* value, size_t size);
  std::string* mutable_account_name();
  std::string* release_account_name();
  void set_allocated_account_name(std::string* account_name);

  // bytes address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes code = 13;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const void* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // bytes asset_issued_name = 17;
  void clear_asset_issued_name();
  const std::string& asset_issued_name() const;
  void set_asset_issued_name(const std::string& value);
  void set_asset_issued_name(std::string&& value);
  void set_asset_issued_name(const char* value);
  void set_asset_issued_name(const void* value, size_t size);
  std::string* mutable_asset_issued_name();
  std::string* release_asset_issued_name();
  void set_allocated_asset_issued_name(std::string* asset_issued_name);

  // bytes account_id = 23;
  void clear_account_id();
  const std::string& account_id() const;
  void set_account_id(const std::string& value);
  void set_account_id(std::string&& value);
  void set_account_id(const char* value);
  void set_account_id(const void* value, size_t size);
  std::string* mutable_account_id();
  std::string* release_account_id();
  void set_allocated_account_id(std::string* account_id);

  // bytes codeHash = 30;
  void clear_codehash();
  const std::string& codehash() const;
  void set_codehash(const std::string& value);
  void set_codehash(std::string&& value);
  void set_codehash(const char* value);
  void set_codehash(const void* value, size_t size);
  std::string* mutable_codehash();
  std::string* release_codehash();
  void set_allocated_codehash(std::string* codehash);

  // bytes asset_issued_ID = 57;
  void clear_asset_issued_id();
  const std::string& asset_issued_id() const;
  void set_asset_issued_id(const std::string& value);
  void set_asset_issued_id(std::string&& value);
  void set_asset_issued_id(const char* value);
  void set_asset_issued_id(const void* value, size_t size);
  std::string* mutable_asset_issued_id();
  std::string* release_asset_issued_id();
  void set_allocated_asset_issued_id(std::string* asset_issued_id);

  // .protocol.Account.AccountResource account_resource = 26;
  bool has_account_resource() const;
  void clear_account_resource();
  const ::protocol::Account_AccountResource& account_resource() const;
  ::protocol::Account_AccountResource* release_account_resource();
  ::protocol::Account_AccountResource* mutable_account_resource();
  void set_allocated_account_resource(::protocol::Account_AccountResource* account_resource);

  // .protocol.Permission owner_permission = 31;
  bool has_owner_permission() const;
  void clear_owner_permission();
  const ::protocol::Permission& owner_permission() const;
  ::protocol::Permission* release_owner_permission();
  ::protocol::Permission* mutable_owner_permission();
  void set_allocated_owner_permission(::protocol::Permission* owner_permission);

  // .protocol.Permission witness_permission = 32;
  bool has_witness_permission() const;
  void clear_witness_permission();
  const ::protocol::Permission& witness_permission() const;
  ::protocol::Permission* release_witness_permission();
  ::protocol::Permission* mutable_witness_permission();
  void set_allocated_witness_permission(::protocol::Permission* witness_permission);

  // int64 balance = 4;
  void clear_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 balance() const;
  void set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 net_usage = 8;
  void clear_net_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 net_usage() const;
  void set_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 create_time = 9;
  void clear_create_time();
  ::PROTOBUF_NAMESPACE_ID::int64 create_time() const;
  void set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_opration_time = 10;
  void clear_latest_opration_time();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_opration_time() const;
  void set_latest_opration_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .protocol.AccountType type = 2;
  void clear_type();
  ::protocol::AccountType type() const;
  void set_type(::protocol::AccountType value);

  // bool is_witness = 14;
  void clear_is_witness();
  bool is_witness() const;
  void set_is_witness(bool value);

  // bool is_committee = 15;
  void clear_is_committee();
  bool is_committee() const;
  void set_is_committee(bool value);

  // int64 allowance = 11;
  void clear_allowance();
  ::PROTOBUF_NAMESPACE_ID::int64 allowance() const;
  void set_allowance(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_withdraw_time = 12;
  void clear_latest_withdraw_time();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_withdraw_time() const;
  void set_latest_withdraw_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 free_net_usage = 19;
  void clear_free_net_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 free_net_usage() const;
  void set_free_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_consume_time = 21;
  void clear_latest_consume_time();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_time() const;
  void set_latest_consume_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latest_consume_free_time = 22;
  void clear_latest_consume_free_time();
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_free_time() const;
  void set_latest_consume_free_time(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
  void clear_acquired_delegated_frozen_balance_for_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::int64 acquired_delegated_frozen_balance_for_bandwidth() const;
  void set_acquired_delegated_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 delegated_frozen_balance_for_bandwidth = 42;
  void clear_delegated_frozen_balance_for_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::int64 delegated_frozen_balance_for_bandwidth() const;
  void set_delegated_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Account)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote > votes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_AssetEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > asset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen > frozen_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen > frozen_supply_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_LatestAssetOperationTimeEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > latest_asset_operation_time_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_FreeAssetNetUsageEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > free_asset_net_usage_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission > active_permission_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_AssetV2Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > assetv2_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_LatestAssetOperationTimeV2Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > latest_asset_operation_timev2_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Account_FreeAssetNetUsageV2Entry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > free_asset_net_usagev2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_issued_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codehash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_issued_id_;
  ::protocol::Account_AccountResource* account_resource_;
  ::protocol::Permission* owner_permission_;
  ::protocol::Permission* witness_permission_;
  ::PROTOBUF_NAMESPACE_ID::int64 balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 net_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_opration_time_;
  int type_;
  bool is_witness_;
  bool is_committee_;
  ::PROTOBUF_NAMESPACE_ID::int64 allowance_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_withdraw_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 free_net_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 latest_consume_free_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 acquired_delegated_frozen_balance_for_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int64 delegated_frozen_balance_for_bandwidth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Key :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);
  Key(Key&& from) noexcept
    : Key() {
    *this = ::std::move(from);
  }

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline Key& operator=(Key&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Key& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Key& a, Key& b) {
    a.Swap(&b);
  }
  inline void Swap(Key* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Key* New() const final {
    return CreateMaybeMessage<Key>(nullptr);
  }

  Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Key>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Key* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Key";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // int64 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Key)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::int64 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class DelegatedResource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.DelegatedResource) */ {
 public:
  DelegatedResource();
  virtual ~DelegatedResource();

  DelegatedResource(const DelegatedResource& from);
  DelegatedResource(DelegatedResource&& from) noexcept
    : DelegatedResource() {
    *this = ::std::move(from);
  }

  inline DelegatedResource& operator=(const DelegatedResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegatedResource& operator=(DelegatedResource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegatedResource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegatedResource* internal_default_instance() {
    return reinterpret_cast<const DelegatedResource*>(
               &_DelegatedResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DelegatedResource& a, DelegatedResource& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegatedResource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegatedResource* New() const final {
    return CreateMaybeMessage<DelegatedResource>(nullptr);
  }

  DelegatedResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegatedResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegatedResource& from);
  void MergeFrom(const DelegatedResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegatedResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.DelegatedResource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kFrozenBalanceForBandwidthFieldNumber = 3,
    kFrozenBalanceForEnergyFieldNumber = 4,
    kExpireTimeForBandwidthFieldNumber = 5,
    kExpireTimeForEnergyFieldNumber = 6,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);

  // int64 frozen_balance_for_bandwidth = 3;
  void clear_frozen_balance_for_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_for_bandwidth() const;
  void set_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 frozen_balance_for_energy = 4;
  void clear_frozen_balance_for_energy();
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_for_energy() const;
  void set_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 expire_time_for_bandwidth = 5;
  void clear_expire_time_for_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_for_bandwidth() const;
  void set_expire_time_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 expire_time_for_energy = 6;
  void clear_expire_time_for_energy();
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_for_energy() const;
  void set_expire_time_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.DelegatedResource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_for_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int64 frozen_balance_for_energy_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_for_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::int64 expire_time_for_energy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class authority :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.authority) */ {
 public:
  authority();
  virtual ~authority();

  authority(const authority& from);
  authority(authority&& from) noexcept
    : authority() {
    *this = ::std::move(from);
  }

  inline authority& operator=(const authority& from) {
    CopyFrom(from);
    return *this;
  }
  inline authority& operator=(authority&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const authority& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const authority* internal_default_instance() {
    return reinterpret_cast<const authority*>(
               &_authority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(authority& a, authority& b) {
    a.Swap(&b);
  }
  inline void Swap(authority* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline authority* New() const final {
    return CreateMaybeMessage<authority>(nullptr);
  }

  authority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<authority>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const authority& from);
  void MergeFrom(const authority& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(authority* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.authority";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionNameFieldNumber = 2,
    kAccountFieldNumber = 1,
  };
  // bytes permission_name = 2;
  void clear_permission_name();
  const std::string& permission_name() const;
  void set_permission_name(const std::string& value);
  void set_permission_name(std::string&& value);
  void set_permission_name(const char* value);
  void set_permission_name(const void* value, size_t size);
  std::string* mutable_permission_name();
  std::string* release_permission_name();
  void set_allocated_permission_name(std::string* permission_name);

  // .protocol.AccountId account = 1;
  bool has_account() const;
  void clear_account();
  const ::protocol::AccountId& account() const;
  ::protocol::AccountId* release_account();
  ::protocol::AccountId* mutable_account();
  void set_allocated_account(::protocol::AccountId* account);

  // @@protoc_insertion_point(class_scope:protocol.authority)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_name_;
  ::protocol::AccountId* account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Permission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Permission) */ {
 public:
  Permission();
  virtual ~Permission();

  Permission(const Permission& from);
  Permission(Permission&& from) noexcept
    : Permission() {
    *this = ::std::move(from);
  }

  inline Permission& operator=(const Permission& from) {
    CopyFrom(from);
    return *this;
  }
  inline Permission& operator=(Permission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Permission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Permission* internal_default_instance() {
    return reinterpret_cast<const Permission*>(
               &_Permission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Permission& a, Permission& b) {
    a.Swap(&b);
  }
  inline void Swap(Permission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Permission* New() const final {
    return CreateMaybeMessage<Permission>(nullptr);
  }

  Permission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Permission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Permission& from);
  void MergeFrom(const Permission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Permission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Permission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Permission_PermissionType PermissionType;
  static constexpr PermissionType Owner =
    Permission_PermissionType_Owner;
  static constexpr PermissionType Witness =
    Permission_PermissionType_Witness;
  static constexpr PermissionType Active =
    Permission_PermissionType_Active;
  static inline bool PermissionType_IsValid(int value) {
    return Permission_PermissionType_IsValid(value);
  }
  static constexpr PermissionType PermissionType_MIN =
    Permission_PermissionType_PermissionType_MIN;
  static constexpr PermissionType PermissionType_MAX =
    Permission_PermissionType_PermissionType_MAX;
  static constexpr int PermissionType_ARRAYSIZE =
    Permission_PermissionType_PermissionType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PermissionType_descriptor() {
    return Permission_PermissionType_descriptor();
  }
  template<typename T>
  static inline const std::string& PermissionType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PermissionType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PermissionType_Name.");
    return Permission_PermissionType_Name(enum_t_value);
  }
  static inline bool PermissionType_Parse(const std::string& name,
      PermissionType* value) {
    return Permission_PermissionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 7,
    kPermissionNameFieldNumber = 3,
    kOperationsFieldNumber = 6,
    kTypeFieldNumber = 1,
    kIdFieldNumber = 2,
    kThresholdFieldNumber = 4,
    kParentIdFieldNumber = 5,
  };
  // repeated .protocol.Key keys = 7;
  int keys_size() const;
  void clear_keys();
  ::protocol::Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Key >*
      mutable_keys();
  const ::protocol::Key& keys(int index) const;
  ::protocol::Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Key >&
      keys() const;

  // string permission_name = 3;
  void clear_permission_name();
  const std::string& permission_name() const;
  void set_permission_name(const std::string& value);
  void set_permission_name(std::string&& value);
  void set_permission_name(const char* value);
  void set_permission_name(const char* value, size_t size);
  std::string* mutable_permission_name();
  std::string* release_permission_name();
  void set_allocated_permission_name(std::string* permission_name);

  // bytes operations = 6;
  void clear_operations();
  const std::string& operations() const;
  void set_operations(const std::string& value);
  void set_operations(std::string&& value);
  void set_operations(const char* value);
  void set_operations(const void* value, size_t size);
  std::string* mutable_operations();
  std::string* release_operations();
  void set_allocated_operations(std::string* operations);

  // .protocol.Permission.PermissionType type = 1;
  void clear_type();
  ::protocol::Permission_PermissionType type() const;
  void set_type(::protocol::Permission_PermissionType value);

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 threshold = 4;
  void clear_threshold();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold() const;
  void set_threshold(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 parent_id = 5;
  void clear_parent_id();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id() const;
  void set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.Permission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Key > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permission_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operations_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Witness :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Witness) */ {
 public:
  Witness();
  virtual ~Witness();

  Witness(const Witness& from);
  Witness(Witness&& from) noexcept
    : Witness() {
    *this = ::std::move(from);
  }

  inline Witness& operator=(const Witness& from) {
    CopyFrom(from);
    return *this;
  }
  inline Witness& operator=(Witness&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Witness& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Witness* internal_default_instance() {
    return reinterpret_cast<const Witness*>(
               &_Witness_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Witness& a, Witness& b) {
    a.Swap(&b);
  }
  inline void Swap(Witness* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Witness* New() const final {
    return CreateMaybeMessage<Witness>(nullptr);
  }

  Witness* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Witness>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Witness& from);
  void MergeFrom(const Witness& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Witness* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Witness";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
    kPubKeyFieldNumber = 3,
    kUrlFieldNumber = 4,
    kVoteCountFieldNumber = 2,
    kTotalProducedFieldNumber = 5,
    kTotalMissedFieldNumber = 6,
    kLatestBlockNumFieldNumber = 7,
    kLatestSlotNumFieldNumber = 8,
    kIsJobsFieldNumber = 9,
  };
  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes pubKey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);

  // string url = 4;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);

  // int64 voteCount = 2;
  void clear_votecount();
  ::PROTOBUF_NAMESPACE_ID::int64 votecount() const;
  void set_votecount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 totalProduced = 5;
  void clear_totalproduced();
  ::PROTOBUF_NAMESPACE_ID::int64 totalproduced() const;
  void set_totalproduced(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 totalMissed = 6;
  void clear_totalmissed();
  ::PROTOBUF_NAMESPACE_ID::int64 totalmissed() const;
  void set_totalmissed(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latestBlockNum = 7;
  void clear_latestblocknum();
  ::PROTOBUF_NAMESPACE_ID::int64 latestblocknum() const;
  void set_latestblocknum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 latestSlotNum = 8;
  void clear_latestslotnum();
  ::PROTOBUF_NAMESPACE_ID::int64 latestslotnum() const;
  void set_latestslotnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // bool isJobs = 9;
  void clear_isjobs();
  bool isjobs() const;
  void set_isjobs(bool value);

  // @@protoc_insertion_point(class_scope:protocol.Witness)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::int64 votecount_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalproduced_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalmissed_;
  ::PROTOBUF_NAMESPACE_ID::int64 latestblocknum_;
  ::PROTOBUF_NAMESPACE_ID::int64 latestslotnum_;
  bool isjobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Votes :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Votes) */ {
 public:
  Votes();
  virtual ~Votes();

  Votes(const Votes& from);
  Votes(Votes&& from) noexcept
    : Votes() {
    *this = ::std::move(from);
  }

  inline Votes& operator=(const Votes& from) {
    CopyFrom(from);
    return *this;
  }
  inline Votes& operator=(Votes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Votes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Votes* internal_default_instance() {
    return reinterpret_cast<const Votes*>(
               &_Votes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Votes& a, Votes& b) {
    a.Swap(&b);
  }
  inline void Swap(Votes* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Votes* New() const final {
    return CreateMaybeMessage<Votes>(nullptr);
  }

  Votes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Votes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Votes& from);
  void MergeFrom(const Votes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Votes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Votes";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldVotesFieldNumber = 2,
    kNewVotesFieldNumber = 3,
    kAddressFieldNumber = 1,
  };
  // repeated .protocol.Vote old_votes = 2;
  int old_votes_size() const;
  void clear_old_votes();
  ::protocol::Vote* mutable_old_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
      mutable_old_votes();
  const ::protocol::Vote& old_votes(int index) const;
  ::protocol::Vote* add_old_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
      old_votes() const;

  // repeated .protocol.Vote new_votes = 3;
  int new_votes_size() const;
  void clear_new_votes();
  ::protocol::Vote* mutable_new_votes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
      mutable_new_votes();
  const ::protocol::Vote& new_votes(int index) const;
  ::protocol::Vote* add_new_votes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
      new_votes() const;

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // @@protoc_insertion_point(class_scope:protocol.Votes)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote > old_votes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote > new_votes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TXOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TXOutput) */ {
 public:
  TXOutput();
  virtual ~TXOutput();

  TXOutput(const TXOutput& from);
  TXOutput(TXOutput&& from) noexcept
    : TXOutput() {
    *this = ::std::move(from);
  }

  inline TXOutput& operator=(const TXOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXOutput& operator=(TXOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXOutput* internal_default_instance() {
    return reinterpret_cast<const TXOutput*>(
               &_TXOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TXOutput& a, TXOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(TXOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXOutput* New() const final {
    return CreateMaybeMessage<TXOutput>(nullptr);
  }

  TXOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXOutput& from);
  void MergeFrom(const TXOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TXOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyHashFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // bytes pubKeyHash = 2;
  void clear_pubkeyhash();
  const std::string& pubkeyhash() const;
  void set_pubkeyhash(const std::string& value);
  void set_pubkeyhash(std::string&& value);
  void set_pubkeyhash(const char* value);
  void set_pubkeyhash(const void* value, size_t size);
  std::string* mutable_pubkeyhash();
  std::string* release_pubkeyhash();
  void set_allocated_pubkeyhash(std::string* pubkeyhash);

  // int64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TXOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkeyhash_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TXInput_raw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TXInput.raw) */ {
 public:
  TXInput_raw();
  virtual ~TXInput_raw();

  TXInput_raw(const TXInput_raw& from);
  TXInput_raw(TXInput_raw&& from) noexcept
    : TXInput_raw() {
    *this = ::std::move(from);
  }

  inline TXInput_raw& operator=(const TXInput_raw& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXInput_raw& operator=(TXInput_raw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXInput_raw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXInput_raw* internal_default_instance() {
    return reinterpret_cast<const TXInput_raw*>(
               &_TXInput_raw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TXInput_raw& a, TXInput_raw& b) {
    a.Swap(&b);
  }
  inline void Swap(TXInput_raw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXInput_raw* New() const final {
    return CreateMaybeMessage<TXInput_raw>(nullptr);
  }

  TXInput_raw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXInput_raw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXInput_raw& from);
  void MergeFrom(const TXInput_raw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXInput_raw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TXInput.raw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxIDFieldNumber = 1,
    kPubKeyFieldNumber = 3,
    kVoutFieldNumber = 2,
  };
  // bytes txID = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);

  // bytes pubKey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);

  // int64 vout = 2;
  void clear_vout();
  ::PROTOBUF_NAMESPACE_ID::int64 vout() const;
  void set_vout(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TXInput.raw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::int64 vout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TXInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TXInput) */ {
 public:
  TXInput();
  virtual ~TXInput();

  TXInput(const TXInput& from);
  TXInput(TXInput&& from) noexcept
    : TXInput() {
    *this = ::std::move(from);
  }

  inline TXInput& operator=(const TXInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXInput& operator=(TXInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXInput* internal_default_instance() {
    return reinterpret_cast<const TXInput*>(
               &_TXInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TXInput& a, TXInput& b) {
    a.Swap(&b);
  }
  inline void Swap(TXInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXInput* New() const final {
    return CreateMaybeMessage<TXInput>(nullptr);
  }

  TXInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXInput& from);
  void MergeFrom(const TXInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TXInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TXInput_raw raw;

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 4,
    kRawDataFieldNumber = 1,
  };
  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // .protocol.TXInput.raw raw_data = 1;
  bool has_raw_data() const;
  void clear_raw_data();
  const ::protocol::TXInput_raw& raw_data() const;
  ::protocol::TXInput_raw* release_raw_data();
  ::protocol::TXInput_raw* mutable_raw_data();
  void set_allocated_raw_data(::protocol::TXInput_raw* raw_data);

  // @@protoc_insertion_point(class_scope:protocol.TXInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::protocol::TXInput_raw* raw_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TXOutputs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TXOutputs) */ {
 public:
  TXOutputs();
  virtual ~TXOutputs();

  TXOutputs(const TXOutputs& from);
  TXOutputs(TXOutputs&& from) noexcept
    : TXOutputs() {
    *this = ::std::move(from);
  }

  inline TXOutputs& operator=(const TXOutputs& from) {
    CopyFrom(from);
    return *this;
  }
  inline TXOutputs& operator=(TXOutputs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TXOutputs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TXOutputs* internal_default_instance() {
    return reinterpret_cast<const TXOutputs*>(
               &_TXOutputs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TXOutputs& a, TXOutputs& b) {
    a.Swap(&b);
  }
  inline void Swap(TXOutputs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TXOutputs* New() const final {
    return CreateMaybeMessage<TXOutputs>(nullptr);
  }

  TXOutputs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TXOutputs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TXOutputs& from);
  void MergeFrom(const TXOutputs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TXOutputs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TXOutputs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputsFieldNumber = 1,
  };
  // repeated .protocol.TXOutput outputs = 1;
  int outputs_size() const;
  void clear_outputs();
  ::protocol::TXOutput* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TXOutput >*
      mutable_outputs();
  const ::protocol::TXOutput& outputs(int index) const;
  ::protocol::TXOutput* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TXOutput >&
      outputs() const;

  // @@protoc_insertion_point(class_scope:protocol.TXOutputs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TXOutput > outputs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class ResourceReceipt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ResourceReceipt) */ {
 public:
  ResourceReceipt();
  virtual ~ResourceReceipt();

  ResourceReceipt(const ResourceReceipt& from);
  ResourceReceipt(ResourceReceipt&& from) noexcept
    : ResourceReceipt() {
    *this = ::std::move(from);
  }

  inline ResourceReceipt& operator=(const ResourceReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceReceipt& operator=(ResourceReceipt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceReceipt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceReceipt* internal_default_instance() {
    return reinterpret_cast<const ResourceReceipt*>(
               &_ResourceReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ResourceReceipt& a, ResourceReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceReceipt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceReceipt* New() const final {
    return CreateMaybeMessage<ResourceReceipt>(nullptr);
  }

  ResourceReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceReceipt& from);
  void MergeFrom(const ResourceReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ResourceReceipt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnergyUsageFieldNumber = 1,
    kEnergyFeeFieldNumber = 2,
    kOriginEnergyUsageFieldNumber = 3,
    kEnergyUsageTotalFieldNumber = 4,
    kNetUsageFieldNumber = 5,
    kNetFeeFieldNumber = 6,
    kResultFieldNumber = 7,
  };
  // int64 energy_usage = 1;
  void clear_energy_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage() const;
  void set_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 energy_fee = 2;
  void clear_energy_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 energy_fee() const;
  void set_energy_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 origin_energy_usage = 3;
  void clear_origin_energy_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_usage() const;
  void set_origin_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 energy_usage_total = 4;
  void clear_energy_usage_total();
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage_total() const;
  void set_energy_usage_total(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 net_usage = 5;
  void clear_net_usage();
  ::PROTOBUF_NAMESPACE_ID::int64 net_usage() const;
  void set_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 net_fee = 6;
  void clear_net_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 net_fee() const;
  void set_net_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .protocol.Transaction.Result.contractResult result = 7;
  void clear_result();
  ::protocol::Transaction_Result_contractResult result() const;
  void set_result(::protocol::Transaction_Result_contractResult value);

  // @@protoc_insertion_point(class_scope:protocol.ResourceReceipt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 energy_fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 origin_energy_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 energy_usage_total_;
  ::PROTOBUF_NAMESPACE_ID::int64 net_usage_;
  ::PROTOBUF_NAMESPACE_ID::int64 net_fee_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Contract :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Transaction.Contract) */ {
 public:
  Transaction_Contract();
  virtual ~Transaction_Contract();

  Transaction_Contract(const Transaction_Contract& from);
  Transaction_Contract(Transaction_Contract&& from) noexcept
    : Transaction_Contract() {
    *this = ::std::move(from);
  }

  inline Transaction_Contract& operator=(const Transaction_Contract& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Contract& operator=(Transaction_Contract&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Contract& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Contract* internal_default_instance() {
    return reinterpret_cast<const Transaction_Contract*>(
               &_Transaction_Contract_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Transaction_Contract& a, Transaction_Contract& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Contract* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Contract* New() const final {
    return CreateMaybeMessage<Transaction_Contract>(nullptr);
  }

  Transaction_Contract* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Contract>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Contract& from);
  void MergeFrom(const Transaction_Contract& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Contract* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Transaction.Contract";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Contract_ContractType ContractType;
  static constexpr ContractType AccountCreateContract =
    Transaction_Contract_ContractType_AccountCreateContract;
  static constexpr ContractType TransferContract =
    Transaction_Contract_ContractType_TransferContract;
  static constexpr ContractType TransferAssetContract =
    Transaction_Contract_ContractType_TransferAssetContract;
  static constexpr ContractType VoteAssetContract =
    Transaction_Contract_ContractType_VoteAssetContract;
  static constexpr ContractType VoteWitnessContract =
    Transaction_Contract_ContractType_VoteWitnessContract;
  static constexpr ContractType WitnessCreateContract =
    Transaction_Contract_ContractType_WitnessCreateContract;
  static constexpr ContractType AssetIssueContract =
    Transaction_Contract_ContractType_AssetIssueContract;
  static constexpr ContractType WitnessUpdateContract =
    Transaction_Contract_ContractType_WitnessUpdateContract;
  static constexpr ContractType ParticipateAssetIssueContract =
    Transaction_Contract_ContractType_ParticipateAssetIssueContract;
  static constexpr ContractType AccountUpdateContract =
    Transaction_Contract_ContractType_AccountUpdateContract;
  static constexpr ContractType FreezeBalanceContract =
    Transaction_Contract_ContractType_FreezeBalanceContract;
  static constexpr ContractType UnfreezeBalanceContract =
    Transaction_Contract_ContractType_UnfreezeBalanceContract;
  static constexpr ContractType WithdrawBalanceContract =
    Transaction_Contract_ContractType_WithdrawBalanceContract;
  static constexpr ContractType UnfreezeAssetContract =
    Transaction_Contract_ContractType_UnfreezeAssetContract;
  static constexpr ContractType UpdateAssetContract =
    Transaction_Contract_ContractType_UpdateAssetContract;
  static constexpr ContractType ProposalCreateContract =
    Transaction_Contract_ContractType_ProposalCreateContract;
  static constexpr ContractType ProposalApproveContract =
    Transaction_Contract_ContractType_ProposalApproveContract;
  static constexpr ContractType ProposalDeleteContract =
    Transaction_Contract_ContractType_ProposalDeleteContract;
  static constexpr ContractType SetAccountIdContract =
    Transaction_Contract_ContractType_SetAccountIdContract;
  static constexpr ContractType CustomContract =
    Transaction_Contract_ContractType_CustomContract;
  static constexpr ContractType CreateSmartContract =
    Transaction_Contract_ContractType_CreateSmartContract;
  static constexpr ContractType TriggerSmartContract =
    Transaction_Contract_ContractType_TriggerSmartContract;
  static constexpr ContractType GetContract =
    Transaction_Contract_ContractType_GetContract;
  static constexpr ContractType UpdateSettingContract =
    Transaction_Contract_ContractType_UpdateSettingContract;
  static constexpr ContractType ExchangeCreateContract =
    Transaction_Contract_ContractType_ExchangeCreateContract;
  static constexpr ContractType ExchangeInjectContract =
    Transaction_Contract_ContractType_ExchangeInjectContract;
  static constexpr ContractType ExchangeWithdrawContract =
    Transaction_Contract_ContractType_ExchangeWithdrawContract;
  static constexpr ContractType ExchangeTransactionContract =
    Transaction_Contract_ContractType_ExchangeTransactionContract;
  static constexpr ContractType UpdateEnergyLimitContract =
    Transaction_Contract_ContractType_UpdateEnergyLimitContract;
  static constexpr ContractType AccountPermissionUpdateContract =
    Transaction_Contract_ContractType_AccountPermissionUpdateContract;
  static constexpr ContractType ClearABIContract =
    Transaction_Contract_ContractType_ClearABIContract;
  static constexpr ContractType UpdateBrokerageContract =
    Transaction_Contract_ContractType_UpdateBrokerageContract;
  static constexpr ContractType ShieldedTransferContract =
    Transaction_Contract_ContractType_ShieldedTransferContract;
  static inline bool ContractType_IsValid(int value) {
    return Transaction_Contract_ContractType_IsValid(value);
  }
  static constexpr ContractType ContractType_MIN =
    Transaction_Contract_ContractType_ContractType_MIN;
  static constexpr ContractType ContractType_MAX =
    Transaction_Contract_ContractType_ContractType_MAX;
  static constexpr int ContractType_ARRAYSIZE =
    Transaction_Contract_ContractType_ContractType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ContractType_descriptor() {
    return Transaction_Contract_ContractType_descriptor();
  }
  template<typename T>
  static inline const std::string& ContractType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ContractType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ContractType_Name.");
    return Transaction_Contract_ContractType_Name(enum_t_value);
  }
  static inline bool ContractType_Parse(const std::string& name,
      ContractType* value) {
    return Transaction_Contract_ContractType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProviderFieldNumber = 3,
    kContractNameFieldNumber = 4,
    kParameterFieldNumber = 2,
    kTypeFieldNumber = 1,
    kPermissionIdFieldNumber = 5,
  };
  // bytes provider = 3;
  void clear_provider();
  const std::string& provider() const;
  void set_provider(const std::string& value);
  void set_provider(std::string&& value);
  void set_provider(const char* value);
  void set_provider(const void* value, size_t size);
  std::string* mutable_provider();
  std::string* release_provider();
  void set_allocated_provider(std::string* provider);

  // bytes ContractName = 4;
  void clear_contractname();
  const std::string& contractname() const;
  void set_contractname(const std::string& value);
  void set_contractname(std::string&& value);
  void set_contractname(const char* value);
  void set_contractname(const void* value, size_t size);
  std::string* mutable_contractname();
  std::string* release_contractname();
  void set_allocated_contractname(std::string* contractname);

  // .google.protobuf.Any parameter = 2;
  bool has_parameter() const;
  void clear_parameter();
  const PROTOBUF_NAMESPACE_ID::Any& parameter() const;
  PROTOBUF_NAMESPACE_ID::Any* release_parameter();
  PROTOBUF_NAMESPACE_ID::Any* mutable_parameter();
  void set_allocated_parameter(PROTOBUF_NAMESPACE_ID::Any* parameter);

  // .protocol.Transaction.Contract.ContractType type = 1;
  void clear_type();
  ::protocol::Transaction_Contract_ContractType type() const;
  void set_type(::protocol::Transaction_Contract_ContractType value);

  // int32 Permission_id = 5;
  void clear_permission_id();
  ::PROTOBUF_NAMESPACE_ID::int32 permission_id() const;
  void set_permission_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.Transaction.Contract)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contractname_;
  PROTOBUF_NAMESPACE_ID::Any* parameter_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 permission_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Transaction_Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Transaction.Result) */ {
 public:
  Transaction_Result();
  virtual ~Transaction_Result();

  Transaction_Result(const Transaction_Result& from);
  Transaction_Result(Transaction_Result&& from) noexcept
    : Transaction_Result() {
    *this = ::std::move(from);
  }

  inline Transaction_Result& operator=(const Transaction_Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_Result& operator=(Transaction_Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_Result* internal_default_instance() {
    return reinterpret_cast<const Transaction_Result*>(
               &_Transaction_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(Transaction_Result& a, Transaction_Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_Result* New() const final {
    return CreateMaybeMessage<Transaction_Result>(nullptr);
  }

  Transaction_Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_Result& from);
  void MergeFrom(const Transaction_Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Transaction.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Result_code code;
  static constexpr code SUCESS =
    Transaction_Result_code_SUCESS;
  static constexpr code FAILED =
    Transaction_Result_code_FAILED;
  static inline bool code_IsValid(int value) {
    return Transaction_Result_code_IsValid(value);
  }
  static constexpr code code_MIN =
    Transaction_Result_code_code_MIN;
  static constexpr code code_MAX =
    Transaction_Result_code_code_MAX;
  static constexpr int code_ARRAYSIZE =
    Transaction_Result_code_code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  code_descriptor() {
    return Transaction_Result_code_descriptor();
  }
  template<typename T>
  static inline const std::string& code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function code_Name.");
    return Transaction_Result_code_Name(enum_t_value);
  }
  static inline bool code_Parse(const std::string& name,
      code* value) {
    return Transaction_Result_code_Parse(name, value);
  }

  typedef Transaction_Result_contractResult contractResult;
  static constexpr contractResult DEFAULT =
    Transaction_Result_contractResult_DEFAULT;
  static constexpr contractResult SUCCESS =
    Transaction_Result_contractResult_SUCCESS;
  static constexpr contractResult REVERT =
    Transaction_Result_contractResult_REVERT;
  static constexpr contractResult BAD_JUMP_DESTINATION =
    Transaction_Result_contractResult_BAD_JUMP_DESTINATION;
  static constexpr contractResult OUT_OF_MEMORY =
    Transaction_Result_contractResult_OUT_OF_MEMORY;
  static constexpr contractResult PRECOMPILED_CONTRACT =
    Transaction_Result_contractResult_PRECOMPILED_CONTRACT;
  static constexpr contractResult STACK_TOO_SMALL =
    Transaction_Result_contractResult_STACK_TOO_SMALL;
  static constexpr contractResult STACK_TOO_LARGE =
    Transaction_Result_contractResult_STACK_TOO_LARGE;
  static constexpr contractResult ILLEGAL_OPERATION =
    Transaction_Result_contractResult_ILLEGAL_OPERATION;
  static constexpr contractResult STACK_OVERFLOW =
    Transaction_Result_contractResult_STACK_OVERFLOW;
  static constexpr contractResult OUT_OF_ENERGY =
    Transaction_Result_contractResult_OUT_OF_ENERGY;
  static constexpr contractResult OUT_OF_TIME =
    Transaction_Result_contractResult_OUT_OF_TIME;
  static constexpr contractResult JVM_STACK_OVER_FLOW =
    Transaction_Result_contractResult_JVM_STACK_OVER_FLOW;
  static constexpr contractResult UNKNOWN =
    Transaction_Result_contractResult_UNKNOWN;
  static constexpr contractResult TRANSFER_FAILED =
    Transaction_Result_contractResult_TRANSFER_FAILED;
  static inline bool contractResult_IsValid(int value) {
    return Transaction_Result_contractResult_IsValid(value);
  }
  static constexpr contractResult contractResult_MIN =
    Transaction_Result_contractResult_contractResult_MIN;
  static constexpr contractResult contractResult_MAX =
    Transaction_Result_contractResult_contractResult_MAX;
  static constexpr int contractResult_ARRAYSIZE =
    Transaction_Result_contractResult_contractResult_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  contractResult_descriptor() {
    return Transaction_Result_contractResult_descriptor();
  }
  template<typename T>
  static inline const std::string& contractResult_Name(T enum_t_value) {
    static_assert(::std::is_same<T, contractResult>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function contractResult_Name.");
    return Transaction_Result_contractResult_Name(enum_t_value);
  }
  static inline bool contractResult_Parse(const std::string& name,
      contractResult* value) {
    return Transaction_Result_contractResult_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIssueIDFieldNumber = 14,
    kFeeFieldNumber = 1,
    kRetFieldNumber = 2,
    kContractRetFieldNumber = 3,
    kWithdrawAmountFieldNumber = 15,
    kUnfreezeAmountFieldNumber = 16,
    kExchangeReceivedAmountFieldNumber = 18,
    kExchangeInjectAnotherAmountFieldNumber = 19,
    kExchangeWithdrawAnotherAmountFieldNumber = 20,
    kExchangeIdFieldNumber = 21,
    kShieldedTransactionFeeFieldNumber = 22,
  };
  // string assetIssueID = 14;
  void clear_assetissueid();
  const std::string& assetissueid() const;
  void set_assetissueid(const std::string& value);
  void set_assetissueid(std::string&& value);
  void set_assetissueid(const char* value);
  void set_assetissueid(const char* value, size_t size);
  std::string* mutable_assetissueid();
  std::string* release_assetissueid();
  void set_allocated_assetissueid(std::string* assetissueid);

  // int64 fee = 1;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .protocol.Transaction.Result.code ret = 2;
  void clear_ret();
  ::protocol::Transaction_Result_code ret() const;
  void set_ret(::protocol::Transaction_Result_code value);

  // .protocol.Transaction.Result.contractResult contractRet = 3;
  void clear_contractret();
  ::protocol::Transaction_Result_contractResult contractret() const;
  void set_contractret(::protocol::Transaction_Result_contractResult value);

  // int64 withdraw_amount = 15;
  void clear_withdraw_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 withdraw_amount() const;
  void set_withdraw_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 unfreeze_amount = 16;
  void clear_unfreeze_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 unfreeze_amount() const;
  void set_unfreeze_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_received_amount = 18;
  void clear_exchange_received_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_received_amount() const;
  void set_exchange_received_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_inject_another_amount = 19;
  void clear_exchange_inject_another_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_inject_another_amount() const;
  void set_exchange_inject_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_withdraw_another_amount = 20;
  void clear_exchange_withdraw_another_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_withdraw_another_amount() const;
  void set_exchange_withdraw_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_id = 21;
  void clear_exchange_id();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id() const;
  void set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 shielded_transaction_fee = 22;
  void clear_shielded_transaction_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 shielded_transaction_fee() const;
  void set_shielded_transaction_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Transaction.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetissueid_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  int ret_;
  int contractret_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdraw_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 unfreeze_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_received_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_inject_another_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_withdraw_another_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 shielded_transaction_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Transaction_raw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Transaction.raw) */ {
 public:
  Transaction_raw();
  virtual ~Transaction_raw();

  Transaction_raw(const Transaction_raw& from);
  Transaction_raw(Transaction_raw&& from) noexcept
    : Transaction_raw() {
    *this = ::std::move(from);
  }

  inline Transaction_raw& operator=(const Transaction_raw& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction_raw& operator=(Transaction_raw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction_raw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction_raw* internal_default_instance() {
    return reinterpret_cast<const Transaction_raw*>(
               &_Transaction_raw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Transaction_raw& a, Transaction_raw& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction_raw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction_raw* New() const final {
    return CreateMaybeMessage<Transaction_raw>(nullptr);
  }

  Transaction_raw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction_raw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction_raw& from);
  void MergeFrom(const Transaction_raw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction_raw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Transaction.raw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAuthsFieldNumber = 9,
    kContractFieldNumber = 11,
    kRefBlockBytesFieldNumber = 1,
    kRefBlockHashFieldNumber = 4,
    kDataFieldNumber = 10,
    kScriptsFieldNumber = 12,
    kRefBlockNumFieldNumber = 3,
    kExpirationFieldNumber = 8,
    kTimestampFieldNumber = 14,
    kFeeLimitFieldNumber = 18,
  };
  // repeated .protocol.authority auths = 9;
  int auths_size() const;
  void clear_auths();
  ::protocol::authority* mutable_auths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::authority >*
      mutable_auths();
  const ::protocol::authority& auths(int index) const;
  ::protocol::authority* add_auths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::authority >&
      auths() const;

  // repeated .protocol.Transaction.Contract contract = 11;
  int contract_size() const;
  void clear_contract();
  ::protocol::Transaction_Contract* mutable_contract(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Contract >*
      mutable_contract();
  const ::protocol::Transaction_Contract& contract(int index) const;
  ::protocol::Transaction_Contract* add_contract();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Contract >&
      contract() const;

  // bytes ref_block_bytes = 1;
  void clear_ref_block_bytes();
  const std::string& ref_block_bytes() const;
  void set_ref_block_bytes(const std::string& value);
  void set_ref_block_bytes(std::string&& value);
  void set_ref_block_bytes(const char* value);
  void set_ref_block_bytes(const void* value, size_t size);
  std::string* mutable_ref_block_bytes();
  std::string* release_ref_block_bytes();
  void set_allocated_ref_block_bytes(std::string* ref_block_bytes);

  // bytes ref_block_hash = 4;
  void clear_ref_block_hash();
  const std::string& ref_block_hash() const;
  void set_ref_block_hash(const std::string& value);
  void set_ref_block_hash(std::string&& value);
  void set_ref_block_hash(const char* value);
  void set_ref_block_hash(const void* value, size_t size);
  std::string* mutable_ref_block_hash();
  std::string* release_ref_block_hash();
  void set_allocated_ref_block_hash(std::string* ref_block_hash);

  // bytes data = 10;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // bytes scripts = 12;
  void clear_scripts();
  const std::string& scripts() const;
  void set_scripts(const std::string& value);
  void set_scripts(std::string&& value);
  void set_scripts(const char* value);
  void set_scripts(const void* value, size_t size);
  std::string* mutable_scripts();
  std::string* release_scripts();
  void set_allocated_scripts(std::string* scripts);

  // int64 ref_block_num = 3;
  void clear_ref_block_num();
  ::PROTOBUF_NAMESPACE_ID::int64 ref_block_num() const;
  void set_ref_block_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 expiration = 8;
  void clear_expiration();
  ::PROTOBUF_NAMESPACE_ID::int64 expiration() const;
  void set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 timestamp = 14;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 fee_limit = 18;
  void clear_fee_limit();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit() const;
  void set_fee_limit(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.Transaction.raw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::authority > auths_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Contract > contract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_block_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ref_block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scripts_;
  ::PROTOBUF_NAMESPACE_ID::int64 ref_block_num_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiration_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Transaction_Contract Contract;
  typedef Transaction_Result Result;
  typedef Transaction_raw raw;

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 2,
    kRetFieldNumber = 5,
    kRawDataFieldNumber = 1,
  };
  // repeated bytes signature = 2;
  int signature_size() const;
  void clear_signature();
  const std::string& signature(int index) const;
  std::string* mutable_signature(int index);
  void set_signature(int index, const std::string& value);
  void set_signature(int index, std::string&& value);
  void set_signature(int index, const char* value);
  void set_signature(int index, const void* value, size_t size);
  std::string* add_signature();
  void add_signature(const std::string& value);
  void add_signature(std::string&& value);
  void add_signature(const char* value);
  void add_signature(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& signature() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_signature();

  // repeated .protocol.Transaction.Result ret = 5;
  int ret_size() const;
  void clear_ret();
  ::protocol::Transaction_Result* mutable_ret(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Result >*
      mutable_ret();
  const ::protocol::Transaction_Result& ret(int index) const;
  ::protocol::Transaction_Result* add_ret();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Result >&
      ret() const;

  // .protocol.Transaction.raw raw_data = 1;
  bool has_raw_data() const;
  void clear_raw_data();
  const ::protocol::Transaction_raw& raw_data() const;
  ::protocol::Transaction_raw* release_raw_data();
  ::protocol::Transaction_raw* mutable_raw_data();
  void set_allocated_raw_data(::protocol::Transaction_raw* raw_data);

  // @@protoc_insertion_point(class_scope:protocol.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> signature_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Result > ret_;
  ::protocol::Transaction_raw* raw_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TransactionInfo_Log :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionInfo.Log) */ {
 public:
  TransactionInfo_Log();
  virtual ~TransactionInfo_Log();

  TransactionInfo_Log(const TransactionInfo_Log& from);
  TransactionInfo_Log(TransactionInfo_Log&& from) noexcept
    : TransactionInfo_Log() {
    *this = ::std::move(from);
  }

  inline TransactionInfo_Log& operator=(const TransactionInfo_Log& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInfo_Log& operator=(TransactionInfo_Log&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInfo_Log& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionInfo_Log* internal_default_instance() {
    return reinterpret_cast<const TransactionInfo_Log*>(
               &_TransactionInfo_Log_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TransactionInfo_Log& a, TransactionInfo_Log& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInfo_Log* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInfo_Log* New() const final {
    return CreateMaybeMessage<TransactionInfo_Log>(nullptr);
  }

  TransactionInfo_Log* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInfo_Log>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInfo_Log& from);
  void MergeFrom(const TransactionInfo_Log& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInfo_Log* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionInfo.Log";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicsFieldNumber = 2,
    kAddressFieldNumber = 1,
    kDataFieldNumber = 3,
  };
  // repeated bytes topics = 2;
  int topics_size() const;
  void clear_topics();
  const std::string& topics(int index) const;
  std::string* mutable_topics(int index);
  void set_topics(int index, const std::string& value);
  void set_topics(int index, std::string&& value);
  void set_topics(int index, const char* value);
  void set_topics(int index, const void* value, size_t size);
  std::string* add_topics();
  void add_topics(const std::string& value);
  void add_topics(std::string&& value);
  void add_topics(const char* value);
  void add_topics(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topics();

  // bytes address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:protocol.TransactionInfo.Log)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TransactionInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionInfo) */ {
 public:
  TransactionInfo();
  virtual ~TransactionInfo();

  TransactionInfo(const TransactionInfo& from);
  TransactionInfo(TransactionInfo&& from) noexcept
    : TransactionInfo() {
    *this = ::std::move(from);
  }

  inline TransactionInfo& operator=(const TransactionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionInfo& operator=(TransactionInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionInfo* internal_default_instance() {
    return reinterpret_cast<const TransactionInfo*>(
               &_TransactionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TransactionInfo& a, TransactionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionInfo* New() const final {
    return CreateMaybeMessage<TransactionInfo>(nullptr);
  }

  TransactionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionInfo& from);
  void MergeFrom(const TransactionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TransactionInfo_Log Log;

  typedef TransactionInfo_code code;
  static constexpr code SUCESS =
    TransactionInfo_code_SUCESS;
  static constexpr code FAILED =
    TransactionInfo_code_FAILED;
  static inline bool code_IsValid(int value) {
    return TransactionInfo_code_IsValid(value);
  }
  static constexpr code code_MIN =
    TransactionInfo_code_code_MIN;
  static constexpr code code_MAX =
    TransactionInfo_code_code_MAX;
  static constexpr int code_ARRAYSIZE =
    TransactionInfo_code_code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  code_descriptor() {
    return TransactionInfo_code_descriptor();
  }
  template<typename T>
  static inline const std::string& code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function code_Name.");
    return TransactionInfo_code_Name(enum_t_value);
  }
  static inline bool code_Parse(const std::string& name,
      code* value) {
    return TransactionInfo_code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kContractResultFieldNumber = 5,
    kLogFieldNumber = 8,
    kInternalTransactionsFieldNumber = 17,
    kIdFieldNumber = 1,
    kContractAddressFieldNumber = 6,
    kResMessageFieldNumber = 10,
    kAssetIssueIDFieldNumber = 14,
    kReceiptFieldNumber = 7,
    kFeeFieldNumber = 2,
    kBlockNumberFieldNumber = 3,
    kBlockTimeStampFieldNumber = 4,
    kWithdrawAmountFieldNumber = 15,
    kUnfreezeAmountFieldNumber = 16,
    kExchangeReceivedAmountFieldNumber = 18,
    kExchangeInjectAnotherAmountFieldNumber = 19,
    kExchangeWithdrawAnotherAmountFieldNumber = 20,
    kResultFieldNumber = 9,
    kExchangeIdFieldNumber = 21,
    kShieldedTransactionFeeFieldNumber = 22,
  };
  // repeated bytes contractResult = 5;
  int contractresult_size() const;
  void clear_contractresult();
  const std::string& contractresult(int index) const;
  std::string* mutable_contractresult(int index);
  void set_contractresult(int index, const std::string& value);
  void set_contractresult(int index, std::string&& value);
  void set_contractresult(int index, const char* value);
  void set_contractresult(int index, const void* value, size_t size);
  std::string* add_contractresult();
  void add_contractresult(const std::string& value);
  void add_contractresult(std::string&& value);
  void add_contractresult(const char* value);
  void add_contractresult(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& contractresult() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_contractresult();

  // repeated .protocol.TransactionInfo.Log log = 8;
  int log_size() const;
  void clear_log();
  ::protocol::TransactionInfo_Log* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo_Log >*
      mutable_log();
  const ::protocol::TransactionInfo_Log& log(int index) const;
  ::protocol::TransactionInfo_Log* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo_Log >&
      log() const;

  // repeated .protocol.InternalTransaction internal_transactions = 17;
  int internal_transactions_size() const;
  void clear_internal_transactions();
  ::protocol::InternalTransaction* mutable_internal_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction >*
      mutable_internal_transactions();
  const ::protocol::InternalTransaction& internal_transactions(int index) const;
  ::protocol::InternalTransaction* add_internal_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction >&
      internal_transactions() const;

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const void* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);

  // bytes contract_address = 6;
  void clear_contract_address();
  const std::string& contract_address() const;
  void set_contract_address(const std::string& value);
  void set_contract_address(std::string&& value);
  void set_contract_address(const char* value);
  void set_contract_address(const void* value, size_t size);
  std::string* mutable_contract_address();
  std::string* release_contract_address();
  void set_allocated_contract_address(std::string* contract_address);

  // bytes resMessage = 10;
  void clear_resmessage();
  const std::string& resmessage() const;
  void set_resmessage(const std::string& value);
  void set_resmessage(std::string&& value);
  void set_resmessage(const char* value);
  void set_resmessage(const void* value, size_t size);
  std::string* mutable_resmessage();
  std::string* release_resmessage();
  void set_allocated_resmessage(std::string* resmessage);

  // string assetIssueID = 14;
  void clear_assetissueid();
  const std::string& assetissueid() const;
  void set_assetissueid(const std::string& value);
  void set_assetissueid(std::string&& value);
  void set_assetissueid(const char* value);
  void set_assetissueid(const char* value, size_t size);
  std::string* mutable_assetissueid();
  std::string* release_assetissueid();
  void set_allocated_assetissueid(std::string* assetissueid);

  // .protocol.ResourceReceipt receipt = 7;
  bool has_receipt() const;
  void clear_receipt();
  const ::protocol::ResourceReceipt& receipt() const;
  ::protocol::ResourceReceipt* release_receipt();
  ::protocol::ResourceReceipt* mutable_receipt();
  void set_allocated_receipt(::protocol::ResourceReceipt* receipt);

  // int64 fee = 2;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 blockNumber = 3;
  void clear_blocknumber();
  ::PROTOBUF_NAMESPACE_ID::int64 blocknumber() const;
  void set_blocknumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 blockTimeStamp = 4;
  void clear_blocktimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 blocktimestamp() const;
  void set_blocktimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 withdraw_amount = 15;
  void clear_withdraw_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 withdraw_amount() const;
  void set_withdraw_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 unfreeze_amount = 16;
  void clear_unfreeze_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 unfreeze_amount() const;
  void set_unfreeze_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_received_amount = 18;
  void clear_exchange_received_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_received_amount() const;
  void set_exchange_received_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_inject_another_amount = 19;
  void clear_exchange_inject_another_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_inject_another_amount() const;
  void set_exchange_inject_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 exchange_withdraw_another_amount = 20;
  void clear_exchange_withdraw_another_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_withdraw_another_amount() const;
  void set_exchange_withdraw_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .protocol.TransactionInfo.code result = 9;
  void clear_result();
  ::protocol::TransactionInfo_code result() const;
  void set_result(::protocol::TransactionInfo_code value);

  // int64 exchange_id = 21;
  void clear_exchange_id();
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id() const;
  void set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 shielded_transaction_fee = 22;
  void clear_shielded_transaction_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 shielded_transaction_fee() const;
  void set_shielded_transaction_fee(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TransactionInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> contractresult_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo_Log > log_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction > internal_transactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resmessage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetissueid_;
  ::protocol::ResourceReceipt* receipt_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocknumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocktimestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 withdraw_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 unfreeze_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_received_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_inject_another_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_withdraw_another_amount_;
  int result_;
  ::PROTOBUF_NAMESPACE_ID::int64 exchange_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 shielded_transaction_fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TransactionRet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionRet) */ {
 public:
  TransactionRet();
  virtual ~TransactionRet();

  TransactionRet(const TransactionRet& from);
  TransactionRet(TransactionRet&& from) noexcept
    : TransactionRet() {
    *this = ::std::move(from);
  }

  inline TransactionRet& operator=(const TransactionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRet& operator=(TransactionRet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionRet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionRet* internal_default_instance() {
    return reinterpret_cast<const TransactionRet*>(
               &_TransactionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TransactionRet& a, TransactionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionRet* New() const final {
    return CreateMaybeMessage<TransactionRet>(nullptr);
  }

  TransactionRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionRet& from);
  void MergeFrom(const TransactionRet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionRet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactioninfoFieldNumber = 3,
    kBlockNumberFieldNumber = 1,
    kBlockTimeStampFieldNumber = 2,
  };
  // repeated .protocol.TransactionInfo transactioninfo = 3;
  int transactioninfo_size() const;
  void clear_transactioninfo();
  ::protocol::TransactionInfo* mutable_transactioninfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo >*
      mutable_transactioninfo();
  const ::protocol::TransactionInfo& transactioninfo(int index) const;
  ::protocol::TransactionInfo* add_transactioninfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo >&
      transactioninfo() const;

  // int64 blockNumber = 1;
  void clear_blocknumber();
  ::PROTOBUF_NAMESPACE_ID::int64 blocknumber() const;
  void set_blocknumber(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 blockTimeStamp = 2;
  void clear_blocktimestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 blocktimestamp() const;
  void set_blocktimestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.TransactionRet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo > transactioninfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocknumber_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocktimestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Transactions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Transactions) */ {
 public:
  Transactions();
  virtual ~Transactions();

  Transactions(const Transactions& from);
  Transactions(Transactions&& from) noexcept
    : Transactions() {
    *this = ::std::move(from);
  }

  inline Transactions& operator=(const Transactions& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transactions& operator=(Transactions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transactions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transactions* internal_default_instance() {
    return reinterpret_cast<const Transactions*>(
               &_Transactions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Transactions& a, Transactions& b) {
    a.Swap(&b);
  }
  inline void Swap(Transactions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transactions* New() const final {
    return CreateMaybeMessage<Transactions>(nullptr);
  }

  Transactions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transactions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transactions& from);
  void MergeFrom(const Transactions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transactions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Transactions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .protocol.Transaction transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  ::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
      mutable_transactions();
  const ::protocol::Transaction& transactions(int index) const;
  ::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:protocol.Transactions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class TransactionSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.TransactionSign) */ {
 public:
  TransactionSign();
  virtual ~TransactionSign();

  TransactionSign(const TransactionSign& from);
  TransactionSign(TransactionSign&& from) noexcept
    : TransactionSign() {
    *this = ::std::move(from);
  }

  inline TransactionSign& operator=(const TransactionSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionSign& operator=(TransactionSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionSign* internal_default_instance() {
    return reinterpret_cast<const TransactionSign*>(
               &_TransactionSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TransactionSign& a, TransactionSign& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionSign* New() const final {
    return CreateMaybeMessage<TransactionSign>(nullptr);
  }

  TransactionSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionSign& from);
  void MergeFrom(const TransactionSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.TransactionSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kTransactionFieldNumber = 1,
  };
  // bytes privateKey = 2;
  void clear_privatekey();
  const std::string& privatekey() const;
  void set_privatekey(const std::string& value);
  void set_privatekey(std::string&& value);
  void set_privatekey(const char* value);
  void set_privatekey(const void* value, size_t size);
  std::string* mutable_privatekey();
  std::string* release_privatekey();
  void set_allocated_privatekey(std::string* privatekey);

  // .protocol.Transaction transaction = 1;
  bool has_transaction() const;
  void clear_transaction();
  const ::protocol::Transaction& transaction() const;
  ::protocol::Transaction* release_transaction();
  ::protocol::Transaction* mutable_transaction();
  void set_allocated_transaction(::protocol::Transaction* transaction);

  // @@protoc_insertion_point(class_scope:protocol.TransactionSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr privatekey_;
  ::protocol::Transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader_raw :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockHeader.raw) */ {
 public:
  BlockHeader_raw();
  virtual ~BlockHeader_raw();

  BlockHeader_raw(const BlockHeader_raw& from);
  BlockHeader_raw(BlockHeader_raw&& from) noexcept
    : BlockHeader_raw() {
    *this = ::std::move(from);
  }

  inline BlockHeader_raw& operator=(const BlockHeader_raw& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader_raw& operator=(BlockHeader_raw&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader_raw& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader_raw* internal_default_instance() {
    return reinterpret_cast<const BlockHeader_raw*>(
               &_BlockHeader_raw_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(BlockHeader_raw& a, BlockHeader_raw& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader_raw* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader_raw* New() const final {
    return CreateMaybeMessage<BlockHeader_raw>(nullptr);
  }

  BlockHeader_raw* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader_raw>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader_raw& from);
  void MergeFrom(const BlockHeader_raw& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader_raw* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockHeader.raw";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxTrieRootFieldNumber = 2,
    kParentHashFieldNumber = 3,
    kWitnessAddressFieldNumber = 9,
    kAccountStateRootFieldNumber = 11,
    kTimestampFieldNumber = 1,
    kNumberFieldNumber = 7,
    kWitnessIdFieldNumber = 8,
    kVersionFieldNumber = 10,
  };
  // bytes txTrieRoot = 2;
  void clear_txtrieroot();
  const std::string& txtrieroot() const;
  void set_txtrieroot(const std::string& value);
  void set_txtrieroot(std::string&& value);
  void set_txtrieroot(const char* value);
  void set_txtrieroot(const void* value, size_t size);
  std::string* mutable_txtrieroot();
  std::string* release_txtrieroot();
  void set_allocated_txtrieroot(std::string* txtrieroot);

  // bytes parentHash = 3;
  void clear_parenthash();
  const std::string& parenthash() const;
  void set_parenthash(const std::string& value);
  void set_parenthash(std::string&& value);
  void set_parenthash(const char* value);
  void set_parenthash(const void* value, size_t size);
  std::string* mutable_parenthash();
  std::string* release_parenthash();
  void set_allocated_parenthash(std::string* parenthash);

  // bytes witness_address = 9;
  void clear_witness_address();
  const std::string& witness_address() const;
  void set_witness_address(const std::string& value);
  void set_witness_address(std::string&& value);
  void set_witness_address(const char* value);
  void set_witness_address(const void* value, size_t size);
  std::string* mutable_witness_address();
  std::string* release_witness_address();
  void set_allocated_witness_address(std::string* witness_address);

  // bytes accountStateRoot = 11;
  void clear_accountstateroot();
  const std::string& accountstateroot() const;
  void set_accountstateroot(const std::string& value);
  void set_accountstateroot(std::string&& value);
  void set_accountstateroot(const char* value);
  void set_accountstateroot(const void* value, size_t size);
  std::string* mutable_accountstateroot();
  std::string* release_accountstateroot();
  void set_allocated_accountstateroot(std::string* accountstateroot);

  // int64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 number = 7;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 witness_id = 8;
  void clear_witness_id();
  ::PROTOBUF_NAMESPACE_ID::int64 witness_id() const;
  void set_witness_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 version = 10;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.BlockHeader.raw)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txtrieroot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witness_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accountstateroot_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  ::PROTOBUF_NAMESPACE_ID::int64 witness_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class BlockHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockHeader) */ {
 public:
  BlockHeader();
  virtual ~BlockHeader();

  BlockHeader(const BlockHeader& from);
  BlockHeader(BlockHeader&& from) noexcept
    : BlockHeader() {
    *this = ::std::move(from);
  }

  inline BlockHeader& operator=(const BlockHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockHeader& operator=(BlockHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockHeader* internal_default_instance() {
    return reinterpret_cast<const BlockHeader*>(
               &_BlockHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(BlockHeader& a, BlockHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockHeader* New() const final {
    return CreateMaybeMessage<BlockHeader>(nullptr);
  }

  BlockHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockHeader& from);
  void MergeFrom(const BlockHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BlockHeader_raw raw;

  // accessors -------------------------------------------------------

  enum : int {
    kWitnessSignatureFieldNumber = 2,
    kRawDataFieldNumber = 1,
  };
  // bytes witness_signature = 2;
  void clear_witness_signature();
  const std::string& witness_signature() const;
  void set_witness_signature(const std::string& value);
  void set_witness_signature(std::string&& value);
  void set_witness_signature(const char* value);
  void set_witness_signature(const void* value, size_t size);
  std::string* mutable_witness_signature();
  std::string* release_witness_signature();
  void set_allocated_witness_signature(std::string* witness_signature);

  // .protocol.BlockHeader.raw raw_data = 1;
  bool has_raw_data() const;
  void clear_raw_data();
  const ::protocol::BlockHeader_raw& raw_data() const;
  ::protocol::BlockHeader_raw* release_raw_data();
  ::protocol::BlockHeader_raw* mutable_raw_data();
  void set_allocated_raw_data(::protocol::BlockHeader_raw* raw_data);

  // @@protoc_insertion_point(class_scope:protocol.BlockHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witness_signature_;
  ::protocol::BlockHeader_raw* raw_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Block :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Block";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
    kBlockHeaderFieldNumber = 2,
  };
  // repeated .protocol.Transaction transactions = 1;
  int transactions_size() const;
  void clear_transactions();
  ::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
      mutable_transactions();
  const ::protocol::Transaction& transactions(int index) const;
  ::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
      transactions() const;

  // .protocol.BlockHeader block_header = 2;
  bool has_block_header() const;
  void clear_block_header();
  const ::protocol::BlockHeader& block_header() const;
  ::protocol::BlockHeader* release_block_header();
  ::protocol::BlockHeader* mutable_block_header();
  void set_allocated_block_header(::protocol::BlockHeader* block_header);

  // @@protoc_insertion_point(class_scope:protocol.Block)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction > transactions_;
  ::protocol::BlockHeader* block_header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class ChainInventory_BlockId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChainInventory.BlockId) */ {
 public:
  ChainInventory_BlockId();
  virtual ~ChainInventory_BlockId();

  ChainInventory_BlockId(const ChainInventory_BlockId& from);
  ChainInventory_BlockId(ChainInventory_BlockId&& from) noexcept
    : ChainInventory_BlockId() {
    *this = ::std::move(from);
  }

  inline ChainInventory_BlockId& operator=(const ChainInventory_BlockId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainInventory_BlockId& operator=(ChainInventory_BlockId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainInventory_BlockId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainInventory_BlockId* internal_default_instance() {
    return reinterpret_cast<const ChainInventory_BlockId*>(
               &_ChainInventory_BlockId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ChainInventory_BlockId& a, ChainInventory_BlockId& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainInventory_BlockId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainInventory_BlockId* New() const final {
    return CreateMaybeMessage<ChainInventory_BlockId>(nullptr);
  }

  ChainInventory_BlockId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainInventory_BlockId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainInventory_BlockId& from);
  void MergeFrom(const ChainInventory_BlockId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainInventory_BlockId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChainInventory.BlockId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // int64 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainInventory.BlockId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class ChainInventory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ChainInventory) */ {
 public:
  ChainInventory();
  virtual ~ChainInventory();

  ChainInventory(const ChainInventory& from);
  ChainInventory(ChainInventory&& from) noexcept
    : ChainInventory() {
    *this = ::std::move(from);
  }

  inline ChainInventory& operator=(const ChainInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainInventory& operator=(ChainInventory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChainInventory* internal_default_instance() {
    return reinterpret_cast<const ChainInventory*>(
               &_ChainInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ChainInventory& a, ChainInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainInventory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainInventory* New() const final {
    return CreateMaybeMessage<ChainInventory>(nullptr);
  }

  ChainInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainInventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainInventory& from);
  void MergeFrom(const ChainInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainInventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ChainInventory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChainInventory_BlockId BlockId;

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kRemainNumFieldNumber = 2,
  };
  // repeated .protocol.ChainInventory.BlockId ids = 1;
  int ids_size() const;
  void clear_ids();
  ::protocol::ChainInventory_BlockId* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainInventory_BlockId >*
      mutable_ids();
  const ::protocol::ChainInventory_BlockId& ids(int index) const;
  ::protocol::ChainInventory_BlockId* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainInventory_BlockId >&
      ids() const;

  // int64 remain_num = 2;
  void clear_remain_num();
  ::PROTOBUF_NAMESPACE_ID::int64 remain_num() const;
  void set_remain_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.ChainInventory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainInventory_BlockId > ids_;
  ::PROTOBUF_NAMESPACE_ID::int64 remain_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class BlockInventory_BlockId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockInventory.BlockId) */ {
 public:
  BlockInventory_BlockId();
  virtual ~BlockInventory_BlockId();

  BlockInventory_BlockId(const BlockInventory_BlockId& from);
  BlockInventory_BlockId(BlockInventory_BlockId&& from) noexcept
    : BlockInventory_BlockId() {
    *this = ::std::move(from);
  }

  inline BlockInventory_BlockId& operator=(const BlockInventory_BlockId& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInventory_BlockId& operator=(BlockInventory_BlockId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInventory_BlockId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInventory_BlockId* internal_default_instance() {
    return reinterpret_cast<const BlockInventory_BlockId*>(
               &_BlockInventory_BlockId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(BlockInventory_BlockId& a, BlockInventory_BlockId& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInventory_BlockId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInventory_BlockId* New() const final {
    return CreateMaybeMessage<BlockInventory_BlockId>(nullptr);
  }

  BlockInventory_BlockId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInventory_BlockId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInventory_BlockId& from);
  void MergeFrom(const BlockInventory_BlockId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInventory_BlockId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockInventory.BlockId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // int64 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.BlockInventory.BlockId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class BlockInventory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.BlockInventory) */ {
 public:
  BlockInventory();
  virtual ~BlockInventory();

  BlockInventory(const BlockInventory& from);
  BlockInventory(BlockInventory&& from) noexcept
    : BlockInventory() {
    *this = ::std::move(from);
  }

  inline BlockInventory& operator=(const BlockInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockInventory& operator=(BlockInventory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockInventory* internal_default_instance() {
    return reinterpret_cast<const BlockInventory*>(
               &_BlockInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(BlockInventory& a, BlockInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockInventory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockInventory* New() const final {
    return CreateMaybeMessage<BlockInventory>(nullptr);
  }

  BlockInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockInventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockInventory& from);
  void MergeFrom(const BlockInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockInventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.BlockInventory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef BlockInventory_BlockId BlockId;

  typedef BlockInventory_Type Type;
  static constexpr Type SYNC =
    BlockInventory_Type_SYNC;
  static constexpr Type ADVTISE =
    BlockInventory_Type_ADVTISE;
  static constexpr Type FETCH =
    BlockInventory_Type_FETCH;
  static inline bool Type_IsValid(int value) {
    return BlockInventory_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    BlockInventory_Type_Type_MIN;
  static constexpr Type Type_MAX =
    BlockInventory_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    BlockInventory_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return BlockInventory_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return BlockInventory_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return BlockInventory_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .protocol.BlockInventory.BlockId ids = 1;
  int ids_size() const;
  void clear_ids();
  ::protocol::BlockInventory_BlockId* mutable_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockInventory_BlockId >*
      mutable_ids();
  const ::protocol::BlockInventory_BlockId& ids(int index) const;
  ::protocol::BlockInventory_BlockId* add_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockInventory_BlockId >&
      ids() const;

  // .protocol.BlockInventory.Type type = 2;
  void clear_type();
  ::protocol::BlockInventory_Type type() const;
  void set_type(::protocol::BlockInventory_Type value);

  // @@protoc_insertion_point(class_scope:protocol.BlockInventory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockInventory_BlockId > ids_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Inventory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Inventory) */ {
 public:
  Inventory();
  virtual ~Inventory();

  Inventory(const Inventory& from);
  Inventory(Inventory&& from) noexcept
    : Inventory() {
    *this = ::std::move(from);
  }

  inline Inventory& operator=(const Inventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inventory& operator=(Inventory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Inventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Inventory* internal_default_instance() {
    return reinterpret_cast<const Inventory*>(
               &_Inventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(Inventory& a, Inventory& b) {
    a.Swap(&b);
  }
  inline void Swap(Inventory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Inventory* New() const final {
    return CreateMaybeMessage<Inventory>(nullptr);
  }

  Inventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Inventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Inventory& from);
  void MergeFrom(const Inventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Inventory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Inventory_InventoryType InventoryType;
  static constexpr InventoryType TRX =
    Inventory_InventoryType_TRX;
  static constexpr InventoryType BLOCK =
    Inventory_InventoryType_BLOCK;
  static inline bool InventoryType_IsValid(int value) {
    return Inventory_InventoryType_IsValid(value);
  }
  static constexpr InventoryType InventoryType_MIN =
    Inventory_InventoryType_InventoryType_MIN;
  static constexpr InventoryType InventoryType_MAX =
    Inventory_InventoryType_InventoryType_MAX;
  static constexpr int InventoryType_ARRAYSIZE =
    Inventory_InventoryType_InventoryType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InventoryType_descriptor() {
    return Inventory_InventoryType_descriptor();
  }
  template<typename T>
  static inline const std::string& InventoryType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InventoryType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InventoryType_Name.");
    return Inventory_InventoryType_Name(enum_t_value);
  }
  static inline bool InventoryType_Parse(const std::string& name,
      InventoryType* value) {
    return Inventory_InventoryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // repeated bytes ids = 2;
  int ids_size() const;
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const void* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();

  // .protocol.Inventory.InventoryType type = 1;
  void clear_type();
  ::protocol::Inventory_InventoryType type() const;
  void set_type(::protocol::Inventory_InventoryType value);

  // @@protoc_insertion_point(class_scope:protocol.Inventory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class Items :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Items) */ {
 public:
  Items();
  virtual ~Items();

  Items(const Items& from);
  Items(Items&& from) noexcept
    : Items() {
    *this = ::std::move(from);
  }

  inline Items& operator=(const Items& from) {
    CopyFrom(from);
    return *this;
  }
  inline Items& operator=(Items&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Items& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Items* internal_default_instance() {
    return reinterpret_cast<const Items*>(
               &_Items_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Items& a, Items& b) {
    a.Swap(&b);
  }
  inline void Swap(Items* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Items* New() const final {
    return CreateMaybeMessage<Items>(nullptr);
  }

  Items* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Items>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Items& from);
  void MergeFrom(const Items& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Items* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Items";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Items_ItemType ItemType;
  static constexpr ItemType ERR =
    Items_ItemType_ERR;
  static constexpr ItemType TRX =
    Items_ItemType_TRX;
  static constexpr ItemType BLOCK =
    Items_ItemType_BLOCK;
  static constexpr ItemType BLOCKHEADER =
    Items_ItemType_BLOCKHEADER;
  static inline bool ItemType_IsValid(int value) {
    return Items_ItemType_IsValid(value);
  }
  static constexpr ItemType ItemType_MIN =
    Items_ItemType_ItemType_MIN;
  static constexpr ItemType ItemType_MAX =
    Items_ItemType_ItemType_MAX;
  static constexpr int ItemType_ARRAYSIZE =
    Items_ItemType_ItemType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ItemType_descriptor() {
    return Items_ItemType_descriptor();
  }
  template<typename T>
  static inline const std::string& ItemType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ItemType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ItemType_Name.");
    return Items_ItemType_Name(enum_t_value);
  }
  static inline bool ItemType_Parse(const std::string& name,
      ItemType* value) {
    return Items_ItemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kBlockHeadersFieldNumber = 3,
    kTransactionsFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // repeated .protocol.Block blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  ::protocol::Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Block >*
      mutable_blocks();
  const ::protocol::Block& blocks(int index) const;
  ::protocol::Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Block >&
      blocks() const;

  // repeated .protocol.BlockHeader block_headers = 3;
  int block_headers_size() const;
  void clear_block_headers();
  ::protocol::BlockHeader* mutable_block_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockHeader >*
      mutable_block_headers();
  const ::protocol::BlockHeader& block_headers(int index) const;
  ::protocol::BlockHeader* add_block_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockHeader >&
      block_headers() const;

  // repeated .protocol.Transaction transactions = 4;
  int transactions_size() const;
  void clear_transactions();
  ::protocol::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
      mutable_transactions();
  const ::protocol::Transaction& transactions(int index) const;
  ::protocol::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
      transactions() const;

  // .protocol.Items.ItemType type = 1;
  void clear_type();
  ::protocol::Items_ItemType type() const;
  void set_type(::protocol::Items_ItemType value);

  // @@protoc_insertion_point(class_scope:protocol.Items)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Block > blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockHeader > block_headers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction > transactions_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class DynamicProperties :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.DynamicProperties) */ {
 public:
  DynamicProperties();
  virtual ~DynamicProperties();

  DynamicProperties(const DynamicProperties& from);
  DynamicProperties(DynamicProperties&& from) noexcept
    : DynamicProperties() {
    *this = ::std::move(from);
  }

  inline DynamicProperties& operator=(const DynamicProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicProperties& operator=(DynamicProperties&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicProperties& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicProperties* internal_default_instance() {
    return reinterpret_cast<const DynamicProperties*>(
               &_DynamicProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DynamicProperties& a, DynamicProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicProperties* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicProperties* New() const final {
    return CreateMaybeMessage<DynamicProperties>(nullptr);
  }

  DynamicProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicProperties>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicProperties& from);
  void MergeFrom(const DynamicProperties& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicProperties* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.DynamicProperties";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSolidityBlockNumFieldNumber = 1,
  };
  // int64 last_solidity_block_num = 1;
  void clear_last_solidity_block_num();
  ::PROTOBUF_NAMESPACE_ID::int64 last_solidity_block_num() const;
  void set_last_solidity_block_num(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.DynamicProperties)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_solidity_block_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class DisconnectMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.DisconnectMessage) */ {
 public:
  DisconnectMessage();
  virtual ~DisconnectMessage();

  DisconnectMessage(const DisconnectMessage& from);
  DisconnectMessage(DisconnectMessage&& from) noexcept
    : DisconnectMessage() {
    *this = ::std::move(from);
  }

  inline DisconnectMessage& operator=(const DisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectMessage& operator=(DisconnectMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectMessage* internal_default_instance() {
    return reinterpret_cast<const DisconnectMessage*>(
               &_DisconnectMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(DisconnectMessage& a, DisconnectMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectMessage* New() const final {
    return CreateMaybeMessage<DisconnectMessage>(nullptr);
  }

  DisconnectMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectMessage& from);
  void MergeFrom(const DisconnectMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.DisconnectMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .protocol.ReasonCode reason = 1;
  void clear_reason();
  ::protocol::ReasonCode reason() const;
  void set_reason(::protocol::ReasonCode value);

  // @@protoc_insertion_point(class_scope:protocol.DisconnectMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class HelloMessage_BlockId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.HelloMessage.BlockId) */ {
 public:
  HelloMessage_BlockId();
  virtual ~HelloMessage_BlockId();

  HelloMessage_BlockId(const HelloMessage_BlockId& from);
  HelloMessage_BlockId(HelloMessage_BlockId&& from) noexcept
    : HelloMessage_BlockId() {
    *this = ::std::move(from);
  }

  inline HelloMessage_BlockId& operator=(const HelloMessage_BlockId& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloMessage_BlockId& operator=(HelloMessage_BlockId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloMessage_BlockId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloMessage_BlockId* internal_default_instance() {
    return reinterpret_cast<const HelloMessage_BlockId*>(
               &_HelloMessage_BlockId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(HelloMessage_BlockId& a, HelloMessage_BlockId& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloMessage_BlockId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloMessage_BlockId* New() const final {
    return CreateMaybeMessage<HelloMessage_BlockId>(nullptr);
  }

  HelloMessage_BlockId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloMessage_BlockId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloMessage_BlockId& from);
  void MergeFrom(const HelloMessage_BlockId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloMessage_BlockId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.HelloMessage.BlockId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kNumberFieldNumber = 2,
  };
  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // int64 number = 2;
  void clear_number();
  ::PROTOBUF_NAMESPACE_ID::int64 number() const;
  void set_number(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.HelloMessage.BlockId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::int64 number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class HelloMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.HelloMessage) */ {
 public:
  HelloMessage();
  virtual ~HelloMessage();

  HelloMessage(const HelloMessage& from);
  HelloMessage(HelloMessage&& from) noexcept
    : HelloMessage() {
    *this = ::std::move(from);
  }

  inline HelloMessage& operator=(const HelloMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloMessage& operator=(HelloMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloMessage* internal_default_instance() {
    return reinterpret_cast<const HelloMessage*>(
               &_HelloMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(HelloMessage& a, HelloMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloMessage* New() const final {
    return CreateMaybeMessage<HelloMessage>(nullptr);
  }

  HelloMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloMessage& from);
  void MergeFrom(const HelloMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.HelloMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HelloMessage_BlockId BlockId;

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kGenesisBlockIdFieldNumber = 4,
    kSolidBlockIdFieldNumber = 5,
    kHeadBlockIdFieldNumber = 6,
    kTimestampFieldNumber = 3,
    kVersionFieldNumber = 2,
  };
  // .protocol.Endpoint from = 1;
  bool has_from() const;
  void clear_from();
  const ::protocol::Endpoint& from() const;
  ::protocol::Endpoint* release_from();
  ::protocol::Endpoint* mutable_from();
  void set_allocated_from(::protocol::Endpoint* from);

  // .protocol.HelloMessage.BlockId genesisBlockId = 4;
  bool has_genesisblockid() const;
  void clear_genesisblockid();
  const ::protocol::HelloMessage_BlockId& genesisblockid() const;
  ::protocol::HelloMessage_BlockId* release_genesisblockid();
  ::protocol::HelloMessage_BlockId* mutable_genesisblockid();
  void set_allocated_genesisblockid(::protocol::HelloMessage_BlockId* genesisblockid);

  // .protocol.HelloMessage.BlockId solidBlockId = 5;
  bool has_solidblockid() const;
  void clear_solidblockid();
  const ::protocol::HelloMessage_BlockId& solidblockid() const;
  ::protocol::HelloMessage_BlockId* release_solidblockid();
  ::protocol::HelloMessage_BlockId* mutable_solidblockid();
  void set_allocated_solidblockid(::protocol::HelloMessage_BlockId* solidblockid);

  // .protocol.HelloMessage.BlockId headBlockId = 6;
  bool has_headblockid() const;
  void clear_headblockid();
  const ::protocol::HelloMessage_BlockId& headblockid() const;
  ::protocol::HelloMessage_BlockId* release_headblockid();
  ::protocol::HelloMessage_BlockId* mutable_headblockid();
  void set_allocated_headblockid(::protocol::HelloMessage_BlockId* headblockid);

  // int64 timestamp = 3;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 version = 2;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.HelloMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::protocol::Endpoint* from_;
  ::protocol::HelloMessage_BlockId* genesisblockid_;
  ::protocol::HelloMessage_BlockId* solidblockid_;
  ::protocol::HelloMessage_BlockId* headblockid_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class InternalTransaction_CallValueInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.InternalTransaction.CallValueInfo) */ {
 public:
  InternalTransaction_CallValueInfo();
  virtual ~InternalTransaction_CallValueInfo();

  InternalTransaction_CallValueInfo(const InternalTransaction_CallValueInfo& from);
  InternalTransaction_CallValueInfo(InternalTransaction_CallValueInfo&& from) noexcept
    : InternalTransaction_CallValueInfo() {
    *this = ::std::move(from);
  }

  inline InternalTransaction_CallValueInfo& operator=(const InternalTransaction_CallValueInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalTransaction_CallValueInfo& operator=(InternalTransaction_CallValueInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InternalTransaction_CallValueInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalTransaction_CallValueInfo* internal_default_instance() {
    return reinterpret_cast<const InternalTransaction_CallValueInfo*>(
               &_InternalTransaction_CallValueInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(InternalTransaction_CallValueInfo& a, InternalTransaction_CallValueInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalTransaction_CallValueInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalTransaction_CallValueInfo* New() const final {
    return CreateMaybeMessage<InternalTransaction_CallValueInfo>(nullptr);
  }

  InternalTransaction_CallValueInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalTransaction_CallValueInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalTransaction_CallValueInfo& from);
  void MergeFrom(const InternalTransaction_CallValueInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalTransaction_CallValueInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.InternalTransaction.CallValueInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenIdFieldNumber = 2,
    kCallValueFieldNumber = 1,
  };
  // string tokenId = 2;
  void clear_tokenid();
  const std::string& tokenid() const;
  void set_tokenid(const std::string& value);
  void set_tokenid(std::string&& value);
  void set_tokenid(const char* value);
  void set_tokenid(const char* value, size_t size);
  std::string* mutable_tokenid();
  std::string* release_tokenid();
  void set_allocated_tokenid(std::string* tokenid);

  // int64 callValue = 1;
  void clear_callvalue();
  ::PROTOBUF_NAMESPACE_ID::int64 callvalue() const;
  void set_callvalue(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.InternalTransaction.CallValueInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokenid_;
  ::PROTOBUF_NAMESPACE_ID::int64 callvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class InternalTransaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.InternalTransaction) */ {
 public:
  InternalTransaction();
  virtual ~InternalTransaction();

  InternalTransaction(const InternalTransaction& from);
  InternalTransaction(InternalTransaction&& from) noexcept
    : InternalTransaction() {
    *this = ::std::move(from);
  }

  inline InternalTransaction& operator=(const InternalTransaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalTransaction& operator=(InternalTransaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InternalTransaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalTransaction* internal_default_instance() {
    return reinterpret_cast<const InternalTransaction*>(
               &_InternalTransaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(InternalTransaction& a, InternalTransaction& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalTransaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalTransaction* New() const final {
    return CreateMaybeMessage<InternalTransaction>(nullptr);
  }

  InternalTransaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalTransaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalTransaction& from);
  void MergeFrom(const InternalTransaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalTransaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.InternalTransaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InternalTransaction_CallValueInfo CallValueInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kCallValueInfoFieldNumber = 4,
    kHashFieldNumber = 1,
    kCallerAddressFieldNumber = 2,
    kTransferToAddressFieldNumber = 3,
    kNoteFieldNumber = 5,
    kRejectedFieldNumber = 6,
  };
  // repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
  int callvalueinfo_size() const;
  void clear_callvalueinfo();
  ::protocol::InternalTransaction_CallValueInfo* mutable_callvalueinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction_CallValueInfo >*
      mutable_callvalueinfo();
  const ::protocol::InternalTransaction_CallValueInfo& callvalueinfo(int index) const;
  ::protocol::InternalTransaction_CallValueInfo* add_callvalueinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction_CallValueInfo >&
      callvalueinfo() const;

  // bytes hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);

  // bytes caller_address = 2;
  void clear_caller_address();
  const std::string& caller_address() const;
  void set_caller_address(const std::string& value);
  void set_caller_address(std::string&& value);
  void set_caller_address(const char* value);
  void set_caller_address(const void* value, size_t size);
  std::string* mutable_caller_address();
  std::string* release_caller_address();
  void set_allocated_caller_address(std::string* caller_address);

  // bytes transferTo_address = 3;
  void clear_transferto_address();
  const std::string& transferto_address() const;
  void set_transferto_address(const std::string& value);
  void set_transferto_address(std::string&& value);
  void set_transferto_address(const char* value);
  void set_transferto_address(const void* value, size_t size);
  std::string* mutable_transferto_address();
  std::string* release_transferto_address();
  void set_allocated_transferto_address(std::string* transferto_address);

  // bytes note = 5;
  void clear_note();
  const std::string& note() const;
  void set_note(const std::string& value);
  void set_note(std::string&& value);
  void set_note(const char* value);
  void set_note(const void* value, size_t size);
  std::string* mutable_note();
  std::string* release_note();
  void set_allocated_note(std::string* note);

  // bool rejected = 6;
  void clear_rejected();
  bool rejected() const;
  void set_rejected(bool value);

  // @@protoc_insertion_point(class_scope:protocol.InternalTransaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction_CallValueInfo > callvalueinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caller_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transferto_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr note_;
  bool rejected_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class DelegatedResourceAccountIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.DelegatedResourceAccountIndex) */ {
 public:
  DelegatedResourceAccountIndex();
  virtual ~DelegatedResourceAccountIndex();

  DelegatedResourceAccountIndex(const DelegatedResourceAccountIndex& from);
  DelegatedResourceAccountIndex(DelegatedResourceAccountIndex&& from) noexcept
    : DelegatedResourceAccountIndex() {
    *this = ::std::move(from);
  }

  inline DelegatedResourceAccountIndex& operator=(const DelegatedResourceAccountIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelegatedResourceAccountIndex& operator=(DelegatedResourceAccountIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DelegatedResourceAccountIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelegatedResourceAccountIndex* internal_default_instance() {
    return reinterpret_cast<const DelegatedResourceAccountIndex*>(
               &_DelegatedResourceAccountIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DelegatedResourceAccountIndex& a, DelegatedResourceAccountIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(DelegatedResourceAccountIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelegatedResourceAccountIndex* New() const final {
    return CreateMaybeMessage<DelegatedResourceAccountIndex>(nullptr);
  }

  DelegatedResourceAccountIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelegatedResourceAccountIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelegatedResourceAccountIndex& from);
  void MergeFrom(const DelegatedResourceAccountIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelegatedResourceAccountIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.DelegatedResourceAccountIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromAccountsFieldNumber = 2,
    kToAccountsFieldNumber = 3,
    kAccountFieldNumber = 1,
  };
  // repeated bytes fromAccounts = 2;
  int fromaccounts_size() const;
  void clear_fromaccounts();
  const std::string& fromaccounts(int index) const;
  std::string* mutable_fromaccounts(int index);
  void set_fromaccounts(int index, const std::string& value);
  void set_fromaccounts(int index, std::string&& value);
  void set_fromaccounts(int index, const char* value);
  void set_fromaccounts(int index, const void* value, size_t size);
  std::string* add_fromaccounts();
  void add_fromaccounts(const std::string& value);
  void add_fromaccounts(std::string&& value);
  void add_fromaccounts(const char* value);
  void add_fromaccounts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& fromaccounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_fromaccounts();

  // repeated bytes toAccounts = 3;
  int toaccounts_size() const;
  void clear_toaccounts();
  const std::string& toaccounts(int index) const;
  std::string* mutable_toaccounts(int index);
  void set_toaccounts(int index, const std::string& value);
  void set_toaccounts(int index, std::string&& value);
  void set_toaccounts(int index, const char* value);
  void set_toaccounts(int index, const void* value, size_t size);
  std::string* add_toaccounts();
  void add_toaccounts(const std::string& value);
  void add_toaccounts(std::string&& value);
  void add_toaccounts(const char* value);
  void add_toaccounts(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& toaccounts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_toaccounts();

  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const void* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);

  // @@protoc_insertion_point(class_scope:protocol.DelegatedResourceAccountIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> fromaccounts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> toaccounts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_CheatWitnessInfoMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_CheatWitnessInfoMapEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeInfo_CheatWitnessInfoMapEntry_DoNotUse();
  NodeInfo_CheatWitnessInfoMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeInfo_CheatWitnessInfoMapEntry_DoNotUse& other);
  static const NodeInfo_CheatWitnessInfoMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeInfo_CheatWitnessInfoMapEntry_DoNotUse*>(&_NodeInfo_CheatWitnessInfoMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.NodeInfo.CheatWitnessInfoMapEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protocol.NodeInfo.CheatWitnessInfoMapEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[52];
  }

  public:
};

// -------------------------------------------------------------------

class NodeInfo_PeerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo.PeerInfo) */ {
 public:
  NodeInfo_PeerInfo();
  virtual ~NodeInfo_PeerInfo();

  NodeInfo_PeerInfo(const NodeInfo_PeerInfo& from);
  NodeInfo_PeerInfo(NodeInfo_PeerInfo&& from) noexcept
    : NodeInfo_PeerInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo_PeerInfo& operator=(const NodeInfo_PeerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_PeerInfo& operator=(NodeInfo_PeerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo_PeerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo_PeerInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_PeerInfo*>(
               &_NodeInfo_PeerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(NodeInfo_PeerInfo& a, NodeInfo_PeerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_PeerInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_PeerInfo* New() const final {
    return CreateMaybeMessage<NodeInfo_PeerInfo>(nullptr);
  }

  NodeInfo_PeerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_PeerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo_PeerInfo& from);
  void MergeFrom(const NodeInfo_PeerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_PeerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo.PeerInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSyncBlockFieldNumber = 1,
    kHostFieldNumber = 8,
    kNodeIdFieldNumber = 10,
    kHeadBlockWeBothHaveFieldNumber = 18,
    kLocalDisconnectReasonFieldNumber = 24,
    kRemoteDisconnectReasonFieldNumber = 25,
    kRemainNumFieldNumber = 2,
    kLastBlockUpdateTimeFieldNumber = 3,
    kHeadBlockTimeWeBothHaveFieldNumber = 5,
    kPortFieldNumber = 9,
    kSyncFlagFieldNumber = 4,
    kNeedSyncFromPeerFieldNumber = 6,
    kNeedSyncFromUsFieldNumber = 7,
    kIsActiveFieldNumber = 19,
    kConnectTimeFieldNumber = 11,
    kAvgLatencyFieldNumber = 12,
    kSyncToFetchSizePeekNumFieldNumber = 14,
    kSyncToFetchSizeFieldNumber = 13,
    kSyncBlockRequestedSizeFieldNumber = 15,
    kUnFetchSynNumFieldNumber = 16,
    kBlockInPorcSizeFieldNumber = 17,
    kScoreFieldNumber = 20,
    kInFlowFieldNumber = 22,
    kNodeCountFieldNumber = 21,
    kDisconnectTimesFieldNumber = 23,
  };
  // string lastSyncBlock = 1;
  void clear_lastsyncblock();
  const std::string& lastsyncblock() const;
  void set_lastsyncblock(const std::string& value);
  void set_lastsyncblock(std::string&& value);
  void set_lastsyncblock(const char* value);
  void set_lastsyncblock(const char* value, size_t size);
  std::string* mutable_lastsyncblock();
  std::string* release_lastsyncblock();
  void set_allocated_lastsyncblock(std::string* lastsyncblock);

  // string host = 8;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);

  // string nodeId = 10;
  void clear_nodeid();
  const std::string& nodeid() const;
  void set_nodeid(const std::string& value);
  void set_nodeid(std::string&& value);
  void set_nodeid(const char* value);
  void set_nodeid(const char* value, size_t size);
  std::string* mutable_nodeid();
  std::string* release_nodeid();
  void set_allocated_nodeid(std::string* nodeid);

  // string headBlockWeBothHave = 18;
  void clear_headblockwebothhave();
  const std::string& headblockwebothhave() const;
  void set_headblockwebothhave(const std::string& value);
  void set_headblockwebothhave(std::string&& value);
  void set_headblockwebothhave(const char* value);
  void set_headblockwebothhave(const char* value, size_t size);
  std::string* mutable_headblockwebothhave();
  std::string* release_headblockwebothhave();
  void set_allocated_headblockwebothhave(std::string* headblockwebothhave);

  // string localDisconnectReason = 24;
  void clear_localdisconnectreason();
  const std::string& localdisconnectreason() const;
  void set_localdisconnectreason(const std::string& value);
  void set_localdisconnectreason(std::string&& value);
  void set_localdisconnectreason(const char* value);
  void set_localdisconnectreason(const char* value, size_t size);
  std::string* mutable_localdisconnectreason();
  std::string* release_localdisconnectreason();
  void set_allocated_localdisconnectreason(std::string* localdisconnectreason);

  // string remoteDisconnectReason = 25;
  void clear_remotedisconnectreason();
  const std::string& remotedisconnectreason() const;
  void set_remotedisconnectreason(const std::string& value);
  void set_remotedisconnectreason(std::string&& value);
  void set_remotedisconnectreason(const char* value);
  void set_remotedisconnectreason(const char* value, size_t size);
  std::string* mutable_remotedisconnectreason();
  std::string* release_remotedisconnectreason();
  void set_allocated_remotedisconnectreason(std::string* remotedisconnectreason);

  // int64 remainNum = 2;
  void clear_remainnum();
  ::PROTOBUF_NAMESPACE_ID::int64 remainnum() const;
  void set_remainnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 lastBlockUpdateTime = 3;
  void clear_lastblockupdatetime();
  ::PROTOBUF_NAMESPACE_ID::int64 lastblockupdatetime() const;
  void set_lastblockupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 headBlockTimeWeBothHave = 5;
  void clear_headblocktimewebothhave();
  ::PROTOBUF_NAMESPACE_ID::int64 headblocktimewebothhave() const;
  void set_headblocktimewebothhave(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 port = 9;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool syncFlag = 4;
  void clear_syncflag();
  bool syncflag() const;
  void set_syncflag(bool value);

  // bool needSyncFromPeer = 6;
  void clear_needsyncfrompeer();
  bool needsyncfrompeer() const;
  void set_needsyncfrompeer(bool value);

  // bool needSyncFromUs = 7;
  void clear_needsyncfromus();
  bool needsyncfromus() const;
  void set_needsyncfromus(bool value);

  // bool isActive = 19;
  void clear_isactive();
  bool isactive() const;
  void set_isactive(bool value);

  // int64 connectTime = 11;
  void clear_connecttime();
  ::PROTOBUF_NAMESPACE_ID::int64 connecttime() const;
  void set_connecttime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double avgLatency = 12;
  void clear_avglatency();
  double avglatency() const;
  void set_avglatency(double value);

  // int64 syncToFetchSizePeekNum = 14;
  void clear_synctofetchsizepeeknum();
  ::PROTOBUF_NAMESPACE_ID::int64 synctofetchsizepeeknum() const;
  void set_synctofetchsizepeeknum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 syncToFetchSize = 13;
  void clear_synctofetchsize();
  ::PROTOBUF_NAMESPACE_ID::int32 synctofetchsize() const;
  void set_synctofetchsize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 syncBlockRequestedSize = 15;
  void clear_syncblockrequestedsize();
  ::PROTOBUF_NAMESPACE_ID::int32 syncblockrequestedsize() const;
  void set_syncblockrequestedsize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 unFetchSynNum = 16;
  void clear_unfetchsynnum();
  ::PROTOBUF_NAMESPACE_ID::int64 unfetchsynnum() const;
  void set_unfetchsynnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 blockInPorcSize = 17;
  void clear_blockinporcsize();
  ::PROTOBUF_NAMESPACE_ID::int32 blockinporcsize() const;
  void set_blockinporcsize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 score = 20;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 inFlow = 22;
  void clear_inflow();
  ::PROTOBUF_NAMESPACE_ID::int64 inflow() const;
  void set_inflow(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 nodeCount = 21;
  void clear_nodecount();
  ::PROTOBUF_NAMESPACE_ID::int32 nodecount() const;
  void set_nodecount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 disconnectTimes = 23;
  void clear_disconnecttimes();
  ::PROTOBUF_NAMESPACE_ID::int32 disconnecttimes() const;
  void set_disconnecttimes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo.PeerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastsyncblock_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headblockwebothhave_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr localdisconnectreason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remotedisconnectreason_;
  ::PROTOBUF_NAMESPACE_ID::int64 remainnum_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastblockupdatetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 headblocktimewebothhave_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  bool syncflag_;
  bool needsyncfrompeer_;
  bool needsyncfromus_;
  bool isactive_;
  ::PROTOBUF_NAMESPACE_ID::int64 connecttime_;
  double avglatency_;
  ::PROTOBUF_NAMESPACE_ID::int64 synctofetchsizepeeknum_;
  ::PROTOBUF_NAMESPACE_ID::int32 synctofetchsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 syncblockrequestedsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 unfetchsynnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 blockinporcsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 score_;
  ::PROTOBUF_NAMESPACE_ID::int64 inflow_;
  ::PROTOBUF_NAMESPACE_ID::int32 nodecount_;
  ::PROTOBUF_NAMESPACE_ID::int32 disconnecttimes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_ConfigNodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo.ConfigNodeInfo) */ {
 public:
  NodeInfo_ConfigNodeInfo();
  virtual ~NodeInfo_ConfigNodeInfo();

  NodeInfo_ConfigNodeInfo(const NodeInfo_ConfigNodeInfo& from);
  NodeInfo_ConfigNodeInfo(NodeInfo_ConfigNodeInfo&& from) noexcept
    : NodeInfo_ConfigNodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo_ConfigNodeInfo& operator=(const NodeInfo_ConfigNodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_ConfigNodeInfo& operator=(NodeInfo_ConfigNodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo_ConfigNodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo_ConfigNodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_ConfigNodeInfo*>(
               &_NodeInfo_ConfigNodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(NodeInfo_ConfigNodeInfo& a, NodeInfo_ConfigNodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_ConfigNodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_ConfigNodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo_ConfigNodeInfo>(nullptr);
  }

  NodeInfo_ConfigNodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_ConfigNodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo_ConfigNodeInfo& from);
  void MergeFrom(const NodeInfo_ConfigNodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_ConfigNodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo.ConfigNodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeVersionFieldNumber = 1,
    kP2PVersionFieldNumber = 2,
    kListenPortFieldNumber = 3,
    kActiveNodeSizeFieldNumber = 5,
    kPassiveNodeSizeFieldNumber = 6,
    kSendNodeSizeFieldNumber = 7,
    kMaxConnectCountFieldNumber = 8,
    kSameIpMaxConnectCountFieldNumber = 9,
    kDiscoverEnableFieldNumber = 4,
    kSupportConstantFieldNumber = 15,
    kBackupListenPortFieldNumber = 10,
    kBackupMemberSizeFieldNumber = 11,
    kBackupPriorityFieldNumber = 12,
    kDbVersionFieldNumber = 13,
    kMinParticipationRateFieldNumber = 14,
    kMinTimeRatioFieldNumber = 16,
    kMaxTimeRatioFieldNumber = 17,
    kAllowCreationOfContractsFieldNumber = 18,
    kAllowAdaptiveEnergyFieldNumber = 19,
  };
  // string codeVersion = 1;
  void clear_codeversion();
  const std::string& codeversion() const;
  void set_codeversion(const std::string& value);
  void set_codeversion(std::string&& value);
  void set_codeversion(const char* value);
  void set_codeversion(const char* value, size_t size);
  std::string* mutable_codeversion();
  std::string* release_codeversion();
  void set_allocated_codeversion(std::string* codeversion);

  // string p2pVersion = 2;
  void clear_p2pversion();
  const std::string& p2pversion() const;
  void set_p2pversion(const std::string& value);
  void set_p2pversion(std::string&& value);
  void set_p2pversion(const char* value);
  void set_p2pversion(const char* value, size_t size);
  std::string* mutable_p2pversion();
  std::string* release_p2pversion();
  void set_allocated_p2pversion(std::string* p2pversion);

  // int32 listenPort = 3;
  void clear_listenport();
  ::PROTOBUF_NAMESPACE_ID::int32 listenport() const;
  void set_listenport(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 activeNodeSize = 5;
  void clear_activenodesize();
  ::PROTOBUF_NAMESPACE_ID::int32 activenodesize() const;
  void set_activenodesize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 passiveNodeSize = 6;
  void clear_passivenodesize();
  ::PROTOBUF_NAMESPACE_ID::int32 passivenodesize() const;
  void set_passivenodesize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sendNodeSize = 7;
  void clear_sendnodesize();
  ::PROTOBUF_NAMESPACE_ID::int32 sendnodesize() const;
  void set_sendnodesize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 maxConnectCount = 8;
  void clear_maxconnectcount();
  ::PROTOBUF_NAMESPACE_ID::int32 maxconnectcount() const;
  void set_maxconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 sameIpMaxConnectCount = 9;
  void clear_sameipmaxconnectcount();
  ::PROTOBUF_NAMESPACE_ID::int32 sameipmaxconnectcount() const;
  void set_sameipmaxconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool discoverEnable = 4;
  void clear_discoverenable();
  bool discoverenable() const;
  void set_discoverenable(bool value);

  // bool supportConstant = 15;
  void clear_supportconstant();
  bool supportconstant() const;
  void set_supportconstant(bool value);

  // int32 backupListenPort = 10;
  void clear_backuplistenport();
  ::PROTOBUF_NAMESPACE_ID::int32 backuplistenport() const;
  void set_backuplistenport(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 backupMemberSize = 11;
  void clear_backupmembersize();
  ::PROTOBUF_NAMESPACE_ID::int32 backupmembersize() const;
  void set_backupmembersize(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 backupPriority = 12;
  void clear_backuppriority();
  ::PROTOBUF_NAMESPACE_ID::int32 backuppriority() const;
  void set_backuppriority(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 dbVersion = 13;
  void clear_dbversion();
  ::PROTOBUF_NAMESPACE_ID::int32 dbversion() const;
  void set_dbversion(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 minParticipationRate = 14;
  void clear_minparticipationrate();
  ::PROTOBUF_NAMESPACE_ID::int32 minparticipationrate() const;
  void set_minparticipationrate(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double minTimeRatio = 16;
  void clear_mintimeratio();
  double mintimeratio() const;
  void set_mintimeratio(double value);

  // double maxTimeRatio = 17;
  void clear_maxtimeratio();
  double maxtimeratio() const;
  void set_maxtimeratio(double value);

  // int64 allowCreationOfContracts = 18;
  void clear_allowcreationofcontracts();
  ::PROTOBUF_NAMESPACE_ID::int64 allowcreationofcontracts() const;
  void set_allowcreationofcontracts(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 allowAdaptiveEnergy = 19;
  void clear_allowadaptiveenergy();
  ::PROTOBUF_NAMESPACE_ID::int64 allowadaptiveenergy() const;
  void set_allowadaptiveenergy(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo.ConfigNodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr codeversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr p2pversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 listenport_;
  ::PROTOBUF_NAMESPACE_ID::int32 activenodesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 passivenodesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 sendnodesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxconnectcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 sameipmaxconnectcount_;
  bool discoverenable_;
  bool supportconstant_;
  ::PROTOBUF_NAMESPACE_ID::int32 backuplistenport_;
  ::PROTOBUF_NAMESPACE_ID::int32 backupmembersize_;
  ::PROTOBUF_NAMESPACE_ID::int32 backuppriority_;
  ::PROTOBUF_NAMESPACE_ID::int32 dbversion_;
  ::PROTOBUF_NAMESPACE_ID::int32 minparticipationrate_;
  double mintimeratio_;
  double maxtimeratio_;
  ::PROTOBUF_NAMESPACE_ID::int64 allowcreationofcontracts_;
  ::PROTOBUF_NAMESPACE_ID::int64 allowadaptiveenergy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_MachineInfo_MemoryDescInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo.MachineInfo.MemoryDescInfo) */ {
 public:
  NodeInfo_MachineInfo_MemoryDescInfo();
  virtual ~NodeInfo_MachineInfo_MemoryDescInfo();

  NodeInfo_MachineInfo_MemoryDescInfo(const NodeInfo_MachineInfo_MemoryDescInfo& from);
  NodeInfo_MachineInfo_MemoryDescInfo(NodeInfo_MachineInfo_MemoryDescInfo&& from) noexcept
    : NodeInfo_MachineInfo_MemoryDescInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo_MachineInfo_MemoryDescInfo& operator=(const NodeInfo_MachineInfo_MemoryDescInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_MachineInfo_MemoryDescInfo& operator=(NodeInfo_MachineInfo_MemoryDescInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo_MachineInfo_MemoryDescInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo_MachineInfo_MemoryDescInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_MachineInfo_MemoryDescInfo*>(
               &_NodeInfo_MachineInfo_MemoryDescInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(NodeInfo_MachineInfo_MemoryDescInfo& a, NodeInfo_MachineInfo_MemoryDescInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_MachineInfo_MemoryDescInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_MachineInfo_MemoryDescInfo* New() const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo_MemoryDescInfo>(nullptr);
  }

  NodeInfo_MachineInfo_MemoryDescInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo_MemoryDescInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from);
  void MergeFrom(const NodeInfo_MachineInfo_MemoryDescInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_MachineInfo_MemoryDescInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo.MachineInfo.MemoryDescInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kInitSizeFieldNumber = 2,
    kUseSizeFieldNumber = 3,
    kMaxSizeFieldNumber = 4,
    kUseRateFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // int64 initSize = 2;
  void clear_initsize();
  ::PROTOBUF_NAMESPACE_ID::int64 initsize() const;
  void set_initsize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 useSize = 3;
  void clear_usesize();
  ::PROTOBUF_NAMESPACE_ID::int64 usesize() const;
  void set_usesize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 maxSize = 4;
  void clear_maxsize();
  ::PROTOBUF_NAMESPACE_ID::int64 maxsize() const;
  void set_maxsize(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double useRate = 5;
  void clear_userate();
  double userate() const;
  void set_userate(double value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo.MachineInfo.MemoryDescInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 initsize_;
  ::PROTOBUF_NAMESPACE_ID::int64 usesize_;
  ::PROTOBUF_NAMESPACE_ID::int64 maxsize_;
  double userate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_MachineInfo_DeadLockThreadInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo) */ {
 public:
  NodeInfo_MachineInfo_DeadLockThreadInfo();
  virtual ~NodeInfo_MachineInfo_DeadLockThreadInfo();

  NodeInfo_MachineInfo_DeadLockThreadInfo(const NodeInfo_MachineInfo_DeadLockThreadInfo& from);
  NodeInfo_MachineInfo_DeadLockThreadInfo(NodeInfo_MachineInfo_DeadLockThreadInfo&& from) noexcept
    : NodeInfo_MachineInfo_DeadLockThreadInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo_MachineInfo_DeadLockThreadInfo& operator=(const NodeInfo_MachineInfo_DeadLockThreadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_MachineInfo_DeadLockThreadInfo& operator=(NodeInfo_MachineInfo_DeadLockThreadInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo_MachineInfo_DeadLockThreadInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo_MachineInfo_DeadLockThreadInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_MachineInfo_DeadLockThreadInfo*>(
               &_NodeInfo_MachineInfo_DeadLockThreadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(NodeInfo_MachineInfo_DeadLockThreadInfo& a, NodeInfo_MachineInfo_DeadLockThreadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_MachineInfo_DeadLockThreadInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_MachineInfo_DeadLockThreadInfo* New() const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo_DeadLockThreadInfo>(nullptr);
  }

  NodeInfo_MachineInfo_DeadLockThreadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo_DeadLockThreadInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from);
  void MergeFrom(const NodeInfo_MachineInfo_DeadLockThreadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_MachineInfo_DeadLockThreadInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo.MachineInfo.DeadLockThreadInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLockNameFieldNumber = 2,
    kLockOwnerFieldNumber = 3,
    kStateFieldNumber = 4,
    kStackTraceFieldNumber = 7,
    kBlockTimeFieldNumber = 5,
    kWaitTimeFieldNumber = 6,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string lockName = 2;
  void clear_lockname();
  const std::string& lockname() const;
  void set_lockname(const std::string& value);
  void set_lockname(std::string&& value);
  void set_lockname(const char* value);
  void set_lockname(const char* value, size_t size);
  std::string* mutable_lockname();
  std::string* release_lockname();
  void set_allocated_lockname(std::string* lockname);

  // string lockOwner = 3;
  void clear_lockowner();
  const std::string& lockowner() const;
  void set_lockowner(const std::string& value);
  void set_lockowner(std::string&& value);
  void set_lockowner(const char* value);
  void set_lockowner(const char* value, size_t size);
  std::string* mutable_lockowner();
  std::string* release_lockowner();
  void set_allocated_lockowner(std::string* lockowner);

  // string state = 4;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);

  // string stackTrace = 7;
  void clear_stacktrace();
  const std::string& stacktrace() const;
  void set_stacktrace(const std::string& value);
  void set_stacktrace(std::string&& value);
  void set_stacktrace(const char* value);
  void set_stacktrace(const char* value, size_t size);
  std::string* mutable_stacktrace();
  std::string* release_stacktrace();
  void set_allocated_stacktrace(std::string* stacktrace);

  // int64 blockTime = 5;
  void clear_blocktime();
  ::PROTOBUF_NAMESPACE_ID::int64 blocktime() const;
  void set_blocktime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 waitTime = 6;
  void clear_waittime();
  ::PROTOBUF_NAMESPACE_ID::int64 waittime() const;
  void set_waittime(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lockowner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stacktrace_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocktime_;
  ::PROTOBUF_NAMESPACE_ID::int64 waittime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo_MachineInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo.MachineInfo) */ {
 public:
  NodeInfo_MachineInfo();
  virtual ~NodeInfo_MachineInfo();

  NodeInfo_MachineInfo(const NodeInfo_MachineInfo& from);
  NodeInfo_MachineInfo(NodeInfo_MachineInfo&& from) noexcept
    : NodeInfo_MachineInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo_MachineInfo& operator=(const NodeInfo_MachineInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo_MachineInfo& operator=(NodeInfo_MachineInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo_MachineInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo_MachineInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo_MachineInfo*>(
               &_NodeInfo_MachineInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(NodeInfo_MachineInfo& a, NodeInfo_MachineInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo_MachineInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo_MachineInfo* New() const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo>(nullptr);
  }

  NodeInfo_MachineInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo_MachineInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo_MachineInfo& from);
  void MergeFrom(const NodeInfo_MachineInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo_MachineInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo.MachineInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NodeInfo_MachineInfo_MemoryDescInfo MemoryDescInfo;
  typedef NodeInfo_MachineInfo_DeadLockThreadInfo DeadLockThreadInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kMemoryDescInfoListFieldNumber = 12,
    kDeadLockThreadInfoListFieldNumber = 13,
    kJavaVersionFieldNumber = 7,
    kOsNameFieldNumber = 8,
    kThreadCountFieldNumber = 1,
    kDeadLockThreadCountFieldNumber = 2,
    kTotalMemoryFieldNumber = 4,
    kFreeMemoryFieldNumber = 5,
    kCpuRateFieldNumber = 6,
    kJvmTotalMemoeryFieldNumber = 9,
    kJvmFreeMemoryFieldNumber = 10,
    kProcessCpuRateFieldNumber = 11,
    kCpuCountFieldNumber = 3,
  };
  // repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
  int memorydescinfolist_size() const;
  void clear_memorydescinfolist();
  ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* mutable_memorydescinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >*
      mutable_memorydescinfolist();
  const ::protocol::NodeInfo_MachineInfo_MemoryDescInfo& memorydescinfolist(int index) const;
  ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* add_memorydescinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >&
      memorydescinfolist() const;

  // repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
  int deadlockthreadinfolist_size() const;
  void clear_deadlockthreadinfolist();
  ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* mutable_deadlockthreadinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >*
      mutable_deadlockthreadinfolist();
  const ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo& deadlockthreadinfolist(int index) const;
  ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* add_deadlockthreadinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >&
      deadlockthreadinfolist() const;

  // string javaVersion = 7;
  void clear_javaversion();
  const std::string& javaversion() const;
  void set_javaversion(const std::string& value);
  void set_javaversion(std::string&& value);
  void set_javaversion(const char* value);
  void set_javaversion(const char* value, size_t size);
  std::string* mutable_javaversion();
  std::string* release_javaversion();
  void set_allocated_javaversion(std::string* javaversion);

  // string osName = 8;
  void clear_osname();
  const std::string& osname() const;
  void set_osname(const std::string& value);
  void set_osname(std::string&& value);
  void set_osname(const char* value);
  void set_osname(const char* value, size_t size);
  std::string* mutable_osname();
  std::string* release_osname();
  void set_allocated_osname(std::string* osname);

  // int32 threadCount = 1;
  void clear_threadcount();
  ::PROTOBUF_NAMESPACE_ID::int32 threadcount() const;
  void set_threadcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 deadLockThreadCount = 2;
  void clear_deadlockthreadcount();
  ::PROTOBUF_NAMESPACE_ID::int32 deadlockthreadcount() const;
  void set_deadlockthreadcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 totalMemory = 4;
  void clear_totalmemory();
  ::PROTOBUF_NAMESPACE_ID::int64 totalmemory() const;
  void set_totalmemory(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 freeMemory = 5;
  void clear_freememory();
  ::PROTOBUF_NAMESPACE_ID::int64 freememory() const;
  void set_freememory(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double cpuRate = 6;
  void clear_cpurate();
  double cpurate() const;
  void set_cpurate(double value);

  // int64 jvmTotalMemoery = 9;
  void clear_jvmtotalmemoery();
  ::PROTOBUF_NAMESPACE_ID::int64 jvmtotalmemoery() const;
  void set_jvmtotalmemoery(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int64 jvmFreeMemory = 10;
  void clear_jvmfreememory();
  ::PROTOBUF_NAMESPACE_ID::int64 jvmfreememory() const;
  void set_jvmfreememory(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double processCpuRate = 11;
  void clear_processcpurate();
  double processcpurate() const;
  void set_processcpurate(double value);

  // int32 cpuCount = 3;
  void clear_cpucount();
  ::PROTOBUF_NAMESPACE_ID::int32 cpucount() const;
  void set_cpucount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo.MachineInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo > memorydescinfolist_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo > deadlockthreadinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr javaversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osname_;
  ::PROTOBUF_NAMESPACE_ID::int32 threadcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 deadlockthreadcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalmemory_;
  ::PROTOBUF_NAMESPACE_ID::int64 freememory_;
  double cpurate_;
  ::PROTOBUF_NAMESPACE_ID::int64 jvmtotalmemoery_;
  ::PROTOBUF_NAMESPACE_ID::int64 jvmfreememory_;
  double processcpurate_;
  ::PROTOBUF_NAMESPACE_ID::int32 cpucount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_core_2fTron_2eproto);
    return ::descriptor_table_core_2fTron_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef NodeInfo_PeerInfo PeerInfo;
  typedef NodeInfo_ConfigNodeInfo ConfigNodeInfo;
  typedef NodeInfo_MachineInfo MachineInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kPeerInfoListFieldNumber = 8,
    kCheatWitnessInfoMapFieldNumber = 11,
    kBlockFieldNumber = 2,
    kSolidityBlockFieldNumber = 3,
    kConfigNodeInfoFieldNumber = 9,
    kMachineInfoFieldNumber = 10,
    kBeginSyncNumFieldNumber = 1,
    kCurrentConnectCountFieldNumber = 4,
    kActiveConnectCountFieldNumber = 5,
    kTotalFlowFieldNumber = 7,
    kPassiveConnectCountFieldNumber = 6,
  };
  // repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
  int peerinfolist_size() const;
  void clear_peerinfolist();
  ::protocol::NodeInfo_PeerInfo* mutable_peerinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_PeerInfo >*
      mutable_peerinfolist();
  const ::protocol::NodeInfo_PeerInfo& peerinfolist(int index) const;
  ::protocol::NodeInfo_PeerInfo* add_peerinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_PeerInfo >&
      peerinfolist() const;

  // map<string, string> cheatWitnessInfoMap = 11;
  int cheatwitnessinfomap_size() const;
  void clear_cheatwitnessinfomap();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      cheatwitnessinfomap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_cheatwitnessinfomap();

  // string block = 2;
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);

  // string solidityBlock = 3;
  void clear_solidityblock();
  const std::string& solidityblock() const;
  void set_solidityblock(const std::string& value);
  void set_solidityblock(std::string&& value);
  void set_solidityblock(const char* value);
  void set_solidityblock(const char* value, size_t size);
  std::string* mutable_solidityblock();
  std::string* release_solidityblock();
  void set_allocated_solidityblock(std::string* solidityblock);

  // .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
  bool has_confignodeinfo() const;
  void clear_confignodeinfo();
  const ::protocol::NodeInfo_ConfigNodeInfo& confignodeinfo() const;
  ::protocol::NodeInfo_ConfigNodeInfo* release_confignodeinfo();
  ::protocol::NodeInfo_ConfigNodeInfo* mutable_confignodeinfo();
  void set_allocated_confignodeinfo(::protocol::NodeInfo_ConfigNodeInfo* confignodeinfo);

  // .protocol.NodeInfo.MachineInfo machineInfo = 10;
  bool has_machineinfo() const;
  void clear_machineinfo();
  const ::protocol::NodeInfo_MachineInfo& machineinfo() const;
  ::protocol::NodeInfo_MachineInfo* release_machineinfo();
  ::protocol::NodeInfo_MachineInfo* mutable_machineinfo();
  void set_allocated_machineinfo(::protocol::NodeInfo_MachineInfo* machineinfo);

  // int64 beginSyncNum = 1;
  void clear_beginsyncnum();
  ::PROTOBUF_NAMESPACE_ID::int64 beginsyncnum() const;
  void set_beginsyncnum(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 currentConnectCount = 4;
  void clear_currentconnectcount();
  ::PROTOBUF_NAMESPACE_ID::int32 currentconnectcount() const;
  void set_currentconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 activeConnectCount = 5;
  void clear_activeconnectcount();
  ::PROTOBUF_NAMESPACE_ID::int32 activeconnectcount() const;
  void set_activeconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 totalFlow = 7;
  void clear_totalflow();
  ::PROTOBUF_NAMESPACE_ID::int64 totalflow() const;
  void set_totalflow(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 passiveConnectCount = 6;
  void clear_passiveconnectcount();
  ::PROTOBUF_NAMESPACE_ID::int32 passiveconnectcount() const;
  void set_passiveconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:protocol.NodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_PeerInfo > peerinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeInfo_CheatWitnessInfoMapEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > cheatwitnessinfomap_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr solidityblock_;
  ::protocol::NodeInfo_ConfigNodeInfo* confignodeinfo_;
  ::protocol::NodeInfo_MachineInfo* machineinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 beginsyncnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 currentconnectcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 activeconnectcount_;
  ::PROTOBUF_NAMESPACE_ID::int64 totalflow_;
  ::PROTOBUF_NAMESPACE_ID::int32 passiveconnectcount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2fTron_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountId

// bytes name = 1;
inline void AccountId::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountId::name() const {
  // @@protoc_insertion_point(field_get:protocol.AccountId.name)
  return name_.GetNoArena();
}
inline void AccountId::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountId.name)
}
inline void AccountId::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountId.name)
}
inline void AccountId::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountId.name)
}
inline void AccountId::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountId.name)
}
inline std::string* AccountId::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountId.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountId::release_name() {
  // @@protoc_insertion_point(field_release:protocol.AccountId.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountId::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountId.name)
}

// bytes address = 2;
inline void AccountId::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AccountId::address() const {
  // @@protoc_insertion_point(field_get:protocol.AccountId.address)
  return address_.GetNoArena();
}
inline void AccountId::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.AccountId.address)
}
inline void AccountId::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.AccountId.address)
}
inline void AccountId::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.AccountId.address)
}
inline void AccountId::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.AccountId.address)
}
inline std::string* AccountId::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.AccountId.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AccountId::release_address() {
  // @@protoc_insertion_point(field_release:protocol.AccountId.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AccountId::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.AccountId.address)
}

// -------------------------------------------------------------------

// Vote

// bytes vote_address = 1;
inline void Vote::clear_vote_address() {
  vote_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Vote::vote_address() const {
  // @@protoc_insertion_point(field_get:protocol.Vote.vote_address)
  return vote_address_.GetNoArena();
}
inline void Vote::set_vote_address(const std::string& value) {
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Vote.vote_address)
}
inline void Vote::set_vote_address(std::string&& value) {
  
  vote_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Vote.vote_address)
}
inline void Vote::set_vote_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Vote.vote_address)
}
inline void Vote::set_vote_address(const void* value, size_t size) {
  
  vote_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Vote.vote_address)
}
inline std::string* Vote::mutable_vote_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Vote.vote_address)
  return vote_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Vote::release_vote_address() {
  // @@protoc_insertion_point(field_release:protocol.Vote.vote_address)
  
  return vote_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Vote::set_allocated_vote_address(std::string* vote_address) {
  if (vote_address != nullptr) {
    
  } else {
    
  }
  vote_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vote_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Vote.vote_address)
}

// int64 vote_count = 2;
inline void Vote::clear_vote_count() {
  vote_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Vote::vote_count() const {
  // @@protoc_insertion_point(field_get:protocol.Vote.vote_count)
  return vote_count_;
}
inline void Vote::set_vote_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vote_count_ = value;
  // @@protoc_insertion_point(field_set:protocol.Vote.vote_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Proposal

// int64 proposal_id = 1;
inline void Proposal::clear_proposal_id() {
  proposal_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Proposal::proposal_id() const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.proposal_id)
  return proposal_id_;
}
inline void Proposal::set_proposal_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  proposal_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Proposal.proposal_id)
}

// bytes proposer_address = 2;
inline void Proposal::clear_proposer_address() {
  proposer_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Proposal::proposer_address() const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.proposer_address)
  return proposer_address_.GetNoArena();
}
inline void Proposal::set_proposer_address(const std::string& value) {
  
  proposer_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Proposal.proposer_address)
}
inline void Proposal::set_proposer_address(std::string&& value) {
  
  proposer_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Proposal.proposer_address)
}
inline void Proposal::set_proposer_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proposer_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Proposal.proposer_address)
}
inline void Proposal::set_proposer_address(const void* value, size_t size) {
  
  proposer_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Proposal.proposer_address)
}
inline std::string* Proposal::mutable_proposer_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Proposal.proposer_address)
  return proposer_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Proposal::release_proposer_address() {
  // @@protoc_insertion_point(field_release:protocol.Proposal.proposer_address)
  
  return proposer_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Proposal::set_allocated_proposer_address(std::string* proposer_address) {
  if (proposer_address != nullptr) {
    
  } else {
    
  }
  proposer_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proposer_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Proposal.proposer_address)
}

// map<int64, int64> parameters = 3;
inline int Proposal::parameters_size() const {
  return parameters_.size();
}
inline void Proposal::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >&
Proposal::parameters() const {
  // @@protoc_insertion_point(field_map:protocol.Proposal.parameters)
  return parameters_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::int64 >*
Proposal::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Proposal.parameters)
  return parameters_.MutableMap();
}

// int64 expiration_time = 4;
inline void Proposal::clear_expiration_time() {
  expiration_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Proposal::expiration_time() const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.expiration_time)
  return expiration_time_;
}
inline void Proposal::set_expiration_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Proposal.expiration_time)
}

// int64 create_time = 5;
inline void Proposal::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Proposal::create_time() const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.create_time)
  return create_time_;
}
inline void Proposal::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Proposal.create_time)
}

// repeated bytes approvals = 6;
inline int Proposal::approvals_size() const {
  return approvals_.size();
}
inline void Proposal::clear_approvals() {
  approvals_.Clear();
}
inline const std::string& Proposal::approvals(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.approvals)
  return approvals_.Get(index);
}
inline std::string* Proposal::mutable_approvals(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Proposal.approvals)
  return approvals_.Mutable(index);
}
inline void Proposal::set_approvals(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Proposal.approvals)
  approvals_.Mutable(index)->assign(value);
}
inline void Proposal::set_approvals(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.Proposal.approvals)
  approvals_.Mutable(index)->assign(std::move(value));
}
inline void Proposal::set_approvals(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  approvals_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Proposal.approvals)
}
inline void Proposal::set_approvals(int index, const void* value, size_t size) {
  approvals_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Proposal.approvals)
}
inline std::string* Proposal::add_approvals() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Proposal.approvals)
  return approvals_.Add();
}
inline void Proposal::add_approvals(const std::string& value) {
  approvals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Proposal.approvals)
}
inline void Proposal::add_approvals(std::string&& value) {
  approvals_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.Proposal.approvals)
}
inline void Proposal::add_approvals(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  approvals_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Proposal.approvals)
}
inline void Proposal::add_approvals(const void* value, size_t size) {
  approvals_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Proposal.approvals)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Proposal::approvals() const {
  // @@protoc_insertion_point(field_list:protocol.Proposal.approvals)
  return approvals_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Proposal::mutable_approvals() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Proposal.approvals)
  return &approvals_;
}

// .protocol.Proposal.State state = 7;
inline void Proposal::clear_state() {
  state_ = 0;
}
inline ::protocol::Proposal_State Proposal::state() const {
  // @@protoc_insertion_point(field_get:protocol.Proposal.state)
  return static_cast< ::protocol::Proposal_State >(state_);
}
inline void Proposal::set_state(::protocol::Proposal_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:protocol.Proposal.state)
}

// -------------------------------------------------------------------

// Exchange

// int64 exchange_id = 1;
inline void Exchange::clear_exchange_id() {
  exchange_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exchange::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.exchange_id)
  return exchange_id_;
}
inline void Exchange::set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Exchange.exchange_id)
}

// bytes creator_address = 2;
inline void Exchange::clear_creator_address() {
  creator_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Exchange::creator_address() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.creator_address)
  return creator_address_.GetNoArena();
}
inline void Exchange::set_creator_address(const std::string& value) {
  
  creator_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Exchange.creator_address)
}
inline void Exchange::set_creator_address(std::string&& value) {
  
  creator_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Exchange.creator_address)
}
inline void Exchange::set_creator_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  creator_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Exchange.creator_address)
}
inline void Exchange::set_creator_address(const void* value, size_t size) {
  
  creator_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Exchange.creator_address)
}
inline std::string* Exchange::mutable_creator_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Exchange.creator_address)
  return creator_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Exchange::release_creator_address() {
  // @@protoc_insertion_point(field_release:protocol.Exchange.creator_address)
  
  return creator_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_creator_address(std::string* creator_address) {
  if (creator_address != nullptr) {
    
  } else {
    
  }
  creator_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creator_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Exchange.creator_address)
}

// int64 create_time = 3;
inline void Exchange::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exchange::create_time() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.create_time)
  return create_time_;
}
inline void Exchange::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Exchange.create_time)
}

// bytes first_token_id = 6;
inline void Exchange::clear_first_token_id() {
  first_token_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Exchange::first_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.first_token_id)
  return first_token_id_.GetNoArena();
}
inline void Exchange::set_first_token_id(const std::string& value) {
  
  first_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Exchange.first_token_id)
}
inline void Exchange::set_first_token_id(std::string&& value) {
  
  first_token_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Exchange.first_token_id)
}
inline void Exchange::set_first_token_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Exchange.first_token_id)
}
inline void Exchange::set_first_token_id(const void* value, size_t size) {
  
  first_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Exchange.first_token_id)
}
inline std::string* Exchange::mutable_first_token_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Exchange.first_token_id)
  return first_token_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Exchange::release_first_token_id() {
  // @@protoc_insertion_point(field_release:protocol.Exchange.first_token_id)
  
  return first_token_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_first_token_id(std::string* first_token_id) {
  if (first_token_id != nullptr) {
    
  } else {
    
  }
  first_token_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_token_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Exchange.first_token_id)
}

// int64 first_token_balance = 7;
inline void Exchange::clear_first_token_balance() {
  first_token_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exchange::first_token_balance() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.first_token_balance)
  return first_token_balance_;
}
inline void Exchange::set_first_token_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  first_token_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Exchange.first_token_balance)
}

// bytes second_token_id = 8;
inline void Exchange::clear_second_token_id() {
  second_token_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Exchange::second_token_id() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.second_token_id)
  return second_token_id_.GetNoArena();
}
inline void Exchange::set_second_token_id(const std::string& value) {
  
  second_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Exchange.second_token_id)
}
inline void Exchange::set_second_token_id(std::string&& value) {
  
  second_token_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Exchange.second_token_id)
}
inline void Exchange::set_second_token_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  second_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Exchange.second_token_id)
}
inline void Exchange::set_second_token_id(const void* value, size_t size) {
  
  second_token_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Exchange.second_token_id)
}
inline std::string* Exchange::mutable_second_token_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Exchange.second_token_id)
  return second_token_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Exchange::release_second_token_id() {
  // @@protoc_insertion_point(field_release:protocol.Exchange.second_token_id)
  
  return second_token_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Exchange::set_allocated_second_token_id(std::string* second_token_id) {
  if (second_token_id != nullptr) {
    
  } else {
    
  }
  second_token_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), second_token_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Exchange.second_token_id)
}

// int64 second_token_balance = 9;
inline void Exchange::clear_second_token_balance() {
  second_token_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Exchange::second_token_balance() const {
  // @@protoc_insertion_point(field_get:protocol.Exchange.second_token_balance)
  return second_token_balance_;
}
inline void Exchange::set_second_token_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  second_token_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Exchange.second_token_balance)
}

// -------------------------------------------------------------------

// ChainParameters_ChainParameter

// string key = 1;
inline void ChainParameters_ChainParameter::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChainParameters_ChainParameter::key() const {
  // @@protoc_insertion_point(field_get:protocol.ChainParameters.ChainParameter.key)
  return key_.GetNoArena();
}
inline void ChainParameters_ChainParameter::set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainParameters.ChainParameter.key)
}
inline void ChainParameters_ChainParameter::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainParameters.ChainParameter.key)
}
inline void ChainParameters_ChainParameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainParameters.ChainParameter.key)
}
inline void ChainParameters_ChainParameter::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainParameters.ChainParameter.key)
}
inline std::string* ChainParameters_ChainParameter::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainParameters.ChainParameter.key)
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChainParameters_ChainParameter::release_key() {
  // @@protoc_insertion_point(field_release:protocol.ChainParameters.ChainParameter.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChainParameters_ChainParameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainParameters.ChainParameter.key)
}

// int64 value = 2;
inline void ChainParameters_ChainParameter::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChainParameters_ChainParameter::value() const {
  // @@protoc_insertion_point(field_get:protocol.ChainParameters.ChainParameter.value)
  return value_;
}
inline void ChainParameters_ChainParameter::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainParameters.ChainParameter.value)
}

// -------------------------------------------------------------------

// ChainParameters

// repeated .protocol.ChainParameters.ChainParameter chainParameter = 1;
inline int ChainParameters::chainparameter_size() const {
  return chainparameter_.size();
}
inline void ChainParameters::clear_chainparameter() {
  chainparameter_.Clear();
}
inline ::protocol::ChainParameters_ChainParameter* ChainParameters::mutable_chainparameter(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainParameters.chainParameter)
  return chainparameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainParameters_ChainParameter >*
ChainParameters::mutable_chainparameter() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainParameters.chainParameter)
  return &chainparameter_;
}
inline const ::protocol::ChainParameters_ChainParameter& ChainParameters::chainparameter(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainParameters.chainParameter)
  return chainparameter_.Get(index);
}
inline ::protocol::ChainParameters_ChainParameter* ChainParameters::add_chainparameter() {
  // @@protoc_insertion_point(field_add:protocol.ChainParameters.chainParameter)
  return chainparameter_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainParameters_ChainParameter >&
ChainParameters::chainparameter() const {
  // @@protoc_insertion_point(field_list:protocol.ChainParameters.chainParameter)
  return chainparameter_;
}

// -------------------------------------------------------------------

// Account_Frozen

// int64 frozen_balance = 1;
inline void Account_Frozen::clear_frozen_balance() {
  frozen_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_Frozen::frozen_balance() const {
  // @@protoc_insertion_point(field_get:protocol.Account.Frozen.frozen_balance)
  return frozen_balance_;
}
inline void Account_Frozen::set_frozen_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frozen_balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.Frozen.frozen_balance)
}

// int64 expire_time = 2;
inline void Account_Frozen::clear_expire_time() {
  expire_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_Frozen::expire_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.Frozen.expire_time)
  return expire_time_;
}
inline void Account_Frozen::set_expire_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.Frozen.expire_time)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Account_AccountResource

// int64 energy_usage = 1;
inline void Account_AccountResource::clear_energy_usage() {
  energy_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::energy_usage() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.energy_usage)
  return energy_usage_;
}
inline void Account_AccountResource::set_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  energy_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.energy_usage)
}

// .protocol.Account.Frozen frozen_balance_for_energy = 2;
inline bool Account_AccountResource::has_frozen_balance_for_energy() const {
  return this != internal_default_instance() && frozen_balance_for_energy_ != nullptr;
}
inline void Account_AccountResource::clear_frozen_balance_for_energy() {
  if (GetArenaNoVirtual() == nullptr && frozen_balance_for_energy_ != nullptr) {
    delete frozen_balance_for_energy_;
  }
  frozen_balance_for_energy_ = nullptr;
}
inline const ::protocol::Account_Frozen& Account_AccountResource::frozen_balance_for_energy() const {
  const ::protocol::Account_Frozen* p = frozen_balance_for_energy_;
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.frozen_balance_for_energy)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Account_Frozen*>(
      &::protocol::_Account_Frozen_default_instance_);
}
inline ::protocol::Account_Frozen* Account_AccountResource::release_frozen_balance_for_energy() {
  // @@protoc_insertion_point(field_release:protocol.Account.AccountResource.frozen_balance_for_energy)
  
  ::protocol::Account_Frozen* temp = frozen_balance_for_energy_;
  frozen_balance_for_energy_ = nullptr;
  return temp;
}
inline ::protocol::Account_Frozen* Account_AccountResource::mutable_frozen_balance_for_energy() {
  
  if (frozen_balance_for_energy_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Account_Frozen>(GetArenaNoVirtual());
    frozen_balance_for_energy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Account.AccountResource.frozen_balance_for_energy)
  return frozen_balance_for_energy_;
}
inline void Account_AccountResource::set_allocated_frozen_balance_for_energy(::protocol::Account_Frozen* frozen_balance_for_energy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frozen_balance_for_energy_;
  }
  if (frozen_balance_for_energy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frozen_balance_for_energy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frozen_balance_for_energy, submessage_arena);
    }
    
  } else {
    
  }
  frozen_balance_for_energy_ = frozen_balance_for_energy;
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.AccountResource.frozen_balance_for_energy)
}

// int64 latest_consume_time_for_energy = 3;
inline void Account_AccountResource::clear_latest_consume_time_for_energy() {
  latest_consume_time_for_energy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::latest_consume_time_for_energy() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.latest_consume_time_for_energy)
  return latest_consume_time_for_energy_;
}
inline void Account_AccountResource::set_latest_consume_time_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_consume_time_for_energy_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.latest_consume_time_for_energy)
}

// int64 acquired_delegated_frozen_balance_for_energy = 4;
inline void Account_AccountResource::clear_acquired_delegated_frozen_balance_for_energy() {
  acquired_delegated_frozen_balance_for_energy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::acquired_delegated_frozen_balance_for_energy() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.acquired_delegated_frozen_balance_for_energy)
  return acquired_delegated_frozen_balance_for_energy_;
}
inline void Account_AccountResource::set_acquired_delegated_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  acquired_delegated_frozen_balance_for_energy_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.acquired_delegated_frozen_balance_for_energy)
}

// int64 delegated_frozen_balance_for_energy = 5;
inline void Account_AccountResource::clear_delegated_frozen_balance_for_energy() {
  delegated_frozen_balance_for_energy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::delegated_frozen_balance_for_energy() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.delegated_frozen_balance_for_energy)
  return delegated_frozen_balance_for_energy_;
}
inline void Account_AccountResource::set_delegated_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delegated_frozen_balance_for_energy_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.delegated_frozen_balance_for_energy)
}

// int64 storage_limit = 6;
inline void Account_AccountResource::clear_storage_limit() {
  storage_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::storage_limit() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.storage_limit)
  return storage_limit_;
}
inline void Account_AccountResource::set_storage_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  storage_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.storage_limit)
}

// int64 storage_usage = 7;
inline void Account_AccountResource::clear_storage_usage() {
  storage_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::storage_usage() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.storage_usage)
  return storage_usage_;
}
inline void Account_AccountResource::set_storage_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  storage_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.storage_usage)
}

// int64 latest_exchange_storage_time = 8;
inline void Account_AccountResource::clear_latest_exchange_storage_time() {
  latest_exchange_storage_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account_AccountResource::latest_exchange_storage_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.AccountResource.latest_exchange_storage_time)
  return latest_exchange_storage_time_;
}
inline void Account_AccountResource::set_latest_exchange_storage_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_exchange_storage_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.AccountResource.latest_exchange_storage_time)
}

// -------------------------------------------------------------------

// Account

// bytes account_name = 1;
inline void Account::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::account_name() const {
  // @@protoc_insertion_point(field_get:protocol.Account.account_name)
  return account_name_.GetNoArena();
}
inline void Account::set_account_name(const std::string& value) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.account_name)
}
inline void Account::set_account_name(std::string&& value) {
  
  account_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.account_name)
}
inline void Account::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.account_name)
}
inline void Account::set_account_name(const void* value, size_t size) {
  
  account_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.account_name)
}
inline std::string* Account::mutable_account_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.account_name)
  return account_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_account_name() {
  // @@protoc_insertion_point(field_release:protocol.Account.account_name)
  
  return account_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_account_name(std::string* account_name) {
  if (account_name != nullptr) {
    
  } else {
    
  }
  account_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.account_name)
}

// .protocol.AccountType type = 2;
inline void Account::clear_type() {
  type_ = 0;
}
inline ::protocol::AccountType Account::type() const {
  // @@protoc_insertion_point(field_get:protocol.Account.type)
  return static_cast< ::protocol::AccountType >(type_);
}
inline void Account::set_type(::protocol::AccountType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.type)
}

// bytes address = 3;
inline void Account::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::address() const {
  // @@protoc_insertion_point(field_get:protocol.Account.address)
  return address_.GetNoArena();
}
inline void Account::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.address)
}
inline void Account::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.address)
}
inline void Account::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.address)
}
inline void Account::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.address)
}
inline std::string* Account::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Account.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.address)
}

// int64 balance = 4;
inline void Account::clear_balance() {
  balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::balance() const {
  // @@protoc_insertion_point(field_get:protocol.Account.balance)
  return balance_;
}
inline void Account::set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  balance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.balance)
}

// repeated .protocol.Vote votes = 5;
inline int Account::votes_size() const {
  return votes_.size();
}
inline void Account::clear_votes() {
  votes_.Clear();
}
inline ::protocol::Vote* Account::mutable_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.votes)
  return votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
Account::mutable_votes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.votes)
  return &votes_;
}
inline const ::protocol::Vote& Account::votes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.votes)
  return votes_.Get(index);
}
inline ::protocol::Vote* Account::add_votes() {
  // @@protoc_insertion_point(field_add:protocol.Account.votes)
  return votes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
Account::votes() const {
  // @@protoc_insertion_point(field_list:protocol.Account.votes)
  return votes_;
}

// map<string, int64> asset = 6;
inline int Account::asset_size() const {
  return asset_.size();
}
inline void Account::clear_asset() {
  asset_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::asset() const {
  // @@protoc_insertion_point(field_map:protocol.Account.asset)
  return asset_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_asset() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.asset)
  return asset_.MutableMap();
}

// map<string, int64> assetV2 = 56;
inline int Account::assetv2_size() const {
  return assetv2_.size();
}
inline void Account::clear_assetv2() {
  assetv2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::assetv2() const {
  // @@protoc_insertion_point(field_map:protocol.Account.assetV2)
  return assetv2_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_assetv2() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.assetV2)
  return assetv2_.MutableMap();
}

// repeated .protocol.Account.Frozen frozen = 7;
inline int Account::frozen_size() const {
  return frozen_.size();
}
inline void Account::clear_frozen() {
  frozen_.Clear();
}
inline ::protocol::Account_Frozen* Account::mutable_frozen(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.frozen)
  return frozen_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >*
Account::mutable_frozen() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.frozen)
  return &frozen_;
}
inline const ::protocol::Account_Frozen& Account::frozen(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.frozen)
  return frozen_.Get(index);
}
inline ::protocol::Account_Frozen* Account::add_frozen() {
  // @@protoc_insertion_point(field_add:protocol.Account.frozen)
  return frozen_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >&
Account::frozen() const {
  // @@protoc_insertion_point(field_list:protocol.Account.frozen)
  return frozen_;
}

// int64 net_usage = 8;
inline void Account::clear_net_usage() {
  net_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::net_usage() const {
  // @@protoc_insertion_point(field_get:protocol.Account.net_usage)
  return net_usage_;
}
inline void Account::set_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  net_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.net_usage)
}

// int64 acquired_delegated_frozen_balance_for_bandwidth = 41;
inline void Account::clear_acquired_delegated_frozen_balance_for_bandwidth() {
  acquired_delegated_frozen_balance_for_bandwidth_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::acquired_delegated_frozen_balance_for_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.Account.acquired_delegated_frozen_balance_for_bandwidth)
  return acquired_delegated_frozen_balance_for_bandwidth_;
}
inline void Account::set_acquired_delegated_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  acquired_delegated_frozen_balance_for_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.acquired_delegated_frozen_balance_for_bandwidth)
}

// int64 delegated_frozen_balance_for_bandwidth = 42;
inline void Account::clear_delegated_frozen_balance_for_bandwidth() {
  delegated_frozen_balance_for_bandwidth_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::delegated_frozen_balance_for_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.Account.delegated_frozen_balance_for_bandwidth)
  return delegated_frozen_balance_for_bandwidth_;
}
inline void Account::set_delegated_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  delegated_frozen_balance_for_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.delegated_frozen_balance_for_bandwidth)
}

// int64 create_time = 9;
inline void Account::clear_create_time() {
  create_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::create_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.create_time)
  return create_time_;
}
inline void Account::set_create_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.create_time)
}

// int64 latest_opration_time = 10;
inline void Account::clear_latest_opration_time() {
  latest_opration_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::latest_opration_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.latest_opration_time)
  return latest_opration_time_;
}
inline void Account::set_latest_opration_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_opration_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.latest_opration_time)
}

// int64 allowance = 11;
inline void Account::clear_allowance() {
  allowance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::allowance() const {
  // @@protoc_insertion_point(field_get:protocol.Account.allowance)
  return allowance_;
}
inline void Account::set_allowance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allowance_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.allowance)
}

// int64 latest_withdraw_time = 12;
inline void Account::clear_latest_withdraw_time() {
  latest_withdraw_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::latest_withdraw_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.latest_withdraw_time)
  return latest_withdraw_time_;
}
inline void Account::set_latest_withdraw_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_withdraw_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.latest_withdraw_time)
}

// bytes code = 13;
inline void Account::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::code() const {
  // @@protoc_insertion_point(field_get:protocol.Account.code)
  return code_.GetNoArena();
}
inline void Account::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.code)
}
inline void Account::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.code)
}
inline void Account::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.code)
}
inline void Account::set_code(const void* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.code)
}
inline std::string* Account::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_code() {
  // @@protoc_insertion_point(field_release:protocol.Account.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.code)
}

// bool is_witness = 14;
inline void Account::clear_is_witness() {
  is_witness_ = false;
}
inline bool Account::is_witness() const {
  // @@protoc_insertion_point(field_get:protocol.Account.is_witness)
  return is_witness_;
}
inline void Account::set_is_witness(bool value) {
  
  is_witness_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.is_witness)
}

// bool is_committee = 15;
inline void Account::clear_is_committee() {
  is_committee_ = false;
}
inline bool Account::is_committee() const {
  // @@protoc_insertion_point(field_get:protocol.Account.is_committee)
  return is_committee_;
}
inline void Account::set_is_committee(bool value) {
  
  is_committee_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.is_committee)
}

// repeated .protocol.Account.Frozen frozen_supply = 16;
inline int Account::frozen_supply_size() const {
  return frozen_supply_.size();
}
inline void Account::clear_frozen_supply() {
  frozen_supply_.Clear();
}
inline ::protocol::Account_Frozen* Account::mutable_frozen_supply(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.frozen_supply)
  return frozen_supply_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >*
Account::mutable_frozen_supply() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.frozen_supply)
  return &frozen_supply_;
}
inline const ::protocol::Account_Frozen& Account::frozen_supply(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.frozen_supply)
  return frozen_supply_.Get(index);
}
inline ::protocol::Account_Frozen* Account::add_frozen_supply() {
  // @@protoc_insertion_point(field_add:protocol.Account.frozen_supply)
  return frozen_supply_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Account_Frozen >&
Account::frozen_supply() const {
  // @@protoc_insertion_point(field_list:protocol.Account.frozen_supply)
  return frozen_supply_;
}

// bytes asset_issued_name = 17;
inline void Account::clear_asset_issued_name() {
  asset_issued_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::asset_issued_name() const {
  // @@protoc_insertion_point(field_get:protocol.Account.asset_issued_name)
  return asset_issued_name_.GetNoArena();
}
inline void Account::set_asset_issued_name(const std::string& value) {
  
  asset_issued_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.asset_issued_name)
}
inline void Account::set_asset_issued_name(std::string&& value) {
  
  asset_issued_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.asset_issued_name)
}
inline void Account::set_asset_issued_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_issued_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.asset_issued_name)
}
inline void Account::set_asset_issued_name(const void* value, size_t size) {
  
  asset_issued_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.asset_issued_name)
}
inline std::string* Account::mutable_asset_issued_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.asset_issued_name)
  return asset_issued_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_asset_issued_name() {
  // @@protoc_insertion_point(field_release:protocol.Account.asset_issued_name)
  
  return asset_issued_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_asset_issued_name(std::string* asset_issued_name) {
  if (asset_issued_name != nullptr) {
    
  } else {
    
  }
  asset_issued_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_issued_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.asset_issued_name)
}

// bytes asset_issued_ID = 57;
inline void Account::clear_asset_issued_id() {
  asset_issued_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::asset_issued_id() const {
  // @@protoc_insertion_point(field_get:protocol.Account.asset_issued_ID)
  return asset_issued_id_.GetNoArena();
}
inline void Account::set_asset_issued_id(const std::string& value) {
  
  asset_issued_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.asset_issued_ID)
}
inline void Account::set_asset_issued_id(std::string&& value) {
  
  asset_issued_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.asset_issued_ID)
}
inline void Account::set_asset_issued_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_issued_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.asset_issued_ID)
}
inline void Account::set_asset_issued_id(const void* value, size_t size) {
  
  asset_issued_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.asset_issued_ID)
}
inline std::string* Account::mutable_asset_issued_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.asset_issued_ID)
  return asset_issued_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_asset_issued_id() {
  // @@protoc_insertion_point(field_release:protocol.Account.asset_issued_ID)
  
  return asset_issued_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_asset_issued_id(std::string* asset_issued_id) {
  if (asset_issued_id != nullptr) {
    
  } else {
    
  }
  asset_issued_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_issued_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.asset_issued_ID)
}

// map<string, int64> latest_asset_operation_time = 18;
inline int Account::latest_asset_operation_time_size() const {
  return latest_asset_operation_time_.size();
}
inline void Account::clear_latest_asset_operation_time() {
  latest_asset_operation_time_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::latest_asset_operation_time() const {
  // @@protoc_insertion_point(field_map:protocol.Account.latest_asset_operation_time)
  return latest_asset_operation_time_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_latest_asset_operation_time() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.latest_asset_operation_time)
  return latest_asset_operation_time_.MutableMap();
}

// map<string, int64> latest_asset_operation_timeV2 = 58;
inline int Account::latest_asset_operation_timev2_size() const {
  return latest_asset_operation_timev2_.size();
}
inline void Account::clear_latest_asset_operation_timev2() {
  latest_asset_operation_timev2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::latest_asset_operation_timev2() const {
  // @@protoc_insertion_point(field_map:protocol.Account.latest_asset_operation_timeV2)
  return latest_asset_operation_timev2_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_latest_asset_operation_timev2() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.latest_asset_operation_timeV2)
  return latest_asset_operation_timev2_.MutableMap();
}

// int64 free_net_usage = 19;
inline void Account::clear_free_net_usage() {
  free_net_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::free_net_usage() const {
  // @@protoc_insertion_point(field_get:protocol.Account.free_net_usage)
  return free_net_usage_;
}
inline void Account::set_free_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  free_net_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.free_net_usage)
}

// map<string, int64> free_asset_net_usage = 20;
inline int Account::free_asset_net_usage_size() const {
  return free_asset_net_usage_.size();
}
inline void Account::clear_free_asset_net_usage() {
  free_asset_net_usage_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::free_asset_net_usage() const {
  // @@protoc_insertion_point(field_map:protocol.Account.free_asset_net_usage)
  return free_asset_net_usage_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_free_asset_net_usage() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.free_asset_net_usage)
  return free_asset_net_usage_.MutableMap();
}

// map<string, int64> free_asset_net_usageV2 = 59;
inline int Account::free_asset_net_usagev2_size() const {
  return free_asset_net_usagev2_.size();
}
inline void Account::clear_free_asset_net_usagev2() {
  free_asset_net_usagev2_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
Account::free_asset_net_usagev2() const {
  // @@protoc_insertion_point(field_map:protocol.Account.free_asset_net_usageV2)
  return free_asset_net_usagev2_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
Account::mutable_free_asset_net_usagev2() {
  // @@protoc_insertion_point(field_mutable_map:protocol.Account.free_asset_net_usageV2)
  return free_asset_net_usagev2_.MutableMap();
}

// int64 latest_consume_time = 21;
inline void Account::clear_latest_consume_time() {
  latest_consume_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::latest_consume_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.latest_consume_time)
  return latest_consume_time_;
}
inline void Account::set_latest_consume_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_consume_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.latest_consume_time)
}

// int64 latest_consume_free_time = 22;
inline void Account::clear_latest_consume_free_time() {
  latest_consume_free_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Account::latest_consume_free_time() const {
  // @@protoc_insertion_point(field_get:protocol.Account.latest_consume_free_time)
  return latest_consume_free_time_;
}
inline void Account::set_latest_consume_free_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latest_consume_free_time_ = value;
  // @@protoc_insertion_point(field_set:protocol.Account.latest_consume_free_time)
}

// bytes account_id = 23;
inline void Account::clear_account_id() {
  account_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::account_id() const {
  // @@protoc_insertion_point(field_get:protocol.Account.account_id)
  return account_id_.GetNoArena();
}
inline void Account::set_account_id(const std::string& value) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.account_id)
}
inline void Account::set_account_id(std::string&& value) {
  
  account_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.account_id)
}
inline void Account::set_account_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.account_id)
}
inline void Account::set_account_id(const void* value, size_t size) {
  
  account_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.account_id)
}
inline std::string* Account::mutable_account_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.account_id)
  return account_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_account_id() {
  // @@protoc_insertion_point(field_release:protocol.Account.account_id)
  
  return account_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_account_id(std::string* account_id) {
  if (account_id != nullptr) {
    
  } else {
    
  }
  account_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account_id);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.account_id)
}

// .protocol.Account.AccountResource account_resource = 26;
inline bool Account::has_account_resource() const {
  return this != internal_default_instance() && account_resource_ != nullptr;
}
inline void Account::clear_account_resource() {
  if (GetArenaNoVirtual() == nullptr && account_resource_ != nullptr) {
    delete account_resource_;
  }
  account_resource_ = nullptr;
}
inline const ::protocol::Account_AccountResource& Account::account_resource() const {
  const ::protocol::Account_AccountResource* p = account_resource_;
  // @@protoc_insertion_point(field_get:protocol.Account.account_resource)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Account_AccountResource*>(
      &::protocol::_Account_AccountResource_default_instance_);
}
inline ::protocol::Account_AccountResource* Account::release_account_resource() {
  // @@protoc_insertion_point(field_release:protocol.Account.account_resource)
  
  ::protocol::Account_AccountResource* temp = account_resource_;
  account_resource_ = nullptr;
  return temp;
}
inline ::protocol::Account_AccountResource* Account::mutable_account_resource() {
  
  if (account_resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Account_AccountResource>(GetArenaNoVirtual());
    account_resource_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Account.account_resource)
  return account_resource_;
}
inline void Account::set_allocated_account_resource(::protocol::Account_AccountResource* account_resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_resource_;
  }
  if (account_resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account_resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_resource, submessage_arena);
    }
    
  } else {
    
  }
  account_resource_ = account_resource;
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.account_resource)
}

// bytes codeHash = 30;
inline void Account::clear_codehash() {
  codehash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Account::codehash() const {
  // @@protoc_insertion_point(field_get:protocol.Account.codeHash)
  return codehash_.GetNoArena();
}
inline void Account::set_codehash(const std::string& value) {
  
  codehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Account.codeHash)
}
inline void Account::set_codehash(std::string&& value) {
  
  codehash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Account.codeHash)
}
inline void Account::set_codehash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Account.codeHash)
}
inline void Account::set_codehash(const void* value, size_t size) {
  
  codehash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Account.codeHash)
}
inline std::string* Account::mutable_codehash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Account.codeHash)
  return codehash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Account::release_codehash() {
  // @@protoc_insertion_point(field_release:protocol.Account.codeHash)
  
  return codehash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Account::set_allocated_codehash(std::string* codehash) {
  if (codehash != nullptr) {
    
  } else {
    
  }
  codehash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codehash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.codeHash)
}

// .protocol.Permission owner_permission = 31;
inline bool Account::has_owner_permission() const {
  return this != internal_default_instance() && owner_permission_ != nullptr;
}
inline void Account::clear_owner_permission() {
  if (GetArenaNoVirtual() == nullptr && owner_permission_ != nullptr) {
    delete owner_permission_;
  }
  owner_permission_ = nullptr;
}
inline const ::protocol::Permission& Account::owner_permission() const {
  const ::protocol::Permission* p = owner_permission_;
  // @@protoc_insertion_point(field_get:protocol.Account.owner_permission)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Permission*>(
      &::protocol::_Permission_default_instance_);
}
inline ::protocol::Permission* Account::release_owner_permission() {
  // @@protoc_insertion_point(field_release:protocol.Account.owner_permission)
  
  ::protocol::Permission* temp = owner_permission_;
  owner_permission_ = nullptr;
  return temp;
}
inline ::protocol::Permission* Account::mutable_owner_permission() {
  
  if (owner_permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Permission>(GetArenaNoVirtual());
    owner_permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Account.owner_permission)
  return owner_permission_;
}
inline void Account::set_allocated_owner_permission(::protocol::Permission* owner_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete owner_permission_;
  }
  if (owner_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      owner_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owner_permission, submessage_arena);
    }
    
  } else {
    
  }
  owner_permission_ = owner_permission;
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.owner_permission)
}

// .protocol.Permission witness_permission = 32;
inline bool Account::has_witness_permission() const {
  return this != internal_default_instance() && witness_permission_ != nullptr;
}
inline void Account::clear_witness_permission() {
  if (GetArenaNoVirtual() == nullptr && witness_permission_ != nullptr) {
    delete witness_permission_;
  }
  witness_permission_ = nullptr;
}
inline const ::protocol::Permission& Account::witness_permission() const {
  const ::protocol::Permission* p = witness_permission_;
  // @@protoc_insertion_point(field_get:protocol.Account.witness_permission)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Permission*>(
      &::protocol::_Permission_default_instance_);
}
inline ::protocol::Permission* Account::release_witness_permission() {
  // @@protoc_insertion_point(field_release:protocol.Account.witness_permission)
  
  ::protocol::Permission* temp = witness_permission_;
  witness_permission_ = nullptr;
  return temp;
}
inline ::protocol::Permission* Account::mutable_witness_permission() {
  
  if (witness_permission_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Permission>(GetArenaNoVirtual());
    witness_permission_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Account.witness_permission)
  return witness_permission_;
}
inline void Account::set_allocated_witness_permission(::protocol::Permission* witness_permission) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete witness_permission_;
  }
  if (witness_permission) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      witness_permission = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, witness_permission, submessage_arena);
    }
    
  } else {
    
  }
  witness_permission_ = witness_permission;
  // @@protoc_insertion_point(field_set_allocated:protocol.Account.witness_permission)
}

// repeated .protocol.Permission active_permission = 33;
inline int Account::active_permission_size() const {
  return active_permission_.size();
}
inline void Account::clear_active_permission() {
  active_permission_.Clear();
}
inline ::protocol::Permission* Account::mutable_active_permission(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Account.active_permission)
  return active_permission_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >*
Account::mutable_active_permission() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Account.active_permission)
  return &active_permission_;
}
inline const ::protocol::Permission& Account::active_permission(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Account.active_permission)
  return active_permission_.Get(index);
}
inline ::protocol::Permission* Account::add_active_permission() {
  // @@protoc_insertion_point(field_add:protocol.Account.active_permission)
  return active_permission_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Permission >&
Account::active_permission() const {
  // @@protoc_insertion_point(field_list:protocol.Account.active_permission)
  return active_permission_;
}

// -------------------------------------------------------------------

// Key

// bytes address = 1;
inline void Key::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Key::address() const {
  // @@protoc_insertion_point(field_get:protocol.Key.address)
  return address_.GetNoArena();
}
inline void Key::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Key.address)
}
inline void Key::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Key.address)
}
inline void Key::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Key.address)
}
inline void Key::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Key.address)
}
inline std::string* Key::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Key.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Key::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Key.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Key.address)
}

// int64 weight = 2;
inline void Key::clear_weight() {
  weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Key::weight() const {
  // @@protoc_insertion_point(field_get:protocol.Key.weight)
  return weight_;
}
inline void Key::set_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:protocol.Key.weight)
}

// -------------------------------------------------------------------

// DelegatedResource

// bytes from = 1;
inline void DelegatedResource::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegatedResource::from() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.from)
  return from_.GetNoArena();
}
inline void DelegatedResource::set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.from)
}
inline void DelegatedResource::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DelegatedResource.from)
}
inline void DelegatedResource::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DelegatedResource.from)
}
inline void DelegatedResource::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DelegatedResource.from)
}
inline std::string* DelegatedResource::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DelegatedResource.from)
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegatedResource::release_from() {
  // @@protoc_insertion_point(field_release:protocol.DelegatedResource.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegatedResource::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:protocol.DelegatedResource.from)
}

// bytes to = 2;
inline void DelegatedResource::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegatedResource::to() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.to)
  return to_.GetNoArena();
}
inline void DelegatedResource::set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.to)
}
inline void DelegatedResource::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DelegatedResource.to)
}
inline void DelegatedResource::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DelegatedResource.to)
}
inline void DelegatedResource::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DelegatedResource.to)
}
inline std::string* DelegatedResource::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DelegatedResource.to)
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegatedResource::release_to() {
  // @@protoc_insertion_point(field_release:protocol.DelegatedResource.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegatedResource::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:protocol.DelegatedResource.to)
}

// int64 frozen_balance_for_bandwidth = 3;
inline void DelegatedResource::clear_frozen_balance_for_bandwidth() {
  frozen_balance_for_bandwidth_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelegatedResource::frozen_balance_for_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.frozen_balance_for_bandwidth)
  return frozen_balance_for_bandwidth_;
}
inline void DelegatedResource::set_frozen_balance_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frozen_balance_for_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.frozen_balance_for_bandwidth)
}

// int64 frozen_balance_for_energy = 4;
inline void DelegatedResource::clear_frozen_balance_for_energy() {
  frozen_balance_for_energy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelegatedResource::frozen_balance_for_energy() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.frozen_balance_for_energy)
  return frozen_balance_for_energy_;
}
inline void DelegatedResource::set_frozen_balance_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  frozen_balance_for_energy_ = value;
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.frozen_balance_for_energy)
}

// int64 expire_time_for_bandwidth = 5;
inline void DelegatedResource::clear_expire_time_for_bandwidth() {
  expire_time_for_bandwidth_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelegatedResource::expire_time_for_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.expire_time_for_bandwidth)
  return expire_time_for_bandwidth_;
}
inline void DelegatedResource::set_expire_time_for_bandwidth(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_time_for_bandwidth_ = value;
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.expire_time_for_bandwidth)
}

// int64 expire_time_for_energy = 6;
inline void DelegatedResource::clear_expire_time_for_energy() {
  expire_time_for_energy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DelegatedResource::expire_time_for_energy() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResource.expire_time_for_energy)
  return expire_time_for_energy_;
}
inline void DelegatedResource::set_expire_time_for_energy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expire_time_for_energy_ = value;
  // @@protoc_insertion_point(field_set:protocol.DelegatedResource.expire_time_for_energy)
}

// -------------------------------------------------------------------

// authority

// .protocol.AccountId account = 1;
inline bool authority::has_account() const {
  return this != internal_default_instance() && account_ != nullptr;
}
inline void authority::clear_account() {
  if (GetArenaNoVirtual() == nullptr && account_ != nullptr) {
    delete account_;
  }
  account_ = nullptr;
}
inline const ::protocol::AccountId& authority::account() const {
  const ::protocol::AccountId* p = account_;
  // @@protoc_insertion_point(field_get:protocol.authority.account)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::AccountId*>(
      &::protocol::_AccountId_default_instance_);
}
inline ::protocol::AccountId* authority::release_account() {
  // @@protoc_insertion_point(field_release:protocol.authority.account)
  
  ::protocol::AccountId* temp = account_;
  account_ = nullptr;
  return temp;
}
inline ::protocol::AccountId* authority::mutable_account() {
  
  if (account_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::AccountId>(GetArenaNoVirtual());
    account_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.authority.account)
  return account_;
}
inline void authority::set_allocated_account(::protocol::AccountId* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  account_ = account;
  // @@protoc_insertion_point(field_set_allocated:protocol.authority.account)
}

// bytes permission_name = 2;
inline void authority::clear_permission_name() {
  permission_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& authority::permission_name() const {
  // @@protoc_insertion_point(field_get:protocol.authority.permission_name)
  return permission_name_.GetNoArena();
}
inline void authority::set_permission_name(const std::string& value) {
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.authority.permission_name)
}
inline void authority::set_permission_name(std::string&& value) {
  
  permission_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.authority.permission_name)
}
inline void authority::set_permission_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.authority.permission_name)
}
inline void authority::set_permission_name(const void* value, size_t size) {
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.authority.permission_name)
}
inline std::string* authority::mutable_permission_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.authority.permission_name)
  return permission_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* authority::release_permission_name() {
  // @@protoc_insertion_point(field_release:protocol.authority.permission_name)
  
  return permission_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void authority::set_allocated_permission_name(std::string* permission_name) {
  if (permission_name != nullptr) {
    
  } else {
    
  }
  permission_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.authority.permission_name)
}

// -------------------------------------------------------------------

// Permission

// .protocol.Permission.PermissionType type = 1;
inline void Permission::clear_type() {
  type_ = 0;
}
inline ::protocol::Permission_PermissionType Permission::type() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.type)
  return static_cast< ::protocol::Permission_PermissionType >(type_);
}
inline void Permission::set_type(::protocol::Permission_PermissionType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Permission.type)
}

// int32 id = 2;
inline void Permission::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Permission::id() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.id)
  return id_;
}
inline void Permission::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Permission.id)
}

// string permission_name = 3;
inline void Permission::clear_permission_name() {
  permission_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Permission::permission_name() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.permission_name)
  return permission_name_.GetNoArena();
}
inline void Permission::set_permission_name(const std::string& value) {
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Permission.permission_name)
}
inline void Permission::set_permission_name(std::string&& value) {
  
  permission_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Permission.permission_name)
}
inline void Permission::set_permission_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Permission.permission_name)
}
inline void Permission::set_permission_name(const char* value, size_t size) {
  
  permission_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Permission.permission_name)
}
inline std::string* Permission::mutable_permission_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Permission.permission_name)
  return permission_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Permission::release_permission_name() {
  // @@protoc_insertion_point(field_release:protocol.Permission.permission_name)
  
  return permission_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Permission::set_allocated_permission_name(std::string* permission_name) {
  if (permission_name != nullptr) {
    
  } else {
    
  }
  permission_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), permission_name);
  // @@protoc_insertion_point(field_set_allocated:protocol.Permission.permission_name)
}

// int64 threshold = 4;
inline void Permission::clear_threshold() {
  threshold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Permission::threshold() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.threshold)
  return threshold_;
}
inline void Permission::set_threshold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:protocol.Permission.threshold)
}

// int32 parent_id = 5;
inline void Permission::clear_parent_id() {
  parent_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Permission::parent_id() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.parent_id)
  return parent_id_;
}
inline void Permission::set_parent_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Permission.parent_id)
}

// bytes operations = 6;
inline void Permission::clear_operations() {
  operations_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Permission::operations() const {
  // @@protoc_insertion_point(field_get:protocol.Permission.operations)
  return operations_.GetNoArena();
}
inline void Permission::set_operations(const std::string& value) {
  
  operations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Permission.operations)
}
inline void Permission::set_operations(std::string&& value) {
  
  operations_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Permission.operations)
}
inline void Permission::set_operations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Permission.operations)
}
inline void Permission::set_operations(const void* value, size_t size) {
  
  operations_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Permission.operations)
}
inline std::string* Permission::mutable_operations() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Permission.operations)
  return operations_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Permission::release_operations() {
  // @@protoc_insertion_point(field_release:protocol.Permission.operations)
  
  return operations_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Permission::set_allocated_operations(std::string* operations) {
  if (operations != nullptr) {
    
  } else {
    
  }
  operations_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operations);
  // @@protoc_insertion_point(field_set_allocated:protocol.Permission.operations)
}

// repeated .protocol.Key keys = 7;
inline int Permission::keys_size() const {
  return keys_.size();
}
inline void Permission::clear_keys() {
  keys_.Clear();
}
inline ::protocol::Key* Permission::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Permission.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Key >*
Permission::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Permission.keys)
  return &keys_;
}
inline const ::protocol::Key& Permission::keys(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Permission.keys)
  return keys_.Get(index);
}
inline ::protocol::Key* Permission::add_keys() {
  // @@protoc_insertion_point(field_add:protocol.Permission.keys)
  return keys_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Key >&
Permission::keys() const {
  // @@protoc_insertion_point(field_list:protocol.Permission.keys)
  return keys_;
}

// -------------------------------------------------------------------

// Witness

// bytes address = 1;
inline void Witness::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Witness::address() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.address)
  return address_.GetNoArena();
}
inline void Witness::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Witness.address)
}
inline void Witness::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Witness.address)
}
inline void Witness::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Witness.address)
}
inline void Witness::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Witness.address)
}
inline std::string* Witness::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Witness.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Witness::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Witness.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Witness::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Witness.address)
}

// int64 voteCount = 2;
inline void Witness::clear_votecount() {
  votecount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Witness::votecount() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.voteCount)
  return votecount_;
}
inline void Witness::set_votecount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  votecount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.voteCount)
}

// bytes pubKey = 3;
inline void Witness::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Witness::pubkey() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.pubKey)
  return pubkey_.GetNoArena();
}
inline void Witness::set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Witness.pubKey)
}
inline void Witness::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Witness.pubKey)
}
inline void Witness::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Witness.pubKey)
}
inline void Witness::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Witness.pubKey)
}
inline std::string* Witness::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Witness.pubKey)
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Witness::release_pubkey() {
  // @@protoc_insertion_point(field_release:protocol.Witness.pubKey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Witness::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.Witness.pubKey)
}

// string url = 4;
inline void Witness::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Witness::url() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.url)
  return url_.GetNoArena();
}
inline void Witness::set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Witness.url)
}
inline void Witness::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Witness.url)
}
inline void Witness::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Witness.url)
}
inline void Witness::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Witness.url)
}
inline std::string* Witness::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Witness.url)
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Witness::release_url() {
  // @@protoc_insertion_point(field_release:protocol.Witness.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Witness::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:protocol.Witness.url)
}

// int64 totalProduced = 5;
inline void Witness::clear_totalproduced() {
  totalproduced_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Witness::totalproduced() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.totalProduced)
  return totalproduced_;
}
inline void Witness::set_totalproduced(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalproduced_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.totalProduced)
}

// int64 totalMissed = 6;
inline void Witness::clear_totalmissed() {
  totalmissed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Witness::totalmissed() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.totalMissed)
  return totalmissed_;
}
inline void Witness::set_totalmissed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalmissed_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.totalMissed)
}

// int64 latestBlockNum = 7;
inline void Witness::clear_latestblocknum() {
  latestblocknum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Witness::latestblocknum() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.latestBlockNum)
  return latestblocknum_;
}
inline void Witness::set_latestblocknum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latestblocknum_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.latestBlockNum)
}

// int64 latestSlotNum = 8;
inline void Witness::clear_latestslotnum() {
  latestslotnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Witness::latestslotnum() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.latestSlotNum)
  return latestslotnum_;
}
inline void Witness::set_latestslotnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  latestslotnum_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.latestSlotNum)
}

// bool isJobs = 9;
inline void Witness::clear_isjobs() {
  isjobs_ = false;
}
inline bool Witness::isjobs() const {
  // @@protoc_insertion_point(field_get:protocol.Witness.isJobs)
  return isjobs_;
}
inline void Witness::set_isjobs(bool value) {
  
  isjobs_ = value;
  // @@protoc_insertion_point(field_set:protocol.Witness.isJobs)
}

// -------------------------------------------------------------------

// Votes

// bytes address = 1;
inline void Votes::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Votes::address() const {
  // @@protoc_insertion_point(field_get:protocol.Votes.address)
  return address_.GetNoArena();
}
inline void Votes::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Votes.address)
}
inline void Votes::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Votes.address)
}
inline void Votes::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Votes.address)
}
inline void Votes::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Votes.address)
}
inline std::string* Votes::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Votes.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Votes::release_address() {
  // @@protoc_insertion_point(field_release:protocol.Votes.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Votes::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.Votes.address)
}

// repeated .protocol.Vote old_votes = 2;
inline int Votes::old_votes_size() const {
  return old_votes_.size();
}
inline void Votes::clear_old_votes() {
  old_votes_.Clear();
}
inline ::protocol::Vote* Votes::mutable_old_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Votes.old_votes)
  return old_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
Votes::mutable_old_votes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Votes.old_votes)
  return &old_votes_;
}
inline const ::protocol::Vote& Votes::old_votes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Votes.old_votes)
  return old_votes_.Get(index);
}
inline ::protocol::Vote* Votes::add_old_votes() {
  // @@protoc_insertion_point(field_add:protocol.Votes.old_votes)
  return old_votes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
Votes::old_votes() const {
  // @@protoc_insertion_point(field_list:protocol.Votes.old_votes)
  return old_votes_;
}

// repeated .protocol.Vote new_votes = 3;
inline int Votes::new_votes_size() const {
  return new_votes_.size();
}
inline void Votes::clear_new_votes() {
  new_votes_.Clear();
}
inline ::protocol::Vote* Votes::mutable_new_votes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Votes.new_votes)
  return new_votes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >*
Votes::mutable_new_votes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Votes.new_votes)
  return &new_votes_;
}
inline const ::protocol::Vote& Votes::new_votes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Votes.new_votes)
  return new_votes_.Get(index);
}
inline ::protocol::Vote* Votes::add_new_votes() {
  // @@protoc_insertion_point(field_add:protocol.Votes.new_votes)
  return new_votes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Vote >&
Votes::new_votes() const {
  // @@protoc_insertion_point(field_list:protocol.Votes.new_votes)
  return new_votes_;
}

// -------------------------------------------------------------------

// TXOutput

// int64 value = 1;
inline void TXOutput::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TXOutput::value() const {
  // @@protoc_insertion_point(field_get:protocol.TXOutput.value)
  return value_;
}
inline void TXOutput::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:protocol.TXOutput.value)
}

// bytes pubKeyHash = 2;
inline void TXOutput::clear_pubkeyhash() {
  pubkeyhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TXOutput::pubkeyhash() const {
  // @@protoc_insertion_point(field_get:protocol.TXOutput.pubKeyHash)
  return pubkeyhash_.GetNoArena();
}
inline void TXOutput::set_pubkeyhash(const std::string& value) {
  
  pubkeyhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TXOutput.pubKeyHash)
}
inline void TXOutput::set_pubkeyhash(std::string&& value) {
  
  pubkeyhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TXOutput.pubKeyHash)
}
inline void TXOutput::set_pubkeyhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkeyhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TXOutput.pubKeyHash)
}
inline void TXOutput::set_pubkeyhash(const void* value, size_t size) {
  
  pubkeyhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TXOutput.pubKeyHash)
}
inline std::string* TXOutput::mutable_pubkeyhash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TXOutput.pubKeyHash)
  return pubkeyhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TXOutput::release_pubkeyhash() {
  // @@protoc_insertion_point(field_release:protocol.TXOutput.pubKeyHash)
  
  return pubkeyhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TXOutput::set_allocated_pubkeyhash(std::string* pubkeyhash) {
  if (pubkeyhash != nullptr) {
    
  } else {
    
  }
  pubkeyhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkeyhash);
  // @@protoc_insertion_point(field_set_allocated:protocol.TXOutput.pubKeyHash)
}

// -------------------------------------------------------------------

// TXInput_raw

// bytes txID = 1;
inline void TXInput_raw::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TXInput_raw::txid() const {
  // @@protoc_insertion_point(field_get:protocol.TXInput.raw.txID)
  return txid_.GetNoArena();
}
inline void TXInput_raw::set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TXInput.raw.txID)
}
inline void TXInput_raw::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TXInput.raw.txID)
}
inline void TXInput_raw::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TXInput.raw.txID)
}
inline void TXInput_raw::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TXInput.raw.txID)
}
inline std::string* TXInput_raw::mutable_txid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TXInput.raw.txID)
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TXInput_raw::release_txid() {
  // @@protoc_insertion_point(field_release:protocol.TXInput.raw.txID)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TXInput_raw::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:protocol.TXInput.raw.txID)
}

// int64 vout = 2;
inline void TXInput_raw::clear_vout() {
  vout_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TXInput_raw::vout() const {
  // @@protoc_insertion_point(field_get:protocol.TXInput.raw.vout)
  return vout_;
}
inline void TXInput_raw::set_vout(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  vout_ = value;
  // @@protoc_insertion_point(field_set:protocol.TXInput.raw.vout)
}

// bytes pubKey = 3;
inline void TXInput_raw::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TXInput_raw::pubkey() const {
  // @@protoc_insertion_point(field_get:protocol.TXInput.raw.pubKey)
  return pubkey_.GetNoArena();
}
inline void TXInput_raw::set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TXInput.raw.pubKey)
}
inline void TXInput_raw::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TXInput.raw.pubKey)
}
inline void TXInput_raw::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TXInput.raw.pubKey)
}
inline void TXInput_raw::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TXInput.raw.pubKey)
}
inline std::string* TXInput_raw::mutable_pubkey() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TXInput.raw.pubKey)
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TXInput_raw::release_pubkey() {
  // @@protoc_insertion_point(field_release:protocol.TXInput.raw.pubKey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TXInput_raw::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TXInput.raw.pubKey)
}

// -------------------------------------------------------------------

// TXInput

// .protocol.TXInput.raw raw_data = 1;
inline bool TXInput::has_raw_data() const {
  return this != internal_default_instance() && raw_data_ != nullptr;
}
inline void TXInput::clear_raw_data() {
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
}
inline const ::protocol::TXInput_raw& TXInput::raw_data() const {
  const ::protocol::TXInput_raw* p = raw_data_;
  // @@protoc_insertion_point(field_get:protocol.TXInput.raw_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::TXInput_raw*>(
      &::protocol::_TXInput_raw_default_instance_);
}
inline ::protocol::TXInput_raw* TXInput::release_raw_data() {
  // @@protoc_insertion_point(field_release:protocol.TXInput.raw_data)
  
  ::protocol::TXInput_raw* temp = raw_data_;
  raw_data_ = nullptr;
  return temp;
}
inline ::protocol::TXInput_raw* TXInput::mutable_raw_data() {
  
  if (raw_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::TXInput_raw>(GetArenaNoVirtual());
    raw_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TXInput.raw_data)
  return raw_data_;
}
inline void TXInput::set_allocated_raw_data(::protocol::TXInput_raw* raw_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete raw_data_;
  }
  if (raw_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_data, submessage_arena);
    }
    
  } else {
    
  }
  raw_data_ = raw_data;
  // @@protoc_insertion_point(field_set_allocated:protocol.TXInput.raw_data)
}

// bytes signature = 4;
inline void TXInput::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TXInput::signature() const {
  // @@protoc_insertion_point(field_get:protocol.TXInput.signature)
  return signature_.GetNoArena();
}
inline void TXInput::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TXInput.signature)
}
inline void TXInput::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TXInput.signature)
}
inline void TXInput::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TXInput.signature)
}
inline void TXInput::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TXInput.signature)
}
inline std::string* TXInput::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TXInput.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TXInput::release_signature() {
  // @@protoc_insertion_point(field_release:protocol.TXInput.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TXInput::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.TXInput.signature)
}

// -------------------------------------------------------------------

// TXOutputs

// repeated .protocol.TXOutput outputs = 1;
inline int TXOutputs::outputs_size() const {
  return outputs_.size();
}
inline void TXOutputs::clear_outputs() {
  outputs_.Clear();
}
inline ::protocol::TXOutput* TXOutputs::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TXOutputs.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TXOutput >*
TXOutputs::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TXOutputs.outputs)
  return &outputs_;
}
inline const ::protocol::TXOutput& TXOutputs::outputs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TXOutputs.outputs)
  return outputs_.Get(index);
}
inline ::protocol::TXOutput* TXOutputs::add_outputs() {
  // @@protoc_insertion_point(field_add:protocol.TXOutputs.outputs)
  return outputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TXOutput >&
TXOutputs::outputs() const {
  // @@protoc_insertion_point(field_list:protocol.TXOutputs.outputs)
  return outputs_;
}

// -------------------------------------------------------------------

// ResourceReceipt

// int64 energy_usage = 1;
inline void ResourceReceipt::clear_energy_usage() {
  energy_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::energy_usage() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.energy_usage)
  return energy_usage_;
}
inline void ResourceReceipt::set_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  energy_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.energy_usage)
}

// int64 energy_fee = 2;
inline void ResourceReceipt::clear_energy_fee() {
  energy_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::energy_fee() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.energy_fee)
  return energy_fee_;
}
inline void ResourceReceipt::set_energy_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  energy_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.energy_fee)
}

// int64 origin_energy_usage = 3;
inline void ResourceReceipt::clear_origin_energy_usage() {
  origin_energy_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::origin_energy_usage() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.origin_energy_usage)
  return origin_energy_usage_;
}
inline void ResourceReceipt::set_origin_energy_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  origin_energy_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.origin_energy_usage)
}

// int64 energy_usage_total = 4;
inline void ResourceReceipt::clear_energy_usage_total() {
  energy_usage_total_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::energy_usage_total() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.energy_usage_total)
  return energy_usage_total_;
}
inline void ResourceReceipt::set_energy_usage_total(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  energy_usage_total_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.energy_usage_total)
}

// int64 net_usage = 5;
inline void ResourceReceipt::clear_net_usage() {
  net_usage_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::net_usage() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.net_usage)
  return net_usage_;
}
inline void ResourceReceipt::set_net_usage(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  net_usage_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.net_usage)
}

// int64 net_fee = 6;
inline void ResourceReceipt::clear_net_fee() {
  net_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ResourceReceipt::net_fee() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.net_fee)
  return net_fee_;
}
inline void ResourceReceipt::set_net_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  net_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.net_fee)
}

// .protocol.Transaction.Result.contractResult result = 7;
inline void ResourceReceipt::clear_result() {
  result_ = 0;
}
inline ::protocol::Transaction_Result_contractResult ResourceReceipt::result() const {
  // @@protoc_insertion_point(field_get:protocol.ResourceReceipt.result)
  return static_cast< ::protocol::Transaction_Result_contractResult >(result_);
}
inline void ResourceReceipt::set_result(::protocol::Transaction_Result_contractResult value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.ResourceReceipt.result)
}

// -------------------------------------------------------------------

// Transaction_Contract

// .protocol.Transaction.Contract.ContractType type = 1;
inline void Transaction_Contract::clear_type() {
  type_ = 0;
}
inline ::protocol::Transaction_Contract_ContractType Transaction_Contract::type() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Contract.type)
  return static_cast< ::protocol::Transaction_Contract_ContractType >(type_);
}
inline void Transaction_Contract::set_type(::protocol::Transaction_Contract_ContractType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Contract.type)
}

// .google.protobuf.Any parameter = 2;
inline bool Transaction_Contract::has_parameter() const {
  return this != internal_default_instance() && parameter_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::Any& Transaction_Contract::parameter() const {
  const PROTOBUF_NAMESPACE_ID::Any* p = parameter_;
  // @@protoc_insertion_point(field_get:protocol.Transaction.Contract.parameter)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Any*>(
      &PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::Any* Transaction_Contract::release_parameter() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.Contract.parameter)
  
  PROTOBUF_NAMESPACE_ID::Any* temp = parameter_;
  parameter_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Any* Transaction_Contract::mutable_parameter() {
  
  if (parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Any>(GetArenaNoVirtual());
    parameter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.Contract.parameter)
  return parameter_;
}
inline void Transaction_Contract::set_allocated_parameter(PROTOBUF_NAMESPACE_ID::Any* parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameter_);
  }
  if (parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameter, submessage_arena);
    }
    
  } else {
    
  }
  parameter_ = parameter;
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.Contract.parameter)
}

// bytes provider = 3;
inline void Transaction_Contract::clear_provider() {
  provider_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_Contract::provider() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Contract.provider)
  return provider_.GetNoArena();
}
inline void Transaction_Contract::set_provider(const std::string& value) {
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.Contract.provider)
}
inline void Transaction_Contract::set_provider(std::string&& value) {
  
  provider_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.Contract.provider)
}
inline void Transaction_Contract::set_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.Contract.provider)
}
inline void Transaction_Contract::set_provider(const void* value, size_t size) {
  
  provider_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.Contract.provider)
}
inline std::string* Transaction_Contract::mutable_provider() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.Contract.provider)
  return provider_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_Contract::release_provider() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.Contract.provider)
  
  return provider_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_Contract::set_allocated_provider(std::string* provider) {
  if (provider != nullptr) {
    
  } else {
    
  }
  provider_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.Contract.provider)
}

// bytes ContractName = 4;
inline void Transaction_Contract::clear_contractname() {
  contractname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_Contract::contractname() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Contract.ContractName)
  return contractname_.GetNoArena();
}
inline void Transaction_Contract::set_contractname(const std::string& value) {
  
  contractname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.Contract.ContractName)
}
inline void Transaction_Contract::set_contractname(std::string&& value) {
  
  contractname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.Contract.ContractName)
}
inline void Transaction_Contract::set_contractname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contractname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.Contract.ContractName)
}
inline void Transaction_Contract::set_contractname(const void* value, size_t size) {
  
  contractname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.Contract.ContractName)
}
inline std::string* Transaction_Contract::mutable_contractname() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.Contract.ContractName)
  return contractname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_Contract::release_contractname() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.Contract.ContractName)
  
  return contractname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_Contract::set_allocated_contractname(std::string* contractname) {
  if (contractname != nullptr) {
    
  } else {
    
  }
  contractname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contractname);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.Contract.ContractName)
}

// int32 Permission_id = 5;
inline void Transaction_Contract::clear_permission_id() {
  permission_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction_Contract::permission_id() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Contract.Permission_id)
  return permission_id_;
}
inline void Transaction_Contract::set_permission_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  permission_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Contract.Permission_id)
}

// -------------------------------------------------------------------

// Transaction_Result

// int64 fee = 1;
inline void Transaction_Result::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::fee() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.fee)
  return fee_;
}
inline void Transaction_Result::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.fee)
}

// .protocol.Transaction.Result.code ret = 2;
inline void Transaction_Result::clear_ret() {
  ret_ = 0;
}
inline ::protocol::Transaction_Result_code Transaction_Result::ret() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.ret)
  return static_cast< ::protocol::Transaction_Result_code >(ret_);
}
inline void Transaction_Result::set_ret(::protocol::Transaction_Result_code value) {
  
  ret_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.ret)
}

// .protocol.Transaction.Result.contractResult contractRet = 3;
inline void Transaction_Result::clear_contractret() {
  contractret_ = 0;
}
inline ::protocol::Transaction_Result_contractResult Transaction_Result::contractret() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.contractRet)
  return static_cast< ::protocol::Transaction_Result_contractResult >(contractret_);
}
inline void Transaction_Result::set_contractret(::protocol::Transaction_Result_contractResult value) {
  
  contractret_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.contractRet)
}

// string assetIssueID = 14;
inline void Transaction_Result::clear_assetissueid() {
  assetissueid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_Result::assetissueid() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.assetIssueID)
  return assetissueid_.GetNoArena();
}
inline void Transaction_Result::set_assetissueid(const std::string& value) {
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.assetIssueID)
}
inline void Transaction_Result::set_assetissueid(std::string&& value) {
  
  assetissueid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.Result.assetIssueID)
}
inline void Transaction_Result::set_assetissueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.Result.assetIssueID)
}
inline void Transaction_Result::set_assetissueid(const char* value, size_t size) {
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.Result.assetIssueID)
}
inline std::string* Transaction_Result::mutable_assetissueid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.Result.assetIssueID)
  return assetissueid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_Result::release_assetissueid() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.Result.assetIssueID)
  
  return assetissueid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_Result::set_allocated_assetissueid(std::string* assetissueid) {
  if (assetissueid != nullptr) {
    
  } else {
    
  }
  assetissueid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetissueid);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.Result.assetIssueID)
}

// int64 withdraw_amount = 15;
inline void Transaction_Result::clear_withdraw_amount() {
  withdraw_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::withdraw_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.withdraw_amount)
  return withdraw_amount_;
}
inline void Transaction_Result::set_withdraw_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdraw_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.withdraw_amount)
}

// int64 unfreeze_amount = 16;
inline void Transaction_Result::clear_unfreeze_amount() {
  unfreeze_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::unfreeze_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.unfreeze_amount)
  return unfreeze_amount_;
}
inline void Transaction_Result::set_unfreeze_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unfreeze_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.unfreeze_amount)
}

// int64 exchange_received_amount = 18;
inline void Transaction_Result::clear_exchange_received_amount() {
  exchange_received_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::exchange_received_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.exchange_received_amount)
  return exchange_received_amount_;
}
inline void Transaction_Result::set_exchange_received_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_received_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.exchange_received_amount)
}

// int64 exchange_inject_another_amount = 19;
inline void Transaction_Result::clear_exchange_inject_another_amount() {
  exchange_inject_another_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::exchange_inject_another_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.exchange_inject_another_amount)
  return exchange_inject_another_amount_;
}
inline void Transaction_Result::set_exchange_inject_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_inject_another_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.exchange_inject_another_amount)
}

// int64 exchange_withdraw_another_amount = 20;
inline void Transaction_Result::clear_exchange_withdraw_another_amount() {
  exchange_withdraw_another_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::exchange_withdraw_another_amount() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.exchange_withdraw_another_amount)
  return exchange_withdraw_another_amount_;
}
inline void Transaction_Result::set_exchange_withdraw_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_withdraw_another_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.exchange_withdraw_another_amount)
}

// int64 exchange_id = 21;
inline void Transaction_Result::clear_exchange_id() {
  exchange_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.exchange_id)
  return exchange_id_;
}
inline void Transaction_Result::set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.exchange_id)
}

// int64 shielded_transaction_fee = 22;
inline void Transaction_Result::clear_shielded_transaction_fee() {
  shielded_transaction_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_Result::shielded_transaction_fee() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.Result.shielded_transaction_fee)
  return shielded_transaction_fee_;
}
inline void Transaction_Result::set_shielded_transaction_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shielded_transaction_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.Result.shielded_transaction_fee)
}

// -------------------------------------------------------------------

// Transaction_raw

// bytes ref_block_bytes = 1;
inline void Transaction_raw::clear_ref_block_bytes() {
  ref_block_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_raw::ref_block_bytes() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.ref_block_bytes)
  return ref_block_bytes_.GetNoArena();
}
inline void Transaction_raw::set_ref_block_bytes(const std::string& value) {
  
  ref_block_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.ref_block_bytes)
}
inline void Transaction_raw::set_ref_block_bytes(std::string&& value) {
  
  ref_block_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.raw.ref_block_bytes)
}
inline void Transaction_raw::set_ref_block_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_block_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.raw.ref_block_bytes)
}
inline void Transaction_raw::set_ref_block_bytes(const void* value, size_t size) {
  
  ref_block_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.raw.ref_block_bytes)
}
inline std::string* Transaction_raw::mutable_ref_block_bytes() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.ref_block_bytes)
  return ref_block_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_raw::release_ref_block_bytes() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.raw.ref_block_bytes)
  
  return ref_block_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_raw::set_allocated_ref_block_bytes(std::string* ref_block_bytes) {
  if (ref_block_bytes != nullptr) {
    
  } else {
    
  }
  ref_block_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_block_bytes);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.raw.ref_block_bytes)
}

// int64 ref_block_num = 3;
inline void Transaction_raw::clear_ref_block_num() {
  ref_block_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_raw::ref_block_num() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.ref_block_num)
  return ref_block_num_;
}
inline void Transaction_raw::set_ref_block_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ref_block_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.ref_block_num)
}

// bytes ref_block_hash = 4;
inline void Transaction_raw::clear_ref_block_hash() {
  ref_block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_raw::ref_block_hash() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.ref_block_hash)
  return ref_block_hash_.GetNoArena();
}
inline void Transaction_raw::set_ref_block_hash(const std::string& value) {
  
  ref_block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.ref_block_hash)
}
inline void Transaction_raw::set_ref_block_hash(std::string&& value) {
  
  ref_block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.raw.ref_block_hash)
}
inline void Transaction_raw::set_ref_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ref_block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.raw.ref_block_hash)
}
inline void Transaction_raw::set_ref_block_hash(const void* value, size_t size) {
  
  ref_block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.raw.ref_block_hash)
}
inline std::string* Transaction_raw::mutable_ref_block_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.ref_block_hash)
  return ref_block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_raw::release_ref_block_hash() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.raw.ref_block_hash)
  
  return ref_block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_raw::set_allocated_ref_block_hash(std::string* ref_block_hash) {
  if (ref_block_hash != nullptr) {
    
  } else {
    
  }
  ref_block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ref_block_hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.raw.ref_block_hash)
}

// int64 expiration = 8;
inline void Transaction_raw::clear_expiration() {
  expiration_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_raw::expiration() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.expiration)
  return expiration_;
}
inline void Transaction_raw::set_expiration(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.expiration)
}

// repeated .protocol.authority auths = 9;
inline int Transaction_raw::auths_size() const {
  return auths_.size();
}
inline void Transaction_raw::clear_auths() {
  auths_.Clear();
}
inline ::protocol::authority* Transaction_raw::mutable_auths(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.auths)
  return auths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::authority >*
Transaction_raw::mutable_auths() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transaction.raw.auths)
  return &auths_;
}
inline const ::protocol::authority& Transaction_raw::auths(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.auths)
  return auths_.Get(index);
}
inline ::protocol::authority* Transaction_raw::add_auths() {
  // @@protoc_insertion_point(field_add:protocol.Transaction.raw.auths)
  return auths_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::authority >&
Transaction_raw::auths() const {
  // @@protoc_insertion_point(field_list:protocol.Transaction.raw.auths)
  return auths_;
}

// bytes data = 10;
inline void Transaction_raw::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_raw::data() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.data)
  return data_.GetNoArena();
}
inline void Transaction_raw::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.data)
}
inline void Transaction_raw::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.raw.data)
}
inline void Transaction_raw::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.raw.data)
}
inline void Transaction_raw::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.raw.data)
}
inline std::string* Transaction_raw::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_raw::release_data() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.raw.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_raw::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.raw.data)
}

// repeated .protocol.Transaction.Contract contract = 11;
inline int Transaction_raw::contract_size() const {
  return contract_.size();
}
inline void Transaction_raw::clear_contract() {
  contract_.Clear();
}
inline ::protocol::Transaction_Contract* Transaction_raw::mutable_contract(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.contract)
  return contract_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Contract >*
Transaction_raw::mutable_contract() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transaction.raw.contract)
  return &contract_;
}
inline const ::protocol::Transaction_Contract& Transaction_raw::contract(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.contract)
  return contract_.Get(index);
}
inline ::protocol::Transaction_Contract* Transaction_raw::add_contract() {
  // @@protoc_insertion_point(field_add:protocol.Transaction.raw.contract)
  return contract_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Contract >&
Transaction_raw::contract() const {
  // @@protoc_insertion_point(field_list:protocol.Transaction.raw.contract)
  return contract_;
}

// bytes scripts = 12;
inline void Transaction_raw::clear_scripts() {
  scripts_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction_raw::scripts() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.scripts)
  return scripts_.GetNoArena();
}
inline void Transaction_raw::set_scripts(const std::string& value) {
  
  scripts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.scripts)
}
inline void Transaction_raw::set_scripts(std::string&& value) {
  
  scripts_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.Transaction.raw.scripts)
}
inline void Transaction_raw::set_scripts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scripts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.raw.scripts)
}
inline void Transaction_raw::set_scripts(const void* value, size_t size) {
  
  scripts_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.raw.scripts)
}
inline std::string* Transaction_raw::mutable_scripts() {
  
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw.scripts)
  return scripts_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction_raw::release_scripts() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.raw.scripts)
  
  return scripts_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction_raw::set_allocated_scripts(std::string* scripts) {
  if (scripts != nullptr) {
    
  } else {
    
  }
  scripts_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scripts);
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.raw.scripts)
}

// int64 timestamp = 14;
inline void Transaction_raw::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_raw::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.timestamp)
  return timestamp_;
}
inline void Transaction_raw::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.timestamp)
}

// int64 fee_limit = 18;
inline void Transaction_raw::clear_fee_limit() {
  fee_limit_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction_raw::fee_limit() const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw.fee_limit)
  return fee_limit_;
}
inline void Transaction_raw::set_fee_limit(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_limit_ = value;
  // @@protoc_insertion_point(field_set:protocol.Transaction.raw.fee_limit)
}

// -------------------------------------------------------------------

// Transaction

// .protocol.Transaction.raw raw_data = 1;
inline bool Transaction::has_raw_data() const {
  return this != internal_default_instance() && raw_data_ != nullptr;
}
inline void Transaction::clear_raw_data() {
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
}
inline const ::protocol::Transaction_raw& Transaction::raw_data() const {
  const ::protocol::Transaction_raw* p = raw_data_;
  // @@protoc_insertion_point(field_get:protocol.Transaction.raw_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Transaction_raw*>(
      &::protocol::_Transaction_raw_default_instance_);
}
inline ::protocol::Transaction_raw* Transaction::release_raw_data() {
  // @@protoc_insertion_point(field_release:protocol.Transaction.raw_data)
  
  ::protocol::Transaction_raw* temp = raw_data_;
  raw_data_ = nullptr;
  return temp;
}
inline ::protocol::Transaction_raw* Transaction::mutable_raw_data() {
  
  if (raw_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Transaction_raw>(GetArenaNoVirtual());
    raw_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.raw_data)
  return raw_data_;
}
inline void Transaction::set_allocated_raw_data(::protocol::Transaction_raw* raw_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete raw_data_;
  }
  if (raw_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_data, submessage_arena);
    }
    
  } else {
    
  }
  raw_data_ = raw_data;
  // @@protoc_insertion_point(field_set_allocated:protocol.Transaction.raw_data)
}

// repeated bytes signature = 2;
inline int Transaction::signature_size() const {
  return signature_.size();
}
inline void Transaction::clear_signature() {
  signature_.Clear();
}
inline const std::string& Transaction::signature(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.signature)
  return signature_.Get(index);
}
inline std::string* Transaction::mutable_signature(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.signature)
  return signature_.Mutable(index);
}
inline void Transaction::set_signature(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Transaction.signature)
  signature_.Mutable(index)->assign(value);
}
inline void Transaction::set_signature(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.Transaction.signature)
  signature_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_signature(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Transaction.signature)
}
inline void Transaction::set_signature(int index, const void* value, size_t size) {
  signature_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Transaction.signature)
}
inline std::string* Transaction::add_signature() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Transaction.signature)
  return signature_.Add();
}
inline void Transaction::add_signature(const std::string& value) {
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Transaction.signature)
}
inline void Transaction::add_signature(std::string&& value) {
  signature_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.Transaction.signature)
}
inline void Transaction::add_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  signature_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Transaction.signature)
}
inline void Transaction::add_signature(const void* value, size_t size) {
  signature_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Transaction.signature)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::signature() const {
  // @@protoc_insertion_point(field_list:protocol.Transaction.signature)
  return signature_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_signature() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transaction.signature)
  return &signature_;
}

// repeated .protocol.Transaction.Result ret = 5;
inline int Transaction::ret_size() const {
  return ret_.size();
}
inline void Transaction::clear_ret() {
  ret_.Clear();
}
inline ::protocol::Transaction_Result* Transaction::mutable_ret(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transaction.ret)
  return ret_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Result >*
Transaction::mutable_ret() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transaction.ret)
  return &ret_;
}
inline const ::protocol::Transaction_Result& Transaction::ret(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transaction.ret)
  return ret_.Get(index);
}
inline ::protocol::Transaction_Result* Transaction::add_ret() {
  // @@protoc_insertion_point(field_add:protocol.Transaction.ret)
  return ret_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction_Result >&
Transaction::ret() const {
  // @@protoc_insertion_point(field_list:protocol.Transaction.ret)
  return ret_;
}

// -------------------------------------------------------------------

// TransactionInfo_Log

// bytes address = 1;
inline void TransactionInfo_Log::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo_Log::address() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.Log.address)
  return address_.GetNoArena();
}
inline void TransactionInfo_Log::set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.Log.address)
}
inline void TransactionInfo_Log::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.Log.address)
}
inline void TransactionInfo_Log::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.Log.address)
}
inline void TransactionInfo_Log::set_address(const void* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.Log.address)
}
inline std::string* TransactionInfo_Log::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.Log.address)
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo_Log::release_address() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.Log.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo_Log::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.Log.address)
}

// repeated bytes topics = 2;
inline int TransactionInfo_Log::topics_size() const {
  return topics_.size();
}
inline void TransactionInfo_Log::clear_topics() {
  topics_.Clear();
}
inline const std::string& TransactionInfo_Log::topics(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.Log.topics)
  return topics_.Get(index);
}
inline std::string* TransactionInfo_Log::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.Log.topics)
  return topics_.Mutable(index);
}
inline void TransactionInfo_Log::set_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.Log.topics)
  topics_.Mutable(index)->assign(value);
}
inline void TransactionInfo_Log::set_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.Log.topics)
  topics_.Mutable(index)->assign(std::move(value));
}
inline void TransactionInfo_Log::set_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.Log.topics)
}
inline void TransactionInfo_Log::set_topics(int index, const void* value, size_t size) {
  topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.Log.topics)
}
inline std::string* TransactionInfo_Log::add_topics() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TransactionInfo.Log.topics)
  return topics_.Add();
}
inline void TransactionInfo_Log::add_topics(const std::string& value) {
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.Log.topics)
}
inline void TransactionInfo_Log::add_topics(std::string&& value) {
  topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.Log.topics)
}
inline void TransactionInfo_Log::add_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TransactionInfo.Log.topics)
}
inline void TransactionInfo_Log::add_topics(const void* value, size_t size) {
  topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TransactionInfo.Log.topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionInfo_Log::topics() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionInfo.Log.topics)
  return topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionInfo_Log::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionInfo.Log.topics)
  return &topics_;
}

// bytes data = 3;
inline void TransactionInfo_Log::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo_Log::data() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.Log.data)
  return data_.GetNoArena();
}
inline void TransactionInfo_Log::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.Log.data)
}
inline void TransactionInfo_Log::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.Log.data)
}
inline void TransactionInfo_Log::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.Log.data)
}
inline void TransactionInfo_Log::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.Log.data)
}
inline std::string* TransactionInfo_Log::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.Log.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo_Log::release_data() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.Log.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo_Log::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.Log.data)
}

// -------------------------------------------------------------------

// TransactionInfo

// bytes id = 1;
inline void TransactionInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo::id() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.id)
  return id_.GetNoArena();
}
inline void TransactionInfo::set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.id)
}
inline void TransactionInfo::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.id)
}
inline void TransactionInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.id)
}
inline void TransactionInfo::set_id(const void* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.id)
}
inline std::string* TransactionInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.id)
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo::release_id() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.id)
}

// int64 fee = 2;
inline void TransactionInfo::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::fee() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.fee)
  return fee_;
}
inline void TransactionInfo::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.fee)
}

// int64 blockNumber = 3;
inline void TransactionInfo::clear_blocknumber() {
  blocknumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::blocknumber() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.blockNumber)
  return blocknumber_;
}
inline void TransactionInfo::set_blocknumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocknumber_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.blockNumber)
}

// int64 blockTimeStamp = 4;
inline void TransactionInfo::clear_blocktimestamp() {
  blocktimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::blocktimestamp() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.blockTimeStamp)
  return blocktimestamp_;
}
inline void TransactionInfo::set_blocktimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocktimestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.blockTimeStamp)
}

// repeated bytes contractResult = 5;
inline int TransactionInfo::contractresult_size() const {
  return contractresult_.size();
}
inline void TransactionInfo::clear_contractresult() {
  contractresult_.Clear();
}
inline const std::string& TransactionInfo::contractresult(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.contractResult)
  return contractresult_.Get(index);
}
inline std::string* TransactionInfo::mutable_contractresult(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.contractResult)
  return contractresult_.Mutable(index);
}
inline void TransactionInfo::set_contractresult(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.contractResult)
  contractresult_.Mutable(index)->assign(value);
}
inline void TransactionInfo::set_contractresult(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.contractResult)
  contractresult_.Mutable(index)->assign(std::move(value));
}
inline void TransactionInfo::set_contractresult(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contractresult_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.contractResult)
}
inline void TransactionInfo::set_contractresult(int index, const void* value, size_t size) {
  contractresult_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.contractResult)
}
inline std::string* TransactionInfo::add_contractresult() {
  // @@protoc_insertion_point(field_add_mutable:protocol.TransactionInfo.contractResult)
  return contractresult_.Add();
}
inline void TransactionInfo::add_contractresult(const std::string& value) {
  contractresult_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.contractResult)
}
inline void TransactionInfo::add_contractresult(std::string&& value) {
  contractresult_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.contractResult)
}
inline void TransactionInfo::add_contractresult(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  contractresult_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.TransactionInfo.contractResult)
}
inline void TransactionInfo::add_contractresult(const void* value, size_t size) {
  contractresult_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.TransactionInfo.contractResult)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TransactionInfo::contractresult() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionInfo.contractResult)
  return contractresult_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TransactionInfo::mutable_contractresult() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionInfo.contractResult)
  return &contractresult_;
}

// bytes contract_address = 6;
inline void TransactionInfo::clear_contract_address() {
  contract_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo::contract_address() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.contract_address)
  return contract_address_.GetNoArena();
}
inline void TransactionInfo::set_contract_address(const std::string& value) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.contract_address)
}
inline void TransactionInfo::set_contract_address(std::string&& value) {
  
  contract_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.contract_address)
}
inline void TransactionInfo::set_contract_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.contract_address)
}
inline void TransactionInfo::set_contract_address(const void* value, size_t size) {
  
  contract_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.contract_address)
}
inline std::string* TransactionInfo::mutable_contract_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.contract_address)
  return contract_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo::release_contract_address() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.contract_address)
  
  return contract_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo::set_allocated_contract_address(std::string* contract_address) {
  if (contract_address != nullptr) {
    
  } else {
    
  }
  contract_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.contract_address)
}

// .protocol.ResourceReceipt receipt = 7;
inline bool TransactionInfo::has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline void TransactionInfo::clear_receipt() {
  if (GetArenaNoVirtual() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
inline const ::protocol::ResourceReceipt& TransactionInfo::receipt() const {
  const ::protocol::ResourceReceipt* p = receipt_;
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.receipt)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::ResourceReceipt*>(
      &::protocol::_ResourceReceipt_default_instance_);
}
inline ::protocol::ResourceReceipt* TransactionInfo::release_receipt() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.receipt)
  
  ::protocol::ResourceReceipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::protocol::ResourceReceipt* TransactionInfo::mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::ResourceReceipt>(GetArenaNoVirtual());
    receipt_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.receipt)
  return receipt_;
}
inline void TransactionInfo::set_allocated_receipt(::protocol::ResourceReceipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete receipt_;
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.receipt)
}

// repeated .protocol.TransactionInfo.Log log = 8;
inline int TransactionInfo::log_size() const {
  return log_.size();
}
inline void TransactionInfo::clear_log() {
  log_.Clear();
}
inline ::protocol::TransactionInfo_Log* TransactionInfo::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo_Log >*
TransactionInfo::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionInfo.log)
  return &log_;
}
inline const ::protocol::TransactionInfo_Log& TransactionInfo::log(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.log)
  return log_.Get(index);
}
inline ::protocol::TransactionInfo_Log* TransactionInfo::add_log() {
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.log)
  return log_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo_Log >&
TransactionInfo::log() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionInfo.log)
  return log_;
}

// .protocol.TransactionInfo.code result = 9;
inline void TransactionInfo::clear_result() {
  result_ = 0;
}
inline ::protocol::TransactionInfo_code TransactionInfo::result() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.result)
  return static_cast< ::protocol::TransactionInfo_code >(result_);
}
inline void TransactionInfo::set_result(::protocol::TransactionInfo_code value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.result)
}

// bytes resMessage = 10;
inline void TransactionInfo::clear_resmessage() {
  resmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo::resmessage() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.resMessage)
  return resmessage_.GetNoArena();
}
inline void TransactionInfo::set_resmessage(const std::string& value) {
  
  resmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.resMessage)
}
inline void TransactionInfo::set_resmessage(std::string&& value) {
  
  resmessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.resMessage)
}
inline void TransactionInfo::set_resmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.resMessage)
}
inline void TransactionInfo::set_resmessage(const void* value, size_t size) {
  
  resmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.resMessage)
}
inline std::string* TransactionInfo::mutable_resmessage() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.resMessage)
  return resmessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo::release_resmessage() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.resMessage)
  
  return resmessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo::set_allocated_resmessage(std::string* resmessage) {
  if (resmessage != nullptr) {
    
  } else {
    
  }
  resmessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resmessage);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.resMessage)
}

// string assetIssueID = 14;
inline void TransactionInfo::clear_assetissueid() {
  assetissueid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionInfo::assetissueid() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.assetIssueID)
  return assetissueid_.GetNoArena();
}
inline void TransactionInfo::set_assetissueid(const std::string& value) {
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.assetIssueID)
}
inline void TransactionInfo::set_assetissueid(std::string&& value) {
  
  assetissueid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionInfo.assetIssueID)
}
inline void TransactionInfo::set_assetissueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionInfo.assetIssueID)
}
inline void TransactionInfo::set_assetissueid(const char* value, size_t size) {
  
  assetissueid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionInfo.assetIssueID)
}
inline std::string* TransactionInfo::mutable_assetissueid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.assetIssueID)
  return assetissueid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionInfo::release_assetissueid() {
  // @@protoc_insertion_point(field_release:protocol.TransactionInfo.assetIssueID)
  
  return assetissueid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionInfo::set_allocated_assetissueid(std::string* assetissueid) {
  if (assetissueid != nullptr) {
    
  } else {
    
  }
  assetissueid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), assetissueid);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionInfo.assetIssueID)
}

// int64 withdraw_amount = 15;
inline void TransactionInfo::clear_withdraw_amount() {
  withdraw_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::withdraw_amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.withdraw_amount)
  return withdraw_amount_;
}
inline void TransactionInfo::set_withdraw_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  withdraw_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.withdraw_amount)
}

// int64 unfreeze_amount = 16;
inline void TransactionInfo::clear_unfreeze_amount() {
  unfreeze_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::unfreeze_amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.unfreeze_amount)
  return unfreeze_amount_;
}
inline void TransactionInfo::set_unfreeze_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unfreeze_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.unfreeze_amount)
}

// repeated .protocol.InternalTransaction internal_transactions = 17;
inline int TransactionInfo::internal_transactions_size() const {
  return internal_transactions_.size();
}
inline void TransactionInfo::clear_internal_transactions() {
  internal_transactions_.Clear();
}
inline ::protocol::InternalTransaction* TransactionInfo::mutable_internal_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionInfo.internal_transactions)
  return internal_transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction >*
TransactionInfo::mutable_internal_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionInfo.internal_transactions)
  return &internal_transactions_;
}
inline const ::protocol::InternalTransaction& TransactionInfo::internal_transactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.internal_transactions)
  return internal_transactions_.Get(index);
}
inline ::protocol::InternalTransaction* TransactionInfo::add_internal_transactions() {
  // @@protoc_insertion_point(field_add:protocol.TransactionInfo.internal_transactions)
  return internal_transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction >&
TransactionInfo::internal_transactions() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionInfo.internal_transactions)
  return internal_transactions_;
}

// int64 exchange_received_amount = 18;
inline void TransactionInfo::clear_exchange_received_amount() {
  exchange_received_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::exchange_received_amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.exchange_received_amount)
  return exchange_received_amount_;
}
inline void TransactionInfo::set_exchange_received_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_received_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.exchange_received_amount)
}

// int64 exchange_inject_another_amount = 19;
inline void TransactionInfo::clear_exchange_inject_another_amount() {
  exchange_inject_another_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::exchange_inject_another_amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.exchange_inject_another_amount)
  return exchange_inject_another_amount_;
}
inline void TransactionInfo::set_exchange_inject_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_inject_another_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.exchange_inject_another_amount)
}

// int64 exchange_withdraw_another_amount = 20;
inline void TransactionInfo::clear_exchange_withdraw_another_amount() {
  exchange_withdraw_another_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::exchange_withdraw_another_amount() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.exchange_withdraw_another_amount)
  return exchange_withdraw_another_amount_;
}
inline void TransactionInfo::set_exchange_withdraw_another_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_withdraw_another_amount_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.exchange_withdraw_another_amount)
}

// int64 exchange_id = 21;
inline void TransactionInfo::clear_exchange_id() {
  exchange_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::exchange_id() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.exchange_id)
  return exchange_id_;
}
inline void TransactionInfo::set_exchange_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exchange_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.exchange_id)
}

// int64 shielded_transaction_fee = 22;
inline void TransactionInfo::clear_shielded_transaction_fee() {
  shielded_transaction_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionInfo::shielded_transaction_fee() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionInfo.shielded_transaction_fee)
  return shielded_transaction_fee_;
}
inline void TransactionInfo::set_shielded_transaction_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shielded_transaction_fee_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionInfo.shielded_transaction_fee)
}

// -------------------------------------------------------------------

// TransactionRet

// int64 blockNumber = 1;
inline void TransactionRet::clear_blocknumber() {
  blocknumber_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionRet::blocknumber() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionRet.blockNumber)
  return blocknumber_;
}
inline void TransactionRet::set_blocknumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocknumber_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionRet.blockNumber)
}

// int64 blockTimeStamp = 2;
inline void TransactionRet::clear_blocktimestamp() {
  blocktimestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TransactionRet::blocktimestamp() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionRet.blockTimeStamp)
  return blocktimestamp_;
}
inline void TransactionRet::set_blocktimestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocktimestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.TransactionRet.blockTimeStamp)
}

// repeated .protocol.TransactionInfo transactioninfo = 3;
inline int TransactionRet::transactioninfo_size() const {
  return transactioninfo_.size();
}
inline void TransactionRet::clear_transactioninfo() {
  transactioninfo_.Clear();
}
inline ::protocol::TransactionInfo* TransactionRet::mutable_transactioninfo(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.TransactionRet.transactioninfo)
  return transactioninfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo >*
TransactionRet::mutable_transactioninfo() {
  // @@protoc_insertion_point(field_mutable_list:protocol.TransactionRet.transactioninfo)
  return &transactioninfo_;
}
inline const ::protocol::TransactionInfo& TransactionRet::transactioninfo(int index) const {
  // @@protoc_insertion_point(field_get:protocol.TransactionRet.transactioninfo)
  return transactioninfo_.Get(index);
}
inline ::protocol::TransactionInfo* TransactionRet::add_transactioninfo() {
  // @@protoc_insertion_point(field_add:protocol.TransactionRet.transactioninfo)
  return transactioninfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::TransactionInfo >&
TransactionRet::transactioninfo() const {
  // @@protoc_insertion_point(field_list:protocol.TransactionRet.transactioninfo)
  return transactioninfo_;
}

// -------------------------------------------------------------------

// Transactions

// repeated .protocol.Transaction transactions = 1;
inline int Transactions::transactions_size() const {
  return transactions_.size();
}
inline void Transactions::clear_transactions() {
  transactions_.Clear();
}
inline ::protocol::Transaction* Transactions::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Transactions.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
Transactions::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Transactions.transactions)
  return &transactions_;
}
inline const ::protocol::Transaction& Transactions::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Transactions.transactions)
  return transactions_.Get(index);
}
inline ::protocol::Transaction* Transactions::add_transactions() {
  // @@protoc_insertion_point(field_add:protocol.Transactions.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
Transactions::transactions() const {
  // @@protoc_insertion_point(field_list:protocol.Transactions.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// TransactionSign

// .protocol.Transaction transaction = 1;
inline bool TransactionSign::has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline void TransactionSign::clear_transaction() {
  if (GetArenaNoVirtual() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
}
inline const ::protocol::Transaction& TransactionSign::transaction() const {
  const ::protocol::Transaction* p = transaction_;
  // @@protoc_insertion_point(field_get:protocol.TransactionSign.transaction)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Transaction*>(
      &::protocol::_Transaction_default_instance_);
}
inline ::protocol::Transaction* TransactionSign::release_transaction() {
  // @@protoc_insertion_point(field_release:protocol.TransactionSign.transaction)
  
  ::protocol::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::protocol::Transaction* TransactionSign::mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Transaction>(GetArenaNoVirtual());
    transaction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.TransactionSign.transaction)
  return transaction_;
}
inline void TransactionSign::set_allocated_transaction(::protocol::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transaction_;
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionSign.transaction)
}

// bytes privateKey = 2;
inline void TransactionSign::clear_privatekey() {
  privatekey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TransactionSign::privatekey() const {
  // @@protoc_insertion_point(field_get:protocol.TransactionSign.privateKey)
  return privatekey_.GetNoArena();
}
inline void TransactionSign::set_privatekey(const std::string& value) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.TransactionSign.privateKey)
}
inline void TransactionSign::set_privatekey(std::string&& value) {
  
  privatekey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.TransactionSign.privateKey)
}
inline void TransactionSign::set_privatekey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.TransactionSign.privateKey)
}
inline void TransactionSign::set_privatekey(const void* value, size_t size) {
  
  privatekey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.TransactionSign.privateKey)
}
inline std::string* TransactionSign::mutable_privatekey() {
  
  // @@protoc_insertion_point(field_mutable:protocol.TransactionSign.privateKey)
  return privatekey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TransactionSign::release_privatekey() {
  // @@protoc_insertion_point(field_release:protocol.TransactionSign.privateKey)
  
  return privatekey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TransactionSign::set_allocated_privatekey(std::string* privatekey) {
  if (privatekey != nullptr) {
    
  } else {
    
  }
  privatekey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), privatekey);
  // @@protoc_insertion_point(field_set_allocated:protocol.TransactionSign.privateKey)
}

// -------------------------------------------------------------------

// BlockHeader_raw

// int64 timestamp = 1;
inline void BlockHeader_raw::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeader_raw::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.timestamp)
  return timestamp_;
}
inline void BlockHeader_raw::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.timestamp)
}

// bytes txTrieRoot = 2;
inline void BlockHeader_raw::clear_txtrieroot() {
  txtrieroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader_raw::txtrieroot() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.txTrieRoot)
  return txtrieroot_.GetNoArena();
}
inline void BlockHeader_raw::set_txtrieroot(const std::string& value) {
  
  txtrieroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.txTrieRoot)
}
inline void BlockHeader_raw::set_txtrieroot(std::string&& value) {
  
  txtrieroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockHeader.raw.txTrieRoot)
}
inline void BlockHeader_raw::set_txtrieroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txtrieroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockHeader.raw.txTrieRoot)
}
inline void BlockHeader_raw::set_txtrieroot(const void* value, size_t size) {
  
  txtrieroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockHeader.raw.txTrieRoot)
}
inline std::string* BlockHeader_raw::mutable_txtrieroot() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.raw.txTrieRoot)
  return txtrieroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader_raw::release_txtrieroot() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.raw.txTrieRoot)
  
  return txtrieroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader_raw::set_allocated_txtrieroot(std::string* txtrieroot) {
  if (txtrieroot != nullptr) {
    
  } else {
    
  }
  txtrieroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txtrieroot);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.raw.txTrieRoot)
}

// bytes parentHash = 3;
inline void BlockHeader_raw::clear_parenthash() {
  parenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader_raw::parenthash() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.parentHash)
  return parenthash_.GetNoArena();
}
inline void BlockHeader_raw::set_parenthash(const std::string& value) {
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.parentHash)
}
inline void BlockHeader_raw::set_parenthash(std::string&& value) {
  
  parenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockHeader.raw.parentHash)
}
inline void BlockHeader_raw::set_parenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockHeader.raw.parentHash)
}
inline void BlockHeader_raw::set_parenthash(const void* value, size_t size) {
  
  parenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockHeader.raw.parentHash)
}
inline std::string* BlockHeader_raw::mutable_parenthash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.raw.parentHash)
  return parenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader_raw::release_parenthash() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.raw.parentHash)
  
  return parenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader_raw::set_allocated_parenthash(std::string* parenthash) {
  if (parenthash != nullptr) {
    
  } else {
    
  }
  parenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parenthash);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.raw.parentHash)
}

// int64 number = 7;
inline void BlockHeader_raw::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeader_raw::number() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.number)
  return number_;
}
inline void BlockHeader_raw::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.number)
}

// int64 witness_id = 8;
inline void BlockHeader_raw::clear_witness_id() {
  witness_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockHeader_raw::witness_id() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.witness_id)
  return witness_id_;
}
inline void BlockHeader_raw::set_witness_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  witness_id_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.witness_id)
}

// bytes witness_address = 9;
inline void BlockHeader_raw::clear_witness_address() {
  witness_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader_raw::witness_address() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.witness_address)
  return witness_address_.GetNoArena();
}
inline void BlockHeader_raw::set_witness_address(const std::string& value) {
  
  witness_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.witness_address)
}
inline void BlockHeader_raw::set_witness_address(std::string&& value) {
  
  witness_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockHeader.raw.witness_address)
}
inline void BlockHeader_raw::set_witness_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  witness_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockHeader.raw.witness_address)
}
inline void BlockHeader_raw::set_witness_address(const void* value, size_t size) {
  
  witness_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockHeader.raw.witness_address)
}
inline std::string* BlockHeader_raw::mutable_witness_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.raw.witness_address)
  return witness_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader_raw::release_witness_address() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.raw.witness_address)
  
  return witness_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader_raw::set_allocated_witness_address(std::string* witness_address) {
  if (witness_address != nullptr) {
    
  } else {
    
  }
  witness_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witness_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.raw.witness_address)
}

// int32 version = 10;
inline void BlockHeader_raw::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockHeader_raw::version() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.version)
  return version_;
}
inline void BlockHeader_raw::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.version)
}

// bytes accountStateRoot = 11;
inline void BlockHeader_raw::clear_accountstateroot() {
  accountstateroot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader_raw::accountstateroot() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw.accountStateRoot)
  return accountstateroot_.GetNoArena();
}
inline void BlockHeader_raw::set_accountstateroot(const std::string& value) {
  
  accountstateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.raw.accountStateRoot)
}
inline void BlockHeader_raw::set_accountstateroot(std::string&& value) {
  
  accountstateroot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockHeader.raw.accountStateRoot)
}
inline void BlockHeader_raw::set_accountstateroot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accountstateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockHeader.raw.accountStateRoot)
}
inline void BlockHeader_raw::set_accountstateroot(const void* value, size_t size) {
  
  accountstateroot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockHeader.raw.accountStateRoot)
}
inline std::string* BlockHeader_raw::mutable_accountstateroot() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.raw.accountStateRoot)
  return accountstateroot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader_raw::release_accountstateroot() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.raw.accountStateRoot)
  
  return accountstateroot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader_raw::set_allocated_accountstateroot(std::string* accountstateroot) {
  if (accountstateroot != nullptr) {
    
  } else {
    
  }
  accountstateroot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), accountstateroot);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.raw.accountStateRoot)
}

// -------------------------------------------------------------------

// BlockHeader

// .protocol.BlockHeader.raw raw_data = 1;
inline bool BlockHeader::has_raw_data() const {
  return this != internal_default_instance() && raw_data_ != nullptr;
}
inline void BlockHeader::clear_raw_data() {
  if (GetArenaNoVirtual() == nullptr && raw_data_ != nullptr) {
    delete raw_data_;
  }
  raw_data_ = nullptr;
}
inline const ::protocol::BlockHeader_raw& BlockHeader::raw_data() const {
  const ::protocol::BlockHeader_raw* p = raw_data_;
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.raw_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::BlockHeader_raw*>(
      &::protocol::_BlockHeader_raw_default_instance_);
}
inline ::protocol::BlockHeader_raw* BlockHeader::release_raw_data() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.raw_data)
  
  ::protocol::BlockHeader_raw* temp = raw_data_;
  raw_data_ = nullptr;
  return temp;
}
inline ::protocol::BlockHeader_raw* BlockHeader::mutable_raw_data() {
  
  if (raw_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::BlockHeader_raw>(GetArenaNoVirtual());
    raw_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.raw_data)
  return raw_data_;
}
inline void BlockHeader::set_allocated_raw_data(::protocol::BlockHeader_raw* raw_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete raw_data_;
  }
  if (raw_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      raw_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raw_data, submessage_arena);
    }
    
  } else {
    
  }
  raw_data_ = raw_data;
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.raw_data)
}

// bytes witness_signature = 2;
inline void BlockHeader::clear_witness_signature() {
  witness_signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockHeader::witness_signature() const {
  // @@protoc_insertion_point(field_get:protocol.BlockHeader.witness_signature)
  return witness_signature_.GetNoArena();
}
inline void BlockHeader::set_witness_signature(const std::string& value) {
  
  witness_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockHeader.witness_signature)
}
inline void BlockHeader::set_witness_signature(std::string&& value) {
  
  witness_signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockHeader.witness_signature)
}
inline void BlockHeader::set_witness_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  witness_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockHeader.witness_signature)
}
inline void BlockHeader::set_witness_signature(const void* value, size_t size) {
  
  witness_signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockHeader.witness_signature)
}
inline std::string* BlockHeader::mutable_witness_signature() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockHeader.witness_signature)
  return witness_signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockHeader::release_witness_signature() {
  // @@protoc_insertion_point(field_release:protocol.BlockHeader.witness_signature)
  
  return witness_signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockHeader::set_allocated_witness_signature(std::string* witness_signature) {
  if (witness_signature != nullptr) {
    
  } else {
    
  }
  witness_signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witness_signature);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockHeader.witness_signature)
}

// -------------------------------------------------------------------

// Block

// repeated .protocol.Transaction transactions = 1;
inline int Block::transactions_size() const {
  return transactions_.size();
}
inline void Block::clear_transactions() {
  transactions_.Clear();
}
inline ::protocol::Transaction* Block::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Block.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
Block::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Block.transactions)
  return &transactions_;
}
inline const ::protocol::Transaction& Block::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Block.transactions)
  return transactions_.Get(index);
}
inline ::protocol::Transaction* Block::add_transactions() {
  // @@protoc_insertion_point(field_add:protocol.Block.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
Block::transactions() const {
  // @@protoc_insertion_point(field_list:protocol.Block.transactions)
  return transactions_;
}

// .protocol.BlockHeader block_header = 2;
inline bool Block::has_block_header() const {
  return this != internal_default_instance() && block_header_ != nullptr;
}
inline void Block::clear_block_header() {
  if (GetArenaNoVirtual() == nullptr && block_header_ != nullptr) {
    delete block_header_;
  }
  block_header_ = nullptr;
}
inline const ::protocol::BlockHeader& Block::block_header() const {
  const ::protocol::BlockHeader* p = block_header_;
  // @@protoc_insertion_point(field_get:protocol.Block.block_header)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::BlockHeader*>(
      &::protocol::_BlockHeader_default_instance_);
}
inline ::protocol::BlockHeader* Block::release_block_header() {
  // @@protoc_insertion_point(field_release:protocol.Block.block_header)
  
  ::protocol::BlockHeader* temp = block_header_;
  block_header_ = nullptr;
  return temp;
}
inline ::protocol::BlockHeader* Block::mutable_block_header() {
  
  if (block_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::BlockHeader>(GetArenaNoVirtual());
    block_header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.Block.block_header)
  return block_header_;
}
inline void Block::set_allocated_block_header(::protocol::BlockHeader* block_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete block_header_;
  }
  if (block_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      block_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_header, submessage_arena);
    }
    
  } else {
    
  }
  block_header_ = block_header;
  // @@protoc_insertion_point(field_set_allocated:protocol.Block.block_header)
}

// -------------------------------------------------------------------

// ChainInventory_BlockId

// bytes hash = 1;
inline void ChainInventory_BlockId::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChainInventory_BlockId::hash() const {
  // @@protoc_insertion_point(field_get:protocol.ChainInventory.BlockId.hash)
  return hash_.GetNoArena();
}
inline void ChainInventory_BlockId::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.ChainInventory.BlockId.hash)
}
inline void ChainInventory_BlockId::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.ChainInventory.BlockId.hash)
}
inline void ChainInventory_BlockId::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.ChainInventory.BlockId.hash)
}
inline void ChainInventory_BlockId::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.ChainInventory.BlockId.hash)
}
inline std::string* ChainInventory_BlockId::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.ChainInventory.BlockId.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChainInventory_BlockId::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.ChainInventory.BlockId.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChainInventory_BlockId::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.ChainInventory.BlockId.hash)
}

// int64 number = 2;
inline void ChainInventory_BlockId::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChainInventory_BlockId::number() const {
  // @@protoc_insertion_point(field_get:protocol.ChainInventory.BlockId.number)
  return number_;
}
inline void ChainInventory_BlockId::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainInventory.BlockId.number)
}

// -------------------------------------------------------------------

// ChainInventory

// repeated .protocol.ChainInventory.BlockId ids = 1;
inline int ChainInventory::ids_size() const {
  return ids_.size();
}
inline void ChainInventory::clear_ids() {
  ids_.Clear();
}
inline ::protocol::ChainInventory_BlockId* ChainInventory::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ChainInventory.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainInventory_BlockId >*
ChainInventory::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ChainInventory.ids)
  return &ids_;
}
inline const ::protocol::ChainInventory_BlockId& ChainInventory::ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ChainInventory.ids)
  return ids_.Get(index);
}
inline ::protocol::ChainInventory_BlockId* ChainInventory::add_ids() {
  // @@protoc_insertion_point(field_add:protocol.ChainInventory.ids)
  return ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::ChainInventory_BlockId >&
ChainInventory::ids() const {
  // @@protoc_insertion_point(field_list:protocol.ChainInventory.ids)
  return ids_;
}

// int64 remain_num = 2;
inline void ChainInventory::clear_remain_num() {
  remain_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChainInventory::remain_num() const {
  // @@protoc_insertion_point(field_get:protocol.ChainInventory.remain_num)
  return remain_num_;
}
inline void ChainInventory::set_remain_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remain_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.ChainInventory.remain_num)
}

// -------------------------------------------------------------------

// BlockInventory_BlockId

// bytes hash = 1;
inline void BlockInventory_BlockId::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockInventory_BlockId::hash() const {
  // @@protoc_insertion_point(field_get:protocol.BlockInventory.BlockId.hash)
  return hash_.GetNoArena();
}
inline void BlockInventory_BlockId::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.BlockInventory.BlockId.hash)
}
inline void BlockInventory_BlockId::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.BlockInventory.BlockId.hash)
}
inline void BlockInventory_BlockId::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.BlockInventory.BlockId.hash)
}
inline void BlockInventory_BlockId::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.BlockInventory.BlockId.hash)
}
inline std::string* BlockInventory_BlockId::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.BlockInventory.BlockId.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockInventory_BlockId::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.BlockInventory.BlockId.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockInventory_BlockId::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.BlockInventory.BlockId.hash)
}

// int64 number = 2;
inline void BlockInventory_BlockId::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BlockInventory_BlockId::number() const {
  // @@protoc_insertion_point(field_get:protocol.BlockInventory.BlockId.number)
  return number_;
}
inline void BlockInventory_BlockId::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockInventory.BlockId.number)
}

// -------------------------------------------------------------------

// BlockInventory

// repeated .protocol.BlockInventory.BlockId ids = 1;
inline int BlockInventory::ids_size() const {
  return ids_.size();
}
inline void BlockInventory::clear_ids() {
  ids_.Clear();
}
inline ::protocol::BlockInventory_BlockId* BlockInventory::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.BlockInventory.ids)
  return ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockInventory_BlockId >*
BlockInventory::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.BlockInventory.ids)
  return &ids_;
}
inline const ::protocol::BlockInventory_BlockId& BlockInventory::ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.BlockInventory.ids)
  return ids_.Get(index);
}
inline ::protocol::BlockInventory_BlockId* BlockInventory::add_ids() {
  // @@protoc_insertion_point(field_add:protocol.BlockInventory.ids)
  return ids_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockInventory_BlockId >&
BlockInventory::ids() const {
  // @@protoc_insertion_point(field_list:protocol.BlockInventory.ids)
  return ids_;
}

// .protocol.BlockInventory.Type type = 2;
inline void BlockInventory::clear_type() {
  type_ = 0;
}
inline ::protocol::BlockInventory_Type BlockInventory::type() const {
  // @@protoc_insertion_point(field_get:protocol.BlockInventory.type)
  return static_cast< ::protocol::BlockInventory_Type >(type_);
}
inline void BlockInventory::set_type(::protocol::BlockInventory_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.BlockInventory.type)
}

// -------------------------------------------------------------------

// Inventory

// .protocol.Inventory.InventoryType type = 1;
inline void Inventory::clear_type() {
  type_ = 0;
}
inline ::protocol::Inventory_InventoryType Inventory::type() const {
  // @@protoc_insertion_point(field_get:protocol.Inventory.type)
  return static_cast< ::protocol::Inventory_InventoryType >(type_);
}
inline void Inventory::set_type(::protocol::Inventory_InventoryType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Inventory.type)
}

// repeated bytes ids = 2;
inline int Inventory::ids_size() const {
  return ids_.size();
}
inline void Inventory::clear_ids() {
  ids_.Clear();
}
inline const std::string& Inventory::ids(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Inventory.ids)
  return ids_.Get(index);
}
inline std::string* Inventory::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Inventory.ids)
  return ids_.Mutable(index);
}
inline void Inventory::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.Inventory.ids)
  ids_.Mutable(index)->assign(value);
}
inline void Inventory::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.Inventory.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void Inventory::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.Inventory.ids)
}
inline void Inventory::set_ids(int index, const void* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.Inventory.ids)
}
inline std::string* Inventory::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:protocol.Inventory.ids)
  return ids_.Add();
}
inline void Inventory::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.Inventory.ids)
}
inline void Inventory::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.Inventory.ids)
}
inline void Inventory::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.Inventory.ids)
}
inline void Inventory::add_ids(const void* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.Inventory.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Inventory::ids() const {
  // @@protoc_insertion_point(field_list:protocol.Inventory.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Inventory::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Inventory.ids)
  return &ids_;
}

// -------------------------------------------------------------------

// Items

// .protocol.Items.ItemType type = 1;
inline void Items::clear_type() {
  type_ = 0;
}
inline ::protocol::Items_ItemType Items::type() const {
  // @@protoc_insertion_point(field_get:protocol.Items.type)
  return static_cast< ::protocol::Items_ItemType >(type_);
}
inline void Items::set_type(::protocol::Items_ItemType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:protocol.Items.type)
}

// repeated .protocol.Block blocks = 2;
inline int Items::blocks_size() const {
  return blocks_.size();
}
inline void Items::clear_blocks() {
  blocks_.Clear();
}
inline ::protocol::Block* Items::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Items.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Block >*
Items::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Items.blocks)
  return &blocks_;
}
inline const ::protocol::Block& Items::blocks(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Items.blocks)
  return blocks_.Get(index);
}
inline ::protocol::Block* Items::add_blocks() {
  // @@protoc_insertion_point(field_add:protocol.Items.blocks)
  return blocks_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Block >&
Items::blocks() const {
  // @@protoc_insertion_point(field_list:protocol.Items.blocks)
  return blocks_;
}

// repeated .protocol.BlockHeader block_headers = 3;
inline int Items::block_headers_size() const {
  return block_headers_.size();
}
inline void Items::clear_block_headers() {
  block_headers_.Clear();
}
inline ::protocol::BlockHeader* Items::mutable_block_headers(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Items.block_headers)
  return block_headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockHeader >*
Items::mutable_block_headers() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Items.block_headers)
  return &block_headers_;
}
inline const ::protocol::BlockHeader& Items::block_headers(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Items.block_headers)
  return block_headers_.Get(index);
}
inline ::protocol::BlockHeader* Items::add_block_headers() {
  // @@protoc_insertion_point(field_add:protocol.Items.block_headers)
  return block_headers_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::BlockHeader >&
Items::block_headers() const {
  // @@protoc_insertion_point(field_list:protocol.Items.block_headers)
  return block_headers_;
}

// repeated .protocol.Transaction transactions = 4;
inline int Items::transactions_size() const {
  return transactions_.size();
}
inline void Items::clear_transactions() {
  transactions_.Clear();
}
inline ::protocol::Transaction* Items::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.Items.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >*
Items::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:protocol.Items.transactions)
  return &transactions_;
}
inline const ::protocol::Transaction& Items::transactions(int index) const {
  // @@protoc_insertion_point(field_get:protocol.Items.transactions)
  return transactions_.Get(index);
}
inline ::protocol::Transaction* Items::add_transactions() {
  // @@protoc_insertion_point(field_add:protocol.Items.transactions)
  return transactions_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Transaction >&
Items::transactions() const {
  // @@protoc_insertion_point(field_list:protocol.Items.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// DynamicProperties

// int64 last_solidity_block_num = 1;
inline void DynamicProperties::clear_last_solidity_block_num() {
  last_solidity_block_num_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DynamicProperties::last_solidity_block_num() const {
  // @@protoc_insertion_point(field_get:protocol.DynamicProperties.last_solidity_block_num)
  return last_solidity_block_num_;
}
inline void DynamicProperties::set_last_solidity_block_num(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_solidity_block_num_ = value;
  // @@protoc_insertion_point(field_set:protocol.DynamicProperties.last_solidity_block_num)
}

// -------------------------------------------------------------------

// DisconnectMessage

// .protocol.ReasonCode reason = 1;
inline void DisconnectMessage::clear_reason() {
  reason_ = 0;
}
inline ::protocol::ReasonCode DisconnectMessage::reason() const {
  // @@protoc_insertion_point(field_get:protocol.DisconnectMessage.reason)
  return static_cast< ::protocol::ReasonCode >(reason_);
}
inline void DisconnectMessage::set_reason(::protocol::ReasonCode value) {
  
  reason_ = value;
  // @@protoc_insertion_point(field_set:protocol.DisconnectMessage.reason)
}

// -------------------------------------------------------------------

// HelloMessage_BlockId

// bytes hash = 1;
inline void HelloMessage_BlockId::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HelloMessage_BlockId::hash() const {
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.BlockId.hash)
  return hash_.GetNoArena();
}
inline void HelloMessage_BlockId::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.HelloMessage.BlockId.hash)
}
inline void HelloMessage_BlockId::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.HelloMessage.BlockId.hash)
}
inline void HelloMessage_BlockId::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.HelloMessage.BlockId.hash)
}
inline void HelloMessage_BlockId::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.HelloMessage.BlockId.hash)
}
inline std::string* HelloMessage_BlockId::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.HelloMessage.BlockId.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HelloMessage_BlockId::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.HelloMessage.BlockId.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HelloMessage_BlockId::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloMessage.BlockId.hash)
}

// int64 number = 2;
inline void HelloMessage_BlockId::clear_number() {
  number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HelloMessage_BlockId::number() const {
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.BlockId.number)
  return number_;
}
inline void HelloMessage_BlockId::set_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:protocol.HelloMessage.BlockId.number)
}

// -------------------------------------------------------------------

// HelloMessage

// .protocol.Endpoint from = 1;
inline bool HelloMessage::has_from() const {
  return this != internal_default_instance() && from_ != nullptr;
}
inline const ::protocol::Endpoint& HelloMessage::from() const {
  const ::protocol::Endpoint* p = from_;
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.from)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::Endpoint*>(
      &::protocol::_Endpoint_default_instance_);
}
inline ::protocol::Endpoint* HelloMessage::release_from() {
  // @@protoc_insertion_point(field_release:protocol.HelloMessage.from)
  
  ::protocol::Endpoint* temp = from_;
  from_ = nullptr;
  return temp;
}
inline ::protocol::Endpoint* HelloMessage::mutable_from() {
  
  if (from_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::Endpoint>(GetArenaNoVirtual());
    from_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.HelloMessage.from)
  return from_;
}
inline void HelloMessage::set_allocated_from(::protocol::Endpoint* from) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(from_);
  }
  if (from) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      from = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, from, submessage_arena);
    }
    
  } else {
    
  }
  from_ = from;
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloMessage.from)
}

// int32 version = 2;
inline void HelloMessage::clear_version() {
  version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HelloMessage::version() const {
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.version)
  return version_;
}
inline void HelloMessage::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:protocol.HelloMessage.version)
}

// int64 timestamp = 3;
inline void HelloMessage::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HelloMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.timestamp)
  return timestamp_;
}
inline void HelloMessage::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:protocol.HelloMessage.timestamp)
}

// .protocol.HelloMessage.BlockId genesisBlockId = 4;
inline bool HelloMessage::has_genesisblockid() const {
  return this != internal_default_instance() && genesisblockid_ != nullptr;
}
inline void HelloMessage::clear_genesisblockid() {
  if (GetArenaNoVirtual() == nullptr && genesisblockid_ != nullptr) {
    delete genesisblockid_;
  }
  genesisblockid_ = nullptr;
}
inline const ::protocol::HelloMessage_BlockId& HelloMessage::genesisblockid() const {
  const ::protocol::HelloMessage_BlockId* p = genesisblockid_;
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.genesisBlockId)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::HelloMessage_BlockId*>(
      &::protocol::_HelloMessage_BlockId_default_instance_);
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::release_genesisblockid() {
  // @@protoc_insertion_point(field_release:protocol.HelloMessage.genesisBlockId)
  
  ::protocol::HelloMessage_BlockId* temp = genesisblockid_;
  genesisblockid_ = nullptr;
  return temp;
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::mutable_genesisblockid() {
  
  if (genesisblockid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::HelloMessage_BlockId>(GetArenaNoVirtual());
    genesisblockid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.HelloMessage.genesisBlockId)
  return genesisblockid_;
}
inline void HelloMessage::set_allocated_genesisblockid(::protocol::HelloMessage_BlockId* genesisblockid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete genesisblockid_;
  }
  if (genesisblockid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      genesisblockid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, genesisblockid, submessage_arena);
    }
    
  } else {
    
  }
  genesisblockid_ = genesisblockid;
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloMessage.genesisBlockId)
}

// .protocol.HelloMessage.BlockId solidBlockId = 5;
inline bool HelloMessage::has_solidblockid() const {
  return this != internal_default_instance() && solidblockid_ != nullptr;
}
inline void HelloMessage::clear_solidblockid() {
  if (GetArenaNoVirtual() == nullptr && solidblockid_ != nullptr) {
    delete solidblockid_;
  }
  solidblockid_ = nullptr;
}
inline const ::protocol::HelloMessage_BlockId& HelloMessage::solidblockid() const {
  const ::protocol::HelloMessage_BlockId* p = solidblockid_;
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.solidBlockId)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::HelloMessage_BlockId*>(
      &::protocol::_HelloMessage_BlockId_default_instance_);
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::release_solidblockid() {
  // @@protoc_insertion_point(field_release:protocol.HelloMessage.solidBlockId)
  
  ::protocol::HelloMessage_BlockId* temp = solidblockid_;
  solidblockid_ = nullptr;
  return temp;
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::mutable_solidblockid() {
  
  if (solidblockid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::HelloMessage_BlockId>(GetArenaNoVirtual());
    solidblockid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.HelloMessage.solidBlockId)
  return solidblockid_;
}
inline void HelloMessage::set_allocated_solidblockid(::protocol::HelloMessage_BlockId* solidblockid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete solidblockid_;
  }
  if (solidblockid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      solidblockid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, solidblockid, submessage_arena);
    }
    
  } else {
    
  }
  solidblockid_ = solidblockid;
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloMessage.solidBlockId)
}

// .protocol.HelloMessage.BlockId headBlockId = 6;
inline bool HelloMessage::has_headblockid() const {
  return this != internal_default_instance() && headblockid_ != nullptr;
}
inline void HelloMessage::clear_headblockid() {
  if (GetArenaNoVirtual() == nullptr && headblockid_ != nullptr) {
    delete headblockid_;
  }
  headblockid_ = nullptr;
}
inline const ::protocol::HelloMessage_BlockId& HelloMessage::headblockid() const {
  const ::protocol::HelloMessage_BlockId* p = headblockid_;
  // @@protoc_insertion_point(field_get:protocol.HelloMessage.headBlockId)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::HelloMessage_BlockId*>(
      &::protocol::_HelloMessage_BlockId_default_instance_);
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::release_headblockid() {
  // @@protoc_insertion_point(field_release:protocol.HelloMessage.headBlockId)
  
  ::protocol::HelloMessage_BlockId* temp = headblockid_;
  headblockid_ = nullptr;
  return temp;
}
inline ::protocol::HelloMessage_BlockId* HelloMessage::mutable_headblockid() {
  
  if (headblockid_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::HelloMessage_BlockId>(GetArenaNoVirtual());
    headblockid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.HelloMessage.headBlockId)
  return headblockid_;
}
inline void HelloMessage::set_allocated_headblockid(::protocol::HelloMessage_BlockId* headblockid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete headblockid_;
  }
  if (headblockid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      headblockid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headblockid, submessage_arena);
    }
    
  } else {
    
  }
  headblockid_ = headblockid;
  // @@protoc_insertion_point(field_set_allocated:protocol.HelloMessage.headBlockId)
}

// -------------------------------------------------------------------

// InternalTransaction_CallValueInfo

// int64 callValue = 1;
inline void InternalTransaction_CallValueInfo::clear_callvalue() {
  callvalue_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InternalTransaction_CallValueInfo::callvalue() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.CallValueInfo.callValue)
  return callvalue_;
}
inline void InternalTransaction_CallValueInfo::set_callvalue(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  callvalue_ = value;
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.CallValueInfo.callValue)
}

// string tokenId = 2;
inline void InternalTransaction_CallValueInfo::clear_tokenid() {
  tokenid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalTransaction_CallValueInfo::tokenid() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.CallValueInfo.tokenId)
  return tokenid_.GetNoArena();
}
inline void InternalTransaction_CallValueInfo::set_tokenid(const std::string& value) {
  
  tokenid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.CallValueInfo.tokenId)
}
inline void InternalTransaction_CallValueInfo::set_tokenid(std::string&& value) {
  
  tokenid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.InternalTransaction.CallValueInfo.tokenId)
}
inline void InternalTransaction_CallValueInfo::set_tokenid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokenid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.InternalTransaction.CallValueInfo.tokenId)
}
inline void InternalTransaction_CallValueInfo::set_tokenid(const char* value, size_t size) {
  
  tokenid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.InternalTransaction.CallValueInfo.tokenId)
}
inline std::string* InternalTransaction_CallValueInfo::mutable_tokenid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.CallValueInfo.tokenId)
  return tokenid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalTransaction_CallValueInfo::release_tokenid() {
  // @@protoc_insertion_point(field_release:protocol.InternalTransaction.CallValueInfo.tokenId)
  
  return tokenid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalTransaction_CallValueInfo::set_allocated_tokenid(std::string* tokenid) {
  if (tokenid != nullptr) {
    
  } else {
    
  }
  tokenid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokenid);
  // @@protoc_insertion_point(field_set_allocated:protocol.InternalTransaction.CallValueInfo.tokenId)
}

// -------------------------------------------------------------------

// InternalTransaction

// bytes hash = 1;
inline void InternalTransaction::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalTransaction::hash() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.hash)
  return hash_.GetNoArena();
}
inline void InternalTransaction::set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.hash)
}
inline void InternalTransaction::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.InternalTransaction.hash)
}
inline void InternalTransaction::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.InternalTransaction.hash)
}
inline void InternalTransaction::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.InternalTransaction.hash)
}
inline std::string* InternalTransaction::mutable_hash() {
  
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.hash)
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalTransaction::release_hash() {
  // @@protoc_insertion_point(field_release:protocol.InternalTransaction.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalTransaction::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:protocol.InternalTransaction.hash)
}

// bytes caller_address = 2;
inline void InternalTransaction::clear_caller_address() {
  caller_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalTransaction::caller_address() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.caller_address)
  return caller_address_.GetNoArena();
}
inline void InternalTransaction::set_caller_address(const std::string& value) {
  
  caller_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.caller_address)
}
inline void InternalTransaction::set_caller_address(std::string&& value) {
  
  caller_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.InternalTransaction.caller_address)
}
inline void InternalTransaction::set_caller_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  caller_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.InternalTransaction.caller_address)
}
inline void InternalTransaction::set_caller_address(const void* value, size_t size) {
  
  caller_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.InternalTransaction.caller_address)
}
inline std::string* InternalTransaction::mutable_caller_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.caller_address)
  return caller_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalTransaction::release_caller_address() {
  // @@protoc_insertion_point(field_release:protocol.InternalTransaction.caller_address)
  
  return caller_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalTransaction::set_allocated_caller_address(std::string* caller_address) {
  if (caller_address != nullptr) {
    
  } else {
    
  }
  caller_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), caller_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.InternalTransaction.caller_address)
}

// bytes transferTo_address = 3;
inline void InternalTransaction::clear_transferto_address() {
  transferto_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalTransaction::transferto_address() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.transferTo_address)
  return transferto_address_.GetNoArena();
}
inline void InternalTransaction::set_transferto_address(const std::string& value) {
  
  transferto_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.transferTo_address)
}
inline void InternalTransaction::set_transferto_address(std::string&& value) {
  
  transferto_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.InternalTransaction.transferTo_address)
}
inline void InternalTransaction::set_transferto_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transferto_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.InternalTransaction.transferTo_address)
}
inline void InternalTransaction::set_transferto_address(const void* value, size_t size) {
  
  transferto_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.InternalTransaction.transferTo_address)
}
inline std::string* InternalTransaction::mutable_transferto_address() {
  
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.transferTo_address)
  return transferto_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalTransaction::release_transferto_address() {
  // @@protoc_insertion_point(field_release:protocol.InternalTransaction.transferTo_address)
  
  return transferto_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalTransaction::set_allocated_transferto_address(std::string* transferto_address) {
  if (transferto_address != nullptr) {
    
  } else {
    
  }
  transferto_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transferto_address);
  // @@protoc_insertion_point(field_set_allocated:protocol.InternalTransaction.transferTo_address)
}

// repeated .protocol.InternalTransaction.CallValueInfo callValueInfo = 4;
inline int InternalTransaction::callvalueinfo_size() const {
  return callvalueinfo_.size();
}
inline void InternalTransaction::clear_callvalueinfo() {
  callvalueinfo_.Clear();
}
inline ::protocol::InternalTransaction_CallValueInfo* InternalTransaction::mutable_callvalueinfo(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.callValueInfo)
  return callvalueinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction_CallValueInfo >*
InternalTransaction::mutable_callvalueinfo() {
  // @@protoc_insertion_point(field_mutable_list:protocol.InternalTransaction.callValueInfo)
  return &callvalueinfo_;
}
inline const ::protocol::InternalTransaction_CallValueInfo& InternalTransaction::callvalueinfo(int index) const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.callValueInfo)
  return callvalueinfo_.Get(index);
}
inline ::protocol::InternalTransaction_CallValueInfo* InternalTransaction::add_callvalueinfo() {
  // @@protoc_insertion_point(field_add:protocol.InternalTransaction.callValueInfo)
  return callvalueinfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::InternalTransaction_CallValueInfo >&
InternalTransaction::callvalueinfo() const {
  // @@protoc_insertion_point(field_list:protocol.InternalTransaction.callValueInfo)
  return callvalueinfo_;
}

// bytes note = 5;
inline void InternalTransaction::clear_note() {
  note_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalTransaction::note() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.note)
  return note_.GetNoArena();
}
inline void InternalTransaction::set_note(const std::string& value) {
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.note)
}
inline void InternalTransaction::set_note(std::string&& value) {
  
  note_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.InternalTransaction.note)
}
inline void InternalTransaction::set_note(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.InternalTransaction.note)
}
inline void InternalTransaction::set_note(const void* value, size_t size) {
  
  note_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.InternalTransaction.note)
}
inline std::string* InternalTransaction::mutable_note() {
  
  // @@protoc_insertion_point(field_mutable:protocol.InternalTransaction.note)
  return note_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalTransaction::release_note() {
  // @@protoc_insertion_point(field_release:protocol.InternalTransaction.note)
  
  return note_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalTransaction::set_allocated_note(std::string* note) {
  if (note != nullptr) {
    
  } else {
    
  }
  note_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), note);
  // @@protoc_insertion_point(field_set_allocated:protocol.InternalTransaction.note)
}

// bool rejected = 6;
inline void InternalTransaction::clear_rejected() {
  rejected_ = false;
}
inline bool InternalTransaction::rejected() const {
  // @@protoc_insertion_point(field_get:protocol.InternalTransaction.rejected)
  return rejected_;
}
inline void InternalTransaction::set_rejected(bool value) {
  
  rejected_ = value;
  // @@protoc_insertion_point(field_set:protocol.InternalTransaction.rejected)
}

// -------------------------------------------------------------------

// DelegatedResourceAccountIndex

// bytes account = 1;
inline void DelegatedResourceAccountIndex::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DelegatedResourceAccountIndex::account() const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResourceAccountIndex.account)
  return account_.GetNoArena();
}
inline void DelegatedResourceAccountIndex::set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.DelegatedResourceAccountIndex.account)
}
inline void DelegatedResourceAccountIndex::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.DelegatedResourceAccountIndex.account)
}
inline void DelegatedResourceAccountIndex::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.DelegatedResourceAccountIndex.account)
}
inline void DelegatedResourceAccountIndex::set_account(const void* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.DelegatedResourceAccountIndex.account)
}
inline std::string* DelegatedResourceAccountIndex::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:protocol.DelegatedResourceAccountIndex.account)
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DelegatedResourceAccountIndex::release_account() {
  // @@protoc_insertion_point(field_release:protocol.DelegatedResourceAccountIndex.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DelegatedResourceAccountIndex::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:protocol.DelegatedResourceAccountIndex.account)
}

// repeated bytes fromAccounts = 2;
inline int DelegatedResourceAccountIndex::fromaccounts_size() const {
  return fromaccounts_.size();
}
inline void DelegatedResourceAccountIndex::clear_fromaccounts() {
  fromaccounts_.Clear();
}
inline const std::string& DelegatedResourceAccountIndex::fromaccounts(int index) const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResourceAccountIndex.fromAccounts)
  return fromaccounts_.Get(index);
}
inline std::string* DelegatedResourceAccountIndex::mutable_fromaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.DelegatedResourceAccountIndex.fromAccounts)
  return fromaccounts_.Mutable(index);
}
inline void DelegatedResourceAccountIndex::set_fromaccounts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.DelegatedResourceAccountIndex.fromAccounts)
  fromaccounts_.Mutable(index)->assign(value);
}
inline void DelegatedResourceAccountIndex::set_fromaccounts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.DelegatedResourceAccountIndex.fromAccounts)
  fromaccounts_.Mutable(index)->assign(std::move(value));
}
inline void DelegatedResourceAccountIndex::set_fromaccounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline void DelegatedResourceAccountIndex::set_fromaccounts(int index, const void* value, size_t size) {
  fromaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline std::string* DelegatedResourceAccountIndex::add_fromaccounts() {
  // @@protoc_insertion_point(field_add_mutable:protocol.DelegatedResourceAccountIndex.fromAccounts)
  return fromaccounts_.Add();
}
inline void DelegatedResourceAccountIndex::add_fromaccounts(const std::string& value) {
  fromaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline void DelegatedResourceAccountIndex::add_fromaccounts(std::string&& value) {
  fromaccounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline void DelegatedResourceAccountIndex::add_fromaccounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  fromaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline void DelegatedResourceAccountIndex::add_fromaccounts(const void* value, size_t size) {
  fromaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.DelegatedResourceAccountIndex.fromAccounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DelegatedResourceAccountIndex::fromaccounts() const {
  // @@protoc_insertion_point(field_list:protocol.DelegatedResourceAccountIndex.fromAccounts)
  return fromaccounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DelegatedResourceAccountIndex::mutable_fromaccounts() {
  // @@protoc_insertion_point(field_mutable_list:protocol.DelegatedResourceAccountIndex.fromAccounts)
  return &fromaccounts_;
}

// repeated bytes toAccounts = 3;
inline int DelegatedResourceAccountIndex::toaccounts_size() const {
  return toaccounts_.size();
}
inline void DelegatedResourceAccountIndex::clear_toaccounts() {
  toaccounts_.Clear();
}
inline const std::string& DelegatedResourceAccountIndex::toaccounts(int index) const {
  // @@protoc_insertion_point(field_get:protocol.DelegatedResourceAccountIndex.toAccounts)
  return toaccounts_.Get(index);
}
inline std::string* DelegatedResourceAccountIndex::mutable_toaccounts(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.DelegatedResourceAccountIndex.toAccounts)
  return toaccounts_.Mutable(index);
}
inline void DelegatedResourceAccountIndex::set_toaccounts(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:protocol.DelegatedResourceAccountIndex.toAccounts)
  toaccounts_.Mutable(index)->assign(value);
}
inline void DelegatedResourceAccountIndex::set_toaccounts(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.DelegatedResourceAccountIndex.toAccounts)
  toaccounts_.Mutable(index)->assign(std::move(value));
}
inline void DelegatedResourceAccountIndex::set_toaccounts(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaccounts_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline void DelegatedResourceAccountIndex::set_toaccounts(int index, const void* value, size_t size) {
  toaccounts_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline std::string* DelegatedResourceAccountIndex::add_toaccounts() {
  // @@protoc_insertion_point(field_add_mutable:protocol.DelegatedResourceAccountIndex.toAccounts)
  return toaccounts_.Add();
}
inline void DelegatedResourceAccountIndex::add_toaccounts(const std::string& value) {
  toaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline void DelegatedResourceAccountIndex::add_toaccounts(std::string&& value) {
  toaccounts_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline void DelegatedResourceAccountIndex::add_toaccounts(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  toaccounts_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline void DelegatedResourceAccountIndex::add_toaccounts(const void* value, size_t size) {
  toaccounts_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protocol.DelegatedResourceAccountIndex.toAccounts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DelegatedResourceAccountIndex::toaccounts() const {
  // @@protoc_insertion_point(field_list:protocol.DelegatedResourceAccountIndex.toAccounts)
  return toaccounts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DelegatedResourceAccountIndex::mutable_toaccounts() {
  // @@protoc_insertion_point(field_mutable_list:protocol.DelegatedResourceAccountIndex.toAccounts)
  return &toaccounts_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeInfo_PeerInfo

// string lastSyncBlock = 1;
inline void NodeInfo_PeerInfo::clear_lastsyncblock() {
  lastsyncblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::lastsyncblock() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.lastSyncBlock)
  return lastsyncblock_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_lastsyncblock(const std::string& value) {
  
  lastsyncblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.lastSyncBlock)
}
inline void NodeInfo_PeerInfo::set_lastsyncblock(std::string&& value) {
  
  lastsyncblock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.lastSyncBlock)
}
inline void NodeInfo_PeerInfo::set_lastsyncblock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastsyncblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.lastSyncBlock)
}
inline void NodeInfo_PeerInfo::set_lastsyncblock(const char* value, size_t size) {
  
  lastsyncblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.lastSyncBlock)
}
inline std::string* NodeInfo_PeerInfo::mutable_lastsyncblock() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.lastSyncBlock)
  return lastsyncblock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_lastsyncblock() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.lastSyncBlock)
  
  return lastsyncblock_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_lastsyncblock(std::string* lastsyncblock) {
  if (lastsyncblock != nullptr) {
    
  } else {
    
  }
  lastsyncblock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastsyncblock);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.lastSyncBlock)
}

// int64 remainNum = 2;
inline void NodeInfo_PeerInfo::clear_remainnum() {
  remainnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::remainnum() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.remainNum)
  return remainnum_;
}
inline void NodeInfo_PeerInfo::set_remainnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remainnum_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.remainNum)
}

// int64 lastBlockUpdateTime = 3;
inline void NodeInfo_PeerInfo::clear_lastblockupdatetime() {
  lastblockupdatetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::lastblockupdatetime() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.lastBlockUpdateTime)
  return lastblockupdatetime_;
}
inline void NodeInfo_PeerInfo::set_lastblockupdatetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastblockupdatetime_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.lastBlockUpdateTime)
}

// bool syncFlag = 4;
inline void NodeInfo_PeerInfo::clear_syncflag() {
  syncflag_ = false;
}
inline bool NodeInfo_PeerInfo::syncflag() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.syncFlag)
  return syncflag_;
}
inline void NodeInfo_PeerInfo::set_syncflag(bool value) {
  
  syncflag_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.syncFlag)
}

// int64 headBlockTimeWeBothHave = 5;
inline void NodeInfo_PeerInfo::clear_headblocktimewebothhave() {
  headblocktimewebothhave_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::headblocktimewebothhave() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.headBlockTimeWeBothHave)
  return headblocktimewebothhave_;
}
inline void NodeInfo_PeerInfo::set_headblocktimewebothhave(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  headblocktimewebothhave_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.headBlockTimeWeBothHave)
}

// bool needSyncFromPeer = 6;
inline void NodeInfo_PeerInfo::clear_needsyncfrompeer() {
  needsyncfrompeer_ = false;
}
inline bool NodeInfo_PeerInfo::needsyncfrompeer() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.needSyncFromPeer)
  return needsyncfrompeer_;
}
inline void NodeInfo_PeerInfo::set_needsyncfrompeer(bool value) {
  
  needsyncfrompeer_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.needSyncFromPeer)
}

// bool needSyncFromUs = 7;
inline void NodeInfo_PeerInfo::clear_needsyncfromus() {
  needsyncfromus_ = false;
}
inline bool NodeInfo_PeerInfo::needsyncfromus() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.needSyncFromUs)
  return needsyncfromus_;
}
inline void NodeInfo_PeerInfo::set_needsyncfromus(bool value) {
  
  needsyncfromus_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.needSyncFromUs)
}

// string host = 8;
inline void NodeInfo_PeerInfo::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::host() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.host)
  return host_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.host)
}
inline void NodeInfo_PeerInfo::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.host)
}
inline void NodeInfo_PeerInfo::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.host)
}
inline void NodeInfo_PeerInfo::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.host)
}
inline std::string* NodeInfo_PeerInfo::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.host)
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_host() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.host)
}

// int32 port = 9;
inline void NodeInfo_PeerInfo::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::port() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.port)
  return port_;
}
inline void NodeInfo_PeerInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.port)
}

// string nodeId = 10;
inline void NodeInfo_PeerInfo::clear_nodeid() {
  nodeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::nodeid() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.nodeId)
  return nodeid_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_nodeid(const std::string& value) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.nodeId)
}
inline void NodeInfo_PeerInfo::set_nodeid(std::string&& value) {
  
  nodeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.nodeId)
}
inline void NodeInfo_PeerInfo::set_nodeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.nodeId)
}
inline void NodeInfo_PeerInfo::set_nodeid(const char* value, size_t size) {
  
  nodeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.nodeId)
}
inline std::string* NodeInfo_PeerInfo::mutable_nodeid() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.nodeId)
  return nodeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_nodeid() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.nodeId)
  
  return nodeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_nodeid(std::string* nodeid) {
  if (nodeid != nullptr) {
    
  } else {
    
  }
  nodeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodeid);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.nodeId)
}

// int64 connectTime = 11;
inline void NodeInfo_PeerInfo::clear_connecttime() {
  connecttime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::connecttime() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.connectTime)
  return connecttime_;
}
inline void NodeInfo_PeerInfo::set_connecttime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  connecttime_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.connectTime)
}

// double avgLatency = 12;
inline void NodeInfo_PeerInfo::clear_avglatency() {
  avglatency_ = 0;
}
inline double NodeInfo_PeerInfo::avglatency() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.avgLatency)
  return avglatency_;
}
inline void NodeInfo_PeerInfo::set_avglatency(double value) {
  
  avglatency_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.avgLatency)
}

// int32 syncToFetchSize = 13;
inline void NodeInfo_PeerInfo::clear_synctofetchsize() {
  synctofetchsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::synctofetchsize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.syncToFetchSize)
  return synctofetchsize_;
}
inline void NodeInfo_PeerInfo::set_synctofetchsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  synctofetchsize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.syncToFetchSize)
}

// int64 syncToFetchSizePeekNum = 14;
inline void NodeInfo_PeerInfo::clear_synctofetchsizepeeknum() {
  synctofetchsizepeeknum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::synctofetchsizepeeknum() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.syncToFetchSizePeekNum)
  return synctofetchsizepeeknum_;
}
inline void NodeInfo_PeerInfo::set_synctofetchsizepeeknum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  synctofetchsizepeeknum_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.syncToFetchSizePeekNum)
}

// int32 syncBlockRequestedSize = 15;
inline void NodeInfo_PeerInfo::clear_syncblockrequestedsize() {
  syncblockrequestedsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::syncblockrequestedsize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.syncBlockRequestedSize)
  return syncblockrequestedsize_;
}
inline void NodeInfo_PeerInfo::set_syncblockrequestedsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  syncblockrequestedsize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.syncBlockRequestedSize)
}

// int64 unFetchSynNum = 16;
inline void NodeInfo_PeerInfo::clear_unfetchsynnum() {
  unfetchsynnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::unfetchsynnum() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.unFetchSynNum)
  return unfetchsynnum_;
}
inline void NodeInfo_PeerInfo::set_unfetchsynnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unfetchsynnum_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.unFetchSynNum)
}

// int32 blockInPorcSize = 17;
inline void NodeInfo_PeerInfo::clear_blockinporcsize() {
  blockinporcsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::blockinporcsize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.blockInPorcSize)
  return blockinporcsize_;
}
inline void NodeInfo_PeerInfo::set_blockinporcsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blockinporcsize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.blockInPorcSize)
}

// string headBlockWeBothHave = 18;
inline void NodeInfo_PeerInfo::clear_headblockwebothhave() {
  headblockwebothhave_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::headblockwebothhave() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
  return headblockwebothhave_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_headblockwebothhave(const std::string& value) {
  
  headblockwebothhave_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
}
inline void NodeInfo_PeerInfo::set_headblockwebothhave(std::string&& value) {
  
  headblockwebothhave_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
}
inline void NodeInfo_PeerInfo::set_headblockwebothhave(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headblockwebothhave_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
}
inline void NodeInfo_PeerInfo::set_headblockwebothhave(const char* value, size_t size) {
  
  headblockwebothhave_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
}
inline std::string* NodeInfo_PeerInfo::mutable_headblockwebothhave() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
  return headblockwebothhave_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_headblockwebothhave() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
  
  return headblockwebothhave_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_headblockwebothhave(std::string* headblockwebothhave) {
  if (headblockwebothhave != nullptr) {
    
  } else {
    
  }
  headblockwebothhave_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headblockwebothhave);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.headBlockWeBothHave)
}

// bool isActive = 19;
inline void NodeInfo_PeerInfo::clear_isactive() {
  isactive_ = false;
}
inline bool NodeInfo_PeerInfo::isactive() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.isActive)
  return isactive_;
}
inline void NodeInfo_PeerInfo::set_isactive(bool value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.isActive)
}

// int32 score = 20;
inline void NodeInfo_PeerInfo::clear_score() {
  score_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::score() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.score)
  return score_;
}
inline void NodeInfo_PeerInfo::set_score(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.score)
}

// int32 nodeCount = 21;
inline void NodeInfo_PeerInfo::clear_nodecount() {
  nodecount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::nodecount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.nodeCount)
  return nodecount_;
}
inline void NodeInfo_PeerInfo::set_nodecount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nodecount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.nodeCount)
}

// int64 inFlow = 22;
inline void NodeInfo_PeerInfo::clear_inflow() {
  inflow_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_PeerInfo::inflow() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.inFlow)
  return inflow_;
}
inline void NodeInfo_PeerInfo::set_inflow(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  inflow_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.inFlow)
}

// int32 disconnectTimes = 23;
inline void NodeInfo_PeerInfo::clear_disconnecttimes() {
  disconnecttimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_PeerInfo::disconnecttimes() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.disconnectTimes)
  return disconnecttimes_;
}
inline void NodeInfo_PeerInfo::set_disconnecttimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disconnecttimes_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.disconnectTimes)
}

// string localDisconnectReason = 24;
inline void NodeInfo_PeerInfo::clear_localdisconnectreason() {
  localdisconnectreason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::localdisconnectreason() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.localDisconnectReason)
  return localdisconnectreason_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_localdisconnectreason(const std::string& value) {
  
  localdisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.localDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_localdisconnectreason(std::string&& value) {
  
  localdisconnectreason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.localDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_localdisconnectreason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  localdisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.localDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_localdisconnectreason(const char* value, size_t size) {
  
  localdisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.localDisconnectReason)
}
inline std::string* NodeInfo_PeerInfo::mutable_localdisconnectreason() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.localDisconnectReason)
  return localdisconnectreason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_localdisconnectreason() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.localDisconnectReason)
  
  return localdisconnectreason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_localdisconnectreason(std::string* localdisconnectreason) {
  if (localdisconnectreason != nullptr) {
    
  } else {
    
  }
  localdisconnectreason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), localdisconnectreason);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.localDisconnectReason)
}

// string remoteDisconnectReason = 25;
inline void NodeInfo_PeerInfo::clear_remotedisconnectreason() {
  remotedisconnectreason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_PeerInfo::remotedisconnectreason() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
  return remotedisconnectreason_.GetNoArena();
}
inline void NodeInfo_PeerInfo::set_remotedisconnectreason(const std::string& value) {
  
  remotedisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_remotedisconnectreason(std::string&& value) {
  
  remotedisconnectreason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_remotedisconnectreason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remotedisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
}
inline void NodeInfo_PeerInfo::set_remotedisconnectreason(const char* value, size_t size) {
  
  remotedisconnectreason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
}
inline std::string* NodeInfo_PeerInfo::mutable_remotedisconnectreason() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
  return remotedisconnectreason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_PeerInfo::release_remotedisconnectreason() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
  
  return remotedisconnectreason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_PeerInfo::set_allocated_remotedisconnectreason(std::string* remotedisconnectreason) {
  if (remotedisconnectreason != nullptr) {
    
  } else {
    
  }
  remotedisconnectreason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remotedisconnectreason);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.PeerInfo.remoteDisconnectReason)
}

// -------------------------------------------------------------------

// NodeInfo_ConfigNodeInfo

// string codeVersion = 1;
inline void NodeInfo_ConfigNodeInfo::clear_codeversion() {
  codeversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_ConfigNodeInfo::codeversion() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
  return codeversion_.GetNoArena();
}
inline void NodeInfo_ConfigNodeInfo::set_codeversion(const std::string& value) {
  
  codeversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_codeversion(std::string&& value) {
  
  codeversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_codeversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  codeversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_codeversion(const char* value, size_t size) {
  
  codeversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
}
inline std::string* NodeInfo_ConfigNodeInfo::mutable_codeversion() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
  return codeversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_ConfigNodeInfo::release_codeversion() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
  
  return codeversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_ConfigNodeInfo::set_allocated_codeversion(std::string* codeversion) {
  if (codeversion != nullptr) {
    
  } else {
    
  }
  codeversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), codeversion);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.ConfigNodeInfo.codeVersion)
}

// string p2pVersion = 2;
inline void NodeInfo_ConfigNodeInfo::clear_p2pversion() {
  p2pversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_ConfigNodeInfo::p2pversion() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
  return p2pversion_.GetNoArena();
}
inline void NodeInfo_ConfigNodeInfo::set_p2pversion(const std::string& value) {
  
  p2pversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_p2pversion(std::string&& value) {
  
  p2pversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_p2pversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  p2pversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
}
inline void NodeInfo_ConfigNodeInfo::set_p2pversion(const char* value, size_t size) {
  
  p2pversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
}
inline std::string* NodeInfo_ConfigNodeInfo::mutable_p2pversion() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
  return p2pversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_ConfigNodeInfo::release_p2pversion() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
  
  return p2pversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_ConfigNodeInfo::set_allocated_p2pversion(std::string* p2pversion) {
  if (p2pversion != nullptr) {
    
  } else {
    
  }
  p2pversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), p2pversion);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.ConfigNodeInfo.p2pVersion)
}

// int32 listenPort = 3;
inline void NodeInfo_ConfigNodeInfo::clear_listenport() {
  listenport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::listenport() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.listenPort)
  return listenport_;
}
inline void NodeInfo_ConfigNodeInfo::set_listenport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  listenport_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.listenPort)
}

// bool discoverEnable = 4;
inline void NodeInfo_ConfigNodeInfo::clear_discoverenable() {
  discoverenable_ = false;
}
inline bool NodeInfo_ConfigNodeInfo::discoverenable() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.discoverEnable)
  return discoverenable_;
}
inline void NodeInfo_ConfigNodeInfo::set_discoverenable(bool value) {
  
  discoverenable_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.discoverEnable)
}

// int32 activeNodeSize = 5;
inline void NodeInfo_ConfigNodeInfo::clear_activenodesize() {
  activenodesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::activenodesize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.activeNodeSize)
  return activenodesize_;
}
inline void NodeInfo_ConfigNodeInfo::set_activenodesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activenodesize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.activeNodeSize)
}

// int32 passiveNodeSize = 6;
inline void NodeInfo_ConfigNodeInfo::clear_passivenodesize() {
  passivenodesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::passivenodesize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.passiveNodeSize)
  return passivenodesize_;
}
inline void NodeInfo_ConfigNodeInfo::set_passivenodesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passivenodesize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.passiveNodeSize)
}

// int32 sendNodeSize = 7;
inline void NodeInfo_ConfigNodeInfo::clear_sendnodesize() {
  sendnodesize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::sendnodesize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.sendNodeSize)
  return sendnodesize_;
}
inline void NodeInfo_ConfigNodeInfo::set_sendnodesize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sendnodesize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.sendNodeSize)
}

// int32 maxConnectCount = 8;
inline void NodeInfo_ConfigNodeInfo::clear_maxconnectcount() {
  maxconnectcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::maxconnectcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.maxConnectCount)
  return maxconnectcount_;
}
inline void NodeInfo_ConfigNodeInfo::set_maxconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxconnectcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.maxConnectCount)
}

// int32 sameIpMaxConnectCount = 9;
inline void NodeInfo_ConfigNodeInfo::clear_sameipmaxconnectcount() {
  sameipmaxconnectcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::sameipmaxconnectcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.sameIpMaxConnectCount)
  return sameipmaxconnectcount_;
}
inline void NodeInfo_ConfigNodeInfo::set_sameipmaxconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sameipmaxconnectcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.sameIpMaxConnectCount)
}

// int32 backupListenPort = 10;
inline void NodeInfo_ConfigNodeInfo::clear_backuplistenport() {
  backuplistenport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::backuplistenport() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.backupListenPort)
  return backuplistenport_;
}
inline void NodeInfo_ConfigNodeInfo::set_backuplistenport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backuplistenport_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.backupListenPort)
}

// int32 backupMemberSize = 11;
inline void NodeInfo_ConfigNodeInfo::clear_backupmembersize() {
  backupmembersize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::backupmembersize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.backupMemberSize)
  return backupmembersize_;
}
inline void NodeInfo_ConfigNodeInfo::set_backupmembersize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backupmembersize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.backupMemberSize)
}

// int32 backupPriority = 12;
inline void NodeInfo_ConfigNodeInfo::clear_backuppriority() {
  backuppriority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::backuppriority() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.backupPriority)
  return backuppriority_;
}
inline void NodeInfo_ConfigNodeInfo::set_backuppriority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  backuppriority_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.backupPriority)
}

// int32 dbVersion = 13;
inline void NodeInfo_ConfigNodeInfo::clear_dbversion() {
  dbversion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::dbversion() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.dbVersion)
  return dbversion_;
}
inline void NodeInfo_ConfigNodeInfo::set_dbversion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dbversion_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.dbVersion)
}

// int32 minParticipationRate = 14;
inline void NodeInfo_ConfigNodeInfo::clear_minparticipationrate() {
  minparticipationrate_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_ConfigNodeInfo::minparticipationrate() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.minParticipationRate)
  return minparticipationrate_;
}
inline void NodeInfo_ConfigNodeInfo::set_minparticipationrate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minparticipationrate_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.minParticipationRate)
}

// bool supportConstant = 15;
inline void NodeInfo_ConfigNodeInfo::clear_supportconstant() {
  supportconstant_ = false;
}
inline bool NodeInfo_ConfigNodeInfo::supportconstant() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.supportConstant)
  return supportconstant_;
}
inline void NodeInfo_ConfigNodeInfo::set_supportconstant(bool value) {
  
  supportconstant_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.supportConstant)
}

// double minTimeRatio = 16;
inline void NodeInfo_ConfigNodeInfo::clear_mintimeratio() {
  mintimeratio_ = 0;
}
inline double NodeInfo_ConfigNodeInfo::mintimeratio() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.minTimeRatio)
  return mintimeratio_;
}
inline void NodeInfo_ConfigNodeInfo::set_mintimeratio(double value) {
  
  mintimeratio_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.minTimeRatio)
}

// double maxTimeRatio = 17;
inline void NodeInfo_ConfigNodeInfo::clear_maxtimeratio() {
  maxtimeratio_ = 0;
}
inline double NodeInfo_ConfigNodeInfo::maxtimeratio() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.maxTimeRatio)
  return maxtimeratio_;
}
inline void NodeInfo_ConfigNodeInfo::set_maxtimeratio(double value) {
  
  maxtimeratio_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.maxTimeRatio)
}

// int64 allowCreationOfContracts = 18;
inline void NodeInfo_ConfigNodeInfo::clear_allowcreationofcontracts() {
  allowcreationofcontracts_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_ConfigNodeInfo::allowcreationofcontracts() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.allowCreationOfContracts)
  return allowcreationofcontracts_;
}
inline void NodeInfo_ConfigNodeInfo::set_allowcreationofcontracts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allowcreationofcontracts_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.allowCreationOfContracts)
}

// int64 allowAdaptiveEnergy = 19;
inline void NodeInfo_ConfigNodeInfo::clear_allowadaptiveenergy() {
  allowadaptiveenergy_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_ConfigNodeInfo::allowadaptiveenergy() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.ConfigNodeInfo.allowAdaptiveEnergy)
  return allowadaptiveenergy_;
}
inline void NodeInfo_ConfigNodeInfo::set_allowadaptiveenergy(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  allowadaptiveenergy_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.ConfigNodeInfo.allowAdaptiveEnergy)
}

// -------------------------------------------------------------------

// NodeInfo_MachineInfo_MemoryDescInfo

// string name = 1;
inline void NodeInfo_MachineInfo_MemoryDescInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_MemoryDescInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
  return name_.GetNoArena();
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
}
inline std::string* NodeInfo_MachineInfo_MemoryDescInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_MemoryDescInfo::release_name() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.MemoryDescInfo.name)
}

// int64 initSize = 2;
inline void NodeInfo_MachineInfo_MemoryDescInfo::clear_initsize() {
  initsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo_MemoryDescInfo::initsize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.MemoryDescInfo.initSize)
  return initsize_;
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_initsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  initsize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.MemoryDescInfo.initSize)
}

// int64 useSize = 3;
inline void NodeInfo_MachineInfo_MemoryDescInfo::clear_usesize() {
  usesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo_MemoryDescInfo::usesize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.MemoryDescInfo.useSize)
  return usesize_;
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_usesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  usesize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.MemoryDescInfo.useSize)
}

// int64 maxSize = 4;
inline void NodeInfo_MachineInfo_MemoryDescInfo::clear_maxsize() {
  maxsize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo_MemoryDescInfo::maxsize() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.MemoryDescInfo.maxSize)
  return maxsize_;
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_maxsize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maxsize_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.MemoryDescInfo.maxSize)
}

// double useRate = 5;
inline void NodeInfo_MachineInfo_MemoryDescInfo::clear_userate() {
  userate_ = 0;
}
inline double NodeInfo_MachineInfo_MemoryDescInfo::userate() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.MemoryDescInfo.useRate)
  return userate_;
}
inline void NodeInfo_MachineInfo_MemoryDescInfo::set_userate(double value) {
  
  userate_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.MemoryDescInfo.useRate)
}

// -------------------------------------------------------------------

// NodeInfo_MachineInfo_DeadLockThreadInfo

// string name = 1;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_DeadLockThreadInfo::name() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
  return name_.GetNoArena();
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::release_name() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.name)
}

// string lockName = 2;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_lockname() {
  lockname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_DeadLockThreadInfo::lockname() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
  return lockname_.GetNoArena();
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockname(const std::string& value) {
  
  lockname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockname(std::string&& value) {
  
  lockname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lockname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockname(const char* value, size_t size) {
  
  lockname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::mutable_lockname() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
  return lockname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::release_lockname() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
  
  return lockname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_allocated_lockname(std::string* lockname) {
  if (lockname != nullptr) {
    
  } else {
    
  }
  lockname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockname);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockName)
}

// string lockOwner = 3;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_lockowner() {
  lockowner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_DeadLockThreadInfo::lockowner() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
  return lockowner_.GetNoArena();
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockowner(const std::string& value) {
  
  lockowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockowner(std::string&& value) {
  
  lockowner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockowner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lockowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_lockowner(const char* value, size_t size) {
  
  lockowner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::mutable_lockowner() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
  return lockowner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::release_lockowner() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
  
  return lockowner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_allocated_lockowner(std::string* lockowner) {
  if (lockowner != nullptr) {
    
  } else {
    
  }
  lockowner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lockowner);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.lockOwner)
}

// string state = 4;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_state() {
  state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_DeadLockThreadInfo::state() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
  return state_.GetNoArena();
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_state(const std::string& value) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_state(std::string&& value) {
  
  state_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_state(const char* value, size_t size) {
  
  state_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::mutable_state() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
  return state_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::release_state() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
  
  return state_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.state)
}

// int64 blockTime = 5;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_blocktime() {
  blocktime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo_DeadLockThreadInfo::blocktime() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.blockTime)
  return blocktime_;
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_blocktime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocktime_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.blockTime)
}

// int64 waitTime = 6;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_waittime() {
  waittime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo_DeadLockThreadInfo::waittime() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.waitTime)
  return waittime_;
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_waittime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  waittime_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.waitTime)
}

// string stackTrace = 7;
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::clear_stacktrace() {
  stacktrace_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo_DeadLockThreadInfo::stacktrace() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
  return stacktrace_.GetNoArena();
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_stacktrace(const std::string& value) {
  
  stacktrace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_stacktrace(std::string&& value) {
  
  stacktrace_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_stacktrace(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stacktrace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_stacktrace(const char* value, size_t size) {
  
  stacktrace_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::mutable_stacktrace() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
  return stacktrace_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo_DeadLockThreadInfo::release_stacktrace() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
  
  return stacktrace_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo_DeadLockThreadInfo::set_allocated_stacktrace(std::string* stacktrace) {
  if (stacktrace != nullptr) {
    
  } else {
    
  }
  stacktrace_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stacktrace);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.DeadLockThreadInfo.stackTrace)
}

// -------------------------------------------------------------------

// NodeInfo_MachineInfo

// int32 threadCount = 1;
inline void NodeInfo_MachineInfo::clear_threadcount() {
  threadcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_MachineInfo::threadcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.threadCount)
  return threadcount_;
}
inline void NodeInfo_MachineInfo::set_threadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threadcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.threadCount)
}

// int32 deadLockThreadCount = 2;
inline void NodeInfo_MachineInfo::clear_deadlockthreadcount() {
  deadlockthreadcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_MachineInfo::deadlockthreadcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.deadLockThreadCount)
  return deadlockthreadcount_;
}
inline void NodeInfo_MachineInfo::set_deadlockthreadcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  deadlockthreadcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.deadLockThreadCount)
}

// int32 cpuCount = 3;
inline void NodeInfo_MachineInfo::clear_cpucount() {
  cpucount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo_MachineInfo::cpucount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.cpuCount)
  return cpucount_;
}
inline void NodeInfo_MachineInfo::set_cpucount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cpucount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.cpuCount)
}

// int64 totalMemory = 4;
inline void NodeInfo_MachineInfo::clear_totalmemory() {
  totalmemory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo::totalmemory() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.totalMemory)
  return totalmemory_;
}
inline void NodeInfo_MachineInfo::set_totalmemory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalmemory_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.totalMemory)
}

// int64 freeMemory = 5;
inline void NodeInfo_MachineInfo::clear_freememory() {
  freememory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo::freememory() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.freeMemory)
  return freememory_;
}
inline void NodeInfo_MachineInfo::set_freememory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  freememory_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.freeMemory)
}

// double cpuRate = 6;
inline void NodeInfo_MachineInfo::clear_cpurate() {
  cpurate_ = 0;
}
inline double NodeInfo_MachineInfo::cpurate() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.cpuRate)
  return cpurate_;
}
inline void NodeInfo_MachineInfo::set_cpurate(double value) {
  
  cpurate_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.cpuRate)
}

// string javaVersion = 7;
inline void NodeInfo_MachineInfo::clear_javaversion() {
  javaversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo::javaversion() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.javaVersion)
  return javaversion_.GetNoArena();
}
inline void NodeInfo_MachineInfo::set_javaversion(const std::string& value) {
  
  javaversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.javaVersion)
}
inline void NodeInfo_MachineInfo::set_javaversion(std::string&& value) {
  
  javaversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.javaVersion)
}
inline void NodeInfo_MachineInfo::set_javaversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  javaversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.javaVersion)
}
inline void NodeInfo_MachineInfo::set_javaversion(const char* value, size_t size) {
  
  javaversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.javaVersion)
}
inline std::string* NodeInfo_MachineInfo::mutable_javaversion() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.javaVersion)
  return javaversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo::release_javaversion() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.javaVersion)
  
  return javaversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo::set_allocated_javaversion(std::string* javaversion) {
  if (javaversion != nullptr) {
    
  } else {
    
  }
  javaversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), javaversion);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.javaVersion)
}

// string osName = 8;
inline void NodeInfo_MachineInfo::clear_osname() {
  osname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo_MachineInfo::osname() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.osName)
  return osname_.GetNoArena();
}
inline void NodeInfo_MachineInfo::set_osname(const std::string& value) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.osName)
}
inline void NodeInfo_MachineInfo::set_osname(std::string&& value) {
  
  osname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.MachineInfo.osName)
}
inline void NodeInfo_MachineInfo::set_osname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.MachineInfo.osName)
}
inline void NodeInfo_MachineInfo::set_osname(const char* value, size_t size) {
  
  osname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.MachineInfo.osName)
}
inline std::string* NodeInfo_MachineInfo::mutable_osname() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.osName)
  return osname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo_MachineInfo::release_osname() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.MachineInfo.osName)
  
  return osname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo_MachineInfo::set_allocated_osname(std::string* osname) {
  if (osname != nullptr) {
    
  } else {
    
  }
  osname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osname);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.MachineInfo.osName)
}

// int64 jvmTotalMemoery = 9;
inline void NodeInfo_MachineInfo::clear_jvmtotalmemoery() {
  jvmtotalmemoery_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo::jvmtotalmemoery() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.jvmTotalMemoery)
  return jvmtotalmemoery_;
}
inline void NodeInfo_MachineInfo::set_jvmtotalmemoery(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jvmtotalmemoery_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.jvmTotalMemoery)
}

// int64 jvmFreeMemory = 10;
inline void NodeInfo_MachineInfo::clear_jvmfreememory() {
  jvmfreememory_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo_MachineInfo::jvmfreememory() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.jvmFreeMemory)
  return jvmfreememory_;
}
inline void NodeInfo_MachineInfo::set_jvmfreememory(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  jvmfreememory_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.jvmFreeMemory)
}

// double processCpuRate = 11;
inline void NodeInfo_MachineInfo::clear_processcpurate() {
  processcpurate_ = 0;
}
inline double NodeInfo_MachineInfo::processcpurate() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.processCpuRate)
  return processcpurate_;
}
inline void NodeInfo_MachineInfo::set_processcpurate(double value) {
  
  processcpurate_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.MachineInfo.processCpuRate)
}

// repeated .protocol.NodeInfo.MachineInfo.MemoryDescInfo memoryDescInfoList = 12;
inline int NodeInfo_MachineInfo::memorydescinfolist_size() const {
  return memorydescinfolist_.size();
}
inline void NodeInfo_MachineInfo::clear_memorydescinfolist() {
  memorydescinfolist_.Clear();
}
inline ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* NodeInfo_MachineInfo::mutable_memorydescinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.memoryDescInfoList)
  return memorydescinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >*
NodeInfo_MachineInfo::mutable_memorydescinfolist() {
  // @@protoc_insertion_point(field_mutable_list:protocol.NodeInfo.MachineInfo.memoryDescInfoList)
  return &memorydescinfolist_;
}
inline const ::protocol::NodeInfo_MachineInfo_MemoryDescInfo& NodeInfo_MachineInfo::memorydescinfolist(int index) const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.memoryDescInfoList)
  return memorydescinfolist_.Get(index);
}
inline ::protocol::NodeInfo_MachineInfo_MemoryDescInfo* NodeInfo_MachineInfo::add_memorydescinfolist() {
  // @@protoc_insertion_point(field_add:protocol.NodeInfo.MachineInfo.memoryDescInfoList)
  return memorydescinfolist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_MemoryDescInfo >&
NodeInfo_MachineInfo::memorydescinfolist() const {
  // @@protoc_insertion_point(field_list:protocol.NodeInfo.MachineInfo.memoryDescInfoList)
  return memorydescinfolist_;
}

// repeated .protocol.NodeInfo.MachineInfo.DeadLockThreadInfo deadLockThreadInfoList = 13;
inline int NodeInfo_MachineInfo::deadlockthreadinfolist_size() const {
  return deadlockthreadinfolist_.size();
}
inline void NodeInfo_MachineInfo::clear_deadlockthreadinfolist() {
  deadlockthreadinfolist_.Clear();
}
inline ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* NodeInfo_MachineInfo::mutable_deadlockthreadinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.MachineInfo.deadLockThreadInfoList)
  return deadlockthreadinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >*
NodeInfo_MachineInfo::mutable_deadlockthreadinfolist() {
  // @@protoc_insertion_point(field_mutable_list:protocol.NodeInfo.MachineInfo.deadLockThreadInfoList)
  return &deadlockthreadinfolist_;
}
inline const ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo& NodeInfo_MachineInfo::deadlockthreadinfolist(int index) const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.MachineInfo.deadLockThreadInfoList)
  return deadlockthreadinfolist_.Get(index);
}
inline ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo* NodeInfo_MachineInfo::add_deadlockthreadinfolist() {
  // @@protoc_insertion_point(field_add:protocol.NodeInfo.MachineInfo.deadLockThreadInfoList)
  return deadlockthreadinfolist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_MachineInfo_DeadLockThreadInfo >&
NodeInfo_MachineInfo::deadlockthreadinfolist() const {
  // @@protoc_insertion_point(field_list:protocol.NodeInfo.MachineInfo.deadLockThreadInfoList)
  return deadlockthreadinfolist_;
}

// -------------------------------------------------------------------

// NodeInfo

// int64 beginSyncNum = 1;
inline void NodeInfo::clear_beginsyncnum() {
  beginsyncnum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::beginsyncnum() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.beginSyncNum)
  return beginsyncnum_;
}
inline void NodeInfo::set_beginsyncnum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  beginsyncnum_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.beginSyncNum)
}

// string block = 2;
inline void NodeInfo::clear_block() {
  block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::block() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.block)
  return block_.GetNoArena();
}
inline void NodeInfo::set_block(const std::string& value) {
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.block)
}
inline void NodeInfo::set_block(std::string&& value) {
  
  block_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.block)
}
inline void NodeInfo::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.block)
}
inline void NodeInfo::set_block(const char* value, size_t size) {
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.block)
}
inline std::string* NodeInfo::mutable_block() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.block)
  return block_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_block() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.block)
  
  return block_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  block_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.block)
}

// string solidityBlock = 3;
inline void NodeInfo::clear_solidityblock() {
  solidityblock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::solidityblock() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.solidityBlock)
  return solidityblock_.GetNoArena();
}
inline void NodeInfo::set_solidityblock(const std::string& value) {
  
  solidityblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.solidityBlock)
}
inline void NodeInfo::set_solidityblock(std::string&& value) {
  
  solidityblock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protocol.NodeInfo.solidityBlock)
}
inline void NodeInfo::set_solidityblock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  solidityblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protocol.NodeInfo.solidityBlock)
}
inline void NodeInfo::set_solidityblock(const char* value, size_t size) {
  
  solidityblock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protocol.NodeInfo.solidityBlock)
}
inline std::string* NodeInfo::mutable_solidityblock() {
  
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.solidityBlock)
  return solidityblock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_solidityblock() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.solidityBlock)
  
  return solidityblock_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_solidityblock(std::string* solidityblock) {
  if (solidityblock != nullptr) {
    
  } else {
    
  }
  solidityblock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), solidityblock);
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.solidityBlock)
}

// int32 currentConnectCount = 4;
inline void NodeInfo::clear_currentconnectcount() {
  currentconnectcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo::currentconnectcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.currentConnectCount)
  return currentconnectcount_;
}
inline void NodeInfo::set_currentconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  currentconnectcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.currentConnectCount)
}

// int32 activeConnectCount = 5;
inline void NodeInfo::clear_activeconnectcount() {
  activeconnectcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo::activeconnectcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.activeConnectCount)
  return activeconnectcount_;
}
inline void NodeInfo::set_activeconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  activeconnectcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.activeConnectCount)
}

// int32 passiveConnectCount = 6;
inline void NodeInfo::clear_passiveconnectcount() {
  passiveconnectcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NodeInfo::passiveconnectcount() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.passiveConnectCount)
  return passiveconnectcount_;
}
inline void NodeInfo::set_passiveconnectcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passiveconnectcount_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.passiveConnectCount)
}

// int64 totalFlow = 7;
inline void NodeInfo::clear_totalflow() {
  totalflow_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::totalflow() const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.totalFlow)
  return totalflow_;
}
inline void NodeInfo::set_totalflow(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  totalflow_ = value;
  // @@protoc_insertion_point(field_set:protocol.NodeInfo.totalFlow)
}

// repeated .protocol.NodeInfo.PeerInfo peerInfoList = 8;
inline int NodeInfo::peerinfolist_size() const {
  return peerinfolist_.size();
}
inline void NodeInfo::clear_peerinfolist() {
  peerinfolist_.Clear();
}
inline ::protocol::NodeInfo_PeerInfo* NodeInfo::mutable_peerinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.peerInfoList)
  return peerinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_PeerInfo >*
NodeInfo::mutable_peerinfolist() {
  // @@protoc_insertion_point(field_mutable_list:protocol.NodeInfo.peerInfoList)
  return &peerinfolist_;
}
inline const ::protocol::NodeInfo_PeerInfo& NodeInfo::peerinfolist(int index) const {
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.peerInfoList)
  return peerinfolist_.Get(index);
}
inline ::protocol::NodeInfo_PeerInfo* NodeInfo::add_peerinfolist() {
  // @@protoc_insertion_point(field_add:protocol.NodeInfo.peerInfoList)
  return peerinfolist_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::NodeInfo_PeerInfo >&
NodeInfo::peerinfolist() const {
  // @@protoc_insertion_point(field_list:protocol.NodeInfo.peerInfoList)
  return peerinfolist_;
}

// .protocol.NodeInfo.ConfigNodeInfo configNodeInfo = 9;
inline bool NodeInfo::has_confignodeinfo() const {
  return this != internal_default_instance() && confignodeinfo_ != nullptr;
}
inline void NodeInfo::clear_confignodeinfo() {
  if (GetArenaNoVirtual() == nullptr && confignodeinfo_ != nullptr) {
    delete confignodeinfo_;
  }
  confignodeinfo_ = nullptr;
}
inline const ::protocol::NodeInfo_ConfigNodeInfo& NodeInfo::confignodeinfo() const {
  const ::protocol::NodeInfo_ConfigNodeInfo* p = confignodeinfo_;
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.configNodeInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::NodeInfo_ConfigNodeInfo*>(
      &::protocol::_NodeInfo_ConfigNodeInfo_default_instance_);
}
inline ::protocol::NodeInfo_ConfigNodeInfo* NodeInfo::release_confignodeinfo() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.configNodeInfo)
  
  ::protocol::NodeInfo_ConfigNodeInfo* temp = confignodeinfo_;
  confignodeinfo_ = nullptr;
  return temp;
}
inline ::protocol::NodeInfo_ConfigNodeInfo* NodeInfo::mutable_confignodeinfo() {
  
  if (confignodeinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::NodeInfo_ConfigNodeInfo>(GetArenaNoVirtual());
    confignodeinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.configNodeInfo)
  return confignodeinfo_;
}
inline void NodeInfo::set_allocated_confignodeinfo(::protocol::NodeInfo_ConfigNodeInfo* confignodeinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete confignodeinfo_;
  }
  if (confignodeinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      confignodeinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, confignodeinfo, submessage_arena);
    }
    
  } else {
    
  }
  confignodeinfo_ = confignodeinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.configNodeInfo)
}

// .protocol.NodeInfo.MachineInfo machineInfo = 10;
inline bool NodeInfo::has_machineinfo() const {
  return this != internal_default_instance() && machineinfo_ != nullptr;
}
inline void NodeInfo::clear_machineinfo() {
  if (GetArenaNoVirtual() == nullptr && machineinfo_ != nullptr) {
    delete machineinfo_;
  }
  machineinfo_ = nullptr;
}
inline const ::protocol::NodeInfo_MachineInfo& NodeInfo::machineinfo() const {
  const ::protocol::NodeInfo_MachineInfo* p = machineinfo_;
  // @@protoc_insertion_point(field_get:protocol.NodeInfo.machineInfo)
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::NodeInfo_MachineInfo*>(
      &::protocol::_NodeInfo_MachineInfo_default_instance_);
}
inline ::protocol::NodeInfo_MachineInfo* NodeInfo::release_machineinfo() {
  // @@protoc_insertion_point(field_release:protocol.NodeInfo.machineInfo)
  
  ::protocol::NodeInfo_MachineInfo* temp = machineinfo_;
  machineinfo_ = nullptr;
  return temp;
}
inline ::protocol::NodeInfo_MachineInfo* NodeInfo::mutable_machineinfo() {
  
  if (machineinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::NodeInfo_MachineInfo>(GetArenaNoVirtual());
    machineinfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protocol.NodeInfo.machineInfo)
  return machineinfo_;
}
inline void NodeInfo::set_allocated_machineinfo(::protocol::NodeInfo_MachineInfo* machineinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete machineinfo_;
  }
  if (machineinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      machineinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, machineinfo, submessage_arena);
    }
    
  } else {
    
  }
  machineinfo_ = machineinfo;
  // @@protoc_insertion_point(field_set_allocated:protocol.NodeInfo.machineInfo)
}

// map<string, string> cheatWitnessInfoMap = 11;
inline int NodeInfo::cheatwitnessinfomap_size() const {
  return cheatwitnessinfomap_.size();
}
inline void NodeInfo::clear_cheatwitnessinfomap() {
  cheatwitnessinfomap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NodeInfo::cheatwitnessinfomap() const {
  // @@protoc_insertion_point(field_map:protocol.NodeInfo.cheatWitnessInfoMap)
  return cheatwitnessinfomap_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NodeInfo::mutable_cheatwitnessinfomap() {
  // @@protoc_insertion_point(field_mutable_map:protocol.NodeInfo.cheatWitnessInfoMap)
  return cheatwitnessinfomap_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::Proposal_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Proposal_State>() {
  return ::protocol::Proposal_State_descriptor();
}
template <> struct is_proto_enum< ::protocol::Permission_PermissionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Permission_PermissionType>() {
  return ::protocol::Permission_PermissionType_descriptor();
}
template <> struct is_proto_enum< ::protocol::Transaction_Contract_ContractType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Transaction_Contract_ContractType>() {
  return ::protocol::Transaction_Contract_ContractType_descriptor();
}
template <> struct is_proto_enum< ::protocol::Transaction_Result_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Transaction_Result_code>() {
  return ::protocol::Transaction_Result_code_descriptor();
}
template <> struct is_proto_enum< ::protocol::Transaction_Result_contractResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Transaction_Result_contractResult>() {
  return ::protocol::Transaction_Result_contractResult_descriptor();
}
template <> struct is_proto_enum< ::protocol::TransactionInfo_code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::TransactionInfo_code>() {
  return ::protocol::TransactionInfo_code_descriptor();
}
template <> struct is_proto_enum< ::protocol::BlockInventory_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::BlockInventory_Type>() {
  return ::protocol::BlockInventory_Type_descriptor();
}
template <> struct is_proto_enum< ::protocol::Inventory_InventoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Inventory_InventoryType>() {
  return ::protocol::Inventory_InventoryType_descriptor();
}
template <> struct is_proto_enum< ::protocol::Items_ItemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Items_ItemType>() {
  return ::protocol::Items_ItemType_descriptor();
}
template <> struct is_proto_enum< ::protocol::AccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::AccountType>() {
  return ::protocol::AccountType_descriptor();
}
template <> struct is_proto_enum< ::protocol::ReasonCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::ReasonCode>() {
  return ::protocol::ReasonCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2fTron_2eproto
