// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jubiter_bridge.proto

#include "jubiter_bridge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_jubiter_5fbridge_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reader_jubiter_5fbridge_2eproto;
namespace AppletBridge {
class ReaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reader> _instance;
} _Reader_default_instance_;
class APDURequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APDURequest> _instance;
} _APDURequest_default_instance_;
class APDUResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<APDUResponse> _instance;
} _APDUResponse_default_instance_;
class ListReadersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListReadersResponse> _instance;
} _ListReadersResponse_default_instance_;
}  // namespace AppletBridge
static void InitDefaultsscc_info_APDURequest_jubiter_5fbridge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AppletBridge::_APDURequest_default_instance_;
    new (ptr) ::AppletBridge::APDURequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppletBridge::APDURequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_APDURequest_jubiter_5fbridge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_APDURequest_jubiter_5fbridge_2eproto}, {
      &scc_info_Reader_jubiter_5fbridge_2eproto.base,}};

static void InitDefaultsscc_info_APDUResponse_jubiter_5fbridge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AppletBridge::_APDUResponse_default_instance_;
    new (ptr) ::AppletBridge::APDUResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppletBridge::APDUResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_APDUResponse_jubiter_5fbridge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_APDUResponse_jubiter_5fbridge_2eproto}, {}};

static void InitDefaultsscc_info_ListReadersResponse_jubiter_5fbridge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AppletBridge::_ListReadersResponse_default_instance_;
    new (ptr) ::AppletBridge::ListReadersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppletBridge::ListReadersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListReadersResponse_jubiter_5fbridge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ListReadersResponse_jubiter_5fbridge_2eproto}, {
      &scc_info_Reader_jubiter_5fbridge_2eproto.base,}};

static void InitDefaultsscc_info_Reader_jubiter_5fbridge_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AppletBridge::_Reader_default_instance_;
    new (ptr) ::AppletBridge::Reader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AppletBridge::Reader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Reader_jubiter_5fbridge_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Reader_jubiter_5fbridge_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_jubiter_5fbridge_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_jubiter_5fbridge_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_jubiter_5fbridge_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_jubiter_5fbridge_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::Reader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::Reader, name_),
  PROTOBUF_FIELD_OFFSET(::AppletBridge::Reader, handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::APDURequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::APDURequest, reader_),
  PROTOBUF_FIELD_OFFSET(::AppletBridge::APDURequest, apdu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::APDUResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::APDUResponse, resp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::ListReadersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AppletBridge::ListReadersResponse, readers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AppletBridge::Reader)},
  { 7, -1, sizeof(::AppletBridge::APDURequest)},
  { 14, -1, sizeof(::AppletBridge::APDUResponse)},
  { 20, -1, sizeof(::AppletBridge::ListReadersResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AppletBridge::_Reader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AppletBridge::_APDURequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AppletBridge::_APDUResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AppletBridge::_ListReadersResponse_default_instance_),
};

const char descriptor_table_protodef_jubiter_5fbridge_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024jubiter_bridge.proto\022\014AppletBridge\032\033go"
  "ogle/protobuf/empty.proto\"&\n\006Reader\022\014\n\004n"
  "ame\030\001 \001(\t\022\016\n\006handle\030\002 \001(\r\"A\n\013APDURequest"
  "\022$\n\006reader\030\001 \001(\0132\024.AppletBridge.Reader\022\014"
  "\n\004apdu\030\003 \001(\014\"\034\n\014APDUResponse\022\014\n\004resp\030\001 \001"
  "(\014\"<\n\023ListReadersResponse\022%\n\007readers\030\001 \003"
  "(\0132\024.AppletBridge.Reader2\234\002\n\022AppletBridg"
  "eServer\022J\n\013ListReaders\022\026.google.protobuf"
  ".Empty\032!.AppletBridge.ListReadersRespons"
  "e\"\000\0227\n\007Connect\022\024.AppletBridge.Reader\032\024.A"
  "ppletBridge.Reader\"\000\022<\n\nDisconnect\022\024.App"
  "letBridge.Reader\032\026.google.protobuf.Empty"
  "\"\000\022C\n\010SendApdu\022\031.AppletBridge.APDUReques"
  "t\032\032.AppletBridge.APDUResponse\"\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_jubiter_5fbridge_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_jubiter_5fbridge_2eproto_sccs[4] = {
  &scc_info_APDURequest_jubiter_5fbridge_2eproto.base,
  &scc_info_APDUResponse_jubiter_5fbridge_2eproto.base,
  &scc_info_ListReadersResponse_jubiter_5fbridge_2eproto.base,
  &scc_info_Reader_jubiter_5fbridge_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_jubiter_5fbridge_2eproto_once;
static bool descriptor_table_jubiter_5fbridge_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_jubiter_5fbridge_2eproto = {
  &descriptor_table_jubiter_5fbridge_2eproto_initialized, descriptor_table_protodef_jubiter_5fbridge_2eproto, "jubiter_bridge.proto", 559,
  &descriptor_table_jubiter_5fbridge_2eproto_once, descriptor_table_jubiter_5fbridge_2eproto_sccs, descriptor_table_jubiter_5fbridge_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_jubiter_5fbridge_2eproto::offsets,
  file_level_metadata_jubiter_5fbridge_2eproto, 4, file_level_enum_descriptors_jubiter_5fbridge_2eproto, file_level_service_descriptors_jubiter_5fbridge_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_jubiter_5fbridge_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_jubiter_5fbridge_2eproto), true);
namespace AppletBridge {

// ===================================================================

void Reader::InitAsDefaultInstance() {
}
class Reader::_Internal {
 public:
};

Reader::Reader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppletBridge.Reader)
}
Reader::Reader(const Reader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  handle_ = from.handle_;
  // @@protoc_insertion_point(copy_constructor:AppletBridge.Reader)
}

void Reader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reader_jubiter_5fbridge_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
}

Reader::~Reader() {
  // @@protoc_insertion_point(destructor:AppletBridge.Reader)
  SharedDtor();
}

void Reader::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Reader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reader& Reader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reader_jubiter_5fbridge_2eproto.base);
  return *internal_default_instance();
}


void Reader::Clear() {
// @@protoc_insertion_point(message_clear_start:AppletBridge.Reader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Reader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "AppletBridge.Reader.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Reader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppletBridge.Reader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "AppletBridge.Reader.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 handle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppletBridge.Reader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppletBridge.Reader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Reader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppletBridge.Reader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppletBridge.Reader.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint32 handle = 2;
  if (this->handle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AppletBridge.Reader)
}

::PROTOBUF_NAMESPACE_ID::uint8* Reader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppletBridge.Reader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AppletBridge.Reader.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // uint32 handle = 2;
  if (this->handle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppletBridge.Reader)
  return target;
}

size_t Reader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppletBridge.Reader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint32 handle = 2;
  if (this->handle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->handle());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppletBridge.Reader)
  GOOGLE_DCHECK_NE(&from, this);
  const Reader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppletBridge.Reader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppletBridge.Reader)
    MergeFrom(*source);
  }
}

void Reader::MergeFrom(const Reader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppletBridge.Reader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.handle() != 0) {
    set_handle(from.handle());
  }
}

void Reader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppletBridge.Reader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reader::CopyFrom(const Reader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppletBridge.Reader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reader::IsInitialized() const {
  return true;
}

void Reader::InternalSwap(Reader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(handle_, other->handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APDURequest::InitAsDefaultInstance() {
  ::AppletBridge::_APDURequest_default_instance_._instance.get_mutable()->reader_ = const_cast< ::AppletBridge::Reader*>(
      ::AppletBridge::Reader::internal_default_instance());
}
class APDURequest::_Internal {
 public:
  static const ::AppletBridge::Reader& reader(const APDURequest* msg);
};

const ::AppletBridge::Reader&
APDURequest::_Internal::reader(const APDURequest* msg) {
  return *msg->reader_;
}
APDURequest::APDURequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppletBridge.APDURequest)
}
APDURequest::APDURequest(const APDURequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  apdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.apdu().empty()) {
    apdu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.apdu_);
  }
  if (from.has_reader()) {
    reader_ = new ::AppletBridge::Reader(*from.reader_);
  } else {
    reader_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:AppletBridge.APDURequest)
}

void APDURequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APDURequest_jubiter_5fbridge_2eproto.base);
  apdu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reader_ = nullptr;
}

APDURequest::~APDURequest() {
  // @@protoc_insertion_point(destructor:AppletBridge.APDURequest)
  SharedDtor();
}

void APDURequest::SharedDtor() {
  apdu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete reader_;
}

void APDURequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APDURequest& APDURequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APDURequest_jubiter_5fbridge_2eproto.base);
  return *internal_default_instance();
}


void APDURequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AppletBridge.APDURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apdu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && reader_ != nullptr) {
    delete reader_;
  }
  reader_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* APDURequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AppletBridge.Reader reader = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_reader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes apdu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_apdu(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool APDURequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppletBridge.APDURequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .AppletBridge.Reader reader = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reader()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes apdu = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_apdu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppletBridge.APDURequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppletBridge.APDURequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void APDURequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppletBridge.APDURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AppletBridge.Reader reader = 1;
  if (this->has_reader()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::reader(this), output);
  }

  // bytes apdu = 3;
  if (this->apdu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->apdu(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AppletBridge.APDURequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* APDURequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppletBridge.APDURequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AppletBridge.Reader reader = 1;
  if (this->has_reader()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::reader(this), target);
  }

  // bytes apdu = 3;
  if (this->apdu().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        3, this->apdu(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppletBridge.APDURequest)
  return target;
}

size_t APDURequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppletBridge.APDURequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes apdu = 3;
  if (this->apdu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->apdu());
  }

  // .AppletBridge.Reader reader = 1;
  if (this->has_reader()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reader_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APDURequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppletBridge.APDURequest)
  GOOGLE_DCHECK_NE(&from, this);
  const APDURequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APDURequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppletBridge.APDURequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppletBridge.APDURequest)
    MergeFrom(*source);
  }
}

void APDURequest::MergeFrom(const APDURequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppletBridge.APDURequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.apdu().size() > 0) {

    apdu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.apdu_);
  }
  if (from.has_reader()) {
    mutable_reader()->::AppletBridge::Reader::MergeFrom(from.reader());
  }
}

void APDURequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppletBridge.APDURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APDURequest::CopyFrom(const APDURequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppletBridge.APDURequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APDURequest::IsInitialized() const {
  return true;
}

void APDURequest::InternalSwap(APDURequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  apdu_.Swap(&other->apdu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reader_, other->reader_);
}

::PROTOBUF_NAMESPACE_ID::Metadata APDURequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void APDUResponse::InitAsDefaultInstance() {
}
class APDUResponse::_Internal {
 public:
};

APDUResponse::APDUResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppletBridge.APDUResponse)
}
APDUResponse::APDUResponse(const APDUResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  resp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.resp().empty()) {
    resp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resp_);
  }
  // @@protoc_insertion_point(copy_constructor:AppletBridge.APDUResponse)
}

void APDUResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_APDUResponse_jubiter_5fbridge_2eproto.base);
  resp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

APDUResponse::~APDUResponse() {
  // @@protoc_insertion_point(destructor:AppletBridge.APDUResponse)
  SharedDtor();
}

void APDUResponse::SharedDtor() {
  resp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void APDUResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const APDUResponse& APDUResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_APDUResponse_jubiter_5fbridge_2eproto.base);
  return *internal_default_instance();
}


void APDUResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AppletBridge.APDUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* APDUResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes resp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_resp(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool APDUResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppletBridge.APDUResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes resp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppletBridge.APDUResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppletBridge.APDUResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void APDUResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppletBridge.APDUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes resp = 1;
  if (this->resp().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->resp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AppletBridge.APDUResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* APDUResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppletBridge.APDUResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes resp = 1;
  if (this->resp().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->resp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppletBridge.APDUResponse)
  return target;
}

size_t APDUResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppletBridge.APDUResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes resp = 1;
  if (this->resp().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->resp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void APDUResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppletBridge.APDUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const APDUResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<APDUResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppletBridge.APDUResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppletBridge.APDUResponse)
    MergeFrom(*source);
  }
}

void APDUResponse::MergeFrom(const APDUResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppletBridge.APDUResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resp().size() > 0) {

    resp_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resp_);
  }
}

void APDUResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppletBridge.APDUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void APDUResponse::CopyFrom(const APDUResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppletBridge.APDUResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool APDUResponse::IsInitialized() const {
  return true;
}

void APDUResponse::InternalSwap(APDUResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resp_.Swap(&other->resp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata APDUResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListReadersResponse::InitAsDefaultInstance() {
}
class ListReadersResponse::_Internal {
 public:
};

ListReadersResponse::ListReadersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AppletBridge.ListReadersResponse)
}
ListReadersResponse::ListReadersResponse(const ListReadersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      readers_(from.readers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AppletBridge.ListReadersResponse)
}

void ListReadersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListReadersResponse_jubiter_5fbridge_2eproto.base);
}

ListReadersResponse::~ListReadersResponse() {
  // @@protoc_insertion_point(destructor:AppletBridge.ListReadersResponse)
  SharedDtor();
}

void ListReadersResponse::SharedDtor() {
}

void ListReadersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListReadersResponse& ListReadersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListReadersResponse_jubiter_5fbridge_2eproto.base);
  return *internal_default_instance();
}


void ListReadersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:AppletBridge.ListReadersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  readers_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ListReadersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AppletBridge.Reader readers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_readers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ListReadersResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:AppletBridge.ListReadersResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AppletBridge.Reader readers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_readers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AppletBridge.ListReadersResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AppletBridge.ListReadersResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ListReadersResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AppletBridge.ListReadersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AppletBridge.Reader readers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readers_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->readers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AppletBridge.ListReadersResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ListReadersResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:AppletBridge.ListReadersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AppletBridge.Reader readers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->readers_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->readers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AppletBridge.ListReadersResponse)
  return target;
}

size_t ListReadersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AppletBridge.ListReadersResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AppletBridge.Reader readers = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->readers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->readers(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListReadersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AppletBridge.ListReadersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListReadersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListReadersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AppletBridge.ListReadersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AppletBridge.ListReadersResponse)
    MergeFrom(*source);
  }
}

void ListReadersResponse::MergeFrom(const ListReadersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AppletBridge.ListReadersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  readers_.MergeFrom(from.readers_);
}

void ListReadersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AppletBridge.ListReadersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListReadersResponse::CopyFrom(const ListReadersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AppletBridge.ListReadersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListReadersResponse::IsInitialized() const {
  return true;
}

void ListReadersResponse::InternalSwap(ListReadersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&readers_)->InternalSwap(CastToBase(&other->readers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListReadersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AppletBridge
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AppletBridge::Reader* Arena::CreateMaybeMessage< ::AppletBridge::Reader >(Arena* arena) {
  return Arena::CreateInternal< ::AppletBridge::Reader >(arena);
}
template<> PROTOBUF_NOINLINE ::AppletBridge::APDURequest* Arena::CreateMaybeMessage< ::AppletBridge::APDURequest >(Arena* arena) {
  return Arena::CreateInternal< ::AppletBridge::APDURequest >(arena);
}
template<> PROTOBUF_NOINLINE ::AppletBridge::APDUResponse* Arena::CreateMaybeMessage< ::AppletBridge::APDUResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AppletBridge::APDUResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::AppletBridge::ListReadersResponse* Arena::CreateMaybeMessage< ::AppletBridge::ListReadersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::AppletBridge::ListReadersResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
