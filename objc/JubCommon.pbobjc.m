// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_Common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "JubCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonProtosJubCommonRoot

@implementation CommonProtosJubCommonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CommonProtosJubCommonRoot_FileDescriptor

static GPBFileDescriptor *CommonProtosJubCommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"JUB.Proto.Common"
                                                 objcPrefix:@"CommonProtos"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum CommonProtosENUM_GRAPHENE_ROLE

GPBEnumDescriptor *CommonProtosENUM_GRAPHENE_ROLE_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Owner\000Active\000";
    static const int32_t values[] = {
        CommonProtosENUM_GRAPHENE_ROLE_Owner,
        CommonProtosENUM_GRAPHENE_ROLE_Active,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosENUM_GRAPHENE_ROLE)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosENUM_GRAPHENE_ROLE_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosENUM_GRAPHENE_ROLE_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosENUM_GRAPHENE_ROLE_Owner:
    case CommonProtosENUM_GRAPHENE_ROLE_Active:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CommonProtosENUM_MNEMONIC_STRENGTH

GPBEnumDescriptor *CommonProtosENUM_MNEMONIC_STRENGTH_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Strength128\000Strength192\000Strength256\000";
    static const int32_t values[] = {
        CommonProtosENUM_MNEMONIC_STRENGTH_Strength128,
        CommonProtosENUM_MNEMONIC_STRENGTH_Strength192,
        CommonProtosENUM_MNEMONIC_STRENGTH_Strength256,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosENUM_MNEMONIC_STRENGTH)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosENUM_MNEMONIC_STRENGTH_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosENUM_MNEMONIC_STRENGTH_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosENUM_MNEMONIC_STRENGTH_Strength128:
    case CommonProtosENUM_MNEMONIC_STRENGTH_Strength192:
    case CommonProtosENUM_MNEMONIC_STRENGTH_Strength256:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CommonProtosCURVES

GPBEnumDescriptor *CommonProtosCURVES_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Secp256K1\000Ed25519\000Nist256P1\000";
    static const int32_t values[] = {
        CommonProtosCURVES_Secp256K1,
        CommonProtosCURVES_Ed25519,
        CommonProtosCURVES_Nist256P1,
    };
    static const char *extraTextFormatInfo = "\002\000d\005\000\002d\005\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosCURVES)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosCURVES_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosCURVES_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosCURVES_Secp256K1:
    case CommonProtosCURVES_Ed25519:
    case CommonProtosCURVES_Nist256P1:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CommonProtosENUM_PUB_FORMAT

GPBEnumDescriptor *CommonProtosENUM_PUB_FORMAT_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Hex\000Xpub\000";
    static const int32_t values[] = {
        CommonProtosENUM_PUB_FORMAT_Hex,
        CommonProtosENUM_PUB_FORMAT_Xpub,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosENUM_PUB_FORMAT)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosENUM_PUB_FORMAT_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosENUM_PUB_FORMAT_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosENUM_PUB_FORMAT_Hex:
    case CommonProtosENUM_PUB_FORMAT_Xpub:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CommonProtosDeviceType

@implementation CommonProtosDeviceType

@dynamic comMode;
@dynamic prdsClass;

typedef struct CommonProtosDeviceType__storage_ {
  uint32_t _has_storage_[1];
  CommonProtosDeviceType_ComMode comMode;
  CommonProtosDeviceType_PrdsClass prdsClass;
} CommonProtosDeviceType__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "comMode",
        .dataTypeSpecific.enumDescFunc = CommonProtosDeviceType_ComMode_EnumDescriptor,
        .number = CommonProtosDeviceType_FieldNumber_ComMode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosDeviceType__storage_, comMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "prdsClass",
        .dataTypeSpecific.enumDescFunc = CommonProtosDeviceType_PrdsClass_EnumDescriptor,
        .number = CommonProtosDeviceType_FieldNumber_PrdsClass,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommonProtosDeviceType__storage_, prdsClass),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosDeviceType class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosDeviceType__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommonProtosDeviceType_ComMode_RawValue(CommonProtosDeviceType *message) {
  GPBDescriptor *descriptor = [CommonProtosDeviceType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosDeviceType_FieldNumber_ComMode];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommonProtosDeviceType_ComMode_RawValue(CommonProtosDeviceType *message, int32_t value) {
  GPBDescriptor *descriptor = [CommonProtosDeviceType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosDeviceType_FieldNumber_ComMode];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t CommonProtosDeviceType_PrdsClass_RawValue(CommonProtosDeviceType *message) {
  GPBDescriptor *descriptor = [CommonProtosDeviceType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosDeviceType_FieldNumber_PrdsClass];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommonProtosDeviceType_PrdsClass_RawValue(CommonProtosDeviceType *message, int32_t value) {
  GPBDescriptor *descriptor = [CommonProtosDeviceType descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosDeviceType_FieldNumber_PrdsClass];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CommonProtosDeviceType_ComMode

GPBEnumDescriptor *CommonProtosDeviceType_ComMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ComModeUnspecified\000ComModeSwi\000ComModeHid"
        "\000ComModeBle\000ComModeNfc\000";
    static const int32_t values[] = {
        CommonProtosDeviceType_ComMode_ComModeUnspecified,
        CommonProtosDeviceType_ComMode_ComModeSwi,
        CommonProtosDeviceType_ComMode_ComModeHid,
        CommonProtosDeviceType_ComMode_ComModeBle,
        CommonProtosDeviceType_ComMode_ComModeNfc,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosDeviceType_ComMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosDeviceType_ComMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosDeviceType_ComMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosDeviceType_ComMode_ComModeUnspecified:
    case CommonProtosDeviceType_ComMode_ComModeSwi:
    case CommonProtosDeviceType_ComMode_ComModeHid:
    case CommonProtosDeviceType_ComMode_ComModeBle:
    case CommonProtosDeviceType_ComMode_ComModeNfc:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum CommonProtosDeviceType_PrdsClass

GPBEnumDescriptor *CommonProtosDeviceType_PrdsClass_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "PrdsClassUnspecified\000PrdsClassVd\000PrdsCla"
        "ssBlade\000PrdsClassBio\000PrdsClassLite\000";
    static const int32_t values[] = {
        CommonProtosDeviceType_PrdsClass_PrdsClassUnspecified,
        CommonProtosDeviceType_PrdsClass_PrdsClassVd,
        CommonProtosDeviceType_PrdsClass_PrdsClassBlade,
        CommonProtosDeviceType_PrdsClass_PrdsClassBio,
        CommonProtosDeviceType_PrdsClass_PrdsClassLite,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosDeviceType_PrdsClass)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosDeviceType_PrdsClass_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosDeviceType_PrdsClass_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosDeviceType_PrdsClass_PrdsClassUnspecified:
    case CommonProtosDeviceType_PrdsClass_PrdsClassVd:
    case CommonProtosDeviceType_PrdsClass_PrdsClassBlade:
    case CommonProtosDeviceType_PrdsClass_PrdsClassBio:
    case CommonProtosDeviceType_PrdsClass_PrdsClassLite:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CommonProtosRootKeyStatus

@implementation CommonProtosRootKeyStatus

@dynamic status;

typedef struct CommonProtosRootKeyStatus__storage_ {
  uint32_t _has_storage_[1];
  CommonProtosRootKeyStatus_Status status;
} CommonProtosRootKeyStatus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = CommonProtosRootKeyStatus_Status_EnumDescriptor,
        .number = CommonProtosRootKeyStatus_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosRootKeyStatus__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosRootKeyStatus class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosRootKeyStatus__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommonProtosRootKeyStatus_Status_RawValue(CommonProtosRootKeyStatus *message) {
  GPBDescriptor *descriptor = [CommonProtosRootKeyStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosRootKeyStatus_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommonProtosRootKeyStatus_Status_RawValue(CommonProtosRootKeyStatus *message, int32_t value) {
  GPBDescriptor *descriptor = [CommonProtosRootKeyStatus descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosRootKeyStatus_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum CommonProtosRootKeyStatus_Status

GPBEnumDescriptor *CommonProtosRootKeyStatus_Status_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "HasPin\000Resetted\000HasRootKey\000";
    static const int32_t values[] = {
        CommonProtosRootKeyStatus_Status_HasPin,
        CommonProtosRootKeyStatus_Status_Resetted,
        CommonProtosRootKeyStatus_Status_HasRootKey,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CommonProtosRootKeyStatus_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CommonProtosRootKeyStatus_Status_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CommonProtosRootKeyStatus_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case CommonProtosRootKeyStatus_Status_HasPin:
    case CommonProtosRootKeyStatus_Status_Resetted:
    case CommonProtosRootKeyStatus_Status_HasRootKey:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CommonProtosBip44Path

@implementation CommonProtosBip44Path

@dynamic change;
@dynamic addressIndex;

typedef struct CommonProtosBip44Path__storage_ {
  uint32_t _has_storage_[1];
  uint64_t addressIndex;
} CommonProtosBip44Path__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "change",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosBip44Path_FieldNumber_Change,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "addressIndex",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosBip44Path_FieldNumber_AddressIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommonProtosBip44Path__storage_, addressIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosBip44Path class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosBip44Path__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonProtosSlip48Path

@implementation CommonProtosSlip48Path

@dynamic network;
@dynamic role;
@dynamic addressIndex;
@dynamic keyIndex;

typedef struct CommonProtosSlip48Path__storage_ {
  uint32_t _has_storage_[1];
  CommonProtosENUM_GRAPHENE_ROLE role;
  uint64_t network;
  uint64_t addressIndex;
  uint64_t keyIndex;
} CommonProtosSlip48Path__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "network",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosSlip48Path_FieldNumber_Network,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosSlip48Path__storage_, network),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "role",
        .dataTypeSpecific.enumDescFunc = CommonProtosENUM_GRAPHENE_ROLE_EnumDescriptor,
        .number = CommonProtosSlip48Path_FieldNumber_Role,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommonProtosSlip48Path__storage_, role),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "addressIndex",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosSlip48Path_FieldNumber_AddressIndex,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommonProtosSlip48Path__storage_, addressIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "keyIndex",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosSlip48Path_FieldNumber_KeyIndex,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CommonProtosSlip48Path__storage_, keyIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosSlip48Path class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosSlip48Path__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CommonProtosSlip48Path_Role_RawValue(CommonProtosSlip48Path *message) {
  GPBDescriptor *descriptor = [CommonProtosSlip48Path descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosSlip48Path_FieldNumber_Role];
  return GPBGetMessageInt32Field(message, field);
}

void SetCommonProtosSlip48Path_Role_RawValue(CommonProtosSlip48Path *message, int32_t value) {
  GPBDescriptor *descriptor = [CommonProtosSlip48Path descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CommonProtosSlip48Path_FieldNumber_Role];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - CommonProtosContextCfg

@implementation CommonProtosContextCfg

@dynamic mainPath;

typedef struct CommonProtosContextCfg__storage_ {
  uint32_t _has_storage_[1];
  NSString *mainPath;
} CommonProtosContextCfg__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mainPath",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosContextCfg_FieldNumber_MainPath,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosContextCfg__storage_, mainPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosContextCfg class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosContextCfg__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonProtosDeviceInfo

@implementation CommonProtosDeviceInfo

@dynamic sn;
@dynamic label;
@dynamic bleVersion;
@dynamic firmwareVersion;
@dynamic pinRetry;
@dynamic pinMaxRetry;

typedef struct CommonProtosDeviceInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t pinRetry;
  uint32_t pinMaxRetry;
  NSString *sn;
  NSString *label;
  NSString *bleVersion;
  NSString *firmwareVersion;
} CommonProtosDeviceInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sn",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_Sn,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, sn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "label",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_Label,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, label),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "bleVersion",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_BleVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, bleVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firmwareVersion",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_FirmwareVersion,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, firmwareVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pinRetry",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_PinRetry,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, pinRetry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "pinMaxRetry",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosDeviceInfo_FieldNumber_PinMaxRetry,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CommonProtosDeviceInfo__storage_, pinMaxRetry),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosDeviceInfo class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosDeviceInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonProtosResultInt

@implementation CommonProtosResultInt

@dynamic stateCode;
@dynamic value;

typedef struct CommonProtosResultInt__storage_ {
  uint32_t _has_storage_[1];
  uint32_t value;
  uint64_t stateCode;
} CommonProtosResultInt__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stateCode",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosResultInt_FieldNumber_StateCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosResultInt__storage_, stateCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosResultInt_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommonProtosResultInt__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosResultInt class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosResultInt__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonProtosResultString

@implementation CommonProtosResultString

@dynamic stateCode;
@dynamic value;

typedef struct CommonProtosResultString__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
  uint64_t stateCode;
} CommonProtosResultString__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stateCode",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosResultString_FieldNumber_StateCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosResultString__storage_, stateCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "value",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosResultString_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommonProtosResultString__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosResultString class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosResultString__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommonProtosResultAny

@implementation CommonProtosResultAny

@dynamic stateCode;
@dynamic valueArray, valueArray_Count;

typedef struct CommonProtosResultAny__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *valueArray;
  uint64_t stateCode;
} CommonProtosResultAny__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "stateCode",
        .dataTypeSpecific.className = NULL,
        .number = CommonProtosResultAny_FieldNumber_StateCode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommonProtosResultAny__storage_, stateCode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "valueArray",
        .dataTypeSpecific.className = GPBStringifySymbol(GPBAny),
        .number = CommonProtosResultAny_FieldNumber_ValueArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CommonProtosResultAny__storage_, valueArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommonProtosResultAny class]
                                     rootClass:[CommonProtosJubCommonRoot class]
                                          file:CommonProtosJubCommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommonProtosResultAny__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
