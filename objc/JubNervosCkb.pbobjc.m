// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Jub_NervosCKB.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "JubNervosCkb.pbobjc.h"
#import "JubCommon.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - NervosCKBProtosJubNervosCkbRoot

@implementation NervosCKBProtosJubNervosCkbRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - NervosCKBProtosJubNervosCkbRoot_FileDescriptor

static GPBFileDescriptor *NervosCKBProtosJubNervosCkbRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"JUB.Proto.NervosCKB"
                                                 objcPrefix:@"NervosCKBProtos"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - NervosCKBProtosContextCfgCKB

@implementation NervosCKBProtosContextCfgCKB

@dynamic mainPath;
@dynamic mainNet;

typedef struct NervosCKBProtosContextCfgCKB__storage_ {
  uint32_t _has_storage_[1];
  NSString *mainPath;
} NervosCKBProtosContextCfgCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mainPath",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosContextCfgCKB_FieldNumber_MainPath,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosContextCfgCKB__storage_, mainPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mainNet",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosContextCfgCKB_FieldNumber_MainNet,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosContextCfgCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosContextCfgCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NervosCKBProtosCellDepCKB

@implementation NervosCKBProtosCellDepCKB

@dynamic type;
@dynamic txHash;
@dynamic index;

typedef struct NervosCKBProtosCellDepCKB__storage_ {
  uint32_t _has_storage_[1];
  uint32_t type;
  uint32_t index;
  NSString *txHash;
} NervosCKBProtosCellDepCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellDepCKB_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellDepCKB__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "txHash",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellDepCKB_FieldNumber_TxHash,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellDepCKB__storage_, txHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "index",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellDepCKB_FieldNumber_Index,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellDepCKB__storage_, index),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosCellDepCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosCellDepCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NervosCKBProtosCellScriptCKB

@implementation NervosCKBProtosCellScriptCKB

@dynamic codeHash;
@dynamic hashType;
@dynamic args;

typedef struct NervosCKBProtosCellScriptCKB__storage_ {
  uint32_t _has_storage_[1];
  uint32_t hashType;
  NSString *codeHash;
  NSString *args;
} NervosCKBProtosCellScriptCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codeHash",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellScriptCKB_FieldNumber_CodeHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellScriptCKB__storage_, codeHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hashType",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellScriptCKB_FieldNumber_HashType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellScriptCKB__storage_, hashType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "args",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosCellScriptCKB_FieldNumber_Args,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NervosCKBProtosCellScriptCKB__storage_, args),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosCellScriptCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosCellScriptCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NervosCKBProtosInputCKB

@implementation NervosCKBProtosInputCKB

@dynamic preHash;
@dynamic preIndex;
@dynamic since;
@dynamic capacity;
@dynamic hasLock, lock;
@dynamic hasPath, path;

typedef struct NervosCKBProtosInputCKB__storage_ {
  uint32_t _has_storage_[1];
  uint32_t preIndex;
  NSString *preHash;
  NervosCKBProtosCellScriptCKB *lock;
  CommonProtosBip44Path *path;
  uint64_t since;
  uint64_t capacity;
} NervosCKBProtosInputCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "preHash",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosInputCKB_FieldNumber_PreHash,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, preHash),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preIndex",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosInputCKB_FieldNumber_PreIndex,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, preIndex),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "since",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosInputCKB_FieldNumber_Since,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, since),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "capacity",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosInputCKB_FieldNumber_Capacity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, capacity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lock",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosCellScriptCKB),
        .number = NervosCKBProtosInputCKB_FieldNumber_Lock,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, lock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = GPBStringifySymbol(CommonProtosBip44Path),
        .number = NervosCKBProtosInputCKB_FieldNumber_Path,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(NervosCKBProtosInputCKB__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosInputCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosInputCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NervosCKBProtosOutputCKB

@implementation NervosCKBProtosOutputCKB

@dynamic capacity;
@dynamic hasLock, lock;
@dynamic hasType, type;
@dynamic data_p;
@dynamic hasPath, path;

typedef struct NervosCKBProtosOutputCKB__storage_ {
  uint32_t _has_storage_[1];
  NervosCKBProtosCellScriptCKB *lock;
  NervosCKBProtosCellScriptCKB *type;
  NSString *data_p;
  CommonProtosBip44Path *path;
  uint64_t capacity;
} NervosCKBProtosOutputCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "capacity",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosOutputCKB_FieldNumber_Capacity,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosOutputCKB__storage_, capacity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt64,
      },
      {
        .name = "lock",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosCellScriptCKB),
        .number = NervosCKBProtosOutputCKB_FieldNumber_Lock,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(NervosCKBProtosOutputCKB__storage_, lock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosCellScriptCKB),
        .number = NervosCKBProtosOutputCKB_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(NervosCKBProtosOutputCKB__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosOutputCKB_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(NervosCKBProtosOutputCKB__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "path",
        .dataTypeSpecific.className = GPBStringifySymbol(CommonProtosBip44Path),
        .number = NervosCKBProtosOutputCKB_FieldNumber_Path,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(NervosCKBProtosOutputCKB__storage_, path),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosOutputCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosOutputCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - NervosCKBProtosTransactionCKB

@implementation NervosCKBProtosTransactionCKB

@dynamic version;
@dynamic depsArray, depsArray_Count;
@dynamic inputsArray, inputsArray_Count;
@dynamic outputsArray, outputsArray_Count;

typedef struct NervosCKBProtosTransactionCKB__storage_ {
  uint32_t _has_storage_[1];
  uint32_t version;
  NSMutableArray *depsArray;
  NSMutableArray *inputsArray;
  NSMutableArray *outputsArray;
} NervosCKBProtosTransactionCKB__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "version",
        .dataTypeSpecific.className = NULL,
        .number = NervosCKBProtosTransactionCKB_FieldNumber_Version,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(NervosCKBProtosTransactionCKB__storage_, version),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "depsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosCellDepCKB),
        .number = NervosCKBProtosTransactionCKB_FieldNumber_DepsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NervosCKBProtosTransactionCKB__storage_, depsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inputsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosInputCKB),
        .number = NervosCKBProtosTransactionCKB_FieldNumber_InputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NervosCKBProtosTransactionCKB__storage_, inputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(NervosCKBProtosOutputCKB),
        .number = NervosCKBProtosTransactionCKB_FieldNumber_OutputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(NervosCKBProtosTransactionCKB__storage_, outputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[NervosCKBProtosTransactionCKB class]
                                     rootClass:[NervosCKBProtosJubNervosCkbRoot class]
                                          file:NervosCKBProtosJubNervosCkbRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(NervosCKBProtosTransactionCKB__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
